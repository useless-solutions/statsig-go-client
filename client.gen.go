// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	STATSIG_API_KEYScopes = "STATSIG_API_KEY.Scopes"
)

// Defines values for AlertSchemaDtoAlertType.
const (
	Threshold AlertSchemaDtoAlertType = "threshold"
)

// Defines values for AlertSchemaDtoCondition.
const (
	AlertSchemaDtoConditionEqual          AlertSchemaDtoCondition = "equal"
	AlertSchemaDtoConditionGreater        AlertSchemaDtoCondition = "greater"
	AlertSchemaDtoConditionGreaterOrEqual AlertSchemaDtoCondition = "greater_or_equal"
	AlertSchemaDtoConditionLess           AlertSchemaDtoCondition = "less"
	AlertSchemaDtoConditionLessOrEqual    AlertSchemaDtoCondition = "less_or_equal"
	AlertSchemaDtoConditionNotEqual       AlertSchemaDtoCondition = "not_equal"
)

// Defines values for AlertSchemaDtoPriority.
const (
	P0 AlertSchemaDtoPriority = "P0"
	P1 AlertSchemaDtoPriority = "P1"
	P2 AlertSchemaDtoPriority = "P2"
	P3 AlertSchemaDtoPriority = "P3"
	P4 AlertSchemaDtoPriority = "P4"
	P5 AlertSchemaDtoPriority = "P5"
)

// Defines values for AlertSchemaDtoRenotificationConditions.
const (
	NoData AlertSchemaDtoRenotificationConditions = "no-data"
	Raise  AlertSchemaDtoRenotificationConditions = "raise"
	Warn   AlertSchemaDtoRenotificationConditions = "warn"
)

// Defines values for AutotuneCreateDtoAttributionWindow.
const (
	AutotuneCreateDtoAttributionWindowN1     AutotuneCreateDtoAttributionWindow = "1"
	AutotuneCreateDtoAttributionWindowN1hr   AutotuneCreateDtoAttributionWindow = "1hr"
	AutotuneCreateDtoAttributionWindowN1hrs  AutotuneCreateDtoAttributionWindow = "1hrs"
	AutotuneCreateDtoAttributionWindowN2     AutotuneCreateDtoAttributionWindow = "2"
	AutotuneCreateDtoAttributionWindowN24    AutotuneCreateDtoAttributionWindow = "24"
	AutotuneCreateDtoAttributionWindowN24hr  AutotuneCreateDtoAttributionWindow = "24hr"
	AutotuneCreateDtoAttributionWindowN24hrs AutotuneCreateDtoAttributionWindow = "24hrs"
	AutotuneCreateDtoAttributionWindowN2hr   AutotuneCreateDtoAttributionWindow = "2hr"
	AutotuneCreateDtoAttributionWindowN2hrs  AutotuneCreateDtoAttributionWindow = "2hrs"
	AutotuneCreateDtoAttributionWindowN4     AutotuneCreateDtoAttributionWindow = "4"
	AutotuneCreateDtoAttributionWindowN4hr   AutotuneCreateDtoAttributionWindow = "4hr"
	AutotuneCreateDtoAttributionWindowN4hrs  AutotuneCreateDtoAttributionWindow = "4hrs"
)

// Defines values for AutotuneCreateDtoExplorationWindow.
const (
	AutotuneCreateDtoExplorationWindowN1     AutotuneCreateDtoExplorationWindow = "1"
	AutotuneCreateDtoExplorationWindowN1hr   AutotuneCreateDtoExplorationWindow = "1hr"
	AutotuneCreateDtoExplorationWindowN1hrs  AutotuneCreateDtoExplorationWindow = "1hrs"
	AutotuneCreateDtoExplorationWindowN24    AutotuneCreateDtoExplorationWindow = "24"
	AutotuneCreateDtoExplorationWindowN24hr  AutotuneCreateDtoExplorationWindow = "24hr"
	AutotuneCreateDtoExplorationWindowN24hrs AutotuneCreateDtoExplorationWindow = "24hrs"
	AutotuneCreateDtoExplorationWindowN48    AutotuneCreateDtoExplorationWindow = "48"
	AutotuneCreateDtoExplorationWindowN48hr  AutotuneCreateDtoExplorationWindow = "48hr"
	AutotuneCreateDtoExplorationWindowN48hrs AutotuneCreateDtoExplorationWindow = "48hrs"
)

// Defines values for AutotuneCreateDtoWinnerThreshold.
const (
	AutotuneCreateDtoWinnerThresholdN80 AutotuneCreateDtoWinnerThreshold = "80%"
	AutotuneCreateDtoWinnerThresholdN90 AutotuneCreateDtoWinnerThreshold = "90%"
	AutotuneCreateDtoWinnerThresholdN95 AutotuneCreateDtoWinnerThreshold = "95%"
	AutotuneCreateDtoWinnerThresholdN98 AutotuneCreateDtoWinnerThreshold = "98%"
	AutotuneCreateDtoWinnerThresholdN99 AutotuneCreateDtoWinnerThreshold = "99%"
)

// Defines values for AutotuneExperimentDtoAttributionWindow.
const (
	AutotuneExperimentDtoAttributionWindowN1     AutotuneExperimentDtoAttributionWindow = "1"
	AutotuneExperimentDtoAttributionWindowN1hr   AutotuneExperimentDtoAttributionWindow = "1hr"
	AutotuneExperimentDtoAttributionWindowN1hrs  AutotuneExperimentDtoAttributionWindow = "1hrs"
	AutotuneExperimentDtoAttributionWindowN2     AutotuneExperimentDtoAttributionWindow = "2"
	AutotuneExperimentDtoAttributionWindowN24    AutotuneExperimentDtoAttributionWindow = "24"
	AutotuneExperimentDtoAttributionWindowN24hr  AutotuneExperimentDtoAttributionWindow = "24hr"
	AutotuneExperimentDtoAttributionWindowN24hrs AutotuneExperimentDtoAttributionWindow = "24hrs"
	AutotuneExperimentDtoAttributionWindowN2hr   AutotuneExperimentDtoAttributionWindow = "2hr"
	AutotuneExperimentDtoAttributionWindowN2hrs  AutotuneExperimentDtoAttributionWindow = "2hrs"
	AutotuneExperimentDtoAttributionWindowN4     AutotuneExperimentDtoAttributionWindow = "4"
	AutotuneExperimentDtoAttributionWindowN4hr   AutotuneExperimentDtoAttributionWindow = "4hr"
	AutotuneExperimentDtoAttributionWindowN4hrs  AutotuneExperimentDtoAttributionWindow = "4hrs"
)

// Defines values for AutotuneExperimentDtoExplorationWindow.
const (
	AutotuneExperimentDtoExplorationWindowN1     AutotuneExperimentDtoExplorationWindow = "1"
	AutotuneExperimentDtoExplorationWindowN1hr   AutotuneExperimentDtoExplorationWindow = "1hr"
	AutotuneExperimentDtoExplorationWindowN1hrs  AutotuneExperimentDtoExplorationWindow = "1hrs"
	AutotuneExperimentDtoExplorationWindowN24    AutotuneExperimentDtoExplorationWindow = "24"
	AutotuneExperimentDtoExplorationWindowN24hr  AutotuneExperimentDtoExplorationWindow = "24hr"
	AutotuneExperimentDtoExplorationWindowN24hrs AutotuneExperimentDtoExplorationWindow = "24hrs"
	AutotuneExperimentDtoExplorationWindowN48    AutotuneExperimentDtoExplorationWindow = "48"
	AutotuneExperimentDtoExplorationWindowN48hr  AutotuneExperimentDtoExplorationWindow = "48hr"
	AutotuneExperimentDtoExplorationWindowN48hrs AutotuneExperimentDtoExplorationWindow = "48hrs"
)

// Defines values for AutotuneExperimentDtoWinnerThreshold.
const (
	AutotuneExperimentDtoWinnerThresholdN80 AutotuneExperimentDtoWinnerThreshold = "80%"
	AutotuneExperimentDtoWinnerThresholdN90 AutotuneExperimentDtoWinnerThreshold = "90%"
	AutotuneExperimentDtoWinnerThresholdN95 AutotuneExperimentDtoWinnerThreshold = "95%"
	AutotuneExperimentDtoWinnerThresholdN98 AutotuneExperimentDtoWinnerThreshold = "98%"
	AutotuneExperimentDtoWinnerThresholdN99 AutotuneExperimentDtoWinnerThreshold = "99%"
)

// Defines values for AutotuneFullUpdateDtoAttributionWindow.
const (
	AutotuneFullUpdateDtoAttributionWindowN1     AutotuneFullUpdateDtoAttributionWindow = "1"
	AutotuneFullUpdateDtoAttributionWindowN1hr   AutotuneFullUpdateDtoAttributionWindow = "1hr"
	AutotuneFullUpdateDtoAttributionWindowN1hrs  AutotuneFullUpdateDtoAttributionWindow = "1hrs"
	AutotuneFullUpdateDtoAttributionWindowN2     AutotuneFullUpdateDtoAttributionWindow = "2"
	AutotuneFullUpdateDtoAttributionWindowN24    AutotuneFullUpdateDtoAttributionWindow = "24"
	AutotuneFullUpdateDtoAttributionWindowN24hr  AutotuneFullUpdateDtoAttributionWindow = "24hr"
	AutotuneFullUpdateDtoAttributionWindowN24hrs AutotuneFullUpdateDtoAttributionWindow = "24hrs"
	AutotuneFullUpdateDtoAttributionWindowN2hr   AutotuneFullUpdateDtoAttributionWindow = "2hr"
	AutotuneFullUpdateDtoAttributionWindowN2hrs  AutotuneFullUpdateDtoAttributionWindow = "2hrs"
	AutotuneFullUpdateDtoAttributionWindowN4     AutotuneFullUpdateDtoAttributionWindow = "4"
	AutotuneFullUpdateDtoAttributionWindowN4hr   AutotuneFullUpdateDtoAttributionWindow = "4hr"
	AutotuneFullUpdateDtoAttributionWindowN4hrs  AutotuneFullUpdateDtoAttributionWindow = "4hrs"
)

// Defines values for AutotuneFullUpdateDtoExplorationWindow.
const (
	AutotuneFullUpdateDtoExplorationWindowN1     AutotuneFullUpdateDtoExplorationWindow = "1"
	AutotuneFullUpdateDtoExplorationWindowN1hr   AutotuneFullUpdateDtoExplorationWindow = "1hr"
	AutotuneFullUpdateDtoExplorationWindowN1hrs  AutotuneFullUpdateDtoExplorationWindow = "1hrs"
	AutotuneFullUpdateDtoExplorationWindowN24    AutotuneFullUpdateDtoExplorationWindow = "24"
	AutotuneFullUpdateDtoExplorationWindowN24hr  AutotuneFullUpdateDtoExplorationWindow = "24hr"
	AutotuneFullUpdateDtoExplorationWindowN24hrs AutotuneFullUpdateDtoExplorationWindow = "24hrs"
	AutotuneFullUpdateDtoExplorationWindowN48    AutotuneFullUpdateDtoExplorationWindow = "48"
	AutotuneFullUpdateDtoExplorationWindowN48hr  AutotuneFullUpdateDtoExplorationWindow = "48hr"
	AutotuneFullUpdateDtoExplorationWindowN48hrs AutotuneFullUpdateDtoExplorationWindow = "48hrs"
)

// Defines values for AutotuneFullUpdateDtoWinnerThreshold.
const (
	AutotuneFullUpdateDtoWinnerThresholdN80 AutotuneFullUpdateDtoWinnerThreshold = "80%"
	AutotuneFullUpdateDtoWinnerThresholdN90 AutotuneFullUpdateDtoWinnerThreshold = "90%"
	AutotuneFullUpdateDtoWinnerThresholdN95 AutotuneFullUpdateDtoWinnerThreshold = "95%"
	AutotuneFullUpdateDtoWinnerThresholdN98 AutotuneFullUpdateDtoWinnerThreshold = "98%"
	AutotuneFullUpdateDtoWinnerThresholdN99 AutotuneFullUpdateDtoWinnerThreshold = "99%"
)

// Defines values for AutotunePartialUpdateDtoAttributionWindow.
const (
	AutotunePartialUpdateDtoAttributionWindowN1     AutotunePartialUpdateDtoAttributionWindow = "1"
	AutotunePartialUpdateDtoAttributionWindowN1hr   AutotunePartialUpdateDtoAttributionWindow = "1hr"
	AutotunePartialUpdateDtoAttributionWindowN1hrs  AutotunePartialUpdateDtoAttributionWindow = "1hrs"
	AutotunePartialUpdateDtoAttributionWindowN2     AutotunePartialUpdateDtoAttributionWindow = "2"
	AutotunePartialUpdateDtoAttributionWindowN24    AutotunePartialUpdateDtoAttributionWindow = "24"
	AutotunePartialUpdateDtoAttributionWindowN24hr  AutotunePartialUpdateDtoAttributionWindow = "24hr"
	AutotunePartialUpdateDtoAttributionWindowN24hrs AutotunePartialUpdateDtoAttributionWindow = "24hrs"
	AutotunePartialUpdateDtoAttributionWindowN2hr   AutotunePartialUpdateDtoAttributionWindow = "2hr"
	AutotunePartialUpdateDtoAttributionWindowN2hrs  AutotunePartialUpdateDtoAttributionWindow = "2hrs"
	AutotunePartialUpdateDtoAttributionWindowN4     AutotunePartialUpdateDtoAttributionWindow = "4"
	AutotunePartialUpdateDtoAttributionWindowN4hr   AutotunePartialUpdateDtoAttributionWindow = "4hr"
	AutotunePartialUpdateDtoAttributionWindowN4hrs  AutotunePartialUpdateDtoAttributionWindow = "4hrs"
)

// Defines values for AutotunePartialUpdateDtoExplorationWindow.
const (
	AutotunePartialUpdateDtoExplorationWindowN1     AutotunePartialUpdateDtoExplorationWindow = "1"
	AutotunePartialUpdateDtoExplorationWindowN1hr   AutotunePartialUpdateDtoExplorationWindow = "1hr"
	AutotunePartialUpdateDtoExplorationWindowN1hrs  AutotunePartialUpdateDtoExplorationWindow = "1hrs"
	AutotunePartialUpdateDtoExplorationWindowN24    AutotunePartialUpdateDtoExplorationWindow = "24"
	AutotunePartialUpdateDtoExplorationWindowN24hr  AutotunePartialUpdateDtoExplorationWindow = "24hr"
	AutotunePartialUpdateDtoExplorationWindowN24hrs AutotunePartialUpdateDtoExplorationWindow = "24hrs"
	AutotunePartialUpdateDtoExplorationWindowN48    AutotunePartialUpdateDtoExplorationWindow = "48"
	AutotunePartialUpdateDtoExplorationWindowN48hr  AutotunePartialUpdateDtoExplorationWindow = "48hr"
	AutotunePartialUpdateDtoExplorationWindowN48hrs AutotunePartialUpdateDtoExplorationWindow = "48hrs"
)

// Defines values for AutotunePartialUpdateDtoWinnerThreshold.
const (
	AutotunePartialUpdateDtoWinnerThresholdN80 AutotunePartialUpdateDtoWinnerThreshold = "80%"
	AutotunePartialUpdateDtoWinnerThresholdN90 AutotunePartialUpdateDtoWinnerThreshold = "90%"
	AutotunePartialUpdateDtoWinnerThresholdN95 AutotunePartialUpdateDtoWinnerThreshold = "95%"
	AutotunePartialUpdateDtoWinnerThresholdN98 AutotunePartialUpdateDtoWinnerThreshold = "98%"
	AutotunePartialUpdateDtoWinnerThresholdN99 AutotunePartialUpdateDtoWinnerThreshold = "99%"
)

// Defines values for DynamicConfigCreateDtoRulesConditionsType.
const (
	DynamicConfigCreateDtoRulesConditionsTypeAppVersion      DynamicConfigCreateDtoRulesConditionsType = "app_version"
	DynamicConfigCreateDtoRulesConditionsTypeBrowserName     DynamicConfigCreateDtoRulesConditionsType = "browser_name"
	DynamicConfigCreateDtoRulesConditionsTypeBrowserVersion  DynamicConfigCreateDtoRulesConditionsType = "browser_version"
	DynamicConfigCreateDtoRulesConditionsTypeCountry         DynamicConfigCreateDtoRulesConditionsType = "country"
	DynamicConfigCreateDtoRulesConditionsTypeCustomField     DynamicConfigCreateDtoRulesConditionsType = "custom_field"
	DynamicConfigCreateDtoRulesConditionsTypeDeviceModel     DynamicConfigCreateDtoRulesConditionsType = "device_model"
	DynamicConfigCreateDtoRulesConditionsTypeEmail           DynamicConfigCreateDtoRulesConditionsType = "email"
	DynamicConfigCreateDtoRulesConditionsTypeEnvironmentTier DynamicConfigCreateDtoRulesConditionsType = "environment_tier"
	DynamicConfigCreateDtoRulesConditionsTypeFailsGate       DynamicConfigCreateDtoRulesConditionsType = "fails_gate"
	DynamicConfigCreateDtoRulesConditionsTypeFailsSegment    DynamicConfigCreateDtoRulesConditionsType = "fails_segment"
	DynamicConfigCreateDtoRulesConditionsTypeIpAddress       DynamicConfigCreateDtoRulesConditionsType = "ip_address"
	DynamicConfigCreateDtoRulesConditionsTypeJavascript      DynamicConfigCreateDtoRulesConditionsType = "javascript"
	DynamicConfigCreateDtoRulesConditionsTypeLocale          DynamicConfigCreateDtoRulesConditionsType = "locale"
	DynamicConfigCreateDtoRulesConditionsTypeOsName          DynamicConfigCreateDtoRulesConditionsType = "os_name"
	DynamicConfigCreateDtoRulesConditionsTypeOsVersion       DynamicConfigCreateDtoRulesConditionsType = "os_version"
	DynamicConfigCreateDtoRulesConditionsTypePassesGate      DynamicConfigCreateDtoRulesConditionsType = "passes_gate"
	DynamicConfigCreateDtoRulesConditionsTypePassesSegment   DynamicConfigCreateDtoRulesConditionsType = "passes_segment"
	DynamicConfigCreateDtoRulesConditionsTypePublic          DynamicConfigCreateDtoRulesConditionsType = "public"
	DynamicConfigCreateDtoRulesConditionsTypeTargetApp       DynamicConfigCreateDtoRulesConditionsType = "target_app"
	DynamicConfigCreateDtoRulesConditionsTypeTime            DynamicConfigCreateDtoRulesConditionsType = "time"
	DynamicConfigCreateDtoRulesConditionsTypeUnitId          DynamicConfigCreateDtoRulesConditionsType = "unit_id"
	DynamicConfigCreateDtoRulesConditionsTypeUrl             DynamicConfigCreateDtoRulesConditionsType = "url"
	DynamicConfigCreateDtoRulesConditionsTypeUserId          DynamicConfigCreateDtoRulesConditionsType = "user_id"
)

// Defines values for DynamicConfigDtoRulesConditionsType.
const (
	DynamicConfigDtoRulesConditionsTypeAppVersion      DynamicConfigDtoRulesConditionsType = "app_version"
	DynamicConfigDtoRulesConditionsTypeBrowserName     DynamicConfigDtoRulesConditionsType = "browser_name"
	DynamicConfigDtoRulesConditionsTypeBrowserVersion  DynamicConfigDtoRulesConditionsType = "browser_version"
	DynamicConfigDtoRulesConditionsTypeCountry         DynamicConfigDtoRulesConditionsType = "country"
	DynamicConfigDtoRulesConditionsTypeCustomField     DynamicConfigDtoRulesConditionsType = "custom_field"
	DynamicConfigDtoRulesConditionsTypeDeviceModel     DynamicConfigDtoRulesConditionsType = "device_model"
	DynamicConfigDtoRulesConditionsTypeEmail           DynamicConfigDtoRulesConditionsType = "email"
	DynamicConfigDtoRulesConditionsTypeEnvironmentTier DynamicConfigDtoRulesConditionsType = "environment_tier"
	DynamicConfigDtoRulesConditionsTypeFailsGate       DynamicConfigDtoRulesConditionsType = "fails_gate"
	DynamicConfigDtoRulesConditionsTypeFailsSegment    DynamicConfigDtoRulesConditionsType = "fails_segment"
	DynamicConfigDtoRulesConditionsTypeIpAddress       DynamicConfigDtoRulesConditionsType = "ip_address"
	DynamicConfigDtoRulesConditionsTypeJavascript      DynamicConfigDtoRulesConditionsType = "javascript"
	DynamicConfigDtoRulesConditionsTypeLocale          DynamicConfigDtoRulesConditionsType = "locale"
	DynamicConfigDtoRulesConditionsTypeOsName          DynamicConfigDtoRulesConditionsType = "os_name"
	DynamicConfigDtoRulesConditionsTypeOsVersion       DynamicConfigDtoRulesConditionsType = "os_version"
	DynamicConfigDtoRulesConditionsTypePassesGate      DynamicConfigDtoRulesConditionsType = "passes_gate"
	DynamicConfigDtoRulesConditionsTypePassesSegment   DynamicConfigDtoRulesConditionsType = "passes_segment"
	DynamicConfigDtoRulesConditionsTypePublic          DynamicConfigDtoRulesConditionsType = "public"
	DynamicConfigDtoRulesConditionsTypeTargetApp       DynamicConfigDtoRulesConditionsType = "target_app"
	DynamicConfigDtoRulesConditionsTypeTime            DynamicConfigDtoRulesConditionsType = "time"
	DynamicConfigDtoRulesConditionsTypeUnitId          DynamicConfigDtoRulesConditionsType = "unit_id"
	DynamicConfigDtoRulesConditionsTypeUrl             DynamicConfigDtoRulesConditionsType = "url"
	DynamicConfigDtoRulesConditionsTypeUserId          DynamicConfigDtoRulesConditionsType = "user_id"
)

// Defines values for DynamicConfigFullUpdateDtoRulesConditionsType.
const (
	DynamicConfigFullUpdateDtoRulesConditionsTypeAppVersion      DynamicConfigFullUpdateDtoRulesConditionsType = "app_version"
	DynamicConfigFullUpdateDtoRulesConditionsTypeBrowserName     DynamicConfigFullUpdateDtoRulesConditionsType = "browser_name"
	DynamicConfigFullUpdateDtoRulesConditionsTypeBrowserVersion  DynamicConfigFullUpdateDtoRulesConditionsType = "browser_version"
	DynamicConfigFullUpdateDtoRulesConditionsTypeCountry         DynamicConfigFullUpdateDtoRulesConditionsType = "country"
	DynamicConfigFullUpdateDtoRulesConditionsTypeCustomField     DynamicConfigFullUpdateDtoRulesConditionsType = "custom_field"
	DynamicConfigFullUpdateDtoRulesConditionsTypeDeviceModel     DynamicConfigFullUpdateDtoRulesConditionsType = "device_model"
	DynamicConfigFullUpdateDtoRulesConditionsTypeEmail           DynamicConfigFullUpdateDtoRulesConditionsType = "email"
	DynamicConfigFullUpdateDtoRulesConditionsTypeEnvironmentTier DynamicConfigFullUpdateDtoRulesConditionsType = "environment_tier"
	DynamicConfigFullUpdateDtoRulesConditionsTypeFailsGate       DynamicConfigFullUpdateDtoRulesConditionsType = "fails_gate"
	DynamicConfigFullUpdateDtoRulesConditionsTypeFailsSegment    DynamicConfigFullUpdateDtoRulesConditionsType = "fails_segment"
	DynamicConfigFullUpdateDtoRulesConditionsTypeIpAddress       DynamicConfigFullUpdateDtoRulesConditionsType = "ip_address"
	DynamicConfigFullUpdateDtoRulesConditionsTypeJavascript      DynamicConfigFullUpdateDtoRulesConditionsType = "javascript"
	DynamicConfigFullUpdateDtoRulesConditionsTypeLocale          DynamicConfigFullUpdateDtoRulesConditionsType = "locale"
	DynamicConfigFullUpdateDtoRulesConditionsTypeOsName          DynamicConfigFullUpdateDtoRulesConditionsType = "os_name"
	DynamicConfigFullUpdateDtoRulesConditionsTypeOsVersion       DynamicConfigFullUpdateDtoRulesConditionsType = "os_version"
	DynamicConfigFullUpdateDtoRulesConditionsTypePassesGate      DynamicConfigFullUpdateDtoRulesConditionsType = "passes_gate"
	DynamicConfigFullUpdateDtoRulesConditionsTypePassesSegment   DynamicConfigFullUpdateDtoRulesConditionsType = "passes_segment"
	DynamicConfigFullUpdateDtoRulesConditionsTypePublic          DynamicConfigFullUpdateDtoRulesConditionsType = "public"
	DynamicConfigFullUpdateDtoRulesConditionsTypeTargetApp       DynamicConfigFullUpdateDtoRulesConditionsType = "target_app"
	DynamicConfigFullUpdateDtoRulesConditionsTypeTime            DynamicConfigFullUpdateDtoRulesConditionsType = "time"
	DynamicConfigFullUpdateDtoRulesConditionsTypeUnitId          DynamicConfigFullUpdateDtoRulesConditionsType = "unit_id"
	DynamicConfigFullUpdateDtoRulesConditionsTypeUrl             DynamicConfigFullUpdateDtoRulesConditionsType = "url"
	DynamicConfigFullUpdateDtoRulesConditionsTypeUserId          DynamicConfigFullUpdateDtoRulesConditionsType = "user_id"
)

// Defines values for DynamicConfigPartialUpdateDtoRulesConditionsType.
const (
	DynamicConfigPartialUpdateDtoRulesConditionsTypeAppVersion      DynamicConfigPartialUpdateDtoRulesConditionsType = "app_version"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeBrowserName     DynamicConfigPartialUpdateDtoRulesConditionsType = "browser_name"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeBrowserVersion  DynamicConfigPartialUpdateDtoRulesConditionsType = "browser_version"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeCountry         DynamicConfigPartialUpdateDtoRulesConditionsType = "country"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeCustomField     DynamicConfigPartialUpdateDtoRulesConditionsType = "custom_field"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeDeviceModel     DynamicConfigPartialUpdateDtoRulesConditionsType = "device_model"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeEmail           DynamicConfigPartialUpdateDtoRulesConditionsType = "email"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeEnvironmentTier DynamicConfigPartialUpdateDtoRulesConditionsType = "environment_tier"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeFailsGate       DynamicConfigPartialUpdateDtoRulesConditionsType = "fails_gate"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeFailsSegment    DynamicConfigPartialUpdateDtoRulesConditionsType = "fails_segment"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeIpAddress       DynamicConfigPartialUpdateDtoRulesConditionsType = "ip_address"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeJavascript      DynamicConfigPartialUpdateDtoRulesConditionsType = "javascript"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeLocale          DynamicConfigPartialUpdateDtoRulesConditionsType = "locale"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeOsName          DynamicConfigPartialUpdateDtoRulesConditionsType = "os_name"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeOsVersion       DynamicConfigPartialUpdateDtoRulesConditionsType = "os_version"
	DynamicConfigPartialUpdateDtoRulesConditionsTypePassesGate      DynamicConfigPartialUpdateDtoRulesConditionsType = "passes_gate"
	DynamicConfigPartialUpdateDtoRulesConditionsTypePassesSegment   DynamicConfigPartialUpdateDtoRulesConditionsType = "passes_segment"
	DynamicConfigPartialUpdateDtoRulesConditionsTypePublic          DynamicConfigPartialUpdateDtoRulesConditionsType = "public"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeTargetApp       DynamicConfigPartialUpdateDtoRulesConditionsType = "target_app"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeTime            DynamicConfigPartialUpdateDtoRulesConditionsType = "time"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeUnitId          DynamicConfigPartialUpdateDtoRulesConditionsType = "unit_id"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeUrl             DynamicConfigPartialUpdateDtoRulesConditionsType = "url"
	DynamicConfigPartialUpdateDtoRulesConditionsTypeUserId          DynamicConfigPartialUpdateDtoRulesConditionsType = "user_id"
)

// Defines values for DynamicConfigRuleAddDtoConditionsType.
const (
	DynamicConfigRuleAddDtoConditionsTypeAppVersion      DynamicConfigRuleAddDtoConditionsType = "app_version"
	DynamicConfigRuleAddDtoConditionsTypeBrowserName     DynamicConfigRuleAddDtoConditionsType = "browser_name"
	DynamicConfigRuleAddDtoConditionsTypeBrowserVersion  DynamicConfigRuleAddDtoConditionsType = "browser_version"
	DynamicConfigRuleAddDtoConditionsTypeCountry         DynamicConfigRuleAddDtoConditionsType = "country"
	DynamicConfigRuleAddDtoConditionsTypeCustomField     DynamicConfigRuleAddDtoConditionsType = "custom_field"
	DynamicConfigRuleAddDtoConditionsTypeDeviceModel     DynamicConfigRuleAddDtoConditionsType = "device_model"
	DynamicConfigRuleAddDtoConditionsTypeEmail           DynamicConfigRuleAddDtoConditionsType = "email"
	DynamicConfigRuleAddDtoConditionsTypeEnvironmentTier DynamicConfigRuleAddDtoConditionsType = "environment_tier"
	DynamicConfigRuleAddDtoConditionsTypeFailsGate       DynamicConfigRuleAddDtoConditionsType = "fails_gate"
	DynamicConfigRuleAddDtoConditionsTypeFailsSegment    DynamicConfigRuleAddDtoConditionsType = "fails_segment"
	DynamicConfigRuleAddDtoConditionsTypeIpAddress       DynamicConfigRuleAddDtoConditionsType = "ip_address"
	DynamicConfigRuleAddDtoConditionsTypeJavascript      DynamicConfigRuleAddDtoConditionsType = "javascript"
	DynamicConfigRuleAddDtoConditionsTypeLocale          DynamicConfigRuleAddDtoConditionsType = "locale"
	DynamicConfigRuleAddDtoConditionsTypeOsName          DynamicConfigRuleAddDtoConditionsType = "os_name"
	DynamicConfigRuleAddDtoConditionsTypeOsVersion       DynamicConfigRuleAddDtoConditionsType = "os_version"
	DynamicConfigRuleAddDtoConditionsTypePassesGate      DynamicConfigRuleAddDtoConditionsType = "passes_gate"
	DynamicConfigRuleAddDtoConditionsTypePassesSegment   DynamicConfigRuleAddDtoConditionsType = "passes_segment"
	DynamicConfigRuleAddDtoConditionsTypePublic          DynamicConfigRuleAddDtoConditionsType = "public"
	DynamicConfigRuleAddDtoConditionsTypeTargetApp       DynamicConfigRuleAddDtoConditionsType = "target_app"
	DynamicConfigRuleAddDtoConditionsTypeTime            DynamicConfigRuleAddDtoConditionsType = "time"
	DynamicConfigRuleAddDtoConditionsTypeUnitId          DynamicConfigRuleAddDtoConditionsType = "unit_id"
	DynamicConfigRuleAddDtoConditionsTypeUrl             DynamicConfigRuleAddDtoConditionsType = "url"
	DynamicConfigRuleAddDtoConditionsTypeUserId          DynamicConfigRuleAddDtoConditionsType = "user_id"
)

// Defines values for DynamicConfigRuleDtoConditionsType.
const (
	DynamicConfigRuleDtoConditionsTypeAppVersion      DynamicConfigRuleDtoConditionsType = "app_version"
	DynamicConfigRuleDtoConditionsTypeBrowserName     DynamicConfigRuleDtoConditionsType = "browser_name"
	DynamicConfigRuleDtoConditionsTypeBrowserVersion  DynamicConfigRuleDtoConditionsType = "browser_version"
	DynamicConfigRuleDtoConditionsTypeCountry         DynamicConfigRuleDtoConditionsType = "country"
	DynamicConfigRuleDtoConditionsTypeCustomField     DynamicConfigRuleDtoConditionsType = "custom_field"
	DynamicConfigRuleDtoConditionsTypeDeviceModel     DynamicConfigRuleDtoConditionsType = "device_model"
	DynamicConfigRuleDtoConditionsTypeEmail           DynamicConfigRuleDtoConditionsType = "email"
	DynamicConfigRuleDtoConditionsTypeEnvironmentTier DynamicConfigRuleDtoConditionsType = "environment_tier"
	DynamicConfigRuleDtoConditionsTypeFailsGate       DynamicConfigRuleDtoConditionsType = "fails_gate"
	DynamicConfigRuleDtoConditionsTypeFailsSegment    DynamicConfigRuleDtoConditionsType = "fails_segment"
	DynamicConfigRuleDtoConditionsTypeIpAddress       DynamicConfigRuleDtoConditionsType = "ip_address"
	DynamicConfigRuleDtoConditionsTypeJavascript      DynamicConfigRuleDtoConditionsType = "javascript"
	DynamicConfigRuleDtoConditionsTypeLocale          DynamicConfigRuleDtoConditionsType = "locale"
	DynamicConfigRuleDtoConditionsTypeOsName          DynamicConfigRuleDtoConditionsType = "os_name"
	DynamicConfigRuleDtoConditionsTypeOsVersion       DynamicConfigRuleDtoConditionsType = "os_version"
	DynamicConfigRuleDtoConditionsTypePassesGate      DynamicConfigRuleDtoConditionsType = "passes_gate"
	DynamicConfigRuleDtoConditionsTypePassesSegment   DynamicConfigRuleDtoConditionsType = "passes_segment"
	DynamicConfigRuleDtoConditionsTypePublic          DynamicConfigRuleDtoConditionsType = "public"
	DynamicConfigRuleDtoConditionsTypeTargetApp       DynamicConfigRuleDtoConditionsType = "target_app"
	DynamicConfigRuleDtoConditionsTypeTime            DynamicConfigRuleDtoConditionsType = "time"
	DynamicConfigRuleDtoConditionsTypeUnitId          DynamicConfigRuleDtoConditionsType = "unit_id"
	DynamicConfigRuleDtoConditionsTypeUrl             DynamicConfigRuleDtoConditionsType = "url"
	DynamicConfigRuleDtoConditionsTypeUserId          DynamicConfigRuleDtoConditionsType = "user_id"
)

// Defines values for DynamicConfigRulesDtoRulesConditionsType.
const (
	DynamicConfigRulesDtoRulesConditionsTypeAppVersion      DynamicConfigRulesDtoRulesConditionsType = "app_version"
	DynamicConfigRulesDtoRulesConditionsTypeBrowserName     DynamicConfigRulesDtoRulesConditionsType = "browser_name"
	DynamicConfigRulesDtoRulesConditionsTypeBrowserVersion  DynamicConfigRulesDtoRulesConditionsType = "browser_version"
	DynamicConfigRulesDtoRulesConditionsTypeCountry         DynamicConfigRulesDtoRulesConditionsType = "country"
	DynamicConfigRulesDtoRulesConditionsTypeCustomField     DynamicConfigRulesDtoRulesConditionsType = "custom_field"
	DynamicConfigRulesDtoRulesConditionsTypeDeviceModel     DynamicConfigRulesDtoRulesConditionsType = "device_model"
	DynamicConfigRulesDtoRulesConditionsTypeEmail           DynamicConfigRulesDtoRulesConditionsType = "email"
	DynamicConfigRulesDtoRulesConditionsTypeEnvironmentTier DynamicConfigRulesDtoRulesConditionsType = "environment_tier"
	DynamicConfigRulesDtoRulesConditionsTypeFailsGate       DynamicConfigRulesDtoRulesConditionsType = "fails_gate"
	DynamicConfigRulesDtoRulesConditionsTypeFailsSegment    DynamicConfigRulesDtoRulesConditionsType = "fails_segment"
	DynamicConfigRulesDtoRulesConditionsTypeIpAddress       DynamicConfigRulesDtoRulesConditionsType = "ip_address"
	DynamicConfigRulesDtoRulesConditionsTypeJavascript      DynamicConfigRulesDtoRulesConditionsType = "javascript"
	DynamicConfigRulesDtoRulesConditionsTypeLocale          DynamicConfigRulesDtoRulesConditionsType = "locale"
	DynamicConfigRulesDtoRulesConditionsTypeOsName          DynamicConfigRulesDtoRulesConditionsType = "os_name"
	DynamicConfigRulesDtoRulesConditionsTypeOsVersion       DynamicConfigRulesDtoRulesConditionsType = "os_version"
	DynamicConfigRulesDtoRulesConditionsTypePassesGate      DynamicConfigRulesDtoRulesConditionsType = "passes_gate"
	DynamicConfigRulesDtoRulesConditionsTypePassesSegment   DynamicConfigRulesDtoRulesConditionsType = "passes_segment"
	DynamicConfigRulesDtoRulesConditionsTypePublic          DynamicConfigRulesDtoRulesConditionsType = "public"
	DynamicConfigRulesDtoRulesConditionsTypeTargetApp       DynamicConfigRulesDtoRulesConditionsType = "target_app"
	DynamicConfigRulesDtoRulesConditionsTypeTime            DynamicConfigRulesDtoRulesConditionsType = "time"
	DynamicConfigRulesDtoRulesConditionsTypeUnitId          DynamicConfigRulesDtoRulesConditionsType = "unit_id"
	DynamicConfigRulesDtoRulesConditionsTypeUrl             DynamicConfigRulesDtoRulesConditionsType = "url"
	DynamicConfigRulesDtoRulesConditionsTypeUserId          DynamicConfigRulesDtoRulesConditionsType = "user_id"
)

// Defines values for EchidnaGateLoadPulseQueryDtoRefresh.
const (
	EchidnaGateLoadPulseQueryDtoRefreshFull        EchidnaGateLoadPulseQueryDtoRefresh = "full"
	EchidnaGateLoadPulseQueryDtoRefreshIncremental EchidnaGateLoadPulseQueryDtoRefresh = "incremental"
	EchidnaGateLoadPulseQueryDtoRefreshMetric      EchidnaGateLoadPulseQueryDtoRefresh = "metric"
)

// Defines values for EchidnaLoadPulseQueryDtoRefresh.
const (
	EchidnaLoadPulseQueryDtoRefreshFull        EchidnaLoadPulseQueryDtoRefresh = "full"
	EchidnaLoadPulseQueryDtoRefreshIncremental EchidnaLoadPulseQueryDtoRefresh = "incremental"
	EchidnaLoadPulseQueryDtoRefreshMetric      EchidnaLoadPulseQueryDtoRefresh = "metric"
)

// Defines values for ExperimentCreateDtoAnalyticsType.
const (
	ExperimentCreateDtoAnalyticsTypeBayesian    ExperimentCreateDtoAnalyticsType = "bayesian"
	ExperimentCreateDtoAnalyticsTypeFrequentist ExperimentCreateDtoAnalyticsType = "frequentist"
	ExperimentCreateDtoAnalyticsTypeSprt        ExperimentCreateDtoAnalyticsType = "sprt"
)

// Defines values for ExperimentCreateDtoAssignmentSourceFiltersCondition.
const (
	ExperimentCreateDtoAssignmentSourceFiltersConditionAfterExposure    ExperimentCreateDtoAssignmentSourceFiltersCondition = "after_exposure"
	ExperimentCreateDtoAssignmentSourceFiltersConditionContains         ExperimentCreateDtoAssignmentSourceFiltersCondition = "contains"
	ExperimentCreateDtoAssignmentSourceFiltersConditionEndsWith         ExperimentCreateDtoAssignmentSourceFiltersCondition = "ends_with"
	ExperimentCreateDtoAssignmentSourceFiltersConditionEqual            ExperimentCreateDtoAssignmentSourceFiltersCondition = "="
	ExperimentCreateDtoAssignmentSourceFiltersConditionGreaterThan      ExperimentCreateDtoAssignmentSourceFiltersCondition = ">"
	ExperimentCreateDtoAssignmentSourceFiltersConditionGreaterThanEqual ExperimentCreateDtoAssignmentSourceFiltersCondition = ">="
	ExperimentCreateDtoAssignmentSourceFiltersConditionIn               ExperimentCreateDtoAssignmentSourceFiltersCondition = "in"
	ExperimentCreateDtoAssignmentSourceFiltersConditionIsFalse          ExperimentCreateDtoAssignmentSourceFiltersCondition = "is_false"
	ExperimentCreateDtoAssignmentSourceFiltersConditionIsNull           ExperimentCreateDtoAssignmentSourceFiltersCondition = "is_null"
	ExperimentCreateDtoAssignmentSourceFiltersConditionIsTrue           ExperimentCreateDtoAssignmentSourceFiltersCondition = "is_true"
	ExperimentCreateDtoAssignmentSourceFiltersConditionLessThan         ExperimentCreateDtoAssignmentSourceFiltersCondition = "<"
	ExperimentCreateDtoAssignmentSourceFiltersConditionLessThanEqual    ExperimentCreateDtoAssignmentSourceFiltersCondition = "<="
	ExperimentCreateDtoAssignmentSourceFiltersConditionNonNull          ExperimentCreateDtoAssignmentSourceFiltersCondition = "non_null"
	ExperimentCreateDtoAssignmentSourceFiltersConditionNotContains      ExperimentCreateDtoAssignmentSourceFiltersCondition = "not_contains"
	ExperimentCreateDtoAssignmentSourceFiltersConditionNotIn            ExperimentCreateDtoAssignmentSourceFiltersCondition = "not_in"
	ExperimentCreateDtoAssignmentSourceFiltersConditionSqlFilter        ExperimentCreateDtoAssignmentSourceFiltersCondition = "sql_filter"
	ExperimentCreateDtoAssignmentSourceFiltersConditionStartsWith       ExperimentCreateDtoAssignmentSourceFiltersCondition = "starts_with"
)

// Defines values for ExperimentCreateDtoDefaultConfidenceInterval.
const (
	ExperimentCreateDtoDefaultConfidenceIntervalN80 ExperimentCreateDtoDefaultConfidenceInterval = "80"
	ExperimentCreateDtoDefaultConfidenceIntervalN90 ExperimentCreateDtoDefaultConfidenceInterval = "90"
	ExperimentCreateDtoDefaultConfidenceIntervalN95 ExperimentCreateDtoDefaultConfidenceInterval = "95"
	ExperimentCreateDtoDefaultConfidenceIntervalN98 ExperimentCreateDtoDefaultConfidenceInterval = "98"
	ExperimentCreateDtoDefaultConfidenceIntervalN99 ExperimentCreateDtoDefaultConfidenceInterval = "99"
)

// Defines values for ExperimentCreateDtoIdentifierMappingMode.
const (
	ExperimentCreateDtoIdentifierMappingModeFirstTouchOneToMany ExperimentCreateDtoIdentifierMappingMode = "firstTouchOneToMany"
	ExperimentCreateDtoIdentifierMappingModeStrictOneToOne      ExperimentCreateDtoIdentifierMappingMode = "strictOneToOne"
)

// Defines values for ExperimentCreateDtoPrimaryMetricsDirection.
const (
	ExperimentCreateDtoPrimaryMetricsDirectionDecrease ExperimentCreateDtoPrimaryMetricsDirection = "decrease"
	ExperimentCreateDtoPrimaryMetricsDirectionIncrease ExperimentCreateDtoPrimaryMetricsDirection = "increase"
)

// Defines values for ExperimentCreateDtoScheduledReloadType.
const (
	ExperimentCreateDtoScheduledReloadTypeFull        ExperimentCreateDtoScheduledReloadType = "full"
	ExperimentCreateDtoScheduledReloadTypeIncremental ExperimentCreateDtoScheduledReloadType = "incremental"
)

// Defines values for ExperimentCreateDtoSecondaryMetricsDirection.
const (
	ExperimentCreateDtoSecondaryMetricsDirectionDecrease ExperimentCreateDtoSecondaryMetricsDirection = "decrease"
	ExperimentCreateDtoSecondaryMetricsDirectionIncrease ExperimentCreateDtoSecondaryMetricsDirection = "increase"
)

// Defines values for ExperimentCreateDtoStatus.
const (
	ExperimentCreateDtoStatusAbandoned         ExperimentCreateDtoStatus = "abandoned"
	ExperimentCreateDtoStatusActive            ExperimentCreateDtoStatus = "active"
	ExperimentCreateDtoStatusArchived          ExperimentCreateDtoStatus = "archived"
	ExperimentCreateDtoStatusAssignmentStopped ExperimentCreateDtoStatus = "assignment_stopped"
	ExperimentCreateDtoStatusDecisionMade      ExperimentCreateDtoStatus = "decision_made"
	ExperimentCreateDtoStatusExperimentStopped ExperimentCreateDtoStatus = "experiment_stopped"
	ExperimentCreateDtoStatusSetup             ExperimentCreateDtoStatus = "setup"
)

// Defines values for ExperimentFullUpdateDtoAnalyticsType.
const (
	ExperimentFullUpdateDtoAnalyticsTypeBayesian    ExperimentFullUpdateDtoAnalyticsType = "bayesian"
	ExperimentFullUpdateDtoAnalyticsTypeFrequentist ExperimentFullUpdateDtoAnalyticsType = "frequentist"
	ExperimentFullUpdateDtoAnalyticsTypeSprt        ExperimentFullUpdateDtoAnalyticsType = "sprt"
)

// Defines values for ExperimentFullUpdateDtoAssignmentSourceFiltersCondition.
const (
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionAfterExposure    ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "after_exposure"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionContains         ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "contains"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionEndsWith         ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "ends_with"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionEqual            ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "="
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionGreaterThan      ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = ">"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionGreaterThanEqual ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = ">="
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionIn               ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "in"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionIsFalse          ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "is_false"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionIsNull           ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "is_null"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionIsTrue           ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "is_true"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionLessThan         ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "<"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionLessThanEqual    ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "<="
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionNonNull          ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "non_null"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionNotContains      ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "not_contains"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionNotIn            ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "not_in"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionSqlFilter        ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "sql_filter"
	ExperimentFullUpdateDtoAssignmentSourceFiltersConditionStartsWith       ExperimentFullUpdateDtoAssignmentSourceFiltersCondition = "starts_with"
)

// Defines values for ExperimentFullUpdateDtoDefaultConfidenceInterval.
const (
	ExperimentFullUpdateDtoDefaultConfidenceIntervalN80 ExperimentFullUpdateDtoDefaultConfidenceInterval = "80"
	ExperimentFullUpdateDtoDefaultConfidenceIntervalN90 ExperimentFullUpdateDtoDefaultConfidenceInterval = "90"
	ExperimentFullUpdateDtoDefaultConfidenceIntervalN95 ExperimentFullUpdateDtoDefaultConfidenceInterval = "95"
	ExperimentFullUpdateDtoDefaultConfidenceIntervalN98 ExperimentFullUpdateDtoDefaultConfidenceInterval = "98"
	ExperimentFullUpdateDtoDefaultConfidenceIntervalN99 ExperimentFullUpdateDtoDefaultConfidenceInterval = "99"
)

// Defines values for ExperimentFullUpdateDtoIdentifierMappingMode.
const (
	ExperimentFullUpdateDtoIdentifierMappingModeFirstTouchOneToMany ExperimentFullUpdateDtoIdentifierMappingMode = "firstTouchOneToMany"
	ExperimentFullUpdateDtoIdentifierMappingModeStrictOneToOne      ExperimentFullUpdateDtoIdentifierMappingMode = "strictOneToOne"
)

// Defines values for ExperimentFullUpdateDtoPrimaryMetricsDirection.
const (
	ExperimentFullUpdateDtoPrimaryMetricsDirectionDecrease ExperimentFullUpdateDtoPrimaryMetricsDirection = "decrease"
	ExperimentFullUpdateDtoPrimaryMetricsDirectionIncrease ExperimentFullUpdateDtoPrimaryMetricsDirection = "increase"
)

// Defines values for ExperimentFullUpdateDtoScheduledReloadType.
const (
	ExperimentFullUpdateDtoScheduledReloadTypeFull        ExperimentFullUpdateDtoScheduledReloadType = "full"
	ExperimentFullUpdateDtoScheduledReloadTypeIncremental ExperimentFullUpdateDtoScheduledReloadType = "incremental"
)

// Defines values for ExperimentFullUpdateDtoSecondaryMetricsDirection.
const (
	ExperimentFullUpdateDtoSecondaryMetricsDirectionDecrease ExperimentFullUpdateDtoSecondaryMetricsDirection = "decrease"
	ExperimentFullUpdateDtoSecondaryMetricsDirectionIncrease ExperimentFullUpdateDtoSecondaryMetricsDirection = "increase"
)

// Defines values for ExperimentFullUpdateDtoStatus.
const (
	ExperimentFullUpdateDtoStatusAbandoned         ExperimentFullUpdateDtoStatus = "abandoned"
	ExperimentFullUpdateDtoStatusActive            ExperimentFullUpdateDtoStatus = "active"
	ExperimentFullUpdateDtoStatusArchived          ExperimentFullUpdateDtoStatus = "archived"
	ExperimentFullUpdateDtoStatusAssignmentStopped ExperimentFullUpdateDtoStatus = "assignment_stopped"
	ExperimentFullUpdateDtoStatusDecisionMade      ExperimentFullUpdateDtoStatus = "decision_made"
	ExperimentFullUpdateDtoStatusExperimentStopped ExperimentFullUpdateDtoStatus = "experiment_stopped"
	ExperimentFullUpdateDtoStatusSetup             ExperimentFullUpdateDtoStatus = "setup"
)

// Defines values for ExperimentOverridesDtoOverridesType.
const (
	Gate    ExperimentOverridesDtoOverridesType = "gate"
	Segment ExperimentOverridesDtoOverridesType = "segment"
)

// Defines values for ExperimentPartialUpdateDtoAnalyticsType.
const (
	Bayesian    ExperimentPartialUpdateDtoAnalyticsType = "bayesian"
	Frequentist ExperimentPartialUpdateDtoAnalyticsType = "frequentist"
	Sprt        ExperimentPartialUpdateDtoAnalyticsType = "sprt"
)

// Defines values for ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition.
const (
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionAfterExposure    ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "after_exposure"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionContains         ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "contains"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionEndsWith         ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "ends_with"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionEqual            ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "="
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionGreaterThan      ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = ">"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionGreaterThanEqual ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = ">="
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionIn               ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "in"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionIsFalse          ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "is_false"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionIsNull           ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "is_null"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionIsTrue           ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "is_true"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionLessThan         ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "<"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionLessThanEqual    ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "<="
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionNonNull          ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "non_null"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionNotContains      ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "not_contains"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionNotIn            ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "not_in"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionSqlFilter        ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "sql_filter"
	ExperimentPartialUpdateDtoAssignmentSourceFiltersConditionStartsWith       ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition = "starts_with"
)

// Defines values for ExperimentPartialUpdateDtoDefaultConfidenceInterval.
const (
	ExperimentPartialUpdateDtoDefaultConfidenceIntervalN80 ExperimentPartialUpdateDtoDefaultConfidenceInterval = "80"
	ExperimentPartialUpdateDtoDefaultConfidenceIntervalN90 ExperimentPartialUpdateDtoDefaultConfidenceInterval = "90"
	ExperimentPartialUpdateDtoDefaultConfidenceIntervalN95 ExperimentPartialUpdateDtoDefaultConfidenceInterval = "95"
	ExperimentPartialUpdateDtoDefaultConfidenceIntervalN98 ExperimentPartialUpdateDtoDefaultConfidenceInterval = "98"
	ExperimentPartialUpdateDtoDefaultConfidenceIntervalN99 ExperimentPartialUpdateDtoDefaultConfidenceInterval = "99"
)

// Defines values for ExperimentPartialUpdateDtoIdentifierMappingMode.
const (
	ExperimentPartialUpdateDtoIdentifierMappingModeFirstTouchOneToMany ExperimentPartialUpdateDtoIdentifierMappingMode = "firstTouchOneToMany"
	ExperimentPartialUpdateDtoIdentifierMappingModeStrictOneToOne      ExperimentPartialUpdateDtoIdentifierMappingMode = "strictOneToOne"
)

// Defines values for ExperimentPartialUpdateDtoPrimaryMetricsDirection.
const (
	ExperimentPartialUpdateDtoPrimaryMetricsDirectionDecrease ExperimentPartialUpdateDtoPrimaryMetricsDirection = "decrease"
	ExperimentPartialUpdateDtoPrimaryMetricsDirectionIncrease ExperimentPartialUpdateDtoPrimaryMetricsDirection = "increase"
)

// Defines values for ExperimentPartialUpdateDtoScheduledReloadType.
const (
	ExperimentPartialUpdateDtoScheduledReloadTypeFull        ExperimentPartialUpdateDtoScheduledReloadType = "full"
	ExperimentPartialUpdateDtoScheduledReloadTypeIncremental ExperimentPartialUpdateDtoScheduledReloadType = "incremental"
)

// Defines values for ExperimentPartialUpdateDtoSecondaryMetricsDirection.
const (
	ExperimentPartialUpdateDtoSecondaryMetricsDirectionDecrease ExperimentPartialUpdateDtoSecondaryMetricsDirection = "decrease"
	ExperimentPartialUpdateDtoSecondaryMetricsDirectionIncrease ExperimentPartialUpdateDtoSecondaryMetricsDirection = "increase"
)

// Defines values for ExperimentPartialUpdateDtoStatus.
const (
	ExperimentPartialUpdateDtoStatusAbandoned         ExperimentPartialUpdateDtoStatus = "abandoned"
	ExperimentPartialUpdateDtoStatusActive            ExperimentPartialUpdateDtoStatus = "active"
	ExperimentPartialUpdateDtoStatusArchived          ExperimentPartialUpdateDtoStatus = "archived"
	ExperimentPartialUpdateDtoStatusAssignmentStopped ExperimentPartialUpdateDtoStatus = "assignment_stopped"
	ExperimentPartialUpdateDtoStatusDecisionMade      ExperimentPartialUpdateDtoStatus = "decision_made"
	ExperimentPartialUpdateDtoStatusExperimentStopped ExperimentPartialUpdateDtoStatus = "experiment_stopped"
	ExperimentPartialUpdateDtoStatusSetup             ExperimentPartialUpdateDtoStatus = "setup"
)

// Defines values for ExperimentPulseResultsDtoOtherMetricsDirectionality.
const (
	ExperimentPulseResultsDtoOtherMetricsDirectionalityDecrease ExperimentPulseResultsDtoOtherMetricsDirectionality = "decrease"
	ExperimentPulseResultsDtoOtherMetricsDirectionalityIncrease ExperimentPulseResultsDtoOtherMetricsDirectionality = "increase"
)

// Defines values for ExperimentPulseResultsDtoPrimaryMetricsDirectionality.
const (
	ExperimentPulseResultsDtoPrimaryMetricsDirectionalityDecrease ExperimentPulseResultsDtoPrimaryMetricsDirectionality = "decrease"
	ExperimentPulseResultsDtoPrimaryMetricsDirectionalityIncrease ExperimentPulseResultsDtoPrimaryMetricsDirectionality = "increase"
)

// Defines values for ExperimentPulseResultsDtoSecondaryMetricsDirectionality.
const (
	ExperimentPulseResultsDtoSecondaryMetricsDirectionalityDecrease ExperimentPulseResultsDtoSecondaryMetricsDirectionality = "decrease"
	ExperimentPulseResultsDtoSecondaryMetricsDirectionalityIncrease ExperimentPulseResultsDtoSecondaryMetricsDirectionality = "increase"
)

// Defines values for ExternalExperimentDtoAssignmentSourceFiltersCondition.
const (
	ExternalExperimentDtoAssignmentSourceFiltersConditionAfterExposure    ExternalExperimentDtoAssignmentSourceFiltersCondition = "after_exposure"
	ExternalExperimentDtoAssignmentSourceFiltersConditionContains         ExternalExperimentDtoAssignmentSourceFiltersCondition = "contains"
	ExternalExperimentDtoAssignmentSourceFiltersConditionEndsWith         ExternalExperimentDtoAssignmentSourceFiltersCondition = "ends_with"
	ExternalExperimentDtoAssignmentSourceFiltersConditionEqual            ExternalExperimentDtoAssignmentSourceFiltersCondition = "="
	ExternalExperimentDtoAssignmentSourceFiltersConditionGreaterThan      ExternalExperimentDtoAssignmentSourceFiltersCondition = ">"
	ExternalExperimentDtoAssignmentSourceFiltersConditionGreaterThanEqual ExternalExperimentDtoAssignmentSourceFiltersCondition = ">="
	ExternalExperimentDtoAssignmentSourceFiltersConditionIn               ExternalExperimentDtoAssignmentSourceFiltersCondition = "in"
	ExternalExperimentDtoAssignmentSourceFiltersConditionIsFalse          ExternalExperimentDtoAssignmentSourceFiltersCondition = "is_false"
	ExternalExperimentDtoAssignmentSourceFiltersConditionIsNull           ExternalExperimentDtoAssignmentSourceFiltersCondition = "is_null"
	ExternalExperimentDtoAssignmentSourceFiltersConditionIsTrue           ExternalExperimentDtoAssignmentSourceFiltersCondition = "is_true"
	ExternalExperimentDtoAssignmentSourceFiltersConditionLessThan         ExternalExperimentDtoAssignmentSourceFiltersCondition = "<"
	ExternalExperimentDtoAssignmentSourceFiltersConditionLessThanEqual    ExternalExperimentDtoAssignmentSourceFiltersCondition = "<="
	ExternalExperimentDtoAssignmentSourceFiltersConditionNonNull          ExternalExperimentDtoAssignmentSourceFiltersCondition = "non_null"
	ExternalExperimentDtoAssignmentSourceFiltersConditionNotContains      ExternalExperimentDtoAssignmentSourceFiltersCondition = "not_contains"
	ExternalExperimentDtoAssignmentSourceFiltersConditionNotIn            ExternalExperimentDtoAssignmentSourceFiltersCondition = "not_in"
	ExternalExperimentDtoAssignmentSourceFiltersConditionSqlFilter        ExternalExperimentDtoAssignmentSourceFiltersCondition = "sql_filter"
	ExternalExperimentDtoAssignmentSourceFiltersConditionStartsWith       ExternalExperimentDtoAssignmentSourceFiltersCondition = "starts_with"
)

// Defines values for ExternalExperimentDtoDefaultConfidenceInterval.
const (
	ExternalExperimentDtoDefaultConfidenceIntervalN80 ExternalExperimentDtoDefaultConfidenceInterval = "80"
	ExternalExperimentDtoDefaultConfidenceIntervalN90 ExternalExperimentDtoDefaultConfidenceInterval = "90"
	ExternalExperimentDtoDefaultConfidenceIntervalN95 ExternalExperimentDtoDefaultConfidenceInterval = "95"
	ExternalExperimentDtoDefaultConfidenceIntervalN98 ExternalExperimentDtoDefaultConfidenceInterval = "98"
	ExternalExperimentDtoDefaultConfidenceIntervalN99 ExternalExperimentDtoDefaultConfidenceInterval = "99"
)

// Defines values for ExternalExperimentDtoHealthCheckStatus.
const (
	ExternalExperimentDtoHealthCheckStatusFAILED  ExternalExperimentDtoHealthCheckStatus = "FAILED"
	ExternalExperimentDtoHealthCheckStatusPASSED  ExternalExperimentDtoHealthCheckStatus = "PASSED"
	ExternalExperimentDtoHealthCheckStatusWAITING ExternalExperimentDtoHealthCheckStatus = "WAITING"
	ExternalExperimentDtoHealthCheckStatusWARNING ExternalExperimentDtoHealthCheckStatus = "WARNING"
)

// Defines values for ExternalExperimentDtoHealthChecksStatus.
const (
	ExternalExperimentDtoHealthChecksStatusFAILED  ExternalExperimentDtoHealthChecksStatus = "FAILED"
	ExternalExperimentDtoHealthChecksStatusPASSED  ExternalExperimentDtoHealthChecksStatus = "PASSED"
	ExternalExperimentDtoHealthChecksStatusWAITING ExternalExperimentDtoHealthChecksStatus = "WAITING"
	ExternalExperimentDtoHealthChecksStatusWARNING ExternalExperimentDtoHealthChecksStatus = "WARNING"
)

// Defines values for ExternalExperimentDtoHealthChecksType.
const (
	AssignmentHealth                ExternalExperimentDtoHealthChecksType = "assignment_health"
	DeduplicationRate               ExternalExperimentDtoHealthChecksType = "deduplication_rate"
	DeduplicationRateGroupLevel     ExternalExperimentDtoHealthChecksType = "deduplication_rate_group_level"
	DefaultValueMismatch            ExternalExperimentDtoHealthChecksType = "default_value_mismatch"
	ExposuresDataIsBehind           ExternalExperimentDtoHealthChecksType = "exposures_data_is_behind"
	HasBalancedExposures            ExternalExperimentDtoHealthChecksType = "has_balanced_exposures"
	HasChangedParameter             ExternalExperimentDtoHealthChecksType = "has_changed_parameter"
	HasChecks                       ExternalExperimentDtoHealthChecksType = "has_checks"
	HasCrossover                    ExternalExperimentDtoHealthChecksType = "has_crossover"
	HasEventMetrics                 ExternalExperimentDtoHealthChecksType = "has_event_metrics"
	HasExposures                    ExternalExperimentDtoHealthChecksType = "has_exposures"
	HasPulseMetrics                 ExternalExperimentDtoHealthChecksType = "has_pulse_metrics"
	HasRecentExposuresForAnalyzeWhn ExternalExperimentDtoHealthChecksType = "has_recent_exposures_for_analyze_whn"
	HasValidUnitType                ExternalExperimentDtoHealthChecksType = "has_valid_unit_type"
	MetricHistoryForToplineImpact   ExternalExperimentDtoHealthChecksType = "metric_history_for_topline_impact"
	PreExperimentalBiasCheck        ExternalExperimentDtoHealthChecksType = "pre_experimental_bias_check"
	SegmentsOfInterestAnalysis      ExternalExperimentDtoHealthChecksType = "segments_of_interest_analysis"
	UserMetricsExist                ExternalExperimentDtoHealthChecksType = "user_metrics_exist"
	WindowedMetricsHaveOutliers     ExternalExperimentDtoHealthChecksType = "windowed_metrics_have_outliers"
)

// Defines values for ExternalExperimentDtoIdentifierMappingMode.
const (
	ExternalExperimentDtoIdentifierMappingModeFirstTouchOneToMany ExternalExperimentDtoIdentifierMappingMode = "firstTouchOneToMany"
	ExternalExperimentDtoIdentifierMappingModeStrictOneToOne      ExternalExperimentDtoIdentifierMappingMode = "strictOneToOne"
)

// Defines values for ExternalExperimentDtoPrimaryMetricsDirection.
const (
	ExternalExperimentDtoPrimaryMetricsDirectionDecrease ExternalExperimentDtoPrimaryMetricsDirection = "decrease"
	ExternalExperimentDtoPrimaryMetricsDirectionIncrease ExternalExperimentDtoPrimaryMetricsDirection = "increase"
)

// Defines values for ExternalExperimentDtoScheduledReloadType.
const (
	ExternalExperimentDtoScheduledReloadTypeFull        ExternalExperimentDtoScheduledReloadType = "full"
	ExternalExperimentDtoScheduledReloadTypeIncremental ExternalExperimentDtoScheduledReloadType = "incremental"
)

// Defines values for ExternalExperimentDtoSecondaryMetricsDirection.
const (
	ExternalExperimentDtoSecondaryMetricsDirectionDecrease ExternalExperimentDtoSecondaryMetricsDirection = "decrease"
	ExternalExperimentDtoSecondaryMetricsDirectionIncrease ExternalExperimentDtoSecondaryMetricsDirection = "increase"
)

// Defines values for ExternalExperimentDtoStatus.
const (
	ExternalExperimentDtoStatusAbandoned         ExternalExperimentDtoStatus = "abandoned"
	ExternalExperimentDtoStatusActive            ExternalExperimentDtoStatus = "active"
	ExternalExperimentDtoStatusArchived          ExternalExperimentDtoStatus = "archived"
	ExternalExperimentDtoStatusAssignmentStopped ExternalExperimentDtoStatus = "assignment_stopped"
	ExternalExperimentDtoStatusDecisionMade      ExternalExperimentDtoStatus = "decision_made"
	ExternalExperimentDtoStatusExperimentStopped ExternalExperimentDtoStatus = "experiment_stopped"
	ExternalExperimentDtoStatusSetup             ExternalExperimentDtoStatus = "setup"
)

// Defines values for ExternalExperimentDtoSubtype.
const (
	ExternalExperimentDtoSubtypeConversion   ExternalExperimentDtoSubtype = "conversion"
	ExternalExperimentDtoSubtypeReactivation ExternalExperimentDtoSubtype = "reactivation"
	ExternalExperimentDtoSubtypeRetention    ExternalExperimentDtoSubtype = "retention"
)

// Defines values for ExternalGateDtoRulesConditionsType.
const (
	ExternalGateDtoRulesConditionsTypeAppVersion      ExternalGateDtoRulesConditionsType = "app_version"
	ExternalGateDtoRulesConditionsTypeBrowserName     ExternalGateDtoRulesConditionsType = "browser_name"
	ExternalGateDtoRulesConditionsTypeBrowserVersion  ExternalGateDtoRulesConditionsType = "browser_version"
	ExternalGateDtoRulesConditionsTypeCountry         ExternalGateDtoRulesConditionsType = "country"
	ExternalGateDtoRulesConditionsTypeCustomField     ExternalGateDtoRulesConditionsType = "custom_field"
	ExternalGateDtoRulesConditionsTypeDeviceModel     ExternalGateDtoRulesConditionsType = "device_model"
	ExternalGateDtoRulesConditionsTypeEmail           ExternalGateDtoRulesConditionsType = "email"
	ExternalGateDtoRulesConditionsTypeEnvironmentTier ExternalGateDtoRulesConditionsType = "environment_tier"
	ExternalGateDtoRulesConditionsTypeFailsGate       ExternalGateDtoRulesConditionsType = "fails_gate"
	ExternalGateDtoRulesConditionsTypeFailsSegment    ExternalGateDtoRulesConditionsType = "fails_segment"
	ExternalGateDtoRulesConditionsTypeIpAddress       ExternalGateDtoRulesConditionsType = "ip_address"
	ExternalGateDtoRulesConditionsTypeJavascript      ExternalGateDtoRulesConditionsType = "javascript"
	ExternalGateDtoRulesConditionsTypeLocale          ExternalGateDtoRulesConditionsType = "locale"
	ExternalGateDtoRulesConditionsTypeOsName          ExternalGateDtoRulesConditionsType = "os_name"
	ExternalGateDtoRulesConditionsTypeOsVersion       ExternalGateDtoRulesConditionsType = "os_version"
	ExternalGateDtoRulesConditionsTypePassesGate      ExternalGateDtoRulesConditionsType = "passes_gate"
	ExternalGateDtoRulesConditionsTypePassesSegment   ExternalGateDtoRulesConditionsType = "passes_segment"
	ExternalGateDtoRulesConditionsTypePublic          ExternalGateDtoRulesConditionsType = "public"
	ExternalGateDtoRulesConditionsTypeTargetApp       ExternalGateDtoRulesConditionsType = "target_app"
	ExternalGateDtoRulesConditionsTypeTime            ExternalGateDtoRulesConditionsType = "time"
	ExternalGateDtoRulesConditionsTypeUnitId          ExternalGateDtoRulesConditionsType = "unit_id"
	ExternalGateDtoRulesConditionsTypeUrl             ExternalGateDtoRulesConditionsType = "url"
	ExternalGateDtoRulesConditionsTypeUserId          ExternalGateDtoRulesConditionsType = "user_id"
)

// Defines values for ExternalGateDtoStatus.
const (
	Archived   ExternalGateDtoStatus = "Archived"
	Disabled   ExternalGateDtoStatus = "Disabled"
	InProgress ExternalGateDtoStatus = "In Progress"
	Launched   ExternalGateDtoStatus = "Launched"
)

// Defines values for ExternalGateDtoType.
const (
	ExternalGateDtoTypePERMANENT ExternalGateDtoType = "PERMANENT"
	ExternalGateDtoTypeSTALE     ExternalGateDtoType = "STALE"
	ExternalGateDtoTypeTEMPLATE  ExternalGateDtoType = "TEMPLATE"
	ExternalGateDtoTypeTEMPORARY ExternalGateDtoType = "TEMPORARY"
)

// Defines values for ExternalGateDtoTypeReason.
const (
	ExternalGateDtoTypeReasonNONE                    ExternalGateDtoTypeReason = "NONE"
	ExternalGateDtoTypeReasonSTALEALLFALSE           ExternalGateDtoTypeReason = "STALE_ALL_FALSE"
	ExternalGateDtoTypeReasonSTALEALLTRUE            ExternalGateDtoTypeReason = "STALE_ALL_TRUE"
	ExternalGateDtoTypeReasonSTALEEMPTYCHECKS        ExternalGateDtoTypeReason = "STALE_EMPTY_CHECKS"
	ExternalGateDtoTypeReasonSTALENORULES            ExternalGateDtoTypeReason = "STALE_NO_RULES"
	ExternalGateDtoTypeReasonSTALEPROBABLYDEADCHECK  ExternalGateDtoTypeReason = "STALE_PROBABLY_DEAD_CHECK"
	ExternalGateDtoTypeReasonSTALEPROBABLYFORGOTTEN  ExternalGateDtoTypeReason = "STALE_PROBABLY_FORGOTTEN"
	ExternalGateDtoTypeReasonSTALEPROBABLYLAUNCHED   ExternalGateDtoTypeReason = "STALE_PROBABLY_LAUNCHED"
	ExternalGateDtoTypeReasonSTALEPROBABLYUNLAUNCHED ExternalGateDtoTypeReason = "STALE_PROBABLY_UNLAUNCHED"
)

// Defines values for ExternalMetricDefinitionContractDtoDirectionality.
const (
	ExternalMetricDefinitionContractDtoDirectionalityDecrease ExternalMetricDefinitionContractDtoDirectionality = "decrease"
	ExternalMetricDefinitionContractDtoDirectionalityIncrease ExternalMetricDefinitionContractDtoDirectionality = "increase"
)

// Defines values for ExternalMetricDefinitionContractDtoFunnelCountDistinct.
const (
	ExternalMetricDefinitionContractDtoFunnelCountDistinctEvents ExternalMetricDefinitionContractDtoFunnelCountDistinct = "events"
	ExternalMetricDefinitionContractDtoFunnelCountDistinctUsers  ExternalMetricDefinitionContractDtoFunnelCountDistinct = "users"
)

// Defines values for ExternalMetricDefinitionContractDtoFunnelEventListType.
const (
	ExternalMetricDefinitionContractDtoFunnelEventListTypeEventCount       ExternalMetricDefinitionContractDtoFunnelEventListType = "event_count"
	ExternalMetricDefinitionContractDtoFunnelEventListTypeEventCountCustom ExternalMetricDefinitionContractDtoFunnelEventListType = "event_count_custom"
	ExternalMetricDefinitionContractDtoFunnelEventListTypeEventDau         ExternalMetricDefinitionContractDtoFunnelEventListType = "event_dau"
	ExternalMetricDefinitionContractDtoFunnelEventListTypeEventUser        ExternalMetricDefinitionContractDtoFunnelEventListType = "event_user"
)

// Defines values for ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition.
const (
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionAfterExposure    ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "after_exposure"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionContains         ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "contains"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionEndsWith         ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "ends_with"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionEqual            ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "="
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionGreaterThan      ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = ">"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionGreaterThanEqual ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = ">="
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionIn               ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "in"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionIsFalse          ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "is_false"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionIsNull           ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "is_null"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionIsTrue           ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "is_true"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionLessThan         ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "<"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionLessThanEqual    ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "<="
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionNonNull          ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "non_null"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionNotContains      ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "not_contains"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionNotIn            ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "not_in"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionSqlFilter        ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "sql_filter"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaConditionStartsWith       ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition = "starts_with"
)

// Defines values for ExternalMetricDefinitionContractDtoMetricEventsCriteriaType.
const (
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaTypeMetadata   ExternalMetricDefinitionContractDtoMetricEventsCriteriaType = "metadata"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaTypeUser       ExternalMetricDefinitionContractDtoMetricEventsCriteriaType = "user"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaTypeUserCustom ExternalMetricDefinitionContractDtoMetricEventsCriteriaType = "user_custom"
	ExternalMetricDefinitionContractDtoMetricEventsCriteriaTypeValue      ExternalMetricDefinitionContractDtoMetricEventsCriteriaType = "value"
)

// Defines values for ExternalMetricDefinitionContractDtoMetricEventsType.
const (
	ExternalMetricDefinitionContractDtoMetricEventsTypeCount         ExternalMetricDefinitionContractDtoMetricEventsType = "count"
	ExternalMetricDefinitionContractDtoMetricEventsTypeCountDistinct ExternalMetricDefinitionContractDtoMetricEventsType = "count_distinct"
	ExternalMetricDefinitionContractDtoMetricEventsTypeMetadata      ExternalMetricDefinitionContractDtoMetricEventsType = "metadata"
	ExternalMetricDefinitionContractDtoMetricEventsTypeValue         ExternalMetricDefinitionContractDtoMetricEventsType = "value"
)

// Defines values for ExternalMetricDefinitionContractDtoType.
const (
	ExternalMetricDefinitionContractDtoTypeComposite        ExternalMetricDefinitionContractDtoType = "composite"
	ExternalMetricDefinitionContractDtoTypeCompositeSum     ExternalMetricDefinitionContractDtoType = "composite_sum"
	ExternalMetricDefinitionContractDtoTypeEventCountCustom ExternalMetricDefinitionContractDtoType = "event_count_custom"
	ExternalMetricDefinitionContractDtoTypeEventUser        ExternalMetricDefinitionContractDtoType = "event_user"
	ExternalMetricDefinitionContractDtoTypeFunnel           ExternalMetricDefinitionContractDtoType = "funnel"
	ExternalMetricDefinitionContractDtoTypeImportWindow     ExternalMetricDefinitionContractDtoType = "import_window"
	ExternalMetricDefinitionContractDtoTypeMean             ExternalMetricDefinitionContractDtoType = "mean"
	ExternalMetricDefinitionContractDtoTypeRatio            ExternalMetricDefinitionContractDtoType = "ratio"
	ExternalMetricDefinitionContractDtoTypeSetupIncomplete  ExternalMetricDefinitionContractDtoType = "setup_incomplete"
	ExternalMetricDefinitionContractDtoTypeSum              ExternalMetricDefinitionContractDtoType = "sum"
	ExternalMetricDefinitionContractDtoTypeUndefined        ExternalMetricDefinitionContractDtoType = "undefined"
	ExternalMetricDefinitionContractDtoTypeUserWarehouse    ExternalMetricDefinitionContractDtoType = "user_warehouse"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeAggregation.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationCount              ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "count"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationCountDistinct      ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "count_distinct"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationDailyParticipation ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "daily_participation"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationEmpty              ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = ""
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationFirstValue         ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "first_value"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationFunnel             ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "funnel"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationLatestValue        ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "latest_value"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationMax                ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "max"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationMean               ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "mean"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationMin                ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "min"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationPercentile         ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "percentile"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationRatio              ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "ratio"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationRetention          ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "retention"
	ExternalMetricDefinitionContractDtoWarehouseNativeAggregationSum                ExternalMetricDefinitionContractDtoWarehouseNativeAggregation = "sum"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionAfterExposure    ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "after_exposure"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionContains         ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "contains"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionEndsWith         ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "ends_with"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionEqual            ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "="
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionGreaterThan      ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = ">"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionGreaterThanEqual ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = ">="
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionIn               ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "in"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionIsFalse          ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "is_false"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionIsNull           ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "is_null"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionIsTrue           ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "is_true"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionLessThan         ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "<"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionLessThanEqual    ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "<="
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionNonNull          ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "non_null"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionNotContains      ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "not_contains"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionNotIn            ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "not_in"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionSqlFilter        ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "sql_filter"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaConditionStartsWith       ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition = "starts_with"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaTypeMetadata   ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType = "metadata"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaTypeUser       ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType = "user"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaTypeUserCustom ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType = "user_custom"
	ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaTypeValue      ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType = "value"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationCount              ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "count"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationCountDistinct      ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "count_distinct"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationDailyParticipation ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "daily_participation"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationEmpty              ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = ""
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationFirstValue         ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "first_value"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationFunnel             ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "funnel"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationLatestValue        ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "latest_value"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationMax                ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "max"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationMean               ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "mean"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationMin                ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "min"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationPercentile         ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "percentile"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationRatio              ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "ratio"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationRetention          ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "retention"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregationSum                ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation = "sum"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionAfterExposure    ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "after_exposure"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionContains         ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "contains"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionEndsWith         ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "ends_with"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionEqual            ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "="
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionGreaterThan      ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = ">"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionGreaterThanEqual ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = ">="
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionIn               ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "in"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionIsFalse          ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_false"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionIsNull           ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_null"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionIsTrue           ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_true"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionLessThan         ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "<"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionLessThanEqual    ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "<="
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionNonNull          ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "non_null"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionNotContains      ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "not_contains"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionNotIn            ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "not_in"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionSqlFilter        ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "sql_filter"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaConditionStartsWith       ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition = "starts_with"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaTypeMetadata   ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType = "metadata"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaTypeUser       ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType = "user"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaTypeUserCustom ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType = "user_custom"
	ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaTypeValue      ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType = "value"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinct.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinctSessions ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinct = "sessions"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinctUsers    ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinct = "users"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionAfterExposure    ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "after_exposure"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionContains         ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "contains"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionEndsWith         ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "ends_with"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionEqual            ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "="
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionGreaterThan      ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = ">"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionGreaterThanEqual ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = ">="
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionIn               ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "in"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsFalse          ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_false"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsNull           ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_null"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsTrue           ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_true"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionLessThan         ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "<"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionLessThanEqual    ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "<="
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionNonNull          ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "non_null"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionNotContains      ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "not_contains"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionNotIn            ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "not_in"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionSqlFilter        ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "sql_filter"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaConditionStartsWith       ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "starts_with"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaTypeMetadata   ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType = "metadata"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaTypeUser       ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType = "user"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaTypeUserCustom ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType = "user_custom"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaTypeValue      ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType = "value"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteria.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteriaExposure   ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteria = "exposure"
	ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteriaStartEvent ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteria = "start_event"
)

// Defines values for ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation.
const (
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationCount              ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "count"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationCountDistinct      ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "count_distinct"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationDailyParticipation ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "daily_participation"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationEmpty              ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = ""
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationFirstValue         ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "first_value"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationFunnel             ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "funnel"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationLatestValue        ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "latest_value"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationMax                ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "max"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationMean               ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "mean"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationMin                ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "min"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationPercentile         ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "percentile"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationRatio              ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "ratio"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationRetention          ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "retention"
	ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregationSum                ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation = "sum"
)

// Defines values for GateCreateDtoRulesConditionsType.
const (
	GateCreateDtoRulesConditionsTypeAppVersion      GateCreateDtoRulesConditionsType = "app_version"
	GateCreateDtoRulesConditionsTypeBrowserName     GateCreateDtoRulesConditionsType = "browser_name"
	GateCreateDtoRulesConditionsTypeBrowserVersion  GateCreateDtoRulesConditionsType = "browser_version"
	GateCreateDtoRulesConditionsTypeCountry         GateCreateDtoRulesConditionsType = "country"
	GateCreateDtoRulesConditionsTypeCustomField     GateCreateDtoRulesConditionsType = "custom_field"
	GateCreateDtoRulesConditionsTypeDeviceModel     GateCreateDtoRulesConditionsType = "device_model"
	GateCreateDtoRulesConditionsTypeEmail           GateCreateDtoRulesConditionsType = "email"
	GateCreateDtoRulesConditionsTypeEnvironmentTier GateCreateDtoRulesConditionsType = "environment_tier"
	GateCreateDtoRulesConditionsTypeFailsGate       GateCreateDtoRulesConditionsType = "fails_gate"
	GateCreateDtoRulesConditionsTypeFailsSegment    GateCreateDtoRulesConditionsType = "fails_segment"
	GateCreateDtoRulesConditionsTypeIpAddress       GateCreateDtoRulesConditionsType = "ip_address"
	GateCreateDtoRulesConditionsTypeJavascript      GateCreateDtoRulesConditionsType = "javascript"
	GateCreateDtoRulesConditionsTypeLocale          GateCreateDtoRulesConditionsType = "locale"
	GateCreateDtoRulesConditionsTypeOsName          GateCreateDtoRulesConditionsType = "os_name"
	GateCreateDtoRulesConditionsTypeOsVersion       GateCreateDtoRulesConditionsType = "os_version"
	GateCreateDtoRulesConditionsTypePassesGate      GateCreateDtoRulesConditionsType = "passes_gate"
	GateCreateDtoRulesConditionsTypePassesSegment   GateCreateDtoRulesConditionsType = "passes_segment"
	GateCreateDtoRulesConditionsTypePublic          GateCreateDtoRulesConditionsType = "public"
	GateCreateDtoRulesConditionsTypeTargetApp       GateCreateDtoRulesConditionsType = "target_app"
	GateCreateDtoRulesConditionsTypeTime            GateCreateDtoRulesConditionsType = "time"
	GateCreateDtoRulesConditionsTypeUnitId          GateCreateDtoRulesConditionsType = "unit_id"
	GateCreateDtoRulesConditionsTypeUrl             GateCreateDtoRulesConditionsType = "url"
	GateCreateDtoRulesConditionsTypeUserId          GateCreateDtoRulesConditionsType = "user_id"
)

// Defines values for GateCreateDtoType.
const (
	GateCreateDtoTypePERMANENT GateCreateDtoType = "PERMANENT"
	GateCreateDtoTypeTEMPORARY GateCreateDtoType = "TEMPORARY"
)

// Defines values for GateFullUpdateDtoRulesConditionsType.
const (
	GateFullUpdateDtoRulesConditionsTypeAppVersion      GateFullUpdateDtoRulesConditionsType = "app_version"
	GateFullUpdateDtoRulesConditionsTypeBrowserName     GateFullUpdateDtoRulesConditionsType = "browser_name"
	GateFullUpdateDtoRulesConditionsTypeBrowserVersion  GateFullUpdateDtoRulesConditionsType = "browser_version"
	GateFullUpdateDtoRulesConditionsTypeCountry         GateFullUpdateDtoRulesConditionsType = "country"
	GateFullUpdateDtoRulesConditionsTypeCustomField     GateFullUpdateDtoRulesConditionsType = "custom_field"
	GateFullUpdateDtoRulesConditionsTypeDeviceModel     GateFullUpdateDtoRulesConditionsType = "device_model"
	GateFullUpdateDtoRulesConditionsTypeEmail           GateFullUpdateDtoRulesConditionsType = "email"
	GateFullUpdateDtoRulesConditionsTypeEnvironmentTier GateFullUpdateDtoRulesConditionsType = "environment_tier"
	GateFullUpdateDtoRulesConditionsTypeFailsGate       GateFullUpdateDtoRulesConditionsType = "fails_gate"
	GateFullUpdateDtoRulesConditionsTypeFailsSegment    GateFullUpdateDtoRulesConditionsType = "fails_segment"
	GateFullUpdateDtoRulesConditionsTypeIpAddress       GateFullUpdateDtoRulesConditionsType = "ip_address"
	GateFullUpdateDtoRulesConditionsTypeJavascript      GateFullUpdateDtoRulesConditionsType = "javascript"
	GateFullUpdateDtoRulesConditionsTypeLocale          GateFullUpdateDtoRulesConditionsType = "locale"
	GateFullUpdateDtoRulesConditionsTypeOsName          GateFullUpdateDtoRulesConditionsType = "os_name"
	GateFullUpdateDtoRulesConditionsTypeOsVersion       GateFullUpdateDtoRulesConditionsType = "os_version"
	GateFullUpdateDtoRulesConditionsTypePassesGate      GateFullUpdateDtoRulesConditionsType = "passes_gate"
	GateFullUpdateDtoRulesConditionsTypePassesSegment   GateFullUpdateDtoRulesConditionsType = "passes_segment"
	GateFullUpdateDtoRulesConditionsTypePublic          GateFullUpdateDtoRulesConditionsType = "public"
	GateFullUpdateDtoRulesConditionsTypeTargetApp       GateFullUpdateDtoRulesConditionsType = "target_app"
	GateFullUpdateDtoRulesConditionsTypeTime            GateFullUpdateDtoRulesConditionsType = "time"
	GateFullUpdateDtoRulesConditionsTypeUnitId          GateFullUpdateDtoRulesConditionsType = "unit_id"
	GateFullUpdateDtoRulesConditionsTypeUrl             GateFullUpdateDtoRulesConditionsType = "url"
	GateFullUpdateDtoRulesConditionsTypeUserId          GateFullUpdateDtoRulesConditionsType = "user_id"
)

// Defines values for GateFullUpdateDtoType.
const (
	GateFullUpdateDtoTypePERMANENT GateFullUpdateDtoType = "PERMANENT"
	GateFullUpdateDtoTypeTEMPORARY GateFullUpdateDtoType = "TEMPORARY"
)

// Defines values for GatePartialUpdateDtoRulesConditionsType.
const (
	GatePartialUpdateDtoRulesConditionsTypeAppVersion      GatePartialUpdateDtoRulesConditionsType = "app_version"
	GatePartialUpdateDtoRulesConditionsTypeBrowserName     GatePartialUpdateDtoRulesConditionsType = "browser_name"
	GatePartialUpdateDtoRulesConditionsTypeBrowserVersion  GatePartialUpdateDtoRulesConditionsType = "browser_version"
	GatePartialUpdateDtoRulesConditionsTypeCountry         GatePartialUpdateDtoRulesConditionsType = "country"
	GatePartialUpdateDtoRulesConditionsTypeCustomField     GatePartialUpdateDtoRulesConditionsType = "custom_field"
	GatePartialUpdateDtoRulesConditionsTypeDeviceModel     GatePartialUpdateDtoRulesConditionsType = "device_model"
	GatePartialUpdateDtoRulesConditionsTypeEmail           GatePartialUpdateDtoRulesConditionsType = "email"
	GatePartialUpdateDtoRulesConditionsTypeEnvironmentTier GatePartialUpdateDtoRulesConditionsType = "environment_tier"
	GatePartialUpdateDtoRulesConditionsTypeFailsGate       GatePartialUpdateDtoRulesConditionsType = "fails_gate"
	GatePartialUpdateDtoRulesConditionsTypeFailsSegment    GatePartialUpdateDtoRulesConditionsType = "fails_segment"
	GatePartialUpdateDtoRulesConditionsTypeIpAddress       GatePartialUpdateDtoRulesConditionsType = "ip_address"
	GatePartialUpdateDtoRulesConditionsTypeJavascript      GatePartialUpdateDtoRulesConditionsType = "javascript"
	GatePartialUpdateDtoRulesConditionsTypeLocale          GatePartialUpdateDtoRulesConditionsType = "locale"
	GatePartialUpdateDtoRulesConditionsTypeOsName          GatePartialUpdateDtoRulesConditionsType = "os_name"
	GatePartialUpdateDtoRulesConditionsTypeOsVersion       GatePartialUpdateDtoRulesConditionsType = "os_version"
	GatePartialUpdateDtoRulesConditionsTypePassesGate      GatePartialUpdateDtoRulesConditionsType = "passes_gate"
	GatePartialUpdateDtoRulesConditionsTypePassesSegment   GatePartialUpdateDtoRulesConditionsType = "passes_segment"
	GatePartialUpdateDtoRulesConditionsTypePublic          GatePartialUpdateDtoRulesConditionsType = "public"
	GatePartialUpdateDtoRulesConditionsTypeTargetApp       GatePartialUpdateDtoRulesConditionsType = "target_app"
	GatePartialUpdateDtoRulesConditionsTypeTime            GatePartialUpdateDtoRulesConditionsType = "time"
	GatePartialUpdateDtoRulesConditionsTypeUnitId          GatePartialUpdateDtoRulesConditionsType = "unit_id"
	GatePartialUpdateDtoRulesConditionsTypeUrl             GatePartialUpdateDtoRulesConditionsType = "url"
	GatePartialUpdateDtoRulesConditionsTypeUserId          GatePartialUpdateDtoRulesConditionsType = "user_id"
)

// Defines values for GatePartialUpdateDtoType.
const (
	GatePartialUpdateDtoTypePERMANENT GatePartialUpdateDtoType = "PERMANENT"
	GatePartialUpdateDtoTypeTEMPORARY GatePartialUpdateDtoType = "TEMPORARY"
)

// Defines values for GatePulseResultsDtoMonitoringMetricsDirectionality.
const (
	GatePulseResultsDtoMonitoringMetricsDirectionalityDecrease GatePulseResultsDtoMonitoringMetricsDirectionality = "decrease"
	GatePulseResultsDtoMonitoringMetricsDirectionalityIncrease GatePulseResultsDtoMonitoringMetricsDirectionality = "increase"
)

// Defines values for IngestionBackfillContractDtoDataset.
const (
	IngestionBackfillContractDtoDatasetEntityProperties IngestionBackfillContractDtoDataset = "entity_properties"
	IngestionBackfillContractDtoDatasetEvents           IngestionBackfillContractDtoDataset = "Events"
	IngestionBackfillContractDtoDatasetExportExposures  IngestionBackfillContractDtoDataset = "export_exposures"
	IngestionBackfillContractDtoDatasetMetrics          IngestionBackfillContractDtoDataset = "Metrics"
)

// Defines values for IngestionBackfillContractDtoType.
const (
	IngestionBackfillContractDtoTypeAdls         IngestionBackfillContractDtoType = "adls"
	IngestionBackfillContractDtoTypeAthena       IngestionBackfillContractDtoType = "athena"
	IngestionBackfillContractDtoTypeAzureSynapse IngestionBackfillContractDtoType = "azure-synapse"
	IngestionBackfillContractDtoTypeBigqueryV2   IngestionBackfillContractDtoType = "bigquery-v2"
	IngestionBackfillContractDtoTypeDatabricks   IngestionBackfillContractDtoType = "databricks"
	IngestionBackfillContractDtoTypeRedshift     IngestionBackfillContractDtoType = "redshift"
	IngestionBackfillContractDtoTypeS3           IngestionBackfillContractDtoType = "s3"
	IngestionBackfillContractDtoTypeSnowflakeV2  IngestionBackfillContractDtoType = "snowflake-v2"
)

// Defines values for IngestionScheduleUpdateContractDtoDataset.
const (
	IngestionScheduleUpdateContractDtoDatasetEntityProperties IngestionScheduleUpdateContractDtoDataset = "entity_properties"
	IngestionScheduleUpdateContractDtoDatasetEvents           IngestionScheduleUpdateContractDtoDataset = "Events"
	IngestionScheduleUpdateContractDtoDatasetExportExposures  IngestionScheduleUpdateContractDtoDataset = "export_exposures"
	IngestionScheduleUpdateContractDtoDatasetMetrics          IngestionScheduleUpdateContractDtoDataset = "Metrics"
)

// Defines values for IngestionSourceCreateContractDto0Dataset.
const (
	IngestionSourceCreateContractDto0DatasetMetrics IngestionSourceCreateContractDto0Dataset = "Metrics"
)

// Defines values for IngestionSourceCreateContractDto0Type.
const (
	IngestionSourceCreateContractDto0TypeAdls         IngestionSourceCreateContractDto0Type = "adls"
	IngestionSourceCreateContractDto0TypeAthena       IngestionSourceCreateContractDto0Type = "athena"
	IngestionSourceCreateContractDto0TypeAzureSynapse IngestionSourceCreateContractDto0Type = "azure-synapse"
	IngestionSourceCreateContractDto0TypeBigqueryV2   IngestionSourceCreateContractDto0Type = "bigquery-v2"
	IngestionSourceCreateContractDto0TypeDatabricks   IngestionSourceCreateContractDto0Type = "databricks"
	IngestionSourceCreateContractDto0TypeRedshift     IngestionSourceCreateContractDto0Type = "redshift"
	IngestionSourceCreateContractDto0TypeS3           IngestionSourceCreateContractDto0Type = "s3"
	IngestionSourceCreateContractDto0TypeSnowflakeV2  IngestionSourceCreateContractDto0Type = "snowflake-v2"
)

// Defines values for IngestionSourceCreateContractDto0UseDeltaSharing.
const (
	IngestionSourceCreateContractDto0UseDeltaSharingTrue IngestionSourceCreateContractDto0UseDeltaSharing = true
)

// Defines values for IngestionSourceCreateContractDto1Dataset.
const (
	IngestionSourceCreateContractDto1DatasetEvents IngestionSourceCreateContractDto1Dataset = "Events"
)

// Defines values for IngestionSourceCreateContractDto1Type.
const (
	IngestionSourceCreateContractDto1TypeAdls         IngestionSourceCreateContractDto1Type = "adls"
	IngestionSourceCreateContractDto1TypeAthena       IngestionSourceCreateContractDto1Type = "athena"
	IngestionSourceCreateContractDto1TypeAzureSynapse IngestionSourceCreateContractDto1Type = "azure-synapse"
	IngestionSourceCreateContractDto1TypeBigqueryV2   IngestionSourceCreateContractDto1Type = "bigquery-v2"
	IngestionSourceCreateContractDto1TypeDatabricks   IngestionSourceCreateContractDto1Type = "databricks"
	IngestionSourceCreateContractDto1TypeRedshift     IngestionSourceCreateContractDto1Type = "redshift"
	IngestionSourceCreateContractDto1TypeS3           IngestionSourceCreateContractDto1Type = "s3"
	IngestionSourceCreateContractDto1TypeSnowflakeV2  IngestionSourceCreateContractDto1Type = "snowflake-v2"
)

// Defines values for IngestionSourceCreateContractDto1UseDeltaSharing.
const (
	IngestionSourceCreateContractDto1UseDeltaSharingTrue IngestionSourceCreateContractDto1UseDeltaSharing = true
)

// Defines values for IngestionSourceCreateContractDto2Dataset.
const (
	IngestionSourceCreateContractDto2DatasetExportExposures IngestionSourceCreateContractDto2Dataset = "export_exposures"
	IngestionSourceCreateContractDto2DatasetExposures       IngestionSourceCreateContractDto2Dataset = "Exposures"
)

// Defines values for IngestionSourceCreateContractDto2Type.
const (
	IngestionSourceCreateContractDto2TypeAdls         IngestionSourceCreateContractDto2Type = "adls"
	IngestionSourceCreateContractDto2TypeAthena       IngestionSourceCreateContractDto2Type = "athena"
	IngestionSourceCreateContractDto2TypeAzureSynapse IngestionSourceCreateContractDto2Type = "azure-synapse"
	IngestionSourceCreateContractDto2TypeBigqueryV2   IngestionSourceCreateContractDto2Type = "bigquery-v2"
	IngestionSourceCreateContractDto2TypeDatabricks   IngestionSourceCreateContractDto2Type = "databricks"
	IngestionSourceCreateContractDto2TypeRedshift     IngestionSourceCreateContractDto2Type = "redshift"
	IngestionSourceCreateContractDto2TypeS3           IngestionSourceCreateContractDto2Type = "s3"
	IngestionSourceCreateContractDto2TypeSnowflakeV2  IngestionSourceCreateContractDto2Type = "snowflake-v2"
)

// Defines values for IngestionSourceCreateContractDto2UseDeltaSharing.
const (
	IngestionSourceCreateContractDto2UseDeltaSharingTrue IngestionSourceCreateContractDto2UseDeltaSharing = true
)

// Defines values for IngestionUpdateContractDto0Dataset.
const (
	IngestionUpdateContractDto0DatasetMetrics IngestionUpdateContractDto0Dataset = "Metrics"
)

// Defines values for IngestionUpdateContractDto0Type.
const (
	IngestionUpdateContractDto0TypeAdls         IngestionUpdateContractDto0Type = "adls"
	IngestionUpdateContractDto0TypeAthena       IngestionUpdateContractDto0Type = "athena"
	IngestionUpdateContractDto0TypeAzureSynapse IngestionUpdateContractDto0Type = "azure-synapse"
	IngestionUpdateContractDto0TypeBigqueryV2   IngestionUpdateContractDto0Type = "bigquery-v2"
	IngestionUpdateContractDto0TypeDatabricks   IngestionUpdateContractDto0Type = "databricks"
	IngestionUpdateContractDto0TypeRedshift     IngestionUpdateContractDto0Type = "redshift"
	IngestionUpdateContractDto0TypeS3           IngestionUpdateContractDto0Type = "s3"
	IngestionUpdateContractDto0TypeSnowflakeV2  IngestionUpdateContractDto0Type = "snowflake-v2"
)

// Defines values for IngestionUpdateContractDto1Dataset.
const (
	IngestionUpdateContractDto1DatasetEvents IngestionUpdateContractDto1Dataset = "Events"
)

// Defines values for IngestionUpdateContractDto1Type.
const (
	IngestionUpdateContractDto1TypeAdls         IngestionUpdateContractDto1Type = "adls"
	IngestionUpdateContractDto1TypeAthena       IngestionUpdateContractDto1Type = "athena"
	IngestionUpdateContractDto1TypeAzureSynapse IngestionUpdateContractDto1Type = "azure-synapse"
	IngestionUpdateContractDto1TypeBigqueryV2   IngestionUpdateContractDto1Type = "bigquery-v2"
	IngestionUpdateContractDto1TypeDatabricks   IngestionUpdateContractDto1Type = "databricks"
	IngestionUpdateContractDto1TypeRedshift     IngestionUpdateContractDto1Type = "redshift"
	IngestionUpdateContractDto1TypeS3           IngestionUpdateContractDto1Type = "s3"
	IngestionUpdateContractDto1TypeSnowflakeV2  IngestionUpdateContractDto1Type = "snowflake-v2"
)

// Defines values for IngestionUpdateContractDto2Dataset.
const (
	IngestionUpdateContractDto2DatasetExportExposures IngestionUpdateContractDto2Dataset = "export_exposures"
	IngestionUpdateContractDto2DatasetExposures       IngestionUpdateContractDto2Dataset = "Exposures"
)

// Defines values for IngestionUpdateContractDto2Type.
const (
	IngestionUpdateContractDto2TypeAdls         IngestionUpdateContractDto2Type = "adls"
	IngestionUpdateContractDto2TypeAthena       IngestionUpdateContractDto2Type = "athena"
	IngestionUpdateContractDto2TypeAzureSynapse IngestionUpdateContractDto2Type = "azure-synapse"
	IngestionUpdateContractDto2TypeBigqueryV2   IngestionUpdateContractDto2Type = "bigquery-v2"
	IngestionUpdateContractDto2TypeDatabricks   IngestionUpdateContractDto2Type = "databricks"
	IngestionUpdateContractDto2TypeRedshift     IngestionUpdateContractDto2Type = "redshift"
	IngestionUpdateContractDto2TypeS3           IngestionUpdateContractDto2Type = "s3"
	IngestionUpdateContractDto2TypeSnowflakeV2  IngestionUpdateContractDto2Type = "snowflake-v2"
)

// Defines values for KeyCreateContractDtoScopes.
const (
	KeyCreateContractDtoScopesCanAccessKeys             KeyCreateContractDtoScopes = "can_access_keys"
	KeyCreateContractDtoScopesClientDownloadConfigSpecs KeyCreateContractDtoScopes = "client_download_config_specs"
	KeyCreateContractDtoScopesNoneHashEnabled           KeyCreateContractDtoScopes = "none_hash_enabled"
	KeyCreateContractDtoScopesOmniReadOnly              KeyCreateContractDtoScopes = "omni_read_only"
	KeyCreateContractDtoScopesOmniReadWrite             KeyCreateContractDtoScopes = "omni_read_write"
)

// Defines values for KeyCreateContractDtoType.
const (
	KeyCreateContractDtoTypeCLIENT  KeyCreateContractDtoType = "CLIENT"
	KeyCreateContractDtoTypeCONSOLE KeyCreateContractDtoType = "CONSOLE"
	KeyCreateContractDtoTypeSCIM    KeyCreateContractDtoType = "SCIM"
	KeyCreateContractDtoTypeSERVER  KeyCreateContractDtoType = "SERVER"
)

// Defines values for KeyDtoScopes.
const (
	KeyDtoScopesCanAccessKeys             KeyDtoScopes = "can_access_keys"
	KeyDtoScopesClientDownloadConfigSpecs KeyDtoScopes = "client_download_config_specs"
	KeyDtoScopesNoneHashEnabled           KeyDtoScopes = "none_hash_enabled"
	KeyDtoScopesOmniReadOnly              KeyDtoScopes = "omni_read_only"
	KeyDtoScopesOmniReadWrite             KeyDtoScopes = "omni_read_write"
)

// Defines values for KeyDtoStatus.
const (
	Active      KeyDtoStatus = "active"
	Deactivated KeyDtoStatus = "deactivated"
)

// Defines values for KeyDtoType.
const (
	KeyDtoTypeCLIENT  KeyDtoType = "CLIENT"
	KeyDtoTypeCONSOLE KeyDtoType = "CONSOLE"
	KeyDtoTypeSCIM    KeyDtoType = "SCIM"
	KeyDtoTypeSERVER  KeyDtoType = "SERVER"
)

// Defines values for KeyUpdateContractDtoScopes.
const (
	CanAccessKeys             KeyUpdateContractDtoScopes = "can_access_keys"
	ClientDownloadConfigSpecs KeyUpdateContractDtoScopes = "client_download_config_specs"
	NoneHashEnabled           KeyUpdateContractDtoScopes = "none_hash_enabled"
	OmniReadOnly              KeyUpdateContractDtoScopes = "omni_read_only"
	OmniReadWrite             KeyUpdateContractDtoScopes = "omni_read_write"
)

// Defines values for LayerContractDtoParametersType.
const (
	LayerContractDtoParametersTypeArray   LayerContractDtoParametersType = "array"
	LayerContractDtoParametersTypeBoolean LayerContractDtoParametersType = "boolean"
	LayerContractDtoParametersTypeNumber  LayerContractDtoParametersType = "number"
	LayerContractDtoParametersTypeObject  LayerContractDtoParametersType = "object"
	LayerContractDtoParametersTypeString  LayerContractDtoParametersType = "string"
)

// Defines values for LayerFullUpdateContractDtoParametersType.
const (
	LayerFullUpdateContractDtoParametersTypeArray   LayerFullUpdateContractDtoParametersType = "array"
	LayerFullUpdateContractDtoParametersTypeBoolean LayerFullUpdateContractDtoParametersType = "boolean"
	LayerFullUpdateContractDtoParametersTypeNumber  LayerFullUpdateContractDtoParametersType = "number"
	LayerFullUpdateContractDtoParametersTypeObject  LayerFullUpdateContractDtoParametersType = "object"
	LayerFullUpdateContractDtoParametersTypeString  LayerFullUpdateContractDtoParametersType = "string"
)

// Defines values for LayerOverridesPatchDtoOp.
const (
	Add LayerOverridesPatchDtoOp = "add"
)

// Defines values for LayerPartialUpdateContractDtoParametersType.
const (
	Array   LayerPartialUpdateContractDtoParametersType = "array"
	Boolean LayerPartialUpdateContractDtoParametersType = "boolean"
	Number  LayerPartialUpdateContractDtoParametersType = "number"
	Object  LayerPartialUpdateContractDtoParametersType = "object"
	String  LayerPartialUpdateContractDtoParametersType = "string"
)

// Defines values for MetricCreationContractDtoDirectionality.
const (
	MetricCreationContractDtoDirectionalityDecrease MetricCreationContractDtoDirectionality = "decrease"
	MetricCreationContractDtoDirectionalityIncrease MetricCreationContractDtoDirectionality = "increase"
)

// Defines values for MetricCreationContractDtoFunnelCountDistinct.
const (
	MetricCreationContractDtoFunnelCountDistinctEvents MetricCreationContractDtoFunnelCountDistinct = "events"
	MetricCreationContractDtoFunnelCountDistinctUsers  MetricCreationContractDtoFunnelCountDistinct = "users"
)

// Defines values for MetricCreationContractDtoFunnelEventListType.
const (
	MetricCreationContractDtoFunnelEventListTypeEventCount       MetricCreationContractDtoFunnelEventListType = "event_count"
	MetricCreationContractDtoFunnelEventListTypeEventCountCustom MetricCreationContractDtoFunnelEventListType = "event_count_custom"
	MetricCreationContractDtoFunnelEventListTypeEventDau         MetricCreationContractDtoFunnelEventListType = "event_dau"
	MetricCreationContractDtoFunnelEventListTypeEventUser        MetricCreationContractDtoFunnelEventListType = "event_user"
)

// Defines values for MetricCreationContractDtoMetricEventsCriteriaCondition.
const (
	MetricCreationContractDtoMetricEventsCriteriaConditionAfterExposure    MetricCreationContractDtoMetricEventsCriteriaCondition = "after_exposure"
	MetricCreationContractDtoMetricEventsCriteriaConditionContains         MetricCreationContractDtoMetricEventsCriteriaCondition = "contains"
	MetricCreationContractDtoMetricEventsCriteriaConditionEndsWith         MetricCreationContractDtoMetricEventsCriteriaCondition = "ends_with"
	MetricCreationContractDtoMetricEventsCriteriaConditionEqual            MetricCreationContractDtoMetricEventsCriteriaCondition = "="
	MetricCreationContractDtoMetricEventsCriteriaConditionGreaterThan      MetricCreationContractDtoMetricEventsCriteriaCondition = ">"
	MetricCreationContractDtoMetricEventsCriteriaConditionGreaterThanEqual MetricCreationContractDtoMetricEventsCriteriaCondition = ">="
	MetricCreationContractDtoMetricEventsCriteriaConditionIn               MetricCreationContractDtoMetricEventsCriteriaCondition = "in"
	MetricCreationContractDtoMetricEventsCriteriaConditionIsFalse          MetricCreationContractDtoMetricEventsCriteriaCondition = "is_false"
	MetricCreationContractDtoMetricEventsCriteriaConditionIsNull           MetricCreationContractDtoMetricEventsCriteriaCondition = "is_null"
	MetricCreationContractDtoMetricEventsCriteriaConditionIsTrue           MetricCreationContractDtoMetricEventsCriteriaCondition = "is_true"
	MetricCreationContractDtoMetricEventsCriteriaConditionLessThan         MetricCreationContractDtoMetricEventsCriteriaCondition = "<"
	MetricCreationContractDtoMetricEventsCriteriaConditionLessThanEqual    MetricCreationContractDtoMetricEventsCriteriaCondition = "<="
	MetricCreationContractDtoMetricEventsCriteriaConditionNonNull          MetricCreationContractDtoMetricEventsCriteriaCondition = "non_null"
	MetricCreationContractDtoMetricEventsCriteriaConditionNotContains      MetricCreationContractDtoMetricEventsCriteriaCondition = "not_contains"
	MetricCreationContractDtoMetricEventsCriteriaConditionNotIn            MetricCreationContractDtoMetricEventsCriteriaCondition = "not_in"
	MetricCreationContractDtoMetricEventsCriteriaConditionSqlFilter        MetricCreationContractDtoMetricEventsCriteriaCondition = "sql_filter"
	MetricCreationContractDtoMetricEventsCriteriaConditionStartsWith       MetricCreationContractDtoMetricEventsCriteriaCondition = "starts_with"
)

// Defines values for MetricCreationContractDtoMetricEventsCriteriaType.
const (
	MetricCreationContractDtoMetricEventsCriteriaTypeMetadata   MetricCreationContractDtoMetricEventsCriteriaType = "metadata"
	MetricCreationContractDtoMetricEventsCriteriaTypeUser       MetricCreationContractDtoMetricEventsCriteriaType = "user"
	MetricCreationContractDtoMetricEventsCriteriaTypeUserCustom MetricCreationContractDtoMetricEventsCriteriaType = "user_custom"
	MetricCreationContractDtoMetricEventsCriteriaTypeValue      MetricCreationContractDtoMetricEventsCriteriaType = "value"
)

// Defines values for MetricCreationContractDtoMetricEventsType.
const (
	MetricCreationContractDtoMetricEventsTypeCount         MetricCreationContractDtoMetricEventsType = "count"
	MetricCreationContractDtoMetricEventsTypeCountDistinct MetricCreationContractDtoMetricEventsType = "count_distinct"
	MetricCreationContractDtoMetricEventsTypeMetadata      MetricCreationContractDtoMetricEventsType = "metadata"
	MetricCreationContractDtoMetricEventsTypeValue         MetricCreationContractDtoMetricEventsType = "value"
)

// Defines values for MetricCreationContractDtoType.
const (
	MetricCreationContractDtoTypeComposite        MetricCreationContractDtoType = "composite"
	MetricCreationContractDtoTypeCompositeSum     MetricCreationContractDtoType = "composite_sum"
	MetricCreationContractDtoTypeEventCountCustom MetricCreationContractDtoType = "event_count_custom"
	MetricCreationContractDtoTypeEventUser        MetricCreationContractDtoType = "event_user"
	MetricCreationContractDtoTypeFunnel           MetricCreationContractDtoType = "funnel"
	MetricCreationContractDtoTypeImportWindow     MetricCreationContractDtoType = "import_window"
	MetricCreationContractDtoTypeMean             MetricCreationContractDtoType = "mean"
	MetricCreationContractDtoTypeRatio            MetricCreationContractDtoType = "ratio"
	MetricCreationContractDtoTypeSetupIncomplete  MetricCreationContractDtoType = "setup_incomplete"
	MetricCreationContractDtoTypeSum              MetricCreationContractDtoType = "sum"
	MetricCreationContractDtoTypeUndefined        MetricCreationContractDtoType = "undefined"
	MetricCreationContractDtoTypeUserWarehouse    MetricCreationContractDtoType = "user_warehouse"
)

// Defines values for MetricCreationContractDtoWarehouseNativeAggregation.
const (
	MetricCreationContractDtoWarehouseNativeAggregationCount              MetricCreationContractDtoWarehouseNativeAggregation = "count"
	MetricCreationContractDtoWarehouseNativeAggregationCountDistinct      MetricCreationContractDtoWarehouseNativeAggregation = "count_distinct"
	MetricCreationContractDtoWarehouseNativeAggregationDailyParticipation MetricCreationContractDtoWarehouseNativeAggregation = "daily_participation"
	MetricCreationContractDtoWarehouseNativeAggregationEmpty              MetricCreationContractDtoWarehouseNativeAggregation = ""
	MetricCreationContractDtoWarehouseNativeAggregationFirstValue         MetricCreationContractDtoWarehouseNativeAggregation = "first_value"
	MetricCreationContractDtoWarehouseNativeAggregationFunnel             MetricCreationContractDtoWarehouseNativeAggregation = "funnel"
	MetricCreationContractDtoWarehouseNativeAggregationLatestValue        MetricCreationContractDtoWarehouseNativeAggregation = "latest_value"
	MetricCreationContractDtoWarehouseNativeAggregationMax                MetricCreationContractDtoWarehouseNativeAggregation = "max"
	MetricCreationContractDtoWarehouseNativeAggregationMean               MetricCreationContractDtoWarehouseNativeAggregation = "mean"
	MetricCreationContractDtoWarehouseNativeAggregationMin                MetricCreationContractDtoWarehouseNativeAggregation = "min"
	MetricCreationContractDtoWarehouseNativeAggregationPercentile         MetricCreationContractDtoWarehouseNativeAggregation = "percentile"
	MetricCreationContractDtoWarehouseNativeAggregationRatio              MetricCreationContractDtoWarehouseNativeAggregation = "ratio"
	MetricCreationContractDtoWarehouseNativeAggregationRetention          MetricCreationContractDtoWarehouseNativeAggregation = "retention"
	MetricCreationContractDtoWarehouseNativeAggregationSum                MetricCreationContractDtoWarehouseNativeAggregation = "sum"
)

// Defines values for MetricCreationContractDtoWarehouseNativeCriteriaCondition.
const (
	MetricCreationContractDtoWarehouseNativeCriteriaConditionAfterExposure    MetricCreationContractDtoWarehouseNativeCriteriaCondition = "after_exposure"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionContains         MetricCreationContractDtoWarehouseNativeCriteriaCondition = "contains"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionEndsWith         MetricCreationContractDtoWarehouseNativeCriteriaCondition = "ends_with"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionEqual            MetricCreationContractDtoWarehouseNativeCriteriaCondition = "="
	MetricCreationContractDtoWarehouseNativeCriteriaConditionGreaterThan      MetricCreationContractDtoWarehouseNativeCriteriaCondition = ">"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionGreaterThanEqual MetricCreationContractDtoWarehouseNativeCriteriaCondition = ">="
	MetricCreationContractDtoWarehouseNativeCriteriaConditionIn               MetricCreationContractDtoWarehouseNativeCriteriaCondition = "in"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionIsFalse          MetricCreationContractDtoWarehouseNativeCriteriaCondition = "is_false"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionIsNull           MetricCreationContractDtoWarehouseNativeCriteriaCondition = "is_null"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionIsTrue           MetricCreationContractDtoWarehouseNativeCriteriaCondition = "is_true"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionLessThan         MetricCreationContractDtoWarehouseNativeCriteriaCondition = "<"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionLessThanEqual    MetricCreationContractDtoWarehouseNativeCriteriaCondition = "<="
	MetricCreationContractDtoWarehouseNativeCriteriaConditionNonNull          MetricCreationContractDtoWarehouseNativeCriteriaCondition = "non_null"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionNotContains      MetricCreationContractDtoWarehouseNativeCriteriaCondition = "not_contains"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionNotIn            MetricCreationContractDtoWarehouseNativeCriteriaCondition = "not_in"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionSqlFilter        MetricCreationContractDtoWarehouseNativeCriteriaCondition = "sql_filter"
	MetricCreationContractDtoWarehouseNativeCriteriaConditionStartsWith       MetricCreationContractDtoWarehouseNativeCriteriaCondition = "starts_with"
)

// Defines values for MetricCreationContractDtoWarehouseNativeCriteriaType.
const (
	MetricCreationContractDtoWarehouseNativeCriteriaTypeMetadata   MetricCreationContractDtoWarehouseNativeCriteriaType = "metadata"
	MetricCreationContractDtoWarehouseNativeCriteriaTypeUser       MetricCreationContractDtoWarehouseNativeCriteriaType = "user"
	MetricCreationContractDtoWarehouseNativeCriteriaTypeUserCustom MetricCreationContractDtoWarehouseNativeCriteriaType = "user_custom"
	MetricCreationContractDtoWarehouseNativeCriteriaTypeValue      MetricCreationContractDtoWarehouseNativeCriteriaType = "value"
)

// Defines values for MetricCreationContractDtoWarehouseNativeDenominatorAggregation.
const (
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationCount              MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "count"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationCountDistinct      MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "count_distinct"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationDailyParticipation MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "daily_participation"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationEmpty              MetricCreationContractDtoWarehouseNativeDenominatorAggregation = ""
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationFirstValue         MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "first_value"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationFunnel             MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "funnel"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationLatestValue        MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "latest_value"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationMax                MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "max"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationMean               MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "mean"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationMin                MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "min"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationPercentile         MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "percentile"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationRatio              MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "ratio"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationRetention          MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "retention"
	MetricCreationContractDtoWarehouseNativeDenominatorAggregationSum                MetricCreationContractDtoWarehouseNativeDenominatorAggregation = "sum"
)

// Defines values for MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition.
const (
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionAfterExposure    MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "after_exposure"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionContains         MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "contains"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionEndsWith         MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "ends_with"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionEqual            MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "="
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionGreaterThan      MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = ">"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionGreaterThanEqual MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = ">="
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionIn               MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "in"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionIsFalse          MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_false"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionIsNull           MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_null"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionIsTrue           MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_true"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionLessThan         MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "<"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionLessThanEqual    MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "<="
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionNonNull          MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "non_null"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionNotContains      MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "not_contains"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionNotIn            MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "not_in"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionSqlFilter        MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "sql_filter"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaConditionStartsWith       MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition = "starts_with"
)

// Defines values for MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType.
const (
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaTypeMetadata   MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType = "metadata"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaTypeUser       MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType = "user"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaTypeUserCustom MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType = "user_custom"
	MetricCreationContractDtoWarehouseNativeDenominatorCriteriaTypeValue      MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType = "value"
)

// Defines values for MetricCreationContractDtoWarehouseNativeFunnelCountDistinct.
const (
	MetricCreationContractDtoWarehouseNativeFunnelCountDistinctSessions MetricCreationContractDtoWarehouseNativeFunnelCountDistinct = "sessions"
	MetricCreationContractDtoWarehouseNativeFunnelCountDistinctUsers    MetricCreationContractDtoWarehouseNativeFunnelCountDistinct = "users"
)

// Defines values for MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition.
const (
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionAfterExposure    MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "after_exposure"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionContains         MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "contains"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionEndsWith         MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "ends_with"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionEqual            MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "="
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionGreaterThan      MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = ">"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionGreaterThanEqual MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = ">="
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionIn               MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "in"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsFalse          MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_false"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsNull           MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_null"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsTrue           MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_true"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionLessThan         MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "<"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionLessThanEqual    MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "<="
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionNonNull          MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "non_null"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionNotContains      MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "not_contains"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionNotIn            MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "not_in"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionSqlFilter        MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "sql_filter"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaConditionStartsWith       MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "starts_with"
)

// Defines values for MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType.
const (
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaTypeMetadata   MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType = "metadata"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaTypeUser       MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType = "user"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaTypeUserCustom MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType = "user_custom"
	MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaTypeValue      MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType = "value"
)

// Defines values for MetricCreationContractDtoWarehouseNativeFunnelStartCriteria.
const (
	MetricCreationContractDtoWarehouseNativeFunnelStartCriteriaExposure   MetricCreationContractDtoWarehouseNativeFunnelStartCriteria = "exposure"
	MetricCreationContractDtoWarehouseNativeFunnelStartCriteriaStartEvent MetricCreationContractDtoWarehouseNativeFunnelStartCriteria = "start_event"
)

// Defines values for MetricCreationContractDtoWarehouseNativeNumeratorAggregation.
const (
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationCount              MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "count"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationCountDistinct      MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "count_distinct"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationDailyParticipation MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "daily_participation"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationEmpty              MetricCreationContractDtoWarehouseNativeNumeratorAggregation = ""
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationFirstValue         MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "first_value"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationFunnel             MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "funnel"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationLatestValue        MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "latest_value"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationMax                MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "max"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationMean               MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "mean"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationMin                MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "min"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationPercentile         MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "percentile"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationRatio              MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "ratio"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationRetention          MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "retention"
	MetricCreationContractDtoWarehouseNativeNumeratorAggregationSum                MetricCreationContractDtoWarehouseNativeNumeratorAggregation = "sum"
)

// Defines values for MetricSourceContractDtoSourceType.
const (
	MetricSourceContractDtoSourceTypeQuery MetricSourceContractDtoSourceType = "query"
	MetricSourceContractDtoSourceTypeTable MetricSourceContractDtoSourceType = "table"
)

// Defines values for MetricSourceCreationContractDtoSourceType.
const (
	MetricSourceCreationContractDtoSourceTypeQuery MetricSourceCreationContractDtoSourceType = "query"
	MetricSourceCreationContractDtoSourceTypeTable MetricSourceCreationContractDtoSourceType = "table"
)

// Defines values for MetricSourceUpdateContractDtoSourceType.
const (
	Query MetricSourceUpdateContractDtoSourceType = "query"
	Table MetricSourceUpdateContractDtoSourceType = "table"
)

// Defines values for MetricsUpdateContractDtoDirectionality.
const (
	Decrease MetricsUpdateContractDtoDirectionality = "decrease"
	Increase MetricsUpdateContractDtoDirectionality = "increase"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeAggregation.
const (
	MetricsUpdateContractDtoWarehouseNativeAggregationCount              MetricsUpdateContractDtoWarehouseNativeAggregation = "count"
	MetricsUpdateContractDtoWarehouseNativeAggregationCountDistinct      MetricsUpdateContractDtoWarehouseNativeAggregation = "count_distinct"
	MetricsUpdateContractDtoWarehouseNativeAggregationDailyParticipation MetricsUpdateContractDtoWarehouseNativeAggregation = "daily_participation"
	MetricsUpdateContractDtoWarehouseNativeAggregationEmpty              MetricsUpdateContractDtoWarehouseNativeAggregation = ""
	MetricsUpdateContractDtoWarehouseNativeAggregationFirstValue         MetricsUpdateContractDtoWarehouseNativeAggregation = "first_value"
	MetricsUpdateContractDtoWarehouseNativeAggregationFunnel             MetricsUpdateContractDtoWarehouseNativeAggregation = "funnel"
	MetricsUpdateContractDtoWarehouseNativeAggregationLatestValue        MetricsUpdateContractDtoWarehouseNativeAggregation = "latest_value"
	MetricsUpdateContractDtoWarehouseNativeAggregationMax                MetricsUpdateContractDtoWarehouseNativeAggregation = "max"
	MetricsUpdateContractDtoWarehouseNativeAggregationMean               MetricsUpdateContractDtoWarehouseNativeAggregation = "mean"
	MetricsUpdateContractDtoWarehouseNativeAggregationMin                MetricsUpdateContractDtoWarehouseNativeAggregation = "min"
	MetricsUpdateContractDtoWarehouseNativeAggregationPercentile         MetricsUpdateContractDtoWarehouseNativeAggregation = "percentile"
	MetricsUpdateContractDtoWarehouseNativeAggregationRatio              MetricsUpdateContractDtoWarehouseNativeAggregation = "ratio"
	MetricsUpdateContractDtoWarehouseNativeAggregationRetention          MetricsUpdateContractDtoWarehouseNativeAggregation = "retention"
	MetricsUpdateContractDtoWarehouseNativeAggregationSum                MetricsUpdateContractDtoWarehouseNativeAggregation = "sum"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeCriteriaCondition.
const (
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionAfterExposure    MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "after_exposure"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionContains         MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "contains"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionEndsWith         MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "ends_with"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionEqual            MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "="
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionGreaterThan      MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = ">"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionGreaterThanEqual MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = ">="
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionIn               MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "in"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionIsFalse          MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "is_false"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionIsNull           MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "is_null"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionIsTrue           MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "is_true"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionLessThan         MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "<"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionLessThanEqual    MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "<="
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionNonNull          MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "non_null"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionNotContains      MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "not_contains"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionNotIn            MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "not_in"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionSqlFilter        MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "sql_filter"
	MetricsUpdateContractDtoWarehouseNativeCriteriaConditionStartsWith       MetricsUpdateContractDtoWarehouseNativeCriteriaCondition = "starts_with"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeCriteriaType.
const (
	MetricsUpdateContractDtoWarehouseNativeCriteriaTypeMetadata   MetricsUpdateContractDtoWarehouseNativeCriteriaType = "metadata"
	MetricsUpdateContractDtoWarehouseNativeCriteriaTypeUser       MetricsUpdateContractDtoWarehouseNativeCriteriaType = "user"
	MetricsUpdateContractDtoWarehouseNativeCriteriaTypeUserCustom MetricsUpdateContractDtoWarehouseNativeCriteriaType = "user_custom"
	MetricsUpdateContractDtoWarehouseNativeCriteriaTypeValue      MetricsUpdateContractDtoWarehouseNativeCriteriaType = "value"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation.
const (
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationCount              MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "count"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationCountDistinct      MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "count_distinct"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationDailyParticipation MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "daily_participation"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationEmpty              MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = ""
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationFirstValue         MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "first_value"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationFunnel             MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "funnel"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationLatestValue        MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "latest_value"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationMax                MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "max"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationMean               MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "mean"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationMin                MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "min"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationPercentile         MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "percentile"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationRatio              MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "ratio"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationRetention          MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "retention"
	MetricsUpdateContractDtoWarehouseNativeDenominatorAggregationSum                MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation = "sum"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition.
const (
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionAfterExposure    MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "after_exposure"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionContains         MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "contains"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionEndsWith         MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "ends_with"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionEqual            MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "="
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionGreaterThan      MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = ">"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionGreaterThanEqual MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = ">="
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionIn               MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "in"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionIsFalse          MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_false"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionIsNull           MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_null"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionIsTrue           MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "is_true"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionLessThan         MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "<"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionLessThanEqual    MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "<="
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionNonNull          MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "non_null"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionNotContains      MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "not_contains"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionNotIn            MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "not_in"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionSqlFilter        MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "sql_filter"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaConditionStartsWith       MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition = "starts_with"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType.
const (
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaTypeMetadata   MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType = "metadata"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaTypeUser       MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType = "user"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaTypeUserCustom MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType = "user_custom"
	MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaTypeValue      MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType = "value"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeFunnelCountDistinct.
const (
	Sessions MetricsUpdateContractDtoWarehouseNativeFunnelCountDistinct = "sessions"
	Users    MetricsUpdateContractDtoWarehouseNativeFunnelCountDistinct = "users"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition.
const (
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionAfterExposure    MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "after_exposure"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionContains         MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "contains"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionEndsWith         MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "ends_with"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionEqual            MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "="
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionGreaterThan      MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = ">"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionGreaterThanEqual MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = ">="
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionIn               MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "in"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsFalse          MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_false"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsNull           MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_null"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionIsTrue           MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "is_true"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionLessThan         MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "<"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionLessThanEqual    MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "<="
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionNonNull          MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "non_null"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionNotContains      MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "not_contains"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionNotIn            MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "not_in"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionSqlFilter        MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "sql_filter"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaConditionStartsWith       MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition = "starts_with"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType.
const (
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaTypeMetadata   MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType = "metadata"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaTypeUser       MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType = "user"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaTypeUserCustom MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType = "user_custom"
	MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaTypeValue      MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType = "value"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeFunnelStartCriteria.
const (
	Exposure   MetricsUpdateContractDtoWarehouseNativeFunnelStartCriteria = "exposure"
	StartEvent MetricsUpdateContractDtoWarehouseNativeFunnelStartCriteria = "start_event"
)

// Defines values for MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation.
const (
	Count              MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "count"
	CountDistinct      MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "count_distinct"
	DailyParticipation MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "daily_participation"
	Empty              MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = ""
	FirstValue         MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "first_value"
	Funnel             MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "funnel"
	LatestValue        MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "latest_value"
	Max                MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "max"
	Mean               MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "mean"
	Min                MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "min"
	Percentile         MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "percentile"
	Ratio              MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "ratio"
	Retention          MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "retention"
	Sum                MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation = "sum"
)

// Defines values for MultiDynamicConfigRuleAddDtoRulesConditionsType.
const (
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeAppVersion      MultiDynamicConfigRuleAddDtoRulesConditionsType = "app_version"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeBrowserName     MultiDynamicConfigRuleAddDtoRulesConditionsType = "browser_name"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeBrowserVersion  MultiDynamicConfigRuleAddDtoRulesConditionsType = "browser_version"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeCountry         MultiDynamicConfigRuleAddDtoRulesConditionsType = "country"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeCustomField     MultiDynamicConfigRuleAddDtoRulesConditionsType = "custom_field"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeDeviceModel     MultiDynamicConfigRuleAddDtoRulesConditionsType = "device_model"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeEmail           MultiDynamicConfigRuleAddDtoRulesConditionsType = "email"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeEnvironmentTier MultiDynamicConfigRuleAddDtoRulesConditionsType = "environment_tier"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeFailsGate       MultiDynamicConfigRuleAddDtoRulesConditionsType = "fails_gate"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeFailsSegment    MultiDynamicConfigRuleAddDtoRulesConditionsType = "fails_segment"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeIpAddress       MultiDynamicConfigRuleAddDtoRulesConditionsType = "ip_address"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeJavascript      MultiDynamicConfigRuleAddDtoRulesConditionsType = "javascript"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeLocale          MultiDynamicConfigRuleAddDtoRulesConditionsType = "locale"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeOsName          MultiDynamicConfigRuleAddDtoRulesConditionsType = "os_name"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeOsVersion       MultiDynamicConfigRuleAddDtoRulesConditionsType = "os_version"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypePassesGate      MultiDynamicConfigRuleAddDtoRulesConditionsType = "passes_gate"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypePassesSegment   MultiDynamicConfigRuleAddDtoRulesConditionsType = "passes_segment"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypePublic          MultiDynamicConfigRuleAddDtoRulesConditionsType = "public"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeTargetApp       MultiDynamicConfigRuleAddDtoRulesConditionsType = "target_app"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeTime            MultiDynamicConfigRuleAddDtoRulesConditionsType = "time"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeUnitId          MultiDynamicConfigRuleAddDtoRulesConditionsType = "unit_id"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeUrl             MultiDynamicConfigRuleAddDtoRulesConditionsType = "url"
	MultiDynamicConfigRuleAddDtoRulesConditionsTypeUserId          MultiDynamicConfigRuleAddDtoRulesConditionsType = "user_id"
)

// Defines values for MultiRuleDtoRulesConditionsType.
const (
	MultiRuleDtoRulesConditionsTypeAppVersion      MultiRuleDtoRulesConditionsType = "app_version"
	MultiRuleDtoRulesConditionsTypeBrowserName     MultiRuleDtoRulesConditionsType = "browser_name"
	MultiRuleDtoRulesConditionsTypeBrowserVersion  MultiRuleDtoRulesConditionsType = "browser_version"
	MultiRuleDtoRulesConditionsTypeCountry         MultiRuleDtoRulesConditionsType = "country"
	MultiRuleDtoRulesConditionsTypeCustomField     MultiRuleDtoRulesConditionsType = "custom_field"
	MultiRuleDtoRulesConditionsTypeDeviceModel     MultiRuleDtoRulesConditionsType = "device_model"
	MultiRuleDtoRulesConditionsTypeEmail           MultiRuleDtoRulesConditionsType = "email"
	MultiRuleDtoRulesConditionsTypeEnvironmentTier MultiRuleDtoRulesConditionsType = "environment_tier"
	MultiRuleDtoRulesConditionsTypeFailsGate       MultiRuleDtoRulesConditionsType = "fails_gate"
	MultiRuleDtoRulesConditionsTypeFailsSegment    MultiRuleDtoRulesConditionsType = "fails_segment"
	MultiRuleDtoRulesConditionsTypeIpAddress       MultiRuleDtoRulesConditionsType = "ip_address"
	MultiRuleDtoRulesConditionsTypeJavascript      MultiRuleDtoRulesConditionsType = "javascript"
	MultiRuleDtoRulesConditionsTypeLocale          MultiRuleDtoRulesConditionsType = "locale"
	MultiRuleDtoRulesConditionsTypeOsName          MultiRuleDtoRulesConditionsType = "os_name"
	MultiRuleDtoRulesConditionsTypeOsVersion       MultiRuleDtoRulesConditionsType = "os_version"
	MultiRuleDtoRulesConditionsTypePassesGate      MultiRuleDtoRulesConditionsType = "passes_gate"
	MultiRuleDtoRulesConditionsTypePassesSegment   MultiRuleDtoRulesConditionsType = "passes_segment"
	MultiRuleDtoRulesConditionsTypePublic          MultiRuleDtoRulesConditionsType = "public"
	MultiRuleDtoRulesConditionsTypeTargetApp       MultiRuleDtoRulesConditionsType = "target_app"
	MultiRuleDtoRulesConditionsTypeTime            MultiRuleDtoRulesConditionsType = "time"
	MultiRuleDtoRulesConditionsTypeUnitId          MultiRuleDtoRulesConditionsType = "unit_id"
	MultiRuleDtoRulesConditionsTypeUrl             MultiRuleDtoRulesConditionsType = "url"
	MultiRuleDtoRulesConditionsTypeUserId          MultiRuleDtoRulesConditionsType = "user_id"
)

// Defines values for MultiRuleUpdateDtoRulesConditionsType.
const (
	MultiRuleUpdateDtoRulesConditionsTypeAppVersion      MultiRuleUpdateDtoRulesConditionsType = "app_version"
	MultiRuleUpdateDtoRulesConditionsTypeBrowserName     MultiRuleUpdateDtoRulesConditionsType = "browser_name"
	MultiRuleUpdateDtoRulesConditionsTypeBrowserVersion  MultiRuleUpdateDtoRulesConditionsType = "browser_version"
	MultiRuleUpdateDtoRulesConditionsTypeCountry         MultiRuleUpdateDtoRulesConditionsType = "country"
	MultiRuleUpdateDtoRulesConditionsTypeCustomField     MultiRuleUpdateDtoRulesConditionsType = "custom_field"
	MultiRuleUpdateDtoRulesConditionsTypeDeviceModel     MultiRuleUpdateDtoRulesConditionsType = "device_model"
	MultiRuleUpdateDtoRulesConditionsTypeEmail           MultiRuleUpdateDtoRulesConditionsType = "email"
	MultiRuleUpdateDtoRulesConditionsTypeEnvironmentTier MultiRuleUpdateDtoRulesConditionsType = "environment_tier"
	MultiRuleUpdateDtoRulesConditionsTypeFailsGate       MultiRuleUpdateDtoRulesConditionsType = "fails_gate"
	MultiRuleUpdateDtoRulesConditionsTypeFailsSegment    MultiRuleUpdateDtoRulesConditionsType = "fails_segment"
	MultiRuleUpdateDtoRulesConditionsTypeIpAddress       MultiRuleUpdateDtoRulesConditionsType = "ip_address"
	MultiRuleUpdateDtoRulesConditionsTypeJavascript      MultiRuleUpdateDtoRulesConditionsType = "javascript"
	MultiRuleUpdateDtoRulesConditionsTypeLocale          MultiRuleUpdateDtoRulesConditionsType = "locale"
	MultiRuleUpdateDtoRulesConditionsTypeOsName          MultiRuleUpdateDtoRulesConditionsType = "os_name"
	MultiRuleUpdateDtoRulesConditionsTypeOsVersion       MultiRuleUpdateDtoRulesConditionsType = "os_version"
	MultiRuleUpdateDtoRulesConditionsTypePassesGate      MultiRuleUpdateDtoRulesConditionsType = "passes_gate"
	MultiRuleUpdateDtoRulesConditionsTypePassesSegment   MultiRuleUpdateDtoRulesConditionsType = "passes_segment"
	MultiRuleUpdateDtoRulesConditionsTypePublic          MultiRuleUpdateDtoRulesConditionsType = "public"
	MultiRuleUpdateDtoRulesConditionsTypeTargetApp       MultiRuleUpdateDtoRulesConditionsType = "target_app"
	MultiRuleUpdateDtoRulesConditionsTypeTime            MultiRuleUpdateDtoRulesConditionsType = "time"
	MultiRuleUpdateDtoRulesConditionsTypeUnitId          MultiRuleUpdateDtoRulesConditionsType = "unit_id"
	MultiRuleUpdateDtoRulesConditionsTypeUrl             MultiRuleUpdateDtoRulesConditionsType = "url"
	MultiRuleUpdateDtoRulesConditionsTypeUserId          MultiRuleUpdateDtoRulesConditionsType = "user_id"
)

// Defines values for PulseLoadHistoryDtoFinishedState.
const (
	Cancelled      PulseLoadHistoryDtoFinishedState = "cancelled"
	Failure        PulseLoadHistoryDtoFinishedState = "failure"
	PartialFailure PulseLoadHistoryDtoFinishedState = "partial_failure"
	Success        PulseLoadHistoryDtoFinishedState = "success"
	Timeout        PulseLoadHistoryDtoFinishedState = "timeout"
)

// Defines values for PulseLoadHistoryDtoReloadType.
const (
	PulseLoadHistoryDtoReloadTypeFull        PulseLoadHistoryDtoReloadType = "full"
	PulseLoadHistoryDtoReloadTypeIncremental PulseLoadHistoryDtoReloadType = "incremental"
	PulseLoadHistoryDtoReloadTypeMetric      PulseLoadHistoryDtoReloadType = "metric"
)

// Defines values for ReleasePipelineDtoPhasesRulesConditionsType.
const (
	ReleasePipelineDtoPhasesRulesConditionsTypeAppVersion      ReleasePipelineDtoPhasesRulesConditionsType = "app_version"
	ReleasePipelineDtoPhasesRulesConditionsTypeBrowserName     ReleasePipelineDtoPhasesRulesConditionsType = "browser_name"
	ReleasePipelineDtoPhasesRulesConditionsTypeBrowserVersion  ReleasePipelineDtoPhasesRulesConditionsType = "browser_version"
	ReleasePipelineDtoPhasesRulesConditionsTypeCountry         ReleasePipelineDtoPhasesRulesConditionsType = "country"
	ReleasePipelineDtoPhasesRulesConditionsTypeCustomField     ReleasePipelineDtoPhasesRulesConditionsType = "custom_field"
	ReleasePipelineDtoPhasesRulesConditionsTypeDeviceModel     ReleasePipelineDtoPhasesRulesConditionsType = "device_model"
	ReleasePipelineDtoPhasesRulesConditionsTypeEmail           ReleasePipelineDtoPhasesRulesConditionsType = "email"
	ReleasePipelineDtoPhasesRulesConditionsTypeEnvironmentTier ReleasePipelineDtoPhasesRulesConditionsType = "environment_tier"
	ReleasePipelineDtoPhasesRulesConditionsTypeFailsGate       ReleasePipelineDtoPhasesRulesConditionsType = "fails_gate"
	ReleasePipelineDtoPhasesRulesConditionsTypeFailsSegment    ReleasePipelineDtoPhasesRulesConditionsType = "fails_segment"
	ReleasePipelineDtoPhasesRulesConditionsTypeIpAddress       ReleasePipelineDtoPhasesRulesConditionsType = "ip_address"
	ReleasePipelineDtoPhasesRulesConditionsTypeJavascript      ReleasePipelineDtoPhasesRulesConditionsType = "javascript"
	ReleasePipelineDtoPhasesRulesConditionsTypeLocale          ReleasePipelineDtoPhasesRulesConditionsType = "locale"
	ReleasePipelineDtoPhasesRulesConditionsTypeOsName          ReleasePipelineDtoPhasesRulesConditionsType = "os_name"
	ReleasePipelineDtoPhasesRulesConditionsTypeOsVersion       ReleasePipelineDtoPhasesRulesConditionsType = "os_version"
	ReleasePipelineDtoPhasesRulesConditionsTypePassesGate      ReleasePipelineDtoPhasesRulesConditionsType = "passes_gate"
	ReleasePipelineDtoPhasesRulesConditionsTypePassesSegment   ReleasePipelineDtoPhasesRulesConditionsType = "passes_segment"
	ReleasePipelineDtoPhasesRulesConditionsTypePublic          ReleasePipelineDtoPhasesRulesConditionsType = "public"
	ReleasePipelineDtoPhasesRulesConditionsTypeTargetApp       ReleasePipelineDtoPhasesRulesConditionsType = "target_app"
	ReleasePipelineDtoPhasesRulesConditionsTypeTime            ReleasePipelineDtoPhasesRulesConditionsType = "time"
	ReleasePipelineDtoPhasesRulesConditionsTypeUnitId          ReleasePipelineDtoPhasesRulesConditionsType = "unit_id"
	ReleasePipelineDtoPhasesRulesConditionsTypeUrl             ReleasePipelineDtoPhasesRulesConditionsType = "url"
	ReleasePipelineDtoPhasesRulesConditionsTypeUserId          ReleasePipelineDtoPhasesRulesConditionsType = "user_id"
)

// Defines values for ReleasePipelineTriggerResponseDtoActionsType0.
const (
	ABORTED     ReleasePipelineTriggerResponseDtoActionsType0 = "ABORTED"
	APPROVEDFOR ReleasePipelineTriggerResponseDtoActionsType0 = "APPROVED_FOR"
	FULLROLLOUT ReleasePipelineTriggerResponseDtoActionsType0 = "FULL_ROLL_OUT"
	PAUSED      ReleasePipelineTriggerResponseDtoActionsType0 = "PAUSED"
	SKIPPEDTO   ReleasePipelineTriggerResponseDtoActionsType0 = "SKIPPED_TO"
	UNPAUSED    ReleasePipelineTriggerResponseDtoActionsType0 = "UNPAUSED"
)

// Defines values for ReleasePipelineTriggerResponseDtoActionsType1.
const (
	CLEANEDUP ReleasePipelineTriggerResponseDtoActionsType1 = "CLEANED_UP"
	STARTED   ReleasePipelineTriggerResponseDtoActionsType1 = "STARTED"
)

// Defines values for RuleDtoConditionsType.
const (
	RuleDtoConditionsTypeAppVersion      RuleDtoConditionsType = "app_version"
	RuleDtoConditionsTypeBrowserName     RuleDtoConditionsType = "browser_name"
	RuleDtoConditionsTypeBrowserVersion  RuleDtoConditionsType = "browser_version"
	RuleDtoConditionsTypeCountry         RuleDtoConditionsType = "country"
	RuleDtoConditionsTypeCustomField     RuleDtoConditionsType = "custom_field"
	RuleDtoConditionsTypeDeviceModel     RuleDtoConditionsType = "device_model"
	RuleDtoConditionsTypeEmail           RuleDtoConditionsType = "email"
	RuleDtoConditionsTypeEnvironmentTier RuleDtoConditionsType = "environment_tier"
	RuleDtoConditionsTypeFailsGate       RuleDtoConditionsType = "fails_gate"
	RuleDtoConditionsTypeFailsSegment    RuleDtoConditionsType = "fails_segment"
	RuleDtoConditionsTypeIpAddress       RuleDtoConditionsType = "ip_address"
	RuleDtoConditionsTypeJavascript      RuleDtoConditionsType = "javascript"
	RuleDtoConditionsTypeLocale          RuleDtoConditionsType = "locale"
	RuleDtoConditionsTypeOsName          RuleDtoConditionsType = "os_name"
	RuleDtoConditionsTypeOsVersion       RuleDtoConditionsType = "os_version"
	RuleDtoConditionsTypePassesGate      RuleDtoConditionsType = "passes_gate"
	RuleDtoConditionsTypePassesSegment   RuleDtoConditionsType = "passes_segment"
	RuleDtoConditionsTypePublic          RuleDtoConditionsType = "public"
	RuleDtoConditionsTypeTargetApp       RuleDtoConditionsType = "target_app"
	RuleDtoConditionsTypeTime            RuleDtoConditionsType = "time"
	RuleDtoConditionsTypeUnitId          RuleDtoConditionsType = "unit_id"
	RuleDtoConditionsTypeUrl             RuleDtoConditionsType = "url"
	RuleDtoConditionsTypeUserId          RuleDtoConditionsType = "user_id"
)

// Defines values for RuleUpdateDtoConditionsType.
const (
	RuleUpdateDtoConditionsTypeAppVersion      RuleUpdateDtoConditionsType = "app_version"
	RuleUpdateDtoConditionsTypeBrowserName     RuleUpdateDtoConditionsType = "browser_name"
	RuleUpdateDtoConditionsTypeBrowserVersion  RuleUpdateDtoConditionsType = "browser_version"
	RuleUpdateDtoConditionsTypeCountry         RuleUpdateDtoConditionsType = "country"
	RuleUpdateDtoConditionsTypeCustomField     RuleUpdateDtoConditionsType = "custom_field"
	RuleUpdateDtoConditionsTypeDeviceModel     RuleUpdateDtoConditionsType = "device_model"
	RuleUpdateDtoConditionsTypeEmail           RuleUpdateDtoConditionsType = "email"
	RuleUpdateDtoConditionsTypeEnvironmentTier RuleUpdateDtoConditionsType = "environment_tier"
	RuleUpdateDtoConditionsTypeFailsGate       RuleUpdateDtoConditionsType = "fails_gate"
	RuleUpdateDtoConditionsTypeFailsSegment    RuleUpdateDtoConditionsType = "fails_segment"
	RuleUpdateDtoConditionsTypeIpAddress       RuleUpdateDtoConditionsType = "ip_address"
	RuleUpdateDtoConditionsTypeJavascript      RuleUpdateDtoConditionsType = "javascript"
	RuleUpdateDtoConditionsTypeLocale          RuleUpdateDtoConditionsType = "locale"
	RuleUpdateDtoConditionsTypeOsName          RuleUpdateDtoConditionsType = "os_name"
	RuleUpdateDtoConditionsTypeOsVersion       RuleUpdateDtoConditionsType = "os_version"
	RuleUpdateDtoConditionsTypePassesGate      RuleUpdateDtoConditionsType = "passes_gate"
	RuleUpdateDtoConditionsTypePassesSegment   RuleUpdateDtoConditionsType = "passes_segment"
	RuleUpdateDtoConditionsTypePublic          RuleUpdateDtoConditionsType = "public"
	RuleUpdateDtoConditionsTypeTargetApp       RuleUpdateDtoConditionsType = "target_app"
	RuleUpdateDtoConditionsTypeTime            RuleUpdateDtoConditionsType = "time"
	RuleUpdateDtoConditionsTypeUnitId          RuleUpdateDtoConditionsType = "unit_id"
	RuleUpdateDtoConditionsTypeUrl             RuleUpdateDtoConditionsType = "url"
	RuleUpdateDtoConditionsTypeUserId          RuleUpdateDtoConditionsType = "user_id"
)

// Defines values for SegmentCreateContractDtoRulesConditionsType.
const (
	SegmentCreateContractDtoRulesConditionsTypeAppVersion      SegmentCreateContractDtoRulesConditionsType = "app_version"
	SegmentCreateContractDtoRulesConditionsTypeBrowserName     SegmentCreateContractDtoRulesConditionsType = "browser_name"
	SegmentCreateContractDtoRulesConditionsTypeBrowserVersion  SegmentCreateContractDtoRulesConditionsType = "browser_version"
	SegmentCreateContractDtoRulesConditionsTypeCountry         SegmentCreateContractDtoRulesConditionsType = "country"
	SegmentCreateContractDtoRulesConditionsTypeCustomField     SegmentCreateContractDtoRulesConditionsType = "custom_field"
	SegmentCreateContractDtoRulesConditionsTypeEmail           SegmentCreateContractDtoRulesConditionsType = "email"
	SegmentCreateContractDtoRulesConditionsTypeEnvironmentTier SegmentCreateContractDtoRulesConditionsType = "environment_tier"
	SegmentCreateContractDtoRulesConditionsTypeFailsSegment    SegmentCreateContractDtoRulesConditionsType = "fails_segment"
	SegmentCreateContractDtoRulesConditionsTypeIpAddress       SegmentCreateContractDtoRulesConditionsType = "ip_address"
	SegmentCreateContractDtoRulesConditionsTypeOsName          SegmentCreateContractDtoRulesConditionsType = "os_name"
	SegmentCreateContractDtoRulesConditionsTypeOsVersion       SegmentCreateContractDtoRulesConditionsType = "os_version"
	SegmentCreateContractDtoRulesConditionsTypePassesSegment   SegmentCreateContractDtoRulesConditionsType = "passes_segment"
	SegmentCreateContractDtoRulesConditionsTypeUnitId          SegmentCreateContractDtoRulesConditionsType = "unit_id"
	SegmentCreateContractDtoRulesConditionsTypeUserId          SegmentCreateContractDtoRulesConditionsType = "user_id"
)

// Defines values for SegmentCreateContractDtoType.
const (
	SegmentCreateContractDtoTypeAnalysisList SegmentCreateContractDtoType = "analysis_list"
	SegmentCreateContractDtoTypeIdList       SegmentCreateContractDtoType = "id_list"
	SegmentCreateContractDtoTypeRuleBased    SegmentCreateContractDtoType = "rule_based"
)

// Defines values for SegmentDtoRulesConditionsType.
const (
	SegmentDtoRulesConditionsTypeAppVersion      SegmentDtoRulesConditionsType = "app_version"
	SegmentDtoRulesConditionsTypeBrowserName     SegmentDtoRulesConditionsType = "browser_name"
	SegmentDtoRulesConditionsTypeBrowserVersion  SegmentDtoRulesConditionsType = "browser_version"
	SegmentDtoRulesConditionsTypeCountry         SegmentDtoRulesConditionsType = "country"
	SegmentDtoRulesConditionsTypeCustomField     SegmentDtoRulesConditionsType = "custom_field"
	SegmentDtoRulesConditionsTypeDeviceModel     SegmentDtoRulesConditionsType = "device_model"
	SegmentDtoRulesConditionsTypeEmail           SegmentDtoRulesConditionsType = "email"
	SegmentDtoRulesConditionsTypeEnvironmentTier SegmentDtoRulesConditionsType = "environment_tier"
	SegmentDtoRulesConditionsTypeFailsGate       SegmentDtoRulesConditionsType = "fails_gate"
	SegmentDtoRulesConditionsTypeFailsSegment    SegmentDtoRulesConditionsType = "fails_segment"
	SegmentDtoRulesConditionsTypeIpAddress       SegmentDtoRulesConditionsType = "ip_address"
	SegmentDtoRulesConditionsTypeJavascript      SegmentDtoRulesConditionsType = "javascript"
	SegmentDtoRulesConditionsTypeLocale          SegmentDtoRulesConditionsType = "locale"
	SegmentDtoRulesConditionsTypeOsName          SegmentDtoRulesConditionsType = "os_name"
	SegmentDtoRulesConditionsTypeOsVersion       SegmentDtoRulesConditionsType = "os_version"
	SegmentDtoRulesConditionsTypePassesGate      SegmentDtoRulesConditionsType = "passes_gate"
	SegmentDtoRulesConditionsTypePassesSegment   SegmentDtoRulesConditionsType = "passes_segment"
	SegmentDtoRulesConditionsTypePublic          SegmentDtoRulesConditionsType = "public"
	SegmentDtoRulesConditionsTypeTargetApp       SegmentDtoRulesConditionsType = "target_app"
	SegmentDtoRulesConditionsTypeTime            SegmentDtoRulesConditionsType = "time"
	SegmentDtoRulesConditionsTypeUnitId          SegmentDtoRulesConditionsType = "unit_id"
	SegmentDtoRulesConditionsTypeUrl             SegmentDtoRulesConditionsType = "url"
	SegmentDtoRulesConditionsTypeUserId          SegmentDtoRulesConditionsType = "user_id"
)

// Defines values for SegmentDtoType.
const (
	SegmentDtoTypeAnalysisList SegmentDtoType = "analysis_list"
	SegmentDtoTypeIdList       SegmentDtoType = "id_list"
	SegmentDtoTypeRuleBased    SegmentDtoType = "rule_based"
)

// Defines values for SegmentRulesDtoConditionsType.
const (
	SegmentRulesDtoConditionsTypeAppVersion      SegmentRulesDtoConditionsType = "app_version"
	SegmentRulesDtoConditionsTypeBrowserName     SegmentRulesDtoConditionsType = "browser_name"
	SegmentRulesDtoConditionsTypeBrowserVersion  SegmentRulesDtoConditionsType = "browser_version"
	SegmentRulesDtoConditionsTypeCountry         SegmentRulesDtoConditionsType = "country"
	SegmentRulesDtoConditionsTypeCustomField     SegmentRulesDtoConditionsType = "custom_field"
	SegmentRulesDtoConditionsTypeEmail           SegmentRulesDtoConditionsType = "email"
	SegmentRulesDtoConditionsTypeEnvironmentTier SegmentRulesDtoConditionsType = "environment_tier"
	SegmentRulesDtoConditionsTypeFailsSegment    SegmentRulesDtoConditionsType = "fails_segment"
	SegmentRulesDtoConditionsTypeIpAddress       SegmentRulesDtoConditionsType = "ip_address"
	SegmentRulesDtoConditionsTypeOsName          SegmentRulesDtoConditionsType = "os_name"
	SegmentRulesDtoConditionsTypeOsVersion       SegmentRulesDtoConditionsType = "os_version"
	SegmentRulesDtoConditionsTypePassesSegment   SegmentRulesDtoConditionsType = "passes_segment"
	SegmentRulesDtoConditionsTypeUnitId          SegmentRulesDtoConditionsType = "unit_id"
	SegmentRulesDtoConditionsTypeUserId          SegmentRulesDtoConditionsType = "user_id"
)

// Defines values for TeamCreationDtoChangeTeamConfigs.
const (
	TeamCreationDtoChangeTeamConfigsAnyone   TeamCreationDtoChangeTeamConfigs = "anyone"
	TeamCreationDtoChangeTeamConfigsTeamOnly TeamCreationDtoChangeTeamConfigs = "team_only"
)

// Defines values for TeamCreationDtoReviewApproval.
const (
	TeamCreationDtoReviewApprovalAdminOnly TeamCreationDtoReviewApproval = "admin_only"
	TeamCreationDtoReviewApprovalAnyone    TeamCreationDtoReviewApproval = "anyone"
	TeamCreationDtoReviewApprovalTeamOnly  TeamCreationDtoReviewApproval = "team_only"
)

// Defines values for TeamDtoChangeTeamConfigs.
const (
	TeamDtoChangeTeamConfigsAnyone   TeamDtoChangeTeamConfigs = "anyone"
	TeamDtoChangeTeamConfigsTeamOnly TeamDtoChangeTeamConfigs = "team_only"
)

// Defines values for TeamDtoReviewApproval.
const (
	TeamDtoReviewApprovalAdminOnly TeamDtoReviewApproval = "admin_only"
	TeamDtoReviewApprovalAnyone    TeamDtoReviewApproval = "anyone"
	TeamDtoReviewApprovalTeamOnly  TeamDtoReviewApproval = "team_only"
)

// Defines values for TeamPartialUpdateDtoChangeTeamConfigs.
const (
	TeamPartialUpdateDtoChangeTeamConfigsAnyone   TeamPartialUpdateDtoChangeTeamConfigs = "anyone"
	TeamPartialUpdateDtoChangeTeamConfigsTeamOnly TeamPartialUpdateDtoChangeTeamConfigs = "team_only"
)

// Defines values for TeamPartialUpdateDtoReviewApproval.
const (
	TeamPartialUpdateDtoReviewApprovalAdminOnly TeamPartialUpdateDtoReviewApproval = "admin_only"
	TeamPartialUpdateDtoReviewApprovalAnyone    TeamPartialUpdateDtoReviewApproval = "anyone"
	TeamPartialUpdateDtoReviewApprovalTeamOnly  TeamPartialUpdateDtoReviewApproval = "team_only"
)

// Defines values for GetConsoleV1AuditLogsParamsSortKey.
const (
	ActionType      GetConsoleV1AuditLogsParamsSortKey = "actionType"
	ChangeLog       GetConsoleV1AuditLogsParamsSortKey = "changeLog"
	Date            GetConsoleV1AuditLogsParamsSortKey = "date"
	Id              GetConsoleV1AuditLogsParamsSortKey = "id"
	Name            GetConsoleV1AuditLogsParamsSortKey = "name"
	Time            GetConsoleV1AuditLogsParamsSortKey = "time"
	UpdatedBy       GetConsoleV1AuditLogsParamsSortKey = "updatedBy"
	UpdatedByUserID GetConsoleV1AuditLogsParamsSortKey = "updatedByUserID"
)

// Defines values for GetConsoleV1AuditLogsParamsSortOrder.
const (
	Asc  GetConsoleV1AuditLogsParamsSortOrder = "asc"
	Desc GetConsoleV1AuditLogsParamsSortOrder = "desc"
)

// Defines values for GetConsoleV1AuditLogsParamsActionType.
const (
	GetConsoleV1AuditLogsParamsActionTypeAWSMarketplaceAccountDelete                GetConsoleV1AuditLogsParamsActionType = "AWS_marketplace_account_delete"
	GetConsoleV1AuditLogsParamsActionTypeAcceptEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionType = "accept_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypeActiveUserDefinitionUpdate                 GetConsoleV1AuditLogsParamsActionType = "active_user_definition_update"
	GetConsoleV1AuditLogsParamsActionTypeAddDashboardWidget                         GetConsoleV1AuditLogsParamsActionType = "add_dashboard_widget"
	GetConsoleV1AuditLogsParamsActionTypeAddGeoType                                 GetConsoleV1AuditLogsParamsActionType = "add_geo_type"
	GetConsoleV1AuditLogsParamsActionTypeAddSegmentsOfInterestProperty              GetConsoleV1AuditLogsParamsActionType = "add_segments_of_interest_property"
	GetConsoleV1AuditLogsParamsActionTypeAddSrmDebuggerCustomDimension              GetConsoleV1AuditLogsParamsActionType = "add_srm_debugger_custom_dimension"
	GetConsoleV1AuditLogsParamsActionTypeApplyExperimentReview                      GetConsoleV1AuditLogsParamsActionType = "apply_experiment_review"
	GetConsoleV1AuditLogsParamsActionTypeArchiveExperiment                          GetConsoleV1AuditLogsParamsActionType = "archive_experiment"
	GetConsoleV1AuditLogsParamsActionTypeArchiveMetric                              GetConsoleV1AuditLogsParamsActionType = "archive_metric"
	GetConsoleV1AuditLogsParamsActionTypeAutotuneExperimentCreate                   GetConsoleV1AuditLogsParamsActionType = "autotune_experiment_create"
	GetConsoleV1AuditLogsParamsActionTypeAutotuneExperimentDelete                   GetConsoleV1AuditLogsParamsActionType = "autotune_experiment_delete"
	GetConsoleV1AuditLogsParamsActionTypeAutotuneExperimentEdit                     GetConsoleV1AuditLogsParamsActionType = "autotune_experiment_edit"
	GetConsoleV1AuditLogsParamsActionTypeAutotuneExperimentSnapshotDelete           GetConsoleV1AuditLogsParamsActionType = "autotune_experiment_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypeAutotuneExperimentUpdateTargetApps         GetConsoleV1AuditLogsParamsActionType = "autotune_experiment_update_target_apps"
	GetConsoleV1AuditLogsParamsActionTypeBatchCancelCompanyInvites                  GetConsoleV1AuditLogsParamsActionType = "batch_cancel_company_invites"
	GetConsoleV1AuditLogsParamsActionTypeBatchUserRoleUpdate                        GetConsoleV1AuditLogsParamsActionType = "batch_user_role_update"
	GetConsoleV1AuditLogsParamsActionTypeCancelArchiveMetric                        GetConsoleV1AuditLogsParamsActionType = "cancel_archive_metric"
	GetConsoleV1AuditLogsParamsActionTypeCancelDeleteMetric                         GetConsoleV1AuditLogsParamsActionType = "cancel_delete_metric"
	GetConsoleV1AuditLogsParamsActionTypeCancelEchidnaDag                           GetConsoleV1AuditLogsParamsActionType = "cancel_echidna_dag"
	GetConsoleV1AuditLogsParamsActionTypeCommitEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionType = "commit_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypeCompanyBasicInfoEdit                       GetConsoleV1AuditLogsParamsActionType = "company_basic_info_edit"
	GetConsoleV1AuditLogsParamsActionTypeCompanyCreate                              GetConsoleV1AuditLogsParamsActionType = "company_create"
	GetConsoleV1AuditLogsParamsActionTypeCompanyDelete                              GetConsoleV1AuditLogsParamsActionType = "company_delete"
	GetConsoleV1AuditLogsParamsActionTypeCompanyEmailDomainConfigDelete             GetConsoleV1AuditLogsParamsActionType = "company_email_domain_config_delete"
	GetConsoleV1AuditLogsParamsActionTypeCompanyEnvironmentsEdit                    GetConsoleV1AuditLogsParamsActionType = "company_environments_edit"
	GetConsoleV1AuditLogsParamsActionTypeCompanyIDTypeAdd                           GetConsoleV1AuditLogsParamsActionType = "company_ID_type_add"
	GetConsoleV1AuditLogsParamsActionTypeCompanyIDTypeDelete                        GetConsoleV1AuditLogsParamsActionType = "company_ID_type_delete"
	GetConsoleV1AuditLogsParamsActionTypeCompanyInviteAccessUpdate                  GetConsoleV1AuditLogsParamsActionType = "company_invite_access_update"
	GetConsoleV1AuditLogsParamsActionTypeCompanyMemberRemove                        GetConsoleV1AuditLogsParamsActionType = "company_member_remove"
	GetConsoleV1AuditLogsParamsActionTypeCompanyMetricDelete                        GetConsoleV1AuditLogsParamsActionType = "company_metric_delete"
	GetConsoleV1AuditLogsParamsActionTypeCompanyMetricManagementUpdate              GetConsoleV1AuditLogsParamsActionType = "company_metric_management_update"
	GetConsoleV1AuditLogsParamsActionTypeCompanySnapshotDelete                      GetConsoleV1AuditLogsParamsActionType = "company_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypeConfigAddTag                               GetConsoleV1AuditLogsParamsActionType = "config_add_tag"
	GetConsoleV1AuditLogsParamsActionTypeConfigAllowedReviewersUpdate               GetConsoleV1AuditLogsParamsActionType = "config_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigConditionsUpdate                     GetConsoleV1AuditLogsParamsActionType = "config_conditions_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigDefaultValueUpdate                   GetConsoleV1AuditLogsParamsActionType = "config_default_value_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigDelete                               GetConsoleV1AuditLogsParamsActionType = "config_delete"
	GetConsoleV1AuditLogsParamsActionTypeConfigDescriptionUpdate                    GetConsoleV1AuditLogsParamsActionType = "config_description_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigEditTags                             GetConsoleV1AuditLogsParamsActionType = "config_edit_tags"
	GetConsoleV1AuditLogsParamsActionTypeConfigEditTargetApps                       GetConsoleV1AuditLogsParamsActionType = "config_edit_target_apps"
	GetConsoleV1AuditLogsParamsActionTypeConfigEnvironmentsUpdate                   GetConsoleV1AuditLogsParamsActionType = "config_environments_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigIdTypeUpdate                         GetConsoleV1AuditLogsParamsActionType = "config_id_type_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigMonitoringMetricsUpdate              GetConsoleV1AuditLogsParamsActionType = "config_monitoring_metrics_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigRemoveTag                            GetConsoleV1AuditLogsParamsActionType = "config_remove_tag"
	GetConsoleV1AuditLogsParamsActionTypeConfigRequireReviews                       GetConsoleV1AuditLogsParamsActionType = "config_require_reviews"
	GetConsoleV1AuditLogsParamsActionTypeConfigResalt                               GetConsoleV1AuditLogsParamsActionType = "config_resalt"
	GetConsoleV1AuditLogsParamsActionTypeConfigRevert                               GetConsoleV1AuditLogsParamsActionType = "config_revert"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewAccept                         GetConsoleV1AuditLogsParamsActionType = "config_review_accept"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewCommit                         GetConsoleV1AuditLogsParamsActionType = "config_review_commit"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewCreate                         GetConsoleV1AuditLogsParamsActionType = "config_review_create"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewDelete                         GetConsoleV1AuditLogsParamsActionType = "config_review_delete"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewInfoUpdate                     GetConsoleV1AuditLogsParamsActionType = "config_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewReject                         GetConsoleV1AuditLogsParamsActionType = "config_review_reject"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewRequiredUpdate                 GetConsoleV1AuditLogsParamsActionType = "config_review_required_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewUpdate                         GetConsoleV1AuditLogsParamsActionType = "config_review_update"
	GetConsoleV1AuditLogsParamsActionTypeConfigReviewsDisable                       GetConsoleV1AuditLogsParamsActionType = "config_reviews_disable"
	GetConsoleV1AuditLogsParamsActionTypeConfigStateToggle                          GetConsoleV1AuditLogsParamsActionType = "config_state_toggle"
	GetConsoleV1AuditLogsParamsActionTypeConfigUpdateOwners                         GetConsoleV1AuditLogsParamsActionType = "config_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeCreateCustomerApp                          GetConsoleV1AuditLogsParamsActionType = "create_customer_app"
	GetConsoleV1AuditLogsParamsActionTypeCreateDashboard                            GetConsoleV1AuditLogsParamsActionType = "create_dashboard"
	GetConsoleV1AuditLogsParamsActionTypeCreateEchidnaAssignmentSource              GetConsoleV1AuditLogsParamsActionType = "create_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypeCreateEchidnaDataQualityChecks             GetConsoleV1AuditLogsParamsActionType = "create_echidna_data_quality_checks"
	GetConsoleV1AuditLogsParamsActionTypeCreateEchidnaEntityPropertySource          GetConsoleV1AuditLogsParamsActionType = "create_echidna_entity_property_source"
	GetConsoleV1AuditLogsParamsActionTypeCreateEchidnaMetricSource                  GetConsoleV1AuditLogsParamsActionType = "create_echidna_metric_source"
	GetConsoleV1AuditLogsParamsActionTypeCreateEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionType = "create_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypeCreateGuardrailMetricAlert                 GetConsoleV1AuditLogsParamsActionType = "create_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypeCreatePowerAnalysisGateQuery               GetConsoleV1AuditLogsParamsActionType = "create_power_analysis_gate_query"
	GetConsoleV1AuditLogsParamsActionTypeCreateStatsigProxy                         GetConsoleV1AuditLogsParamsActionType = "create_statsig_proxy"
	GetConsoleV1AuditLogsParamsActionTypeCreateToplineAlert                         GetConsoleV1AuditLogsParamsActionType = "create_topline_alert"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricDefinitionCreate               GetConsoleV1AuditLogsParamsActionType = "custom_metric_definition_create"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricDefinitionDelete               GetConsoleV1AuditLogsParamsActionType = "custom_metric_definition_delete"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricDefinitionEdit                 GetConsoleV1AuditLogsParamsActionType = "custom_metric_definition_edit"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricEdit                           GetConsoleV1AuditLogsParamsActionType = "custom_metric_edit"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricNameEdit                       GetConsoleV1AuditLogsParamsActionType = "custom_metric_name_edit"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricReviewAccept                   GetConsoleV1AuditLogsParamsActionType = "custom_metric_review_accept"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricReviewDelete                   GetConsoleV1AuditLogsParamsActionType = "custom_metric_review_delete"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricReviewReject                   GetConsoleV1AuditLogsParamsActionType = "custom_metric_review_reject"
	GetConsoleV1AuditLogsParamsActionTypeCustomMetricUpdateOwners                   GetConsoleV1AuditLogsParamsActionType = "custom_metric_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeCustomPulseQueryCreate                     GetConsoleV1AuditLogsParamsActionType = "custom_pulse_query_create"
	GetConsoleV1AuditLogsParamsActionTypeCustomPulseQueryDelete                     GetConsoleV1AuditLogsParamsActionType = "custom_pulse_query_delete"
	GetConsoleV1AuditLogsParamsActionTypeCustomPulseQueryNameEdit                   GetConsoleV1AuditLogsParamsActionType = "custom_pulse_query_name_edit"
	GetConsoleV1AuditLogsParamsActionTypeCustomQueryToggleFavorite                  GetConsoleV1AuditLogsParamsActionType = "custom_query_toggle_favorite"
	GetConsoleV1AuditLogsParamsActionTypeCustomSankeyDelete                         GetConsoleV1AuditLogsParamsActionType = "custom_sankey_delete"
	GetConsoleV1AuditLogsParamsActionTypeDashboardUpdateOwners                      GetConsoleV1AuditLogsParamsActionType = "dashboard_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeDeleteDashboard                            GetConsoleV1AuditLogsParamsActionType = "delete_dashboard"
	GetConsoleV1AuditLogsParamsActionTypeDeleteDashboardWidget                      GetConsoleV1AuditLogsParamsActionType = "delete_dashboard_widget"
	GetConsoleV1AuditLogsParamsActionTypeDeleteEchidnaAssignmentSource              GetConsoleV1AuditLogsParamsActionType = "delete_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypeDeleteEchidnaEntityPropertySource          GetConsoleV1AuditLogsParamsActionType = "delete_echidna_entity_property_source"
	GetConsoleV1AuditLogsParamsActionTypeDeleteEchidnaMetricSource                  GetConsoleV1AuditLogsParamsActionType = "delete_echidna_metric_source"
	GetConsoleV1AuditLogsParamsActionTypeDeleteEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionType = "delete_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypeDeleteGuardrailMetricAlert                 GetConsoleV1AuditLogsParamsActionType = "delete_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypeDeleteLayerParameter                       GetConsoleV1AuditLogsParamsActionType = "delete_layer_parameter"
	GetConsoleV1AuditLogsParamsActionTypeDeleteMetric                               GetConsoleV1AuditLogsParamsActionType = "delete_metric"
	GetConsoleV1AuditLogsParamsActionTypeDeletePaymentMethod                        GetConsoleV1AuditLogsParamsActionType = "delete_payment_method"
	GetConsoleV1AuditLogsParamsActionTypeDeleteSegmentsOfInterestProperty           GetConsoleV1AuditLogsParamsActionType = "delete_segments_of_interest_property"
	GetConsoleV1AuditLogsParamsActionTypeDeleteSrmDebuggerCustomDimension           GetConsoleV1AuditLogsParamsActionType = "delete_srm_debugger_custom_dimension"
	GetConsoleV1AuditLogsParamsActionTypeDeleteTag                                  GetConsoleV1AuditLogsParamsActionType = "delete_tag"
	GetConsoleV1AuditLogsParamsActionTypeDeleteTargetApp                            GetConsoleV1AuditLogsParamsActionType = "delete_target_app"
	GetConsoleV1AuditLogsParamsActionTypeDeleteToplineAlert                         GetConsoleV1AuditLogsParamsActionType = "delete_topline_alert"
	GetConsoleV1AuditLogsParamsActionTypeDeleteTriggerIntegration                   GetConsoleV1AuditLogsParamsActionType = "delete_trigger_integration"
	GetConsoleV1AuditLogsParamsActionTypeDeleteUserRole                             GetConsoleV1AuditLogsParamsActionType = "delete_user_role"
	GetConsoleV1AuditLogsParamsActionTypeDismissRunawayEntity                       GetConsoleV1AuditLogsParamsActionType = "dismiss_runaway_entity"
	GetConsoleV1AuditLogsParamsActionTypeDynamicConfigCreate                        GetConsoleV1AuditLogsParamsActionType = "dynamic_config_create"
	GetConsoleV1AuditLogsParamsActionTypeDynamicConfigTemplateCreate                GetConsoleV1AuditLogsParamsActionType = "dynamic_config_template_create"
	GetConsoleV1AuditLogsParamsActionTypeDynamicConfigUpdateOwners                  GetConsoleV1AuditLogsParamsActionType = "dynamic_config_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeEchidnaDropTables                          GetConsoleV1AuditLogsParamsActionType = "echidna_drop_tables"
	GetConsoleV1AuditLogsParamsActionTypeEditDashboardDescription                   GetConsoleV1AuditLogsParamsActionType = "edit_dashboard_description"
	GetConsoleV1AuditLogsParamsActionTypeEditDashboardName                          GetConsoleV1AuditLogsParamsActionType = "edit_dashboard_name"
	GetConsoleV1AuditLogsParamsActionTypeEditDashboardWidget                        GetConsoleV1AuditLogsParamsActionType = "edit_dashboard_widget"
	GetConsoleV1AuditLogsParamsActionTypeEditExperimentDisplayName                  GetConsoleV1AuditLogsParamsActionType = "edit_experiment_display_name"
	GetConsoleV1AuditLogsParamsActionTypeEditGuardrailMetricAlert                   GetConsoleV1AuditLogsParamsActionType = "edit_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypeEditTargetApp                              GetConsoleV1AuditLogsParamsActionType = "edit_target_app"
	GetConsoleV1AuditLogsParamsActionTypeEventDimensionUpdate                       GetConsoleV1AuditLogsParamsActionType = "event_dimension_update"
	GetConsoleV1AuditLogsParamsActionTypeExperimentAbandon                          GetConsoleV1AuditLogsParamsActionType = "experiment_abandon"
	GetConsoleV1AuditLogsParamsActionTypeExperimentAdvancedSettingsEdit             GetConsoleV1AuditLogsParamsActionType = "experiment_advanced_settings_edit"
	GetConsoleV1AuditLogsParamsActionTypeExperimentAllowedReviewersUpdate           GetConsoleV1AuditLogsParamsActionType = "experiment_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypeExperimentCreate                           GetConsoleV1AuditLogsParamsActionType = "experiment_create"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDataReportDelete                 GetConsoleV1AuditLogsParamsActionType = "experiment_data_report_delete"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDataReportRename                 GetConsoleV1AuditLogsParamsActionType = "experiment_data_report_rename"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDataReportUpdateParameters       GetConsoleV1AuditLogsParamsActionType = "experiment_data_report_update_parameters"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDecisionMake                     GetConsoleV1AuditLogsParamsActionType = "experiment_decision_make"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDelete                           GetConsoleV1AuditLogsParamsActionType = "experiment_delete"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDescriptionEdit                  GetConsoleV1AuditLogsParamsActionType = "experiment_description_edit"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDiscussionPostCreate             GetConsoleV1AuditLogsParamsActionType = "experiment_discussion_post_create"
	GetConsoleV1AuditLogsParamsActionTypeExperimentDiscussionPostDelete             GetConsoleV1AuditLogsParamsActionType = "experiment_discussion_post_delete"
	GetConsoleV1AuditLogsParamsActionTypeExperimentEdit                             GetConsoleV1AuditLogsParamsActionType = "experiment_edit"
	GetConsoleV1AuditLogsParamsActionTypeExperimentFollowToggle                     GetConsoleV1AuditLogsParamsActionType = "experiment_follow_toggle"
	GetConsoleV1AuditLogsParamsActionTypeExperimentGroupDisable                     GetConsoleV1AuditLogsParamsActionType = "experiment_group_disable"
	GetConsoleV1AuditLogsParamsActionTypeExperimentOverridesEdit                    GetConsoleV1AuditLogsParamsActionType = "experiment_overrides_edit"
	GetConsoleV1AuditLogsParamsActionTypeExperimentPauseAssignment                  GetConsoleV1AuditLogsParamsActionType = "experiment_pause_assignment"
	GetConsoleV1AuditLogsParamsActionTypeExperimentRestart                          GetConsoleV1AuditLogsParamsActionType = "experiment_restart"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewAccept                     GetConsoleV1AuditLogsParamsActionType = "experiment_review_accept"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewCommit                     GetConsoleV1AuditLogsParamsActionType = "experiment_review_commit"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewCreate                     GetConsoleV1AuditLogsParamsActionType = "experiment_review_create"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewDelete                     GetConsoleV1AuditLogsParamsActionType = "experiment_review_delete"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewInfoUpdate                 GetConsoleV1AuditLogsParamsActionType = "experiment_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewReject                     GetConsoleV1AuditLogsParamsActionType = "experiment_review_reject"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewUpdateOverrides            GetConsoleV1AuditLogsParamsActionType = "experiment_review_update_overrides"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewUpdateOwners               GetConsoleV1AuditLogsParamsActionType = "experiment_review_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewUpdateTeam                 GetConsoleV1AuditLogsParamsActionType = "experiment_review_update_team"
	GetConsoleV1AuditLogsParamsActionTypeExperimentReviewsOn                        GetConsoleV1AuditLogsParamsActionType = "experiment_reviews_on"
	GetConsoleV1AuditLogsParamsActionTypeExperimentRollout                          GetConsoleV1AuditLogsParamsActionType = "experiment_rollout"
	GetConsoleV1AuditLogsParamsActionTypeExperimentScheduleRollout                  GetConsoleV1AuditLogsParamsActionType = "experiment_schedule_rollout"
	GetConsoleV1AuditLogsParamsActionTypeExperimentSnapshotDelete                   GetConsoleV1AuditLogsParamsActionType = "experiment_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypeExperimentStart                            GetConsoleV1AuditLogsParamsActionType = "experiment_start"
	GetConsoleV1AuditLogsParamsActionTypeExperimentStopped                          GetConsoleV1AuditLogsParamsActionType = "experiment_stopped"
	GetConsoleV1AuditLogsParamsActionTypeExperimentTemplateCreate                   GetConsoleV1AuditLogsParamsActionType = "experiment_template_create"
	GetConsoleV1AuditLogsParamsActionTypeExperimentUpdateDecisionNote               GetConsoleV1AuditLogsParamsActionType = "experiment_update_decision_note"
	GetConsoleV1AuditLogsParamsActionTypeExperimentUpdateOwners                     GetConsoleV1AuditLogsParamsActionType = "experiment_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeExperimentUpdateSubdimensionFilter         GetConsoleV1AuditLogsParamsActionType = "experiment_update_subdimension_filter"
	GetConsoleV1AuditLogsParamsActionTypeExperimentUpdateTargetApps                 GetConsoleV1AuditLogsParamsActionType = "experiment_update_target_apps"
	GetConsoleV1AuditLogsParamsActionTypeExtendExperimentPulseEndDate               GetConsoleV1AuditLogsParamsActionType = "extend_experiment_pulse_end_date"
	GetConsoleV1AuditLogsParamsActionTypeGateCreate                                 GetConsoleV1AuditLogsParamsActionType = "gate_create"
	GetConsoleV1AuditLogsParamsActionTypeGateOverridesUpdate                        GetConsoleV1AuditLogsParamsActionType = "gate_overrides_update"
	GetConsoleV1AuditLogsParamsActionTypeGateTemplateCreate                         GetConsoleV1AuditLogsParamsActionType = "gate_template_create"
	GetConsoleV1AuditLogsParamsActionTypeGateUpdate                                 GetConsoleV1AuditLogsParamsActionType = "gate_update"
	GetConsoleV1AuditLogsParamsActionTypeGateUpdateOwners                           GetConsoleV1AuditLogsParamsActionType = "gate_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeGenerateIntegrationWebhookSecret           GetConsoleV1AuditLogsParamsActionType = "generate_integration_webhook_secret"
	GetConsoleV1AuditLogsParamsActionTypeHoldoutCreate                              GetConsoleV1AuditLogsParamsActionType = "holdout_create"
	GetConsoleV1AuditLogsParamsActionTypeHoldoutDelete                              GetConsoleV1AuditLogsParamsActionType = "holdout_delete"
	GetConsoleV1AuditLogsParamsActionTypeHoldoutLayerParameterValuesUpdate          GetConsoleV1AuditLogsParamsActionType = "holdout_layer_parameter_values_update"
	GetConsoleV1AuditLogsParamsActionTypeHoldoutUpdate                              GetConsoleV1AuditLogsParamsActionType = "holdout_update"
	GetConsoleV1AuditLogsParamsActionTypeHoldoutUpdateOwners                        GetConsoleV1AuditLogsParamsActionType = "holdout_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeHypothesisEdit                             GetConsoleV1AuditLogsParamsActionType = "hypothesis_edit"
	GetConsoleV1AuditLogsParamsActionTypeIDListUpdate                               GetConsoleV1AuditLogsParamsActionType = "ID_list_update"
	GetConsoleV1AuditLogsParamsActionTypeIngestionSourceDelete                      GetConsoleV1AuditLogsParamsActionType = "ingestion_source_delete"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationCreate                          GetConsoleV1AuditLogsParamsActionType = "integration_create"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationDelete                          GetConsoleV1AuditLogsParamsActionType = "integration_delete"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationSetEnabled                      GetConsoleV1AuditLogsParamsActionType = "integration_set_enabled"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationUpdate                          GetConsoleV1AuditLogsParamsActionType = "integration_update"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationUpdateDisabledEvents            GetConsoleV1AuditLogsParamsActionType = "integration_update_disabled_events"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationUpdateOutgoingConfig            GetConsoleV1AuditLogsParamsActionType = "integration_update_outgoing_config"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationUpdateRateLimits                GetConsoleV1AuditLogsParamsActionType = "integration_update_rate_limits"
	GetConsoleV1AuditLogsParamsActionTypeIntegrationUpsert                          GetConsoleV1AuditLogsParamsActionType = "integration_upsert"
	GetConsoleV1AuditLogsParamsActionTypeKeyExperimentMetricsEdit                   GetConsoleV1AuditLogsParamsActionType = "key_experiment_metrics_edit"
	GetConsoleV1AuditLogsParamsActionTypeLayerAllowedReviewersUpdate                GetConsoleV1AuditLogsParamsActionType = "layer_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypeLayerCreate                                GetConsoleV1AuditLogsParamsActionType = "layer_create"
	GetConsoleV1AuditLogsParamsActionTypeLayerDelete                                GetConsoleV1AuditLogsParamsActionType = "layer_delete"
	GetConsoleV1AuditLogsParamsActionTypeLayerDescriptionEdit                       GetConsoleV1AuditLogsParamsActionType = "layer_description_edit"
	GetConsoleV1AuditLogsParamsActionTypeLayerEdit                                  GetConsoleV1AuditLogsParamsActionType = "layer_edit"
	GetConsoleV1AuditLogsParamsActionTypeLayerOverridesEdit                         GetConsoleV1AuditLogsParamsActionType = "layer_overrides_edit"
	GetConsoleV1AuditLogsParamsActionTypeLayerParameterAdd                          GetConsoleV1AuditLogsParamsActionType = "layer_parameter_add"
	GetConsoleV1AuditLogsParamsActionTypeLayerParametersEdit                        GetConsoleV1AuditLogsParamsActionType = "layer_parameters_edit"
	GetConsoleV1AuditLogsParamsActionTypeLayerReviewAccept                          GetConsoleV1AuditLogsParamsActionType = "layer_review_accept"
	GetConsoleV1AuditLogsParamsActionTypeLayerReviewCommit                          GetConsoleV1AuditLogsParamsActionType = "layer_review_commit"
	GetConsoleV1AuditLogsParamsActionTypeLayerReviewCreate                          GetConsoleV1AuditLogsParamsActionType = "layer_review_create"
	GetConsoleV1AuditLogsParamsActionTypeLayerReviewDelete                          GetConsoleV1AuditLogsParamsActionType = "layer_review_delete"
	GetConsoleV1AuditLogsParamsActionTypeLayerReviewInfoUpdate                      GetConsoleV1AuditLogsParamsActionType = "layer_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypeLayerReviewReject                          GetConsoleV1AuditLogsParamsActionType = "layer_review_reject"
	GetConsoleV1AuditLogsParamsActionTypeLayerReviewsOn                             GetConsoleV1AuditLogsParamsActionType = "layer_reviews_on"
	GetConsoleV1AuditLogsParamsActionTypeLayerSnapshotDelete                        GetConsoleV1AuditLogsParamsActionType = "layer_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypeLayerUpdateOwners                          GetConsoleV1AuditLogsParamsActionType = "layer_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeLayerUpdateTargetApps                      GetConsoleV1AuditLogsParamsActionType = "layer_update_target_apps"
	GetConsoleV1AuditLogsParamsActionTypeLoadEchidnaAssignmentSource                GetConsoleV1AuditLogsParamsActionType = "load_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypeLoadEchidnaMetric                          GetConsoleV1AuditLogsParamsActionType = "load_echidna_metric"
	GetConsoleV1AuditLogsParamsActionTypeLoadEchidnaPulse                           GetConsoleV1AuditLogsParamsActionType = "load_echidna_pulse"
	GetConsoleV1AuditLogsParamsActionTypeMetricAddTag                               GetConsoleV1AuditLogsParamsActionType = "metric_add_tag"
	GetConsoleV1AuditLogsParamsActionTypeMetricAllowedReviewersUpdate               GetConsoleV1AuditLogsParamsActionType = "metric_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypeMetricDisableReviewsLocally                GetConsoleV1AuditLogsParamsActionType = "metric_disable_reviews_locally"
	GetConsoleV1AuditLogsParamsActionTypeMetricEditDefinition                       GetConsoleV1AuditLogsParamsActionType = "metric_edit_definition"
	GetConsoleV1AuditLogsParamsActionTypeMetricEditDescription                      GetConsoleV1AuditLogsParamsActionType = "metric_edit_description"
	GetConsoleV1AuditLogsParamsActionTypeMetricRemoveTag                            GetConsoleV1AuditLogsParamsActionType = "metric_remove_tag"
	GetConsoleV1AuditLogsParamsActionTypeMetricReviewCommit                         GetConsoleV1AuditLogsParamsActionType = "metric_review_commit"
	GetConsoleV1AuditLogsParamsActionTypeMetricReviewCreate                         GetConsoleV1AuditLogsParamsActionType = "metric_review_create"
	GetConsoleV1AuditLogsParamsActionTypeMetricReviewInfoUpdate                     GetConsoleV1AuditLogsParamsActionType = "metric_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypeMetricReviewsOn                            GetConsoleV1AuditLogsParamsActionType = "metric_reviews_on"
	GetConsoleV1AuditLogsParamsActionTypeModifyOverrideConfig                       GetConsoleV1AuditLogsParamsActionType = "modify_override_config"
	GetConsoleV1AuditLogsParamsActionTypeModifyOverrides                            GetConsoleV1AuditLogsParamsActionType = "modify_overrides"
	GetConsoleV1AuditLogsParamsActionTypeOIDCConfigurationDelete                    GetConsoleV1AuditLogsParamsActionType = "OIDC_configuration_delete"
	GetConsoleV1AuditLogsParamsActionTypeOIDCConfigurationUpsert                    GetConsoleV1AuditLogsParamsActionType = "OIDC_configuration_upsert"
	GetConsoleV1AuditLogsParamsActionTypeOrgApiKeyCreate                            GetConsoleV1AuditLogsParamsActionType = "org_api_key_create"
	GetConsoleV1AuditLogsParamsActionTypeOrganizationMemberRemove                   GetConsoleV1AuditLogsParamsActionType = "organization_member_remove"
	GetConsoleV1AuditLogsParamsActionTypeParamStoreCreate                           GetConsoleV1AuditLogsParamsActionType = "param_store_create"
	GetConsoleV1AuditLogsParamsActionTypeParamStoreDelete                           GetConsoleV1AuditLogsParamsActionType = "param_store_delete"
	GetConsoleV1AuditLogsParamsActionTypeParamStoreUpdate                           GetConsoleV1AuditLogsParamsActionType = "param_store_update"
	GetConsoleV1AuditLogsParamsActionTypeParamStoreUpdateOwners                     GetConsoleV1AuditLogsParamsActionType = "param_store_update_owners"
	GetConsoleV1AuditLogsParamsActionTypePaymentEntitlementsUpsert                  GetConsoleV1AuditLogsParamsActionType = "payment_entitlements_upsert"
	GetConsoleV1AuditLogsParamsActionTypePinChartToSummary                          GetConsoleV1AuditLogsParamsActionType = "pin_chart_to_summary"
	GetConsoleV1AuditLogsParamsActionTypePinDashboardForCompany                     GetConsoleV1AuditLogsParamsActionType = "pin_dashboard_for_company"
	GetConsoleV1AuditLogsParamsActionTypeProjectDescriptionEdit                     GetConsoleV1AuditLogsParamsActionType = "project_description_edit"
	GetConsoleV1AuditLogsParamsActionTypeProjectOwnerSet                            GetConsoleV1AuditLogsParamsActionType = "project_owner_set"
	GetConsoleV1AuditLogsParamsActionTypeProjectReviewGroupDelete                   GetConsoleV1AuditLogsParamsActionType = "project_review_group_delete"
	GetConsoleV1AuditLogsParamsActionTypeProjectReviewGroupUpsert                   GetConsoleV1AuditLogsParamsActionType = "project_review_group_upsert"
	GetConsoleV1AuditLogsParamsActionTypePulseResultsExport                         GetConsoleV1AuditLogsParamsActionType = "pulse_results_export"
	GetConsoleV1AuditLogsParamsActionTypeRejectEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionType = "reject_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypeReleasePipelineCompleted                   GetConsoleV1AuditLogsParamsActionType = "release_pipeline_completed"
	GetConsoleV1AuditLogsParamsActionTypeReleasePipelineCreate                      GetConsoleV1AuditLogsParamsActionType = "release_pipeline_create"
	GetConsoleV1AuditLogsParamsActionTypeReleasePipelineTriggerCreate               GetConsoleV1AuditLogsParamsActionType = "release_pipeline_trigger_create"
	GetConsoleV1AuditLogsParamsActionTypeReleasePipelineUpdate                      GetConsoleV1AuditLogsParamsActionType = "release_pipeline_update"
	GetConsoleV1AuditLogsParamsActionTypeRemoveOverrideConfig                       GetConsoleV1AuditLogsParamsActionType = "remove_override_config"
	GetConsoleV1AuditLogsParamsActionTypeResolveGuardrailMetricAlert                GetConsoleV1AuditLogsParamsActionType = "resolve_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypeRestartExperimentPulse                     GetConsoleV1AuditLogsParamsActionType = "restart_experiment_pulse"
	GetConsoleV1AuditLogsParamsActionTypeRestoreDashboard                           GetConsoleV1AuditLogsParamsActionType = "restore_dashboard"
	GetConsoleV1AuditLogsParamsActionTypeSSODisable                                 GetConsoleV1AuditLogsParamsActionType = "SSO_disable"
	GetConsoleV1AuditLogsParamsActionTypeScheduleArchiveMetric                      GetConsoleV1AuditLogsParamsActionType = "schedule_archive_metric"
	GetConsoleV1AuditLogsParamsActionTypeScheduleDeleteMetric                       GetConsoleV1AuditLogsParamsActionType = "schedule_delete_metric"
	GetConsoleV1AuditLogsParamsActionTypeScheduledCustomPulseQueryCreate            GetConsoleV1AuditLogsParamsActionType = "scheduled_custom_pulse_query_create"
	GetConsoleV1AuditLogsParamsActionTypeScheduledPulseCustomQueryDelete            GetConsoleV1AuditLogsParamsActionType = "scheduled_pulse_custom_query_delete"
	GetConsoleV1AuditLogsParamsActionTypeScheduledPulseQueryNameEdit                GetConsoleV1AuditLogsParamsActionType = "scheduled_pulse_query_name_edit"
	GetConsoleV1AuditLogsParamsActionTypeScheduledPulseRollupsUpdate                GetConsoleV1AuditLogsParamsActionType = "scheduled_pulse_rollups_update"
	GetConsoleV1AuditLogsParamsActionTypeSdkKeyCreate                               GetConsoleV1AuditLogsParamsActionType = "sdk_key_create"
	GetConsoleV1AuditLogsParamsActionTypeSdkKeyDeactivate                           GetConsoleV1AuditLogsParamsActionType = "sdk_key_deactivate"
	GetConsoleV1AuditLogsParamsActionTypeSdkKeyDelete                               GetConsoleV1AuditLogsParamsActionType = "sdk_key_delete"
	GetConsoleV1AuditLogsParamsActionTypeSdkKeyUpdateDescription                    GetConsoleV1AuditLogsParamsActionType = "sdk_key_update_description"
	GetConsoleV1AuditLogsParamsActionTypeSdkKeyUpdateEnvironments                   GetConsoleV1AuditLogsParamsActionType = "sdk_key_update_environments"
	GetConsoleV1AuditLogsParamsActionTypeSdkKeyUpdateScopes                         GetConsoleV1AuditLogsParamsActionType = "sdk_key_update_scopes"
	GetConsoleV1AuditLogsParamsActionTypeSdkKeyUpdateTargetApp                      GetConsoleV1AuditLogsParamsActionType = "sdk_key_update_target_app"
	GetConsoleV1AuditLogsParamsActionTypeSecretKeyRegenerate                        GetConsoleV1AuditLogsParamsActionType = "secret_key_regenerate"
	GetConsoleV1AuditLogsParamsActionTypeSegmentCreate                              GetConsoleV1AuditLogsParamsActionType = "segment_create"
	GetConsoleV1AuditLogsParamsActionTypeSegmentUpdateOwners                        GetConsoleV1AuditLogsParamsActionType = "segment_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeSetApiShareKeyAccess                       GetConsoleV1AuditLogsParamsActionType = "set_api_share_key_access"
	GetConsoleV1AuditLogsParamsActionTypeSetAutomatedBotRemovals                    GetConsoleV1AuditLogsParamsActionType = "set_automated_bot_removals"
	GetConsoleV1AuditLogsParamsActionTypeSetBv3PlanType                             GetConsoleV1AuditLogsParamsActionType = "set_bv3_plan_type"
	GetConsoleV1AuditLogsParamsActionTypeSetCompanyDefaultUserRole                  GetConsoleV1AuditLogsParamsActionType = "set_company_default_user_role"
	GetConsoleV1AuditLogsParamsActionTypeSetCompanySessionReplaySamplingRate        GetConsoleV1AuditLogsParamsActionType = "set_company_session_replay_sampling_rate"
	GetConsoleV1AuditLogsParamsActionTypeSetDefaultPaymentMethod                    GetConsoleV1AuditLogsParamsActionType = "set_default_payment_method"
	GetConsoleV1AuditLogsParamsActionTypeSetEchidnaProjectMetricSchedule            GetConsoleV1AuditLogsParamsActionType = "set_echidna_project_metric_schedule"
	GetConsoleV1AuditLogsParamsActionTypeSetEchidnaProjectPulseSchedule             GetConsoleV1AuditLogsParamsActionType = "set_echidna_project_pulse_schedule"
	GetConsoleV1AuditLogsParamsActionTypeSetEchidnaScheduleHour                     GetConsoleV1AuditLogsParamsActionType = "set_echidna_schedule_hour"
	GetConsoleV1AuditLogsParamsActionTypeSetGateAnalytics0100ExposuresEnabled       GetConsoleV1AuditLogsParamsActionType = "set_gate_analytics_0_100_exposures_enabled"
	GetConsoleV1AuditLogsParamsActionTypeSetGateAnalyticsEnabledByDefault           GetConsoleV1AuditLogsParamsActionType = "set_gate_analytics_enabled_by_default"
	GetConsoleV1AuditLogsParamsActionTypeSetMetricDirectionality                    GetConsoleV1AuditLogsParamsActionType = "set_metric_directionality"
	GetConsoleV1AuditLogsParamsActionTypeSetPlanType                                GetConsoleV1AuditLogsParamsActionType = "set_plan_type"
	GetConsoleV1AuditLogsParamsActionTypeSetRequireTargetAppForNewEntity            GetConsoleV1AuditLogsParamsActionType = "set_require_target_app_for_new_entity"
	GetConsoleV1AuditLogsParamsActionTypeSetSelfApprovalsBlocked                    GetConsoleV1AuditLogsParamsActionType = "set_self_approvals_blocked"
	GetConsoleV1AuditLogsParamsActionTypeSetStopExperimentEnabled                   GetConsoleV1AuditLogsParamsActionType = "set_stop_experiment_enabled"
	GetConsoleV1AuditLogsParamsActionTypeSetStopNewAssignmentToggle                 GetConsoleV1AuditLogsParamsActionType = "set_stop_new_assignment_toggle"
	GetConsoleV1AuditLogsParamsActionTypeSetUserSamplingRate                        GetConsoleV1AuditLogsParamsActionType = "set_user_sampling_rate"
	GetConsoleV1AuditLogsParamsActionTypeSetUserSamplingRateForGate                 GetConsoleV1AuditLogsParamsActionType = "set_user_sampling_rate_for_gate"
	GetConsoleV1AuditLogsParamsActionTypeSetWhnResultsExportSetting                 GetConsoleV1AuditLogsParamsActionType = "set_whn_results_export_setting"
	GetConsoleV1AuditLogsParamsActionTypeSetWhnTableTtls                            GetConsoleV1AuditLogsParamsActionType = "set_whn_table_ttls"
	GetConsoleV1AuditLogsParamsActionTypeSetupExternalOptIn                         GetConsoleV1AuditLogsParamsActionType = "setup_external_opt_in"
	GetConsoleV1AuditLogsParamsActionTypeSetupStratifiedSampling                    GetConsoleV1AuditLogsParamsActionType = "setup_stratified_sampling"
	GetConsoleV1AuditLogsParamsActionTypeSharedReportLinkDelete                     GetConsoleV1AuditLogsParamsActionType = "shared_report_link_delete"
	GetConsoleV1AuditLogsParamsActionTypeSharedReportLinkUpsert                     GetConsoleV1AuditLogsParamsActionType = "shared_report_link_upsert"
	GetConsoleV1AuditLogsParamsActionTypeTagConfigsBulk                             GetConsoleV1AuditLogsParamsActionType = "tag_configs_bulk"
	GetConsoleV1AuditLogsParamsActionTypeTagCreate                                  GetConsoleV1AuditLogsParamsActionType = "tag_create"
	GetConsoleV1AuditLogsParamsActionTypeTagDelete                                  GetConsoleV1AuditLogsParamsActionType = "tag_delete"
	GetConsoleV1AuditLogsParamsActionTypeTagEdit                                    GetConsoleV1AuditLogsParamsActionType = "tag_edit"
	GetConsoleV1AuditLogsParamsActionTypeTagMetricsBulk                             GetConsoleV1AuditLogsParamsActionType = "tag_metrics_bulk"
	GetConsoleV1AuditLogsParamsActionTypeTagUpdateOwners                            GetConsoleV1AuditLogsParamsActionType = "tag_update_owners"
	GetConsoleV1AuditLogsParamsActionTypeUnarchiveExperiment                        GetConsoleV1AuditLogsParamsActionType = "unarchive_experiment"
	GetConsoleV1AuditLogsParamsActionTypeUnarchiveMetric                            GetConsoleV1AuditLogsParamsActionType = "unarchive_metric"
	GetConsoleV1AuditLogsParamsActionTypeUnattachExperimentToPowerAnalysisReport    GetConsoleV1AuditLogsParamsActionType = "unattach_experiment_to_power_analysis_report"
	GetConsoleV1AuditLogsParamsActionTypeUnsnoozeGuardrailMetricAlert               GetConsoleV1AuditLogsParamsActionType = "unsnooze_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypeUpdateBv3Subscription                      GetConsoleV1AuditLogsParamsActionType = "update_bv3_subscription"
	GetConsoleV1AuditLogsParamsActionTypeUpdateCompanyAutoCaptureSettings           GetConsoleV1AuditLogsParamsActionType = "update_company_auto_capture_settings"
	GetConsoleV1AuditLogsParamsActionTypeUpdateCompanyExperimentExclusionSegment    GetConsoleV1AuditLogsParamsActionType = "update_company_experiment_exclusion_segment"
	GetConsoleV1AuditLogsParamsActionTypeUpdateCompanyRemoveDefaultGatesSetting     GetConsoleV1AuditLogsParamsActionType = "update_company_remove_default_gates_setting"
	GetConsoleV1AuditLogsParamsActionTypeUpdateCompanyUserStoreEnabled              GetConsoleV1AuditLogsParamsActionType = "update_company_user_store_enabled"
	GetConsoleV1AuditLogsParamsActionTypeUpdateConfigReleasePipeline                GetConsoleV1AuditLogsParamsActionType = "update_config_release_pipeline"
	GetConsoleV1AuditLogsParamsActionTypeUpdateDashboardSettings                    GetConsoleV1AuditLogsParamsActionType = "update_dashboard_settings"
	GetConsoleV1AuditLogsParamsActionTypeUpdateDashboardWidgetsFromGeneratedTags    GetConsoleV1AuditLogsParamsActionType = "update_dashboard_widgets_from_generated_tags"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaAssignmentSource              GetConsoleV1AuditLogsParamsActionType = "update_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaAssignmentSourceIsVerified    GetConsoleV1AuditLogsParamsActionType = "update_echidna_assignment_source_is_verified"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaAssignmentSourceLoadingWindow GetConsoleV1AuditLogsParamsActionType = "update_echidna_assignment_source_loading_window"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaAssignmentSourceName          GetConsoleV1AuditLogsParamsActionType = "update_echidna_assignment_source_name"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaEntityPropertySource          GetConsoleV1AuditLogsParamsActionType = "update_echidna_entity_property_source"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaEntityPropertySourceName      GetConsoleV1AuditLogsParamsActionType = "update_echidna_entity_property_source_name"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaMetricLoadingWindow           GetConsoleV1AuditLogsParamsActionType = "update_echidna_metric_loading_window"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaMetricSource                  GetConsoleV1AuditLogsParamsActionType = "update_echidna_metric_source"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaMetricSourceName              GetConsoleV1AuditLogsParamsActionType = "update_echidna_metric_source_name"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaMetricTagOrDescription        GetConsoleV1AuditLogsParamsActionType = "update_echidna_metric_tag_or_description"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaSourceOwner                   GetConsoleV1AuditLogsParamsActionType = "update_echidna_source_owner"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionType = "update_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaSourceReviewRequired          GetConsoleV1AuditLogsParamsActionType = "update_echidna_source_review_required"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEchidnaSubtype                       GetConsoleV1AuditLogsParamsActionType = "update_echidna_subtype"
	GetConsoleV1AuditLogsParamsActionTypeUpdateEntitiesRequireTeams                 GetConsoleV1AuditLogsParamsActionType = "update_entities_require_teams"
	GetConsoleV1AuditLogsParamsActionTypeUpdateExperimentEnabledNonProdEnvironments GetConsoleV1AuditLogsParamsActionType = "update_experiment_enabled_non_prod_environments"
	GetConsoleV1AuditLogsParamsActionTypeUpdateExperimentQualityScoreCriteria       GetConsoleV1AuditLogsParamsActionType = "update_experiment_quality_score_criteria"
	GetConsoleV1AuditLogsParamsActionTypeUpdateExperimentQualityScoreSettings       GetConsoleV1AuditLogsParamsActionType = "update_experiment_quality_score_settings"
	GetConsoleV1AuditLogsParamsActionTypeUpdateExperimentSalt                       GetConsoleV1AuditLogsParamsActionType = "update_experiment_salt"
	GetConsoleV1AuditLogsParamsActionTypeUpdateGateAnalyticsEnabled                 GetConsoleV1AuditLogsParamsActionType = "update_gate_analytics_enabled"
	GetConsoleV1AuditLogsParamsActionTypeUpdateGateIsPermanent                      GetConsoleV1AuditLogsParamsActionType = "update_gate_is_permanent"
	GetConsoleV1AuditLogsParamsActionTypeUpdateLayerParameter                       GetConsoleV1AuditLogsParamsActionType = "update_layer_parameter"
	GetConsoleV1AuditLogsParamsActionTypeUpdateMetricIsPermanent                    GetConsoleV1AuditLogsParamsActionType = "update_metric_is_permanent"
	GetConsoleV1AuditLogsParamsActionTypeUpdateMetricIsVerified                     GetConsoleV1AuditLogsParamsActionType = "update_metric_is_verified"
	GetConsoleV1AuditLogsParamsActionTypeUpdateMetricReviewRequired                 GetConsoleV1AuditLogsParamsActionType = "update_metric_review_required"
	GetConsoleV1AuditLogsParamsActionTypeUpdatePrecommitHook                        GetConsoleV1AuditLogsParamsActionType = "update_precommit_hook"
	GetConsoleV1AuditLogsParamsActionTypeUpdatePrecommitWebhookKey                  GetConsoleV1AuditLogsParamsActionType = "update_precommit_webhook_key"
	GetConsoleV1AuditLogsParamsActionTypeUpdateServerSdkConfigurationRollback       GetConsoleV1AuditLogsParamsActionType = "update_server_sdk_configuration_rollback"
	GetConsoleV1AuditLogsParamsActionTypeUpdateStore0100Exposures                   GetConsoleV1AuditLogsParamsActionType = "update_store_0_100_exposures"
	GetConsoleV1AuditLogsParamsActionTypeUpdateTeam                                 GetConsoleV1AuditLogsParamsActionType = "update_team"
	GetConsoleV1AuditLogsParamsActionTypeUpdateTeamAdmins                           GetConsoleV1AuditLogsParamsActionType = "update_team_admins"
	GetConsoleV1AuditLogsParamsActionTypeUpdateTeamDescription                      GetConsoleV1AuditLogsParamsActionType = "update_team_description"
	GetConsoleV1AuditLogsParamsActionTypeUpdateTeamName                             GetConsoleV1AuditLogsParamsActionType = "update_team_name"
	GetConsoleV1AuditLogsParamsActionTypeUpdateTeamSettings                         GetConsoleV1AuditLogsParamsActionType = "update_team_settings"
	GetConsoleV1AuditLogsParamsActionTypeUpdateToplineAlert                         GetConsoleV1AuditLogsParamsActionType = "update_topline_alert"
	GetConsoleV1AuditLogsParamsActionTypeUpsertExperimentSettings                   GetConsoleV1AuditLogsParamsActionType = "upsert_experiment_settings"
	GetConsoleV1AuditLogsParamsActionTypeUpsertGateSettings                         GetConsoleV1AuditLogsParamsActionType = "upsert_gate_settings"
	GetConsoleV1AuditLogsParamsActionTypeUpsertTriggerIntegration                   GetConsoleV1AuditLogsParamsActionType = "upsert_trigger_integration"
	GetConsoleV1AuditLogsParamsActionTypeUpsertUserRole                             GetConsoleV1AuditLogsParamsActionType = "upsert_user_role"
	GetConsoleV1AuditLogsParamsActionTypeUserDataLoad                               GetConsoleV1AuditLogsParamsActionType = "user_data_load"
	GetConsoleV1AuditLogsParamsActionTypeUserLogin                                  GetConsoleV1AuditLogsParamsActionType = "user_login"
	GetConsoleV1AuditLogsParamsActionTypeUserRoleUpdate                             GetConsoleV1AuditLogsParamsActionType = "user_role_update"
)

// Defines values for GetConsoleV1AuditLogsParamsActionTypes.
const (
	GetConsoleV1AuditLogsParamsActionTypesAWSMarketplaceAccountDelete                GetConsoleV1AuditLogsParamsActionTypes = "AWS_marketplace_account_delete"
	GetConsoleV1AuditLogsParamsActionTypesAcceptEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionTypes = "accept_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypesActiveUserDefinitionUpdate                 GetConsoleV1AuditLogsParamsActionTypes = "active_user_definition_update"
	GetConsoleV1AuditLogsParamsActionTypesAddDashboardWidget                         GetConsoleV1AuditLogsParamsActionTypes = "add_dashboard_widget"
	GetConsoleV1AuditLogsParamsActionTypesAddGeoType                                 GetConsoleV1AuditLogsParamsActionTypes = "add_geo_type"
	GetConsoleV1AuditLogsParamsActionTypesAddSegmentsOfInterestProperty              GetConsoleV1AuditLogsParamsActionTypes = "add_segments_of_interest_property"
	GetConsoleV1AuditLogsParamsActionTypesAddSrmDebuggerCustomDimension              GetConsoleV1AuditLogsParamsActionTypes = "add_srm_debugger_custom_dimension"
	GetConsoleV1AuditLogsParamsActionTypesApplyExperimentReview                      GetConsoleV1AuditLogsParamsActionTypes = "apply_experiment_review"
	GetConsoleV1AuditLogsParamsActionTypesArchiveExperiment                          GetConsoleV1AuditLogsParamsActionTypes = "archive_experiment"
	GetConsoleV1AuditLogsParamsActionTypesArchiveMetric                              GetConsoleV1AuditLogsParamsActionTypes = "archive_metric"
	GetConsoleV1AuditLogsParamsActionTypesAutotuneExperimentCreate                   GetConsoleV1AuditLogsParamsActionTypes = "autotune_experiment_create"
	GetConsoleV1AuditLogsParamsActionTypesAutotuneExperimentDelete                   GetConsoleV1AuditLogsParamsActionTypes = "autotune_experiment_delete"
	GetConsoleV1AuditLogsParamsActionTypesAutotuneExperimentEdit                     GetConsoleV1AuditLogsParamsActionTypes = "autotune_experiment_edit"
	GetConsoleV1AuditLogsParamsActionTypesAutotuneExperimentSnapshotDelete           GetConsoleV1AuditLogsParamsActionTypes = "autotune_experiment_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypesAutotuneExperimentUpdateTargetApps         GetConsoleV1AuditLogsParamsActionTypes = "autotune_experiment_update_target_apps"
	GetConsoleV1AuditLogsParamsActionTypesBatchCancelCompanyInvites                  GetConsoleV1AuditLogsParamsActionTypes = "batch_cancel_company_invites"
	GetConsoleV1AuditLogsParamsActionTypesBatchUserRoleUpdate                        GetConsoleV1AuditLogsParamsActionTypes = "batch_user_role_update"
	GetConsoleV1AuditLogsParamsActionTypesCancelArchiveMetric                        GetConsoleV1AuditLogsParamsActionTypes = "cancel_archive_metric"
	GetConsoleV1AuditLogsParamsActionTypesCancelDeleteMetric                         GetConsoleV1AuditLogsParamsActionTypes = "cancel_delete_metric"
	GetConsoleV1AuditLogsParamsActionTypesCancelEchidnaDag                           GetConsoleV1AuditLogsParamsActionTypes = "cancel_echidna_dag"
	GetConsoleV1AuditLogsParamsActionTypesCommitEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionTypes = "commit_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypesCompanyBasicInfoEdit                       GetConsoleV1AuditLogsParamsActionTypes = "company_basic_info_edit"
	GetConsoleV1AuditLogsParamsActionTypesCompanyCreate                              GetConsoleV1AuditLogsParamsActionTypes = "company_create"
	GetConsoleV1AuditLogsParamsActionTypesCompanyDelete                              GetConsoleV1AuditLogsParamsActionTypes = "company_delete"
	GetConsoleV1AuditLogsParamsActionTypesCompanyEmailDomainConfigDelete             GetConsoleV1AuditLogsParamsActionTypes = "company_email_domain_config_delete"
	GetConsoleV1AuditLogsParamsActionTypesCompanyEnvironmentsEdit                    GetConsoleV1AuditLogsParamsActionTypes = "company_environments_edit"
	GetConsoleV1AuditLogsParamsActionTypesCompanyIDTypeAdd                           GetConsoleV1AuditLogsParamsActionTypes = "company_ID_type_add"
	GetConsoleV1AuditLogsParamsActionTypesCompanyIDTypeDelete                        GetConsoleV1AuditLogsParamsActionTypes = "company_ID_type_delete"
	GetConsoleV1AuditLogsParamsActionTypesCompanyInviteAccessUpdate                  GetConsoleV1AuditLogsParamsActionTypes = "company_invite_access_update"
	GetConsoleV1AuditLogsParamsActionTypesCompanyMemberRemove                        GetConsoleV1AuditLogsParamsActionTypes = "company_member_remove"
	GetConsoleV1AuditLogsParamsActionTypesCompanyMetricDelete                        GetConsoleV1AuditLogsParamsActionTypes = "company_metric_delete"
	GetConsoleV1AuditLogsParamsActionTypesCompanyMetricManagementUpdate              GetConsoleV1AuditLogsParamsActionTypes = "company_metric_management_update"
	GetConsoleV1AuditLogsParamsActionTypesCompanySnapshotDelete                      GetConsoleV1AuditLogsParamsActionTypes = "company_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypesConfigAddTag                               GetConsoleV1AuditLogsParamsActionTypes = "config_add_tag"
	GetConsoleV1AuditLogsParamsActionTypesConfigAllowedReviewersUpdate               GetConsoleV1AuditLogsParamsActionTypes = "config_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigConditionsUpdate                     GetConsoleV1AuditLogsParamsActionTypes = "config_conditions_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigDefaultValueUpdate                   GetConsoleV1AuditLogsParamsActionTypes = "config_default_value_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigDelete                               GetConsoleV1AuditLogsParamsActionTypes = "config_delete"
	GetConsoleV1AuditLogsParamsActionTypesConfigDescriptionUpdate                    GetConsoleV1AuditLogsParamsActionTypes = "config_description_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigEditTags                             GetConsoleV1AuditLogsParamsActionTypes = "config_edit_tags"
	GetConsoleV1AuditLogsParamsActionTypesConfigEditTargetApps                       GetConsoleV1AuditLogsParamsActionTypes = "config_edit_target_apps"
	GetConsoleV1AuditLogsParamsActionTypesConfigEnvironmentsUpdate                   GetConsoleV1AuditLogsParamsActionTypes = "config_environments_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigIdTypeUpdate                         GetConsoleV1AuditLogsParamsActionTypes = "config_id_type_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigMonitoringMetricsUpdate              GetConsoleV1AuditLogsParamsActionTypes = "config_monitoring_metrics_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigRemoveTag                            GetConsoleV1AuditLogsParamsActionTypes = "config_remove_tag"
	GetConsoleV1AuditLogsParamsActionTypesConfigRequireReviews                       GetConsoleV1AuditLogsParamsActionTypes = "config_require_reviews"
	GetConsoleV1AuditLogsParamsActionTypesConfigResalt                               GetConsoleV1AuditLogsParamsActionTypes = "config_resalt"
	GetConsoleV1AuditLogsParamsActionTypesConfigRevert                               GetConsoleV1AuditLogsParamsActionTypes = "config_revert"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewAccept                         GetConsoleV1AuditLogsParamsActionTypes = "config_review_accept"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewCommit                         GetConsoleV1AuditLogsParamsActionTypes = "config_review_commit"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewCreate                         GetConsoleV1AuditLogsParamsActionTypes = "config_review_create"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewDelete                         GetConsoleV1AuditLogsParamsActionTypes = "config_review_delete"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewInfoUpdate                     GetConsoleV1AuditLogsParamsActionTypes = "config_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewReject                         GetConsoleV1AuditLogsParamsActionTypes = "config_review_reject"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewRequiredUpdate                 GetConsoleV1AuditLogsParamsActionTypes = "config_review_required_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewUpdate                         GetConsoleV1AuditLogsParamsActionTypes = "config_review_update"
	GetConsoleV1AuditLogsParamsActionTypesConfigReviewsDisable                       GetConsoleV1AuditLogsParamsActionTypes = "config_reviews_disable"
	GetConsoleV1AuditLogsParamsActionTypesConfigStateToggle                          GetConsoleV1AuditLogsParamsActionTypes = "config_state_toggle"
	GetConsoleV1AuditLogsParamsActionTypesConfigUpdateOwners                         GetConsoleV1AuditLogsParamsActionTypes = "config_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesCreateCustomerApp                          GetConsoleV1AuditLogsParamsActionTypes = "create_customer_app"
	GetConsoleV1AuditLogsParamsActionTypesCreateDashboard                            GetConsoleV1AuditLogsParamsActionTypes = "create_dashboard"
	GetConsoleV1AuditLogsParamsActionTypesCreateEchidnaAssignmentSource              GetConsoleV1AuditLogsParamsActionTypes = "create_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypesCreateEchidnaDataQualityChecks             GetConsoleV1AuditLogsParamsActionTypes = "create_echidna_data_quality_checks"
	GetConsoleV1AuditLogsParamsActionTypesCreateEchidnaEntityPropertySource          GetConsoleV1AuditLogsParamsActionTypes = "create_echidna_entity_property_source"
	GetConsoleV1AuditLogsParamsActionTypesCreateEchidnaMetricSource                  GetConsoleV1AuditLogsParamsActionTypes = "create_echidna_metric_source"
	GetConsoleV1AuditLogsParamsActionTypesCreateEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionTypes = "create_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypesCreateGuardrailMetricAlert                 GetConsoleV1AuditLogsParamsActionTypes = "create_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypesCreatePowerAnalysisGateQuery               GetConsoleV1AuditLogsParamsActionTypes = "create_power_analysis_gate_query"
	GetConsoleV1AuditLogsParamsActionTypesCreateStatsigProxy                         GetConsoleV1AuditLogsParamsActionTypes = "create_statsig_proxy"
	GetConsoleV1AuditLogsParamsActionTypesCreateToplineAlert                         GetConsoleV1AuditLogsParamsActionTypes = "create_topline_alert"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricDefinitionCreate               GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_definition_create"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricDefinitionDelete               GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_definition_delete"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricDefinitionEdit                 GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_definition_edit"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricEdit                           GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_edit"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricNameEdit                       GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_name_edit"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricReviewAccept                   GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_review_accept"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricReviewDelete                   GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_review_delete"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricReviewReject                   GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_review_reject"
	GetConsoleV1AuditLogsParamsActionTypesCustomMetricUpdateOwners                   GetConsoleV1AuditLogsParamsActionTypes = "custom_metric_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesCustomPulseQueryCreate                     GetConsoleV1AuditLogsParamsActionTypes = "custom_pulse_query_create"
	GetConsoleV1AuditLogsParamsActionTypesCustomPulseQueryDelete                     GetConsoleV1AuditLogsParamsActionTypes = "custom_pulse_query_delete"
	GetConsoleV1AuditLogsParamsActionTypesCustomPulseQueryNameEdit                   GetConsoleV1AuditLogsParamsActionTypes = "custom_pulse_query_name_edit"
	GetConsoleV1AuditLogsParamsActionTypesCustomQueryToggleFavorite                  GetConsoleV1AuditLogsParamsActionTypes = "custom_query_toggle_favorite"
	GetConsoleV1AuditLogsParamsActionTypesCustomSankeyDelete                         GetConsoleV1AuditLogsParamsActionTypes = "custom_sankey_delete"
	GetConsoleV1AuditLogsParamsActionTypesDashboardUpdateOwners                      GetConsoleV1AuditLogsParamsActionTypes = "dashboard_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesDeleteDashboard                            GetConsoleV1AuditLogsParamsActionTypes = "delete_dashboard"
	GetConsoleV1AuditLogsParamsActionTypesDeleteDashboardWidget                      GetConsoleV1AuditLogsParamsActionTypes = "delete_dashboard_widget"
	GetConsoleV1AuditLogsParamsActionTypesDeleteEchidnaAssignmentSource              GetConsoleV1AuditLogsParamsActionTypes = "delete_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypesDeleteEchidnaEntityPropertySource          GetConsoleV1AuditLogsParamsActionTypes = "delete_echidna_entity_property_source"
	GetConsoleV1AuditLogsParamsActionTypesDeleteEchidnaMetricSource                  GetConsoleV1AuditLogsParamsActionTypes = "delete_echidna_metric_source"
	GetConsoleV1AuditLogsParamsActionTypesDeleteEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionTypes = "delete_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypesDeleteGuardrailMetricAlert                 GetConsoleV1AuditLogsParamsActionTypes = "delete_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypesDeleteLayerParameter                       GetConsoleV1AuditLogsParamsActionTypes = "delete_layer_parameter"
	GetConsoleV1AuditLogsParamsActionTypesDeleteMetric                               GetConsoleV1AuditLogsParamsActionTypes = "delete_metric"
	GetConsoleV1AuditLogsParamsActionTypesDeletePaymentMethod                        GetConsoleV1AuditLogsParamsActionTypes = "delete_payment_method"
	GetConsoleV1AuditLogsParamsActionTypesDeleteSegmentsOfInterestProperty           GetConsoleV1AuditLogsParamsActionTypes = "delete_segments_of_interest_property"
	GetConsoleV1AuditLogsParamsActionTypesDeleteSrmDebuggerCustomDimension           GetConsoleV1AuditLogsParamsActionTypes = "delete_srm_debugger_custom_dimension"
	GetConsoleV1AuditLogsParamsActionTypesDeleteTag                                  GetConsoleV1AuditLogsParamsActionTypes = "delete_tag"
	GetConsoleV1AuditLogsParamsActionTypesDeleteTargetApp                            GetConsoleV1AuditLogsParamsActionTypes = "delete_target_app"
	GetConsoleV1AuditLogsParamsActionTypesDeleteToplineAlert                         GetConsoleV1AuditLogsParamsActionTypes = "delete_topline_alert"
	GetConsoleV1AuditLogsParamsActionTypesDeleteTriggerIntegration                   GetConsoleV1AuditLogsParamsActionTypes = "delete_trigger_integration"
	GetConsoleV1AuditLogsParamsActionTypesDeleteUserRole                             GetConsoleV1AuditLogsParamsActionTypes = "delete_user_role"
	GetConsoleV1AuditLogsParamsActionTypesDismissRunawayEntity                       GetConsoleV1AuditLogsParamsActionTypes = "dismiss_runaway_entity"
	GetConsoleV1AuditLogsParamsActionTypesDynamicConfigCreate                        GetConsoleV1AuditLogsParamsActionTypes = "dynamic_config_create"
	GetConsoleV1AuditLogsParamsActionTypesDynamicConfigTemplateCreate                GetConsoleV1AuditLogsParamsActionTypes = "dynamic_config_template_create"
	GetConsoleV1AuditLogsParamsActionTypesDynamicConfigUpdateOwners                  GetConsoleV1AuditLogsParamsActionTypes = "dynamic_config_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesEchidnaDropTables                          GetConsoleV1AuditLogsParamsActionTypes = "echidna_drop_tables"
	GetConsoleV1AuditLogsParamsActionTypesEditDashboardDescription                   GetConsoleV1AuditLogsParamsActionTypes = "edit_dashboard_description"
	GetConsoleV1AuditLogsParamsActionTypesEditDashboardName                          GetConsoleV1AuditLogsParamsActionTypes = "edit_dashboard_name"
	GetConsoleV1AuditLogsParamsActionTypesEditDashboardWidget                        GetConsoleV1AuditLogsParamsActionTypes = "edit_dashboard_widget"
	GetConsoleV1AuditLogsParamsActionTypesEditExperimentDisplayName                  GetConsoleV1AuditLogsParamsActionTypes = "edit_experiment_display_name"
	GetConsoleV1AuditLogsParamsActionTypesEditGuardrailMetricAlert                   GetConsoleV1AuditLogsParamsActionTypes = "edit_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypesEditTargetApp                              GetConsoleV1AuditLogsParamsActionTypes = "edit_target_app"
	GetConsoleV1AuditLogsParamsActionTypesEventDimensionUpdate                       GetConsoleV1AuditLogsParamsActionTypes = "event_dimension_update"
	GetConsoleV1AuditLogsParamsActionTypesExperimentAbandon                          GetConsoleV1AuditLogsParamsActionTypes = "experiment_abandon"
	GetConsoleV1AuditLogsParamsActionTypesExperimentAdvancedSettingsEdit             GetConsoleV1AuditLogsParamsActionTypes = "experiment_advanced_settings_edit"
	GetConsoleV1AuditLogsParamsActionTypesExperimentAllowedReviewersUpdate           GetConsoleV1AuditLogsParamsActionTypes = "experiment_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypesExperimentCreate                           GetConsoleV1AuditLogsParamsActionTypes = "experiment_create"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDataReportDelete                 GetConsoleV1AuditLogsParamsActionTypes = "experiment_data_report_delete"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDataReportRename                 GetConsoleV1AuditLogsParamsActionTypes = "experiment_data_report_rename"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDataReportUpdateParameters       GetConsoleV1AuditLogsParamsActionTypes = "experiment_data_report_update_parameters"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDecisionMake                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_decision_make"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDelete                           GetConsoleV1AuditLogsParamsActionTypes = "experiment_delete"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDescriptionEdit                  GetConsoleV1AuditLogsParamsActionTypes = "experiment_description_edit"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDiscussionPostCreate             GetConsoleV1AuditLogsParamsActionTypes = "experiment_discussion_post_create"
	GetConsoleV1AuditLogsParamsActionTypesExperimentDiscussionPostDelete             GetConsoleV1AuditLogsParamsActionTypes = "experiment_discussion_post_delete"
	GetConsoleV1AuditLogsParamsActionTypesExperimentEdit                             GetConsoleV1AuditLogsParamsActionTypes = "experiment_edit"
	GetConsoleV1AuditLogsParamsActionTypesExperimentFollowToggle                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_follow_toggle"
	GetConsoleV1AuditLogsParamsActionTypesExperimentGroupDisable                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_group_disable"
	GetConsoleV1AuditLogsParamsActionTypesExperimentOverridesEdit                    GetConsoleV1AuditLogsParamsActionTypes = "experiment_overrides_edit"
	GetConsoleV1AuditLogsParamsActionTypesExperimentPauseAssignment                  GetConsoleV1AuditLogsParamsActionTypes = "experiment_pause_assignment"
	GetConsoleV1AuditLogsParamsActionTypesExperimentRestart                          GetConsoleV1AuditLogsParamsActionTypes = "experiment_restart"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewAccept                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_accept"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewCommit                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_commit"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewCreate                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_create"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewDelete                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_delete"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewInfoUpdate                 GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewReject                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_reject"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewUpdateOverrides            GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_update_overrides"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewUpdateOwners               GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewUpdateTeam                 GetConsoleV1AuditLogsParamsActionTypes = "experiment_review_update_team"
	GetConsoleV1AuditLogsParamsActionTypesExperimentReviewsOn                        GetConsoleV1AuditLogsParamsActionTypes = "experiment_reviews_on"
	GetConsoleV1AuditLogsParamsActionTypesExperimentRollout                          GetConsoleV1AuditLogsParamsActionTypes = "experiment_rollout"
	GetConsoleV1AuditLogsParamsActionTypesExperimentScheduleRollout                  GetConsoleV1AuditLogsParamsActionTypes = "experiment_schedule_rollout"
	GetConsoleV1AuditLogsParamsActionTypesExperimentSnapshotDelete                   GetConsoleV1AuditLogsParamsActionTypes = "experiment_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypesExperimentStart                            GetConsoleV1AuditLogsParamsActionTypes = "experiment_start"
	GetConsoleV1AuditLogsParamsActionTypesExperimentStopped                          GetConsoleV1AuditLogsParamsActionTypes = "experiment_stopped"
	GetConsoleV1AuditLogsParamsActionTypesExperimentTemplateCreate                   GetConsoleV1AuditLogsParamsActionTypes = "experiment_template_create"
	GetConsoleV1AuditLogsParamsActionTypesExperimentUpdateDecisionNote               GetConsoleV1AuditLogsParamsActionTypes = "experiment_update_decision_note"
	GetConsoleV1AuditLogsParamsActionTypesExperimentUpdateOwners                     GetConsoleV1AuditLogsParamsActionTypes = "experiment_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesExperimentUpdateSubdimensionFilter         GetConsoleV1AuditLogsParamsActionTypes = "experiment_update_subdimension_filter"
	GetConsoleV1AuditLogsParamsActionTypesExperimentUpdateTargetApps                 GetConsoleV1AuditLogsParamsActionTypes = "experiment_update_target_apps"
	GetConsoleV1AuditLogsParamsActionTypesExtendExperimentPulseEndDate               GetConsoleV1AuditLogsParamsActionTypes = "extend_experiment_pulse_end_date"
	GetConsoleV1AuditLogsParamsActionTypesGateCreate                                 GetConsoleV1AuditLogsParamsActionTypes = "gate_create"
	GetConsoleV1AuditLogsParamsActionTypesGateOverridesUpdate                        GetConsoleV1AuditLogsParamsActionTypes = "gate_overrides_update"
	GetConsoleV1AuditLogsParamsActionTypesGateTemplateCreate                         GetConsoleV1AuditLogsParamsActionTypes = "gate_template_create"
	GetConsoleV1AuditLogsParamsActionTypesGateUpdate                                 GetConsoleV1AuditLogsParamsActionTypes = "gate_update"
	GetConsoleV1AuditLogsParamsActionTypesGateUpdateOwners                           GetConsoleV1AuditLogsParamsActionTypes = "gate_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesGenerateIntegrationWebhookSecret           GetConsoleV1AuditLogsParamsActionTypes = "generate_integration_webhook_secret"
	GetConsoleV1AuditLogsParamsActionTypesHoldoutCreate                              GetConsoleV1AuditLogsParamsActionTypes = "holdout_create"
	GetConsoleV1AuditLogsParamsActionTypesHoldoutDelete                              GetConsoleV1AuditLogsParamsActionTypes = "holdout_delete"
	GetConsoleV1AuditLogsParamsActionTypesHoldoutLayerParameterValuesUpdate          GetConsoleV1AuditLogsParamsActionTypes = "holdout_layer_parameter_values_update"
	GetConsoleV1AuditLogsParamsActionTypesHoldoutUpdate                              GetConsoleV1AuditLogsParamsActionTypes = "holdout_update"
	GetConsoleV1AuditLogsParamsActionTypesHoldoutUpdateOwners                        GetConsoleV1AuditLogsParamsActionTypes = "holdout_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesHypothesisEdit                             GetConsoleV1AuditLogsParamsActionTypes = "hypothesis_edit"
	GetConsoleV1AuditLogsParamsActionTypesIDListUpdate                               GetConsoleV1AuditLogsParamsActionTypes = "ID_list_update"
	GetConsoleV1AuditLogsParamsActionTypesIngestionSourceDelete                      GetConsoleV1AuditLogsParamsActionTypes = "ingestion_source_delete"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationCreate                          GetConsoleV1AuditLogsParamsActionTypes = "integration_create"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationDelete                          GetConsoleV1AuditLogsParamsActionTypes = "integration_delete"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationSetEnabled                      GetConsoleV1AuditLogsParamsActionTypes = "integration_set_enabled"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationUpdate                          GetConsoleV1AuditLogsParamsActionTypes = "integration_update"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationUpdateDisabledEvents            GetConsoleV1AuditLogsParamsActionTypes = "integration_update_disabled_events"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationUpdateOutgoingConfig            GetConsoleV1AuditLogsParamsActionTypes = "integration_update_outgoing_config"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationUpdateRateLimits                GetConsoleV1AuditLogsParamsActionTypes = "integration_update_rate_limits"
	GetConsoleV1AuditLogsParamsActionTypesIntegrationUpsert                          GetConsoleV1AuditLogsParamsActionTypes = "integration_upsert"
	GetConsoleV1AuditLogsParamsActionTypesKeyExperimentMetricsEdit                   GetConsoleV1AuditLogsParamsActionTypes = "key_experiment_metrics_edit"
	GetConsoleV1AuditLogsParamsActionTypesLayerAllowedReviewersUpdate                GetConsoleV1AuditLogsParamsActionTypes = "layer_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypesLayerCreate                                GetConsoleV1AuditLogsParamsActionTypes = "layer_create"
	GetConsoleV1AuditLogsParamsActionTypesLayerDelete                                GetConsoleV1AuditLogsParamsActionTypes = "layer_delete"
	GetConsoleV1AuditLogsParamsActionTypesLayerDescriptionEdit                       GetConsoleV1AuditLogsParamsActionTypes = "layer_description_edit"
	GetConsoleV1AuditLogsParamsActionTypesLayerEdit                                  GetConsoleV1AuditLogsParamsActionTypes = "layer_edit"
	GetConsoleV1AuditLogsParamsActionTypesLayerOverridesEdit                         GetConsoleV1AuditLogsParamsActionTypes = "layer_overrides_edit"
	GetConsoleV1AuditLogsParamsActionTypesLayerParameterAdd                          GetConsoleV1AuditLogsParamsActionTypes = "layer_parameter_add"
	GetConsoleV1AuditLogsParamsActionTypesLayerParametersEdit                        GetConsoleV1AuditLogsParamsActionTypes = "layer_parameters_edit"
	GetConsoleV1AuditLogsParamsActionTypesLayerReviewAccept                          GetConsoleV1AuditLogsParamsActionTypes = "layer_review_accept"
	GetConsoleV1AuditLogsParamsActionTypesLayerReviewCommit                          GetConsoleV1AuditLogsParamsActionTypes = "layer_review_commit"
	GetConsoleV1AuditLogsParamsActionTypesLayerReviewCreate                          GetConsoleV1AuditLogsParamsActionTypes = "layer_review_create"
	GetConsoleV1AuditLogsParamsActionTypesLayerReviewDelete                          GetConsoleV1AuditLogsParamsActionTypes = "layer_review_delete"
	GetConsoleV1AuditLogsParamsActionTypesLayerReviewInfoUpdate                      GetConsoleV1AuditLogsParamsActionTypes = "layer_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypesLayerReviewReject                          GetConsoleV1AuditLogsParamsActionTypes = "layer_review_reject"
	GetConsoleV1AuditLogsParamsActionTypesLayerReviewsOn                             GetConsoleV1AuditLogsParamsActionTypes = "layer_reviews_on"
	GetConsoleV1AuditLogsParamsActionTypesLayerSnapshotDelete                        GetConsoleV1AuditLogsParamsActionTypes = "layer_snapshot_delete"
	GetConsoleV1AuditLogsParamsActionTypesLayerUpdateOwners                          GetConsoleV1AuditLogsParamsActionTypes = "layer_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesLayerUpdateTargetApps                      GetConsoleV1AuditLogsParamsActionTypes = "layer_update_target_apps"
	GetConsoleV1AuditLogsParamsActionTypesLoadEchidnaAssignmentSource                GetConsoleV1AuditLogsParamsActionTypes = "load_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypesLoadEchidnaMetric                          GetConsoleV1AuditLogsParamsActionTypes = "load_echidna_metric"
	GetConsoleV1AuditLogsParamsActionTypesLoadEchidnaPulse                           GetConsoleV1AuditLogsParamsActionTypes = "load_echidna_pulse"
	GetConsoleV1AuditLogsParamsActionTypesMetricAddTag                               GetConsoleV1AuditLogsParamsActionTypes = "metric_add_tag"
	GetConsoleV1AuditLogsParamsActionTypesMetricAllowedReviewersUpdate               GetConsoleV1AuditLogsParamsActionTypes = "metric_allowed_reviewers_update"
	GetConsoleV1AuditLogsParamsActionTypesMetricDisableReviewsLocally                GetConsoleV1AuditLogsParamsActionTypes = "metric_disable_reviews_locally"
	GetConsoleV1AuditLogsParamsActionTypesMetricEditDefinition                       GetConsoleV1AuditLogsParamsActionTypes = "metric_edit_definition"
	GetConsoleV1AuditLogsParamsActionTypesMetricEditDescription                      GetConsoleV1AuditLogsParamsActionTypes = "metric_edit_description"
	GetConsoleV1AuditLogsParamsActionTypesMetricRemoveTag                            GetConsoleV1AuditLogsParamsActionTypes = "metric_remove_tag"
	GetConsoleV1AuditLogsParamsActionTypesMetricReviewCommit                         GetConsoleV1AuditLogsParamsActionTypes = "metric_review_commit"
	GetConsoleV1AuditLogsParamsActionTypesMetricReviewCreate                         GetConsoleV1AuditLogsParamsActionTypes = "metric_review_create"
	GetConsoleV1AuditLogsParamsActionTypesMetricReviewInfoUpdate                     GetConsoleV1AuditLogsParamsActionTypes = "metric_review_info_update"
	GetConsoleV1AuditLogsParamsActionTypesMetricReviewsOn                            GetConsoleV1AuditLogsParamsActionTypes = "metric_reviews_on"
	GetConsoleV1AuditLogsParamsActionTypesModifyOverrideConfig                       GetConsoleV1AuditLogsParamsActionTypes = "modify_override_config"
	GetConsoleV1AuditLogsParamsActionTypesModifyOverrides                            GetConsoleV1AuditLogsParamsActionTypes = "modify_overrides"
	GetConsoleV1AuditLogsParamsActionTypesOIDCConfigurationDelete                    GetConsoleV1AuditLogsParamsActionTypes = "OIDC_configuration_delete"
	GetConsoleV1AuditLogsParamsActionTypesOIDCConfigurationUpsert                    GetConsoleV1AuditLogsParamsActionTypes = "OIDC_configuration_upsert"
	GetConsoleV1AuditLogsParamsActionTypesOrgApiKeyCreate                            GetConsoleV1AuditLogsParamsActionTypes = "org_api_key_create"
	GetConsoleV1AuditLogsParamsActionTypesOrganizationMemberRemove                   GetConsoleV1AuditLogsParamsActionTypes = "organization_member_remove"
	GetConsoleV1AuditLogsParamsActionTypesParamStoreCreate                           GetConsoleV1AuditLogsParamsActionTypes = "param_store_create"
	GetConsoleV1AuditLogsParamsActionTypesParamStoreDelete                           GetConsoleV1AuditLogsParamsActionTypes = "param_store_delete"
	GetConsoleV1AuditLogsParamsActionTypesParamStoreUpdate                           GetConsoleV1AuditLogsParamsActionTypes = "param_store_update"
	GetConsoleV1AuditLogsParamsActionTypesParamStoreUpdateOwners                     GetConsoleV1AuditLogsParamsActionTypes = "param_store_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesPaymentEntitlementsUpsert                  GetConsoleV1AuditLogsParamsActionTypes = "payment_entitlements_upsert"
	GetConsoleV1AuditLogsParamsActionTypesPinChartToSummary                          GetConsoleV1AuditLogsParamsActionTypes = "pin_chart_to_summary"
	GetConsoleV1AuditLogsParamsActionTypesPinDashboardForCompany                     GetConsoleV1AuditLogsParamsActionTypes = "pin_dashboard_for_company"
	GetConsoleV1AuditLogsParamsActionTypesProjectDescriptionEdit                     GetConsoleV1AuditLogsParamsActionTypes = "project_description_edit"
	GetConsoleV1AuditLogsParamsActionTypesProjectOwnerSet                            GetConsoleV1AuditLogsParamsActionTypes = "project_owner_set"
	GetConsoleV1AuditLogsParamsActionTypesProjectReviewGroupDelete                   GetConsoleV1AuditLogsParamsActionTypes = "project_review_group_delete"
	GetConsoleV1AuditLogsParamsActionTypesProjectReviewGroupUpsert                   GetConsoleV1AuditLogsParamsActionTypes = "project_review_group_upsert"
	GetConsoleV1AuditLogsParamsActionTypesPulseResultsExport                         GetConsoleV1AuditLogsParamsActionTypes = "pulse_results_export"
	GetConsoleV1AuditLogsParamsActionTypesRejectEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionTypes = "reject_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypesReleasePipelineCompleted                   GetConsoleV1AuditLogsParamsActionTypes = "release_pipeline_completed"
	GetConsoleV1AuditLogsParamsActionTypesReleasePipelineCreate                      GetConsoleV1AuditLogsParamsActionTypes = "release_pipeline_create"
	GetConsoleV1AuditLogsParamsActionTypesReleasePipelineTriggerCreate               GetConsoleV1AuditLogsParamsActionTypes = "release_pipeline_trigger_create"
	GetConsoleV1AuditLogsParamsActionTypesReleasePipelineUpdate                      GetConsoleV1AuditLogsParamsActionTypes = "release_pipeline_update"
	GetConsoleV1AuditLogsParamsActionTypesRemoveOverrideConfig                       GetConsoleV1AuditLogsParamsActionTypes = "remove_override_config"
	GetConsoleV1AuditLogsParamsActionTypesResolveGuardrailMetricAlert                GetConsoleV1AuditLogsParamsActionTypes = "resolve_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypesRestartExperimentPulse                     GetConsoleV1AuditLogsParamsActionTypes = "restart_experiment_pulse"
	GetConsoleV1AuditLogsParamsActionTypesRestoreDashboard                           GetConsoleV1AuditLogsParamsActionTypes = "restore_dashboard"
	GetConsoleV1AuditLogsParamsActionTypesSSODisable                                 GetConsoleV1AuditLogsParamsActionTypes = "SSO_disable"
	GetConsoleV1AuditLogsParamsActionTypesScheduleArchiveMetric                      GetConsoleV1AuditLogsParamsActionTypes = "schedule_archive_metric"
	GetConsoleV1AuditLogsParamsActionTypesScheduleDeleteMetric                       GetConsoleV1AuditLogsParamsActionTypes = "schedule_delete_metric"
	GetConsoleV1AuditLogsParamsActionTypesScheduledCustomPulseQueryCreate            GetConsoleV1AuditLogsParamsActionTypes = "scheduled_custom_pulse_query_create"
	GetConsoleV1AuditLogsParamsActionTypesScheduledPulseCustomQueryDelete            GetConsoleV1AuditLogsParamsActionTypes = "scheduled_pulse_custom_query_delete"
	GetConsoleV1AuditLogsParamsActionTypesScheduledPulseQueryNameEdit                GetConsoleV1AuditLogsParamsActionTypes = "scheduled_pulse_query_name_edit"
	GetConsoleV1AuditLogsParamsActionTypesScheduledPulseRollupsUpdate                GetConsoleV1AuditLogsParamsActionTypes = "scheduled_pulse_rollups_update"
	GetConsoleV1AuditLogsParamsActionTypesSdkKeyCreate                               GetConsoleV1AuditLogsParamsActionTypes = "sdk_key_create"
	GetConsoleV1AuditLogsParamsActionTypesSdkKeyDeactivate                           GetConsoleV1AuditLogsParamsActionTypes = "sdk_key_deactivate"
	GetConsoleV1AuditLogsParamsActionTypesSdkKeyDelete                               GetConsoleV1AuditLogsParamsActionTypes = "sdk_key_delete"
	GetConsoleV1AuditLogsParamsActionTypesSdkKeyUpdateDescription                    GetConsoleV1AuditLogsParamsActionTypes = "sdk_key_update_description"
	GetConsoleV1AuditLogsParamsActionTypesSdkKeyUpdateEnvironments                   GetConsoleV1AuditLogsParamsActionTypes = "sdk_key_update_environments"
	GetConsoleV1AuditLogsParamsActionTypesSdkKeyUpdateScopes                         GetConsoleV1AuditLogsParamsActionTypes = "sdk_key_update_scopes"
	GetConsoleV1AuditLogsParamsActionTypesSdkKeyUpdateTargetApp                      GetConsoleV1AuditLogsParamsActionTypes = "sdk_key_update_target_app"
	GetConsoleV1AuditLogsParamsActionTypesSecretKeyRegenerate                        GetConsoleV1AuditLogsParamsActionTypes = "secret_key_regenerate"
	GetConsoleV1AuditLogsParamsActionTypesSegmentCreate                              GetConsoleV1AuditLogsParamsActionTypes = "segment_create"
	GetConsoleV1AuditLogsParamsActionTypesSegmentUpdateOwners                        GetConsoleV1AuditLogsParamsActionTypes = "segment_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesSetApiShareKeyAccess                       GetConsoleV1AuditLogsParamsActionTypes = "set_api_share_key_access"
	GetConsoleV1AuditLogsParamsActionTypesSetAutomatedBotRemovals                    GetConsoleV1AuditLogsParamsActionTypes = "set_automated_bot_removals"
	GetConsoleV1AuditLogsParamsActionTypesSetBv3PlanType                             GetConsoleV1AuditLogsParamsActionTypes = "set_bv3_plan_type"
	GetConsoleV1AuditLogsParamsActionTypesSetCompanyDefaultUserRole                  GetConsoleV1AuditLogsParamsActionTypes = "set_company_default_user_role"
	GetConsoleV1AuditLogsParamsActionTypesSetCompanySessionReplaySamplingRate        GetConsoleV1AuditLogsParamsActionTypes = "set_company_session_replay_sampling_rate"
	GetConsoleV1AuditLogsParamsActionTypesSetDefaultPaymentMethod                    GetConsoleV1AuditLogsParamsActionTypes = "set_default_payment_method"
	GetConsoleV1AuditLogsParamsActionTypesSetEchidnaProjectMetricSchedule            GetConsoleV1AuditLogsParamsActionTypes = "set_echidna_project_metric_schedule"
	GetConsoleV1AuditLogsParamsActionTypesSetEchidnaProjectPulseSchedule             GetConsoleV1AuditLogsParamsActionTypes = "set_echidna_project_pulse_schedule"
	GetConsoleV1AuditLogsParamsActionTypesSetEchidnaScheduleHour                     GetConsoleV1AuditLogsParamsActionTypes = "set_echidna_schedule_hour"
	GetConsoleV1AuditLogsParamsActionTypesSetGateAnalytics0100ExposuresEnabled       GetConsoleV1AuditLogsParamsActionTypes = "set_gate_analytics_0_100_exposures_enabled"
	GetConsoleV1AuditLogsParamsActionTypesSetGateAnalyticsEnabledByDefault           GetConsoleV1AuditLogsParamsActionTypes = "set_gate_analytics_enabled_by_default"
	GetConsoleV1AuditLogsParamsActionTypesSetMetricDirectionality                    GetConsoleV1AuditLogsParamsActionTypes = "set_metric_directionality"
	GetConsoleV1AuditLogsParamsActionTypesSetPlanType                                GetConsoleV1AuditLogsParamsActionTypes = "set_plan_type"
	GetConsoleV1AuditLogsParamsActionTypesSetRequireTargetAppForNewEntity            GetConsoleV1AuditLogsParamsActionTypes = "set_require_target_app_for_new_entity"
	GetConsoleV1AuditLogsParamsActionTypesSetSelfApprovalsBlocked                    GetConsoleV1AuditLogsParamsActionTypes = "set_self_approvals_blocked"
	GetConsoleV1AuditLogsParamsActionTypesSetStopExperimentEnabled                   GetConsoleV1AuditLogsParamsActionTypes = "set_stop_experiment_enabled"
	GetConsoleV1AuditLogsParamsActionTypesSetStopNewAssignmentToggle                 GetConsoleV1AuditLogsParamsActionTypes = "set_stop_new_assignment_toggle"
	GetConsoleV1AuditLogsParamsActionTypesSetUserSamplingRate                        GetConsoleV1AuditLogsParamsActionTypes = "set_user_sampling_rate"
	GetConsoleV1AuditLogsParamsActionTypesSetUserSamplingRateForGate                 GetConsoleV1AuditLogsParamsActionTypes = "set_user_sampling_rate_for_gate"
	GetConsoleV1AuditLogsParamsActionTypesSetWhnResultsExportSetting                 GetConsoleV1AuditLogsParamsActionTypes = "set_whn_results_export_setting"
	GetConsoleV1AuditLogsParamsActionTypesSetWhnTableTtls                            GetConsoleV1AuditLogsParamsActionTypes = "set_whn_table_ttls"
	GetConsoleV1AuditLogsParamsActionTypesSetupExternalOptIn                         GetConsoleV1AuditLogsParamsActionTypes = "setup_external_opt_in"
	GetConsoleV1AuditLogsParamsActionTypesSetupStratifiedSampling                    GetConsoleV1AuditLogsParamsActionTypes = "setup_stratified_sampling"
	GetConsoleV1AuditLogsParamsActionTypesSharedReportLinkDelete                     GetConsoleV1AuditLogsParamsActionTypes = "shared_report_link_delete"
	GetConsoleV1AuditLogsParamsActionTypesSharedReportLinkUpsert                     GetConsoleV1AuditLogsParamsActionTypes = "shared_report_link_upsert"
	GetConsoleV1AuditLogsParamsActionTypesTagConfigsBulk                             GetConsoleV1AuditLogsParamsActionTypes = "tag_configs_bulk"
	GetConsoleV1AuditLogsParamsActionTypesTagCreate                                  GetConsoleV1AuditLogsParamsActionTypes = "tag_create"
	GetConsoleV1AuditLogsParamsActionTypesTagDelete                                  GetConsoleV1AuditLogsParamsActionTypes = "tag_delete"
	GetConsoleV1AuditLogsParamsActionTypesTagEdit                                    GetConsoleV1AuditLogsParamsActionTypes = "tag_edit"
	GetConsoleV1AuditLogsParamsActionTypesTagMetricsBulk                             GetConsoleV1AuditLogsParamsActionTypes = "tag_metrics_bulk"
	GetConsoleV1AuditLogsParamsActionTypesTagUpdateOwners                            GetConsoleV1AuditLogsParamsActionTypes = "tag_update_owners"
	GetConsoleV1AuditLogsParamsActionTypesUnarchiveExperiment                        GetConsoleV1AuditLogsParamsActionTypes = "unarchive_experiment"
	GetConsoleV1AuditLogsParamsActionTypesUnarchiveMetric                            GetConsoleV1AuditLogsParamsActionTypes = "unarchive_metric"
	GetConsoleV1AuditLogsParamsActionTypesUnattachExperimentToPowerAnalysisReport    GetConsoleV1AuditLogsParamsActionTypes = "unattach_experiment_to_power_analysis_report"
	GetConsoleV1AuditLogsParamsActionTypesUnsnoozeGuardrailMetricAlert               GetConsoleV1AuditLogsParamsActionTypes = "unsnooze_guardrail_metric_alert"
	GetConsoleV1AuditLogsParamsActionTypesUpdateBv3Subscription                      GetConsoleV1AuditLogsParamsActionTypes = "update_bv3_subscription"
	GetConsoleV1AuditLogsParamsActionTypesUpdateCompanyAutoCaptureSettings           GetConsoleV1AuditLogsParamsActionTypes = "update_company_auto_capture_settings"
	GetConsoleV1AuditLogsParamsActionTypesUpdateCompanyExperimentExclusionSegment    GetConsoleV1AuditLogsParamsActionTypes = "update_company_experiment_exclusion_segment"
	GetConsoleV1AuditLogsParamsActionTypesUpdateCompanyRemoveDefaultGatesSetting     GetConsoleV1AuditLogsParamsActionTypes = "update_company_remove_default_gates_setting"
	GetConsoleV1AuditLogsParamsActionTypesUpdateCompanyUserStoreEnabled              GetConsoleV1AuditLogsParamsActionTypes = "update_company_user_store_enabled"
	GetConsoleV1AuditLogsParamsActionTypesUpdateConfigReleasePipeline                GetConsoleV1AuditLogsParamsActionTypes = "update_config_release_pipeline"
	GetConsoleV1AuditLogsParamsActionTypesUpdateDashboardSettings                    GetConsoleV1AuditLogsParamsActionTypes = "update_dashboard_settings"
	GetConsoleV1AuditLogsParamsActionTypesUpdateDashboardWidgetsFromGeneratedTags    GetConsoleV1AuditLogsParamsActionTypes = "update_dashboard_widgets_from_generated_tags"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaAssignmentSource              GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_assignment_source"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaAssignmentSourceIsVerified    GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_assignment_source_is_verified"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaAssignmentSourceLoadingWindow GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_assignment_source_loading_window"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaAssignmentSourceName          GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_assignment_source_name"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaEntityPropertySource          GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_entity_property_source"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaEntityPropertySourceName      GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_entity_property_source_name"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaMetricLoadingWindow           GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_metric_loading_window"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaMetricSource                  GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_metric_source"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaMetricSourceName              GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_metric_source_name"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaMetricTagOrDescription        GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_metric_tag_or_description"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaSourceOwner                   GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_source_owner"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaSourceReview                  GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_source_review"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaSourceReviewRequired          GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_source_review_required"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEchidnaSubtype                       GetConsoleV1AuditLogsParamsActionTypes = "update_echidna_subtype"
	GetConsoleV1AuditLogsParamsActionTypesUpdateEntitiesRequireTeams                 GetConsoleV1AuditLogsParamsActionTypes = "update_entities_require_teams"
	GetConsoleV1AuditLogsParamsActionTypesUpdateExperimentEnabledNonProdEnvironments GetConsoleV1AuditLogsParamsActionTypes = "update_experiment_enabled_non_prod_environments"
	GetConsoleV1AuditLogsParamsActionTypesUpdateExperimentQualityScoreCriteria       GetConsoleV1AuditLogsParamsActionTypes = "update_experiment_quality_score_criteria"
	GetConsoleV1AuditLogsParamsActionTypesUpdateExperimentQualityScoreSettings       GetConsoleV1AuditLogsParamsActionTypes = "update_experiment_quality_score_settings"
	GetConsoleV1AuditLogsParamsActionTypesUpdateExperimentSalt                       GetConsoleV1AuditLogsParamsActionTypes = "update_experiment_salt"
	GetConsoleV1AuditLogsParamsActionTypesUpdateGateAnalyticsEnabled                 GetConsoleV1AuditLogsParamsActionTypes = "update_gate_analytics_enabled"
	GetConsoleV1AuditLogsParamsActionTypesUpdateGateIsPermanent                      GetConsoleV1AuditLogsParamsActionTypes = "update_gate_is_permanent"
	GetConsoleV1AuditLogsParamsActionTypesUpdateLayerParameter                       GetConsoleV1AuditLogsParamsActionTypes = "update_layer_parameter"
	GetConsoleV1AuditLogsParamsActionTypesUpdateMetricIsPermanent                    GetConsoleV1AuditLogsParamsActionTypes = "update_metric_is_permanent"
	GetConsoleV1AuditLogsParamsActionTypesUpdateMetricIsVerified                     GetConsoleV1AuditLogsParamsActionTypes = "update_metric_is_verified"
	GetConsoleV1AuditLogsParamsActionTypesUpdateMetricReviewRequired                 GetConsoleV1AuditLogsParamsActionTypes = "update_metric_review_required"
	GetConsoleV1AuditLogsParamsActionTypesUpdatePrecommitHook                        GetConsoleV1AuditLogsParamsActionTypes = "update_precommit_hook"
	GetConsoleV1AuditLogsParamsActionTypesUpdatePrecommitWebhookKey                  GetConsoleV1AuditLogsParamsActionTypes = "update_precommit_webhook_key"
	GetConsoleV1AuditLogsParamsActionTypesUpdateServerSdkConfigurationRollback       GetConsoleV1AuditLogsParamsActionTypes = "update_server_sdk_configuration_rollback"
	GetConsoleV1AuditLogsParamsActionTypesUpdateStore0100Exposures                   GetConsoleV1AuditLogsParamsActionTypes = "update_store_0_100_exposures"
	GetConsoleV1AuditLogsParamsActionTypesUpdateTeam                                 GetConsoleV1AuditLogsParamsActionTypes = "update_team"
	GetConsoleV1AuditLogsParamsActionTypesUpdateTeamAdmins                           GetConsoleV1AuditLogsParamsActionTypes = "update_team_admins"
	GetConsoleV1AuditLogsParamsActionTypesUpdateTeamDescription                      GetConsoleV1AuditLogsParamsActionTypes = "update_team_description"
	GetConsoleV1AuditLogsParamsActionTypesUpdateTeamName                             GetConsoleV1AuditLogsParamsActionTypes = "update_team_name"
	GetConsoleV1AuditLogsParamsActionTypesUpdateTeamSettings                         GetConsoleV1AuditLogsParamsActionTypes = "update_team_settings"
	GetConsoleV1AuditLogsParamsActionTypesUpdateToplineAlert                         GetConsoleV1AuditLogsParamsActionTypes = "update_topline_alert"
	GetConsoleV1AuditLogsParamsActionTypesUpsertExperimentSettings                   GetConsoleV1AuditLogsParamsActionTypes = "upsert_experiment_settings"
	GetConsoleV1AuditLogsParamsActionTypesUpsertGateSettings                         GetConsoleV1AuditLogsParamsActionTypes = "upsert_gate_settings"
	GetConsoleV1AuditLogsParamsActionTypesUpsertTriggerIntegration                   GetConsoleV1AuditLogsParamsActionTypes = "upsert_trigger_integration"
	GetConsoleV1AuditLogsParamsActionTypesUpsertUserRole                             GetConsoleV1AuditLogsParamsActionTypes = "upsert_user_role"
	GetConsoleV1AuditLogsParamsActionTypesUserDataLoad                               GetConsoleV1AuditLogsParamsActionTypes = "user_data_load"
	GetConsoleV1AuditLogsParamsActionTypesUserLogin                                  GetConsoleV1AuditLogsParamsActionTypes = "user_login"
	GetConsoleV1AuditLogsParamsActionTypesUserRoleUpdate                             GetConsoleV1AuditLogsParamsActionTypes = "user_role_update"
)

// Defines values for PostConsoleV1ExperimentsIdLoadPulseParamsRefresh.
const (
	PostConsoleV1ExperimentsIdLoadPulseParamsRefreshFull        PostConsoleV1ExperimentsIdLoadPulseParamsRefresh = "full"
	PostConsoleV1ExperimentsIdLoadPulseParamsRefreshIncremental PostConsoleV1ExperimentsIdLoadPulseParamsRefresh = "incremental"
	PostConsoleV1ExperimentsIdLoadPulseParamsRefreshMetric      PostConsoleV1ExperimentsIdLoadPulseParamsRefresh = "metric"
)

// Defines values for GetConsoleV1GatesParamsType.
const (
	PERMANENT GetConsoleV1GatesParamsType = "PERMANENT"
	STALE     GetConsoleV1GatesParamsType = "STALE"
	TEMPLATE  GetConsoleV1GatesParamsType = "TEMPLATE"
	TEMPORARY GetConsoleV1GatesParamsType = "TEMPORARY"
)

// Defines values for GetConsoleV1GatesParamsTypeReason.
const (
	GetConsoleV1GatesParamsTypeReasonNONE                    GetConsoleV1GatesParamsTypeReason = "NONE"
	GetConsoleV1GatesParamsTypeReasonSTALEALLFALSE           GetConsoleV1GatesParamsTypeReason = "STALE_ALL_FALSE"
	GetConsoleV1GatesParamsTypeReasonSTALEALLTRUE            GetConsoleV1GatesParamsTypeReason = "STALE_ALL_TRUE"
	GetConsoleV1GatesParamsTypeReasonSTALEEMPTYCHECKS        GetConsoleV1GatesParamsTypeReason = "STALE_EMPTY_CHECKS"
	GetConsoleV1GatesParamsTypeReasonSTALENORULES            GetConsoleV1GatesParamsTypeReason = "STALE_NO_RULES"
	GetConsoleV1GatesParamsTypeReasonSTALEPROBABLYDEADCHECK  GetConsoleV1GatesParamsTypeReason = "STALE_PROBABLY_DEAD_CHECK"
	GetConsoleV1GatesParamsTypeReasonSTALEPROBABLYFORGOTTEN  GetConsoleV1GatesParamsTypeReason = "STALE_PROBABLY_FORGOTTEN"
	GetConsoleV1GatesParamsTypeReasonSTALEPROBABLYLAUNCHED   GetConsoleV1GatesParamsTypeReason = "STALE_PROBABLY_LAUNCHED"
	GetConsoleV1GatesParamsTypeReasonSTALEPROBABLYUNLAUNCHED GetConsoleV1GatesParamsTypeReason = "STALE_PROBABLY_UNLAUNCHED"
)

// Defines values for GetConsoleV1GatesParamsPassRate.
const (
	GetConsoleV1GatesParamsPassRateINBETWEEN GetConsoleV1GatesParamsPassRate = "INBETWEEN"
	GetConsoleV1GatesParamsPassRateN0        GetConsoleV1GatesParamsPassRate = "0"
	GetConsoleV1GatesParamsPassRateN100      GetConsoleV1GatesParamsPassRate = "100"
)

// Defines values for GetConsoleV1GatesParamsRolloutRate.
const (
	GetConsoleV1GatesParamsRolloutRateINBETWEEN GetConsoleV1GatesParamsRolloutRate = "INBETWEEN"
	GetConsoleV1GatesParamsRolloutRateN0        GetConsoleV1GatesParamsRolloutRate = "0"
	GetConsoleV1GatesParamsRolloutRateN100      GetConsoleV1GatesParamsRolloutRate = "100"
)

// Defines values for DeleteConsoleV1IngestionParamsType.
const (
	DeleteConsoleV1IngestionParamsTypeAdls         DeleteConsoleV1IngestionParamsType = "adls"
	DeleteConsoleV1IngestionParamsTypeAthena       DeleteConsoleV1IngestionParamsType = "athena"
	DeleteConsoleV1IngestionParamsTypeAzureSynapse DeleteConsoleV1IngestionParamsType = "azure-synapse"
	DeleteConsoleV1IngestionParamsTypeBigqueryV2   DeleteConsoleV1IngestionParamsType = "bigquery-v2"
	DeleteConsoleV1IngestionParamsTypeDatabricks   DeleteConsoleV1IngestionParamsType = "databricks"
	DeleteConsoleV1IngestionParamsTypeRedshift     DeleteConsoleV1IngestionParamsType = "redshift"
	DeleteConsoleV1IngestionParamsTypeS3           DeleteConsoleV1IngestionParamsType = "s3"
	DeleteConsoleV1IngestionParamsTypeSnowflakeV2  DeleteConsoleV1IngestionParamsType = "snowflake-v2"
)

// Defines values for DeleteConsoleV1IngestionParamsDataset.
const (
	DeleteConsoleV1IngestionParamsDatasetEntityProperties DeleteConsoleV1IngestionParamsDataset = "entity_properties"
	DeleteConsoleV1IngestionParamsDatasetEvents           DeleteConsoleV1IngestionParamsDataset = "Events"
	DeleteConsoleV1IngestionParamsDatasetExportExposures  DeleteConsoleV1IngestionParamsDataset = "export_exposures"
	DeleteConsoleV1IngestionParamsDatasetMetrics          DeleteConsoleV1IngestionParamsDataset = "Metrics"
)

// Defines values for GetConsoleV1IngestionParamsType.
const (
	Adls         GetConsoleV1IngestionParamsType = "adls"
	Athena       GetConsoleV1IngestionParamsType = "athena"
	AzureSynapse GetConsoleV1IngestionParamsType = "azure-synapse"
	BigqueryV2   GetConsoleV1IngestionParamsType = "bigquery-v2"
	Databricks   GetConsoleV1IngestionParamsType = "databricks"
	Redshift     GetConsoleV1IngestionParamsType = "redshift"
	S3           GetConsoleV1IngestionParamsType = "s3"
	SnowflakeV2  GetConsoleV1IngestionParamsType = "snowflake-v2"
)

// Defines values for GetConsoleV1IngestionParamsDataset.
const (
	GetConsoleV1IngestionParamsDatasetEntityProperties GetConsoleV1IngestionParamsDataset = "entity_properties"
	GetConsoleV1IngestionParamsDatasetEvents           GetConsoleV1IngestionParamsDataset = "Events"
	GetConsoleV1IngestionParamsDatasetExportExposures  GetConsoleV1IngestionParamsDataset = "export_exposures"
	GetConsoleV1IngestionParamsDatasetMetrics          GetConsoleV1IngestionParamsDataset = "Metrics"
)

// Defines values for GetConsoleV1IngestionScheduleParamsDataset.
const (
	GetConsoleV1IngestionScheduleParamsDatasetEntityProperties GetConsoleV1IngestionScheduleParamsDataset = "entity_properties"
	GetConsoleV1IngestionScheduleParamsDatasetEvents           GetConsoleV1IngestionScheduleParamsDataset = "Events"
	GetConsoleV1IngestionScheduleParamsDatasetExportExposures  GetConsoleV1IngestionScheduleParamsDataset = "export_exposures"
	GetConsoleV1IngestionScheduleParamsDatasetMetrics          GetConsoleV1IngestionScheduleParamsDataset = "Metrics"
)

// Defines values for GetConsoleV1IngestionStatusParamsDataset.
const (
	GetConsoleV1IngestionStatusParamsDatasetEntityProperties GetConsoleV1IngestionStatusParamsDataset = "entity_properties"
	GetConsoleV1IngestionStatusParamsDatasetEvents           GetConsoleV1IngestionStatusParamsDataset = "Events"
	GetConsoleV1IngestionStatusParamsDatasetExportExposures  GetConsoleV1IngestionStatusParamsDataset = "export_exposures"
	GetConsoleV1IngestionStatusParamsDatasetMetrics          GetConsoleV1IngestionStatusParamsDataset = "Metrics"
)

// Defines values for GetConsoleV1IngestionStatusParamsStatus.
const (
	GetConsoleV1IngestionStatusParamsStatusAUTHENTICATIONERROR         GetConsoleV1IngestionStatusParamsStatus = "AUTHENTICATION_ERROR"
	GetConsoleV1IngestionStatusParamsStatusBACKFILLREQUESTED           GetConsoleV1IngestionStatusParamsStatus = "BACKFILL_REQUESTED"
	GetConsoleV1IngestionStatusParamsStatusBULKLOADERROR               GetConsoleV1IngestionStatusParamsStatus = "BULK_LOAD_ERROR"
	GetConsoleV1IngestionStatusParamsStatusBULKLOADSUCCESSFUL          GetConsoleV1IngestionStatusParamsStatus = "BULK_LOAD_SUCCESSFUL"
	GetConsoleV1IngestionStatusParamsStatusCONNECTIONCONFIGERROR       GetConsoleV1IngestionStatusParamsStatus = "CONNECTION_CONFIG_ERROR"
	GetConsoleV1IngestionStatusParamsStatusCONNECTIONERROR             GetConsoleV1IngestionStatusParamsStatus = "CONNECTION_ERROR"
	GetConsoleV1IngestionStatusParamsStatusIMPORTRESCHEDULED           GetConsoleV1IngestionStatusParamsStatus = "IMPORT_RESCHEDULED"
	GetConsoleV1IngestionStatusParamsStatusIMPORTSCHEDULED             GetConsoleV1IngestionStatusParamsStatus = "IMPORT_SCHEDULED"
	GetConsoleV1IngestionStatusParamsStatusIMPORTSTARTED               GetConsoleV1IngestionStatusParamsStatus = "IMPORT_STARTED"
	GetConsoleV1IngestionStatusParamsStatusIMPORTSUCCESSFUL            GetConsoleV1IngestionStatusParamsStatus = "IMPORT_SUCCESSFUL"
	GetConsoleV1IngestionStatusParamsStatusINTERNALWRITEERROREVENTS    GetConsoleV1IngestionStatusParamsStatus = "INTERNAL_WRITE_ERROR_EVENTS"
	GetConsoleV1IngestionStatusParamsStatusINTERNALWRITEERROREXPOSURES GetConsoleV1IngestionStatusParamsStatus = "INTERNAL_WRITE_ERROR_EXPOSURES"
	GetConsoleV1IngestionStatusParamsStatusINTERNALWRITEERRORMETRICS   GetConsoleV1IngestionStatusParamsStatus = "INTERNAL_WRITE_ERROR_METRICS"
	GetConsoleV1IngestionStatusParamsStatusLOADEDEMPTYDATA             GetConsoleV1IngestionStatusParamsStatus = "LOADED_EMPTY_DATA"
	GetConsoleV1IngestionStatusParamsStatusPercentOther                GetConsoleV1IngestionStatusParamsStatus = "%Other"
	GetConsoleV1IngestionStatusParamsStatusQUERYCONSTRUCTIONERROR      GetConsoleV1IngestionStatusParamsStatus = "QUERY_CONSTRUCTION_ERROR"
	GetConsoleV1IngestionStatusParamsStatusQUERYERROR                  GetConsoleV1IngestionStatusParamsStatus = "QUERY_ERROR"
	GetConsoleV1IngestionStatusParamsStatusSETUPERROR                  GetConsoleV1IngestionStatusParamsStatus = "SETUP_ERROR"
	GetConsoleV1IngestionStatusParamsStatusSSHERROR                    GetConsoleV1IngestionStatusParamsStatus = "SSH_ERROR"
)

// Defines values for GetConsoleV1IngestionStatusParamsStatuses.
const (
	GetConsoleV1IngestionStatusParamsStatusesAUTHENTICATIONERROR         GetConsoleV1IngestionStatusParamsStatuses = "AUTHENTICATION_ERROR"
	GetConsoleV1IngestionStatusParamsStatusesBACKFILLREQUESTED           GetConsoleV1IngestionStatusParamsStatuses = "BACKFILL_REQUESTED"
	GetConsoleV1IngestionStatusParamsStatusesBULKLOADERROR               GetConsoleV1IngestionStatusParamsStatuses = "BULK_LOAD_ERROR"
	GetConsoleV1IngestionStatusParamsStatusesBULKLOADSUCCESSFUL          GetConsoleV1IngestionStatusParamsStatuses = "BULK_LOAD_SUCCESSFUL"
	GetConsoleV1IngestionStatusParamsStatusesCONNECTIONCONFIGERROR       GetConsoleV1IngestionStatusParamsStatuses = "CONNECTION_CONFIG_ERROR"
	GetConsoleV1IngestionStatusParamsStatusesCONNECTIONERROR             GetConsoleV1IngestionStatusParamsStatuses = "CONNECTION_ERROR"
	GetConsoleV1IngestionStatusParamsStatusesIMPORTRESCHEDULED           GetConsoleV1IngestionStatusParamsStatuses = "IMPORT_RESCHEDULED"
	GetConsoleV1IngestionStatusParamsStatusesIMPORTSCHEDULED             GetConsoleV1IngestionStatusParamsStatuses = "IMPORT_SCHEDULED"
	GetConsoleV1IngestionStatusParamsStatusesIMPORTSTARTED               GetConsoleV1IngestionStatusParamsStatuses = "IMPORT_STARTED"
	GetConsoleV1IngestionStatusParamsStatusesIMPORTSUCCESSFUL            GetConsoleV1IngestionStatusParamsStatuses = "IMPORT_SUCCESSFUL"
	GetConsoleV1IngestionStatusParamsStatusesINTERNALWRITEERROREVENTS    GetConsoleV1IngestionStatusParamsStatuses = "INTERNAL_WRITE_ERROR_EVENTS"
	GetConsoleV1IngestionStatusParamsStatusesINTERNALWRITEERROREXPOSURES GetConsoleV1IngestionStatusParamsStatuses = "INTERNAL_WRITE_ERROR_EXPOSURES"
	GetConsoleV1IngestionStatusParamsStatusesINTERNALWRITEERRORMETRICS   GetConsoleV1IngestionStatusParamsStatuses = "INTERNAL_WRITE_ERROR_METRICS"
	GetConsoleV1IngestionStatusParamsStatusesLOADEDEMPTYDATA             GetConsoleV1IngestionStatusParamsStatuses = "LOADED_EMPTY_DATA"
	GetConsoleV1IngestionStatusParamsStatusesPercentOther                GetConsoleV1IngestionStatusParamsStatuses = "%Other"
	GetConsoleV1IngestionStatusParamsStatusesQUERYCONSTRUCTIONERROR      GetConsoleV1IngestionStatusParamsStatuses = "QUERY_CONSTRUCTION_ERROR"
	GetConsoleV1IngestionStatusParamsStatusesQUERYERROR                  GetConsoleV1IngestionStatusParamsStatuses = "QUERY_ERROR"
	GetConsoleV1IngestionStatusParamsStatusesSETUPERROR                  GetConsoleV1IngestionStatusParamsStatuses = "SETUP_ERROR"
	GetConsoleV1IngestionStatusParamsStatusesSSHERROR                    GetConsoleV1IngestionStatusParamsStatuses = "SSH_ERROR"
)

// Defines values for GetConsoleV1MetricsListParamsShowHiddenMetrics.
const (
	GetConsoleV1MetricsListParamsShowHiddenMetricsFalse GetConsoleV1MetricsListParamsShowHiddenMetrics = "false"
	GetConsoleV1MetricsListParamsShowHiddenMetricsTrue  GetConsoleV1MetricsListParamsShowHiddenMetrics = "true"
)

// Defines values for GetConsoleV1ReportsParamsType.
const (
	FirstExposures GetConsoleV1ReportsParamsType = "first_exposures"
	PulseDaily     GetConsoleV1ReportsParamsType = "pulse_daily"
)

// AlertSchemaDto defines model for AlertSchemaDto.
type AlertSchemaDto struct {
	AlertThreshold float64 `json:"alertThreshold"`

	// AlertType Type of alert
	AlertType AlertSchemaDtoAlertType `json:"alertType"`
	CompanyID string                  `json:"companyID"`

	// Condition Condition under which a metric change triggers an alert in milliseconds
	Condition AlertSchemaDtoCondition `json:"condition"`
	CreatorID *string                 `json:"creatorID,omitempty"`

	// Formula Formula for the alert
	Formula *string `json:"formula,omitempty"`

	// Id ID of the alert
	Id string `json:"id"`

	// Message Alert message
	Message string `json:"message"`

	// MetricGroupBys Metric groupbys
	MetricGroupBys map[string]interface{} `json:"metricGroupBys"`

	// Metrics List of metrics associated with this alert
	Metrics map[string]interface{} `json:"metrics"`

	// Name Name of the alert
	Name string `json:"name"`

	// Priority Priority of this alert
	Priority AlertSchemaDtoPriority `json:"priority"`

	// RenotificationConditions Condition under which a re-notification is sent
	RenotificationConditions *[]AlertSchemaDtoRenotificationConditions `json:"renotificationConditions,omitempty"`

	// RenotificationMessage Re-notification message
	RenotificationMessage *string `json:"renotificationMessage,omitempty"`

	// RenotificationWindowMs How long to wait before re-notifying in milliseconds
	RenotificationWindowMs *float64 `json:"renotificationWindowMs,omitempty"`

	// Tags Tags associated with this alert
	Tags []string `json:"tags"`

	// Team Team associated with this alert
	Team             nullable.Nullable[string] `json:"team,omitempty"`
	WarningThreshold *float64                  `json:"warningThreshold,omitempty"`

	// WindowMs How far back and how frequently a metric should be checked, in milliseconds
	WindowMs float64 `json:"windowMs"`
}

// AlertSchemaDtoAlertType Type of alert
type AlertSchemaDtoAlertType string

// AlertSchemaDtoCondition Condition under which a metric change triggers an alert in milliseconds
type AlertSchemaDtoCondition string

// AlertSchemaDtoPriority Priority of this alert
type AlertSchemaDtoPriority string

// AlertSchemaDtoRenotificationConditions defines model for AlertSchemaDto.RenotificationConditions.
type AlertSchemaDtoRenotificationConditions string

// ArchiveSchemaDto defines model for ArchiveSchemaDto.
type ArchiveSchemaDto struct {
	// ArchiveReason The reason for archiving the gate
	ArchiveReason *string `json:"archiveReason,omitempty"`
	ForceArchive  *bool   `json:"forceArchive,omitempty"`
}

// AssignmentSourceContractDto defines model for AssignmentSourceContractDto.
type AssignmentSourceContractDto struct {
	// Description Detailed context and purpose of the assignment source.
	Description string `json:"description"`

	// ExperimentIDColumn Column name for the experiment ID associated with the assignments.
	ExperimentIDColumn string `json:"experimentIDColumn"`

	// GroupIDColumn Column name for the group ID linked to the assignments.
	GroupIDColumn string `json:"groupIDColumn"`

	// IdTypeMapping Mappings of Statsig units to their respective columns.
	IdTypeMapping []struct {
		// Column Column name associated with the ID type mapping.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// IsVerified Marks the assignment source as verified for internal trustworthiness.
	IsVerified *bool `json:"isVerified,omitempty"`

	// Name Unique identifier for the assignment source.
	Name string `json:"name"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// Sql SQL query defining the data source for assignments.
	Sql string `json:"sql"`

	// Tags Tags for categorization and search.
	Tags []string `json:"tags"`

	// TimestampColumn Column name representing the timestamp of assignments.
	TimestampColumn string `json:"timestampColumn"`
}

// AssignmentSourceCreationDto defines model for AssignmentSourceCreationDto.
type AssignmentSourceCreationDto struct {
	// Description Optional detailed context for the assignment source.
	Description *string `json:"description,omitempty"`

	// ExperimentIDColumn Column name for the experiment ID associated with the assignments.
	ExperimentIDColumn string `json:"experimentIDColumn"`

	// GroupIDColumn Column name for the group ID linked to the assignments.
	GroupIDColumn string `json:"groupIDColumn"`

	// IdTypeMapping Mappings of Statsig units to their respective columns.
	IdTypeMapping []struct {
		// Column Column name associated with the ID type mapping.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// IsVerified Marks the assignment source as verified for internal trustworthiness.
	IsVerified *bool `json:"isVerified,omitempty"`

	// Name Unique identifier for the assignment source.
	Name string `json:"name"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// Sql SQL query defining the data source for assignments.
	Sql string `json:"sql"`

	// Tags Optional tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampColumn Column name representing the timestamp of assignments.
	TimestampColumn string `json:"timestampColumn"`
}

// AssignmentSourcePartialUpdateDto defines model for AssignmentSourcePartialUpdateDto.
type AssignmentSourcePartialUpdateDto struct {
	// Description Detailed context and purpose of the assignment source.
	Description *string `json:"description,omitempty"`

	// ExperimentIDColumn Column name for the experiment ID associated with the assignments.
	ExperimentIDColumn *string `json:"experimentIDColumn,omitempty"`

	// GroupIDColumn Column name for the group ID linked to the assignments.
	GroupIDColumn *string `json:"groupIDColumn,omitempty"`

	// IdTypeMapping Mappings of Statsig units to their respective columns.
	IdTypeMapping *[]struct {
		// Column Column name associated with the ID type mapping.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping,omitempty"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// IsVerified Marks the assignment source as verified for internal trustworthiness.
	IsVerified *bool `json:"isVerified,omitempty"`

	// Name Unique identifier for the assignment source.
	Name *string `json:"name,omitempty"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// Sql SQL query defining the data source for assignments.
	Sql *interface{} `json:"sql,omitempty"`

	// Tags Tags for categorization and search.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampColumn Column name representing the timestamp of assignments.
	TimestampColumn *string `json:"timestampColumn,omitempty"`
}

// AssignmentSourceQueryUpdateDto defines model for AssignmentSourceQueryUpdateDto.
type AssignmentSourceQueryUpdateDto struct {
	// Description Optional updated context for the assignment source.
	Description *string `json:"description,omitempty"`

	// ExperimentIDColumn Column name for the experiment ID associated with the assignments.
	ExperimentIDColumn string `json:"experimentIDColumn"`

	// GroupIDColumn Column name for the group ID linked to the assignments.
	GroupIDColumn string `json:"groupIDColumn"`

	// IdTypeMapping Mappings of Statsig units to their respective columns.
	IdTypeMapping []struct {
		// Column Column name associated with the ID type mapping.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// IsVerified Marks the assignment source as verified for internal trustworthiness.
	IsVerified *bool `json:"isVerified,omitempty"`

	// Name Optional new name for the assignment source.
	Name *string `json:"name,omitempty"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// Sql SQL query defining the data source for assignments.
	Sql string `json:"sql"`

	// Tags Optional updated tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampColumn Column name representing the timestamp of assignments.
	TimestampColumn string `json:"timestampColumn"`
}

// AuditLogDto defines model for AuditLogDto.
type AuditLogDto struct {
	ActionType map[string]interface{} `json:"actionType"`

	// ChangeLog change log of the audit log
	ChangeLog string                 `json:"changeLog"`
	Changes   map[string]interface{} `json:"changes"`
	Date      string                 `json:"date"`

	// Id id of the audit log
	Id            string                 `json:"id"`
	ModifierEmail map[string]interface{} `json:"modifierEmail"`

	// Name name of the audit log
	Name            string    `json:"name"`
	Tags            []string  `json:"tags"`
	TargetAppIDs    *[]string `json:"targetAppIDs,omitempty"`
	Time            string    `json:"time"`
	UpdatedBy       string    `json:"updatedBy"`
	UpdatedByUserID string    `json:"updatedByUserID"`
}

// AutotuneCreateDto defines model for AutotuneCreateDto.
type AutotuneCreateDto struct {
	// AttributionWindow The maximum duration between the exposure and success event that counts as a success.
	AttributionWindow AutotuneCreateDtoAttributionWindow `json:"attributionWindow"`

	// Description A brief summary of what the autotune is being used for.
	Description *string `json:"description,omitempty"`

	// ExplorationWindow The initial time period where Autotune will equally split the traffic.
	ExplorationWindow AutotuneCreateDtoExplorationWindow `json:"explorationWindow"`

	// HigherIsBetter Whether to optimize for an increase or decrease in the metadata field value. Default is true. This is only used for contextual autotunes.
	HigherIsBetter *bool `json:"higherIsBetter,omitempty"`

	// IdType idType of the autotune (userID, stableID, or a customID). Defaults to userID if not provided
	IdType *string `json:"idType,omitempty"`

	// IsContextual Makes this autotune contextual
	IsContextual *bool `json:"isContextual,omitempty"`

	// MetadataField Metadata field containing the numeric value to optimize for. If this field is null, autotune optimizes for the existence of a follow-up event. This is only used for contextual autotunes.
	MetadataField *string `json:"metadataField,omitempty"`

	// Name The name that was originally given to the autotune on creation but formatted as an ID ("A Autotune" -> "a_autotune").
	Name string `json:"name"`

	// SuccessEvent The event you are trying to optimize for.
	SuccessEvent string `json:"successEvent"`

	// SuccessEventValue The value that should come with the event for it to be considered successful.
	SuccessEventValue *string `json:"successEventValue,omitempty"`

	// Variants An array of Variant objects.
	Variants []struct {
		// Json Variant JSON data
		Json interface{} `json:"json"`

		// Name Variant name
		Name string `json:"name"`
	} `json:"variants"`

	// WinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
	WinnerThreshold AutotuneCreateDtoWinnerThreshold `json:"winnerThreshold"`
}

// AutotuneCreateDtoAttributionWindow The maximum duration between the exposure and success event that counts as a success.
type AutotuneCreateDtoAttributionWindow string

// AutotuneCreateDtoExplorationWindow The initial time period where Autotune will equally split the traffic.
type AutotuneCreateDtoExplorationWindow string

// AutotuneCreateDtoWinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
type AutotuneCreateDtoWinnerThreshold string

// AutotuneExperimentDto defines model for AutotuneExperimentDto.
type AutotuneExperimentDto struct {
	// AttributionWindow The maximum duration between the exposure and success event that counts as a success.
	AttributionWindow AutotuneExperimentDtoAttributionWindow `json:"attributionWindow"`

	// CreatedTime Timestamp when the entity was created.
	CreatedTime float64 `json:"createdTime"`

	// CreatorEmail Email of the creator.
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail"`

	// CreatorID ID of the user who created the entity.
	CreatorID nullable.Nullable[string] `json:"creatorID"`

	// CreatorName Name of the creator.
	CreatorName nullable.Nullable[string] `json:"creatorName"`

	// Description Detailed description of the configuration’s purpose.
	Description string `json:"description"`

	// ExplorationWindow The initial time period where Autotune will equally split the traffic.
	ExplorationWindow AutotuneExperimentDtoExplorationWindow `json:"explorationWindow"`

	// HigherIsBetter Whether to optimize for an increase or decrease in the metadata field value. Default is true. This is only used for contextual autotunes.
	HigherIsBetter *bool `json:"higherIsBetter,omitempty"`

	// HoldoutIDs Holdouts applied to this configuration.
	HoldoutIDs *[]string `json:"holdoutIDs,omitempty"`

	// Id ID
	Id string `json:"id"`

	// IdType Type of ID
	IdType string `json:"idType"`

	// IsContextual Whether this is a contextual autotune
	IsContextual *bool `json:"isContextual,omitempty"`

	// IsStarted Is the autotune experiment currently running.
	IsStarted bool `json:"isStarted"`

	// LastModifiedTime Time of the last modification.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID"`

	// LastModifierName Name of the last modifier.
	LastModifierName nullable.Nullable[string] `json:"lastModifierName"`

	// MetadataField Metadata field containing the numeric value to optimize for. If this field is null, autotune optimizes for the existence of a follow-up event. This is only used for contextual autotunes.
	MetadataField *string `json:"metadataField,omitempty"`

	// Name Optional name for the configuration.
	Name *string `json:"name,omitempty"`

	// SuccessEvent The event you are trying to optimize for.
	SuccessEvent string `json:"successEvent"`

	// SuccessEventValue The value that should come with the event for it to be considered successful.
	SuccessEventValue string `json:"successEventValue"`

	// Tags Optional tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TargetApps List of target applications associated with this configuration.
	TargetApps *[]string `json:"targetApps,omitempty"`

	// Team Optional name for the responsible team.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID Optional ID of the responsible team.
	TeamID   nullable.Nullable[string] `json:"teamID,omitempty"`
	Variants []struct {
		// Id The name that was originally given to the autotune on creation but formatted as an ID ("A Autotune" -> "a_autotune").
		Id string `json:"id"`

		// Json Variant JSON data
		Json interface{} `json:"json"`

		// Name Variant name
		Name string `json:"name"`
	} `json:"variants"`

	// Version Version number
	Version *float64 `json:"version,omitempty"`
	Winner  nullable.Nullable[struct {
		// Id The Statsig UserID of the last modifier of this autotune.
		Id string `json:"id"`

		// Name The Statsig Username of the last modifier of this autotune.
		Name string `json:"name"`
	}] `json:"winner"`

	// WinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
	WinnerThreshold AutotuneExperimentDtoWinnerThreshold `json:"winnerThreshold"`
}

// AutotuneExperimentDtoAttributionWindow The maximum duration between the exposure and success event that counts as a success.
type AutotuneExperimentDtoAttributionWindow string

// AutotuneExperimentDtoExplorationWindow The initial time period where Autotune will equally split the traffic.
type AutotuneExperimentDtoExplorationWindow string

// AutotuneExperimentDtoWinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
type AutotuneExperimentDtoWinnerThreshold string

// AutotuneFullUpdateDto Autotune object
type AutotuneFullUpdateDto struct {
	// AttributionWindow The maximum duration between the exposure and success event that counts as a success.
	AttributionWindow AutotuneFullUpdateDtoAttributionWindow `json:"attributionWindow"`

	// Description A brief summary of what the autotune is being used for.
	Description *string `json:"description,omitempty"`

	// ExplorationWindow The initial time period where Autotune will equally split the traffic.
	ExplorationWindow AutotuneFullUpdateDtoExplorationWindow `json:"explorationWindow"`

	// HigherIsBetter Whether to optimize for an increase or decrease in the metadata field value. Default is true. This is only used for contextual autotunes.
	HigherIsBetter *bool `json:"higherIsBetter,omitempty"`

	// MetadataField Metadata field containing the numeric value to optimize for. If this field is null, autotune optimizes for the existence of a follow-up event. This is only used for contextual autotunes.
	MetadataField *string `json:"metadataField,omitempty"`

	// SuccessEvent The event you are trying to optimize for.
	SuccessEvent string `json:"successEvent"`

	// SuccessEventValue The value that should come with the event for it to be considered successful.
	SuccessEventValue *string `json:"successEventValue,omitempty"`

	// Variants An array of Variant objects.
	Variants []struct {
		// Json Variant JSON data
		Json interface{} `json:"json"`

		// Name Variant name
		Name string `json:"name"`
	} `json:"variants"`

	// WinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
	WinnerThreshold AutotuneFullUpdateDtoWinnerThreshold `json:"winnerThreshold"`
}

// AutotuneFullUpdateDtoAttributionWindow The maximum duration between the exposure and success event that counts as a success.
type AutotuneFullUpdateDtoAttributionWindow string

// AutotuneFullUpdateDtoExplorationWindow The initial time period where Autotune will equally split the traffic.
type AutotuneFullUpdateDtoExplorationWindow string

// AutotuneFullUpdateDtoWinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
type AutotuneFullUpdateDtoWinnerThreshold string

// AutotunePartialUpdateDto defines model for AutotunePartialUpdateDto.
type AutotunePartialUpdateDto struct {
	// AttributionWindow The maximum duration between the exposure and success event that counts as a success.
	AttributionWindow *AutotunePartialUpdateDtoAttributionWindow `json:"attributionWindow,omitempty"`

	// Description A brief summary of what the autotune is being used for.
	Description *string `json:"description,omitempty"`

	// ExplorationWindow The initial time period where Autotune will equally split the traffic.
	ExplorationWindow *AutotunePartialUpdateDtoExplorationWindow `json:"explorationWindow,omitempty"`

	// HigherIsBetter Whether to optimize for an increase or decrease in the metadata field value. Default is true. This is only used for contextual autotunes.
	HigherIsBetter *bool `json:"higherIsBetter,omitempty"`

	// MetadataField Metadata field containing the numeric value to optimize for. If this field is null, autotune optimizes for the existence of a follow-up event. This is only used for contextual autotunes.
	MetadataField *string `json:"metadataField,omitempty"`

	// SuccessEvent The event you are trying to optimize for.
	SuccessEvent *string `json:"successEvent,omitempty"`

	// SuccessEventValue The value that should come with the event for it to be considered successful.
	SuccessEventValue *string `json:"successEventValue,omitempty"`

	// Variants An array of Variant objects.
	Variants *[]struct {
		// Json Variant JSON data
		Json interface{} `json:"json"`

		// Name Variant name
		Name string `json:"name"`
	} `json:"variants,omitempty"`

	// WinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
	WinnerThreshold *AutotunePartialUpdateDtoWinnerThreshold `json:"winnerThreshold,omitempty"`
}

// AutotunePartialUpdateDtoAttributionWindow The maximum duration between the exposure and success event that counts as a success.
type AutotunePartialUpdateDtoAttributionWindow string

// AutotunePartialUpdateDtoExplorationWindow The initial time period where Autotune will equally split the traffic.
type AutotunePartialUpdateDtoExplorationWindow string

// AutotunePartialUpdateDtoWinnerThreshold The "probability of best" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
type AutotunePartialUpdateDtoWinnerThreshold string

// BulkAssignConfigTargetAppDto defines model for BulkAssignConfigTargetAppDto.
type BulkAssignConfigTargetAppDto struct {
	// DynamicConfigs Dynamic Config IDs to assign to target app(s)
	DynamicConfigs *[]string `json:"dynamicConfigs,omitempty"`

	// Experiments Experiment IDs to assign to target app(s)
	Experiments *[]string `json:"experiments,omitempty"`

	// Gates Gate IDs to assign to target app(s)
	Gates *[]string `json:"gates,omitempty"`

	// TargetApps target app ids
	TargetApps []string `json:"targetApps"`
}

// CompanyInfoResponseDto defines model for CompanyInfoResponseDto.
type CompanyInfoResponseDto struct {
	CompanyID   string                    `json:"companyID"`
	CompanyName string                    `json:"companyName"`
	OrgID       nullable.Nullable[string] `json:"orgID"`
	OrgName     nullable.Nullable[string] `json:"orgName"`
}

// CumulativeExposureResponseDto defines model for CumulativeExposureResponseDto.
type CumulativeExposureResponseDto = []struct {
	GroupID   string `json:"groupID"`
	GroupName string `json:"groupName"`
	Results   []struct {
		Date      string  `json:"date"`
		Exposures float32 `json:"exposures"`
	} `json:"results"`
}

// DynamicConfigCreateDto defines model for DynamicConfigCreateDto.
type DynamicConfigCreateDto struct {
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID    nullable.Nullable[string] `json:"creatorID,omitempty"`

	// DefaultValue The fallback JSON object when no rules are triggered
	DefaultValue *map[string]interface{} `json:"defaultValue,omitempty"`

	// DefaultValueJson5 Can include comments. If provided with defaultValue, must parse to the same JSON
	DefaultValueJson5 *string `json:"defaultValueJson5,omitempty"`
	Description       *string `json:"description,omitempty"`
	Id                *string `json:"id,omitempty"`

	// IdType The type of ID which the dynamic config is based on.
	IdType *string `json:"idType,omitempty"`

	// IsEnabled Is the dynamic config enabled
	IsEnabled *bool  `json:"isEnabled,omitempty"`
	Name      string `json:"name"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// ReleasePipelineID The release pipeline ID associated with the dynamic config
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`

	// Rules An array of Rule objects
	Rules *[]struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                              `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                              `json:"field,omitempty"`
			Operator    *string                                                                `json:"operator,omitempty"`
			TargetValue nullable.Nullable[DynamicConfigCreateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        DynamicConfigCreateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage   float32                 `json:"passPercentage"`
		ReturnValue      *map[string]interface{} `json:"returnValue,omitempty"`
		ReturnValueJson5 *string                 `json:"returnValueJson5,omitempty"`
	} `json:"rules,omitempty"`

	// Schema A schema using JSON Schema Draft 2020-12 to enforce return values of this dynamic config's rules.
	Schema nullable.Nullable[string] `json:"schema,omitempty"`

	// SchemaJson5 `schema` except with Json5 comments. Optional and should parse to same json as `schema`.
	SchemaJson5 nullable.Nullable[string] `json:"schemaJson5,omitempty"`

	// Tags The list of tag names attached to the dynamic config
	Tags       *[]string                          `json:"tags,omitempty"`
	TargetApps *DynamicConfigCreateDto_TargetApps `json:"targetApps,omitempty"`

	// Team The team name associated with the dynamic config, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the dynamic config, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
}

// DynamicConfigCreateDtoRulesConditionsTargetValue0 defines model for .
type DynamicConfigCreateDtoRulesConditionsTargetValue0 = []string

// DynamicConfigCreateDtoRulesConditionsTargetValue1 defines model for .
type DynamicConfigCreateDtoRulesConditionsTargetValue1 = []float32

// DynamicConfigCreateDtoRulesConditionsTargetValue2 defines model for .
type DynamicConfigCreateDtoRulesConditionsTargetValue2 = string

// DynamicConfigCreateDtoRulesConditionsTargetValue3 defines model for .
type DynamicConfigCreateDtoRulesConditionsTargetValue3 = float32

// DynamicConfigCreateDto_Rules_Conditions_TargetValue defines model for DynamicConfigCreateDto.Rules.Conditions.TargetValue.
type DynamicConfigCreateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// DynamicConfigCreateDtoRulesConditionsType defines model for DynamicConfigCreateDto.Rules.Conditions.Type.
type DynamicConfigCreateDtoRulesConditionsType string

// DynamicConfigCreateDtoTargetApps0 defines model for .
type DynamicConfigCreateDtoTargetApps0 = string

// DynamicConfigCreateDtoTargetApps1 defines model for .
type DynamicConfigCreateDtoTargetApps1 = []string

// DynamicConfigCreateDto_TargetApps defines model for DynamicConfigCreateDto.TargetApps.
type DynamicConfigCreateDto_TargetApps struct {
	union json.RawMessage
}

// DynamicConfigDto defines model for DynamicConfigDto.
type DynamicConfigDto struct {
	// CreatedTime Timestamp when the entity was created.
	CreatedTime  float64                   `json:"createdTime"`
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID    nullable.Nullable[string] `json:"creatorID,omitempty"`

	// CreatorName Name of the creator.
	CreatorName nullable.Nullable[string] `json:"creatorName"`

	// DefaultValue The fallback JSON object when no rules are triggered
	DefaultValue *map[string]interface{} `json:"defaultValue,omitempty"`

	// DefaultValueJson5 Can include comments. If provided with defaultValue, must parse to the same JSON
	DefaultValueJson5 *string `json:"defaultValueJson5,omitempty"`

	// Description A brief summary of what the dynamic config is being used for
	Description string `json:"description"`

	// HoldoutIDs Holdouts applied to this configuration.
	HoldoutIDs *[]string `json:"holdoutIDs,omitempty"`

	// Id ID
	Id string `json:"id"`

	// IdType The type of ID which the dynamic config is based on.
	IdType *string `json:"idType,omitempty"`

	// IsEnabled Is the dynamic config enabled
	IsEnabled bool `json:"isEnabled"`

	// LastModifiedTime Time of the last modification.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID"`

	// LastModifierName Name of the last modifier.
	LastModifierName nullable.Nullable[string] `json:"lastModifierName"`

	// Name Optional name for the configuration.
	Name *string `json:"name,omitempty"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// ReleasePipelineID The release pipeline ID associated with the dynamic config
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`

	// Rules An array of Rule objects
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                        `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                        `json:"field,omitempty"`
			Operator    *string                                                          `json:"operator,omitempty"`
			TargetValue nullable.Nullable[DynamicConfigDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        DynamicConfigDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage   float32                 `json:"passPercentage"`
		ReturnValue      *map[string]interface{} `json:"returnValue,omitempty"`
		ReturnValueJson5 *string                 `json:"returnValueJson5,omitempty"`
	} `json:"rules"`

	// Schema A schema using JSON Schema Draft 2020-12 to enforce return values of this dynamic config's rules.
	Schema nullable.Nullable[string] `json:"schema,omitempty"`

	// SchemaJson5 `schema` except with Json5 comments. Optional and should parse to same json as `schema`.
	SchemaJson5 nullable.Nullable[string] `json:"schemaJson5,omitempty"`

	// Tags The list of tag names attached to the dynamic config
	Tags       *[]string                    `json:"tags,omitempty"`
	TargetApps *DynamicConfigDto_TargetApps `json:"targetApps,omitempty"`

	// Team The team name associated with the dynamic config, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the dynamic config, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// Version Version number
	Version *float64 `json:"version,omitempty"`
}

// DynamicConfigDtoRulesConditionsTargetValue0 defines model for .
type DynamicConfigDtoRulesConditionsTargetValue0 = []string

// DynamicConfigDtoRulesConditionsTargetValue1 defines model for .
type DynamicConfigDtoRulesConditionsTargetValue1 = []float32

// DynamicConfigDtoRulesConditionsTargetValue2 defines model for .
type DynamicConfigDtoRulesConditionsTargetValue2 = string

// DynamicConfigDtoRulesConditionsTargetValue3 defines model for .
type DynamicConfigDtoRulesConditionsTargetValue3 = float32

// DynamicConfigDto_Rules_Conditions_TargetValue defines model for DynamicConfigDto.Rules.Conditions.TargetValue.
type DynamicConfigDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// DynamicConfigDtoRulesConditionsType defines model for DynamicConfigDto.Rules.Conditions.Type.
type DynamicConfigDtoRulesConditionsType string

// DynamicConfigDtoTargetApps0 defines model for .
type DynamicConfigDtoTargetApps0 = string

// DynamicConfigDtoTargetApps1 defines model for .
type DynamicConfigDtoTargetApps1 = []string

// DynamicConfigDto_TargetApps defines model for DynamicConfigDto.TargetApps.
type DynamicConfigDto_TargetApps struct {
	union json.RawMessage
}

// DynamicConfigFullUpdateDto defines model for DynamicConfigFullUpdateDto.
type DynamicConfigFullUpdateDto struct {
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID    nullable.Nullable[string] `json:"creatorID,omitempty"`

	// DefaultValue The fallback JSON object when no rules are triggered
	DefaultValue *map[string]interface{} `json:"defaultValue,omitempty"`

	// DefaultValueJson5 Can include comments. If provided with defaultValue, must parse to the same JSON
	DefaultValueJson5 *string `json:"defaultValueJson5,omitempty"`

	// Description A brief summary of what the dynamic config is being used for
	Description string `json:"description"`

	// IdType The type of ID which the dynamic config is based on.
	IdType *string `json:"idType,omitempty"`

	// IsEnabled Is the dynamic config enabled
	IsEnabled bool `json:"isEnabled"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// ReleasePipelineID The release pipeline ID associated with the dynamic config
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`

	// Rules An array of Rule objects
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                                  `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                                  `json:"field,omitempty"`
			Operator    *string                                                                    `json:"operator,omitempty"`
			TargetValue nullable.Nullable[DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        DynamicConfigFullUpdateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage   float32                 `json:"passPercentage"`
		ReturnValue      *map[string]interface{} `json:"returnValue,omitempty"`
		ReturnValueJson5 *string                 `json:"returnValueJson5,omitempty"`
	} `json:"rules"`

	// Schema A schema using JSON Schema Draft 2020-12 to enforce return values of this dynamic config's rules.
	Schema nullable.Nullable[string] `json:"schema,omitempty"`

	// SchemaJson5 `schema` except with Json5 comments. Optional and should parse to same json as `schema`.
	SchemaJson5 nullable.Nullable[string] `json:"schemaJson5,omitempty"`

	// Tags The list of tag names attached to the dynamic config
	Tags       *[]string                              `json:"tags,omitempty"`
	TargetApps *DynamicConfigFullUpdateDto_TargetApps `json:"targetApps,omitempty"`

	// Team The team name associated with the dynamic config, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the dynamic config, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
}

// DynamicConfigFullUpdateDtoRulesConditionsTargetValue0 defines model for .
type DynamicConfigFullUpdateDtoRulesConditionsTargetValue0 = []string

// DynamicConfigFullUpdateDtoRulesConditionsTargetValue1 defines model for .
type DynamicConfigFullUpdateDtoRulesConditionsTargetValue1 = []float32

// DynamicConfigFullUpdateDtoRulesConditionsTargetValue2 defines model for .
type DynamicConfigFullUpdateDtoRulesConditionsTargetValue2 = string

// DynamicConfigFullUpdateDtoRulesConditionsTargetValue3 defines model for .
type DynamicConfigFullUpdateDtoRulesConditionsTargetValue3 = float32

// DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue defines model for DynamicConfigFullUpdateDto.Rules.Conditions.TargetValue.
type DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// DynamicConfigFullUpdateDtoRulesConditionsType defines model for DynamicConfigFullUpdateDto.Rules.Conditions.Type.
type DynamicConfigFullUpdateDtoRulesConditionsType string

// DynamicConfigFullUpdateDtoTargetApps0 defines model for .
type DynamicConfigFullUpdateDtoTargetApps0 = string

// DynamicConfigFullUpdateDtoTargetApps1 defines model for .
type DynamicConfigFullUpdateDtoTargetApps1 = []string

// DynamicConfigFullUpdateDto_TargetApps defines model for DynamicConfigFullUpdateDto.TargetApps.
type DynamicConfigFullUpdateDto_TargetApps struct {
	union json.RawMessage
}

// DynamicConfigPartialUpdateDto defines model for DynamicConfigPartialUpdateDto.
type DynamicConfigPartialUpdateDto struct {
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID    nullable.Nullable[string] `json:"creatorID,omitempty"`

	// DefaultValue The fallback JSON object when no rules are triggered
	DefaultValue *map[string]interface{} `json:"defaultValue,omitempty"`

	// DefaultValueJson5 Can include comments. If provided with defaultValue, must parse to the same JSON
	DefaultValueJson5 *string `json:"defaultValueJson5,omitempty"`

	// Description A brief summary of what the dynamic config is being used for
	Description *string `json:"description,omitempty"`

	// IdType The type of ID which the dynamic config is based on.
	IdType *string `json:"idType,omitempty"`

	// IsEnabled Is the dynamic config enabled
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// ReleasePipelineID The release pipeline ID associated with the dynamic config
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`

	// Rules An array of Rule objects
	Rules *[]struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                                     `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                                     `json:"field,omitempty"`
			Operator    *string                                                                       `json:"operator,omitempty"`
			TargetValue nullable.Nullable[DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        DynamicConfigPartialUpdateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage   float32                 `json:"passPercentage"`
		ReturnValue      *map[string]interface{} `json:"returnValue,omitempty"`
		ReturnValueJson5 *string                 `json:"returnValueJson5,omitempty"`
	} `json:"rules,omitempty"`

	// Schema A schema using JSON Schema Draft 2020-12 to enforce return values of this dynamic config's rules.
	Schema nullable.Nullable[string] `json:"schema,omitempty"`

	// SchemaJson5 `schema` except with Json5 comments. Optional and should parse to same json as `schema`.
	SchemaJson5 nullable.Nullable[string] `json:"schemaJson5,omitempty"`

	// Tags The list of tag names attached to the dynamic config
	Tags       *[]string                                 `json:"tags,omitempty"`
	TargetApps *DynamicConfigPartialUpdateDto_TargetApps `json:"targetApps,omitempty"`

	// Team The team name associated with the dynamic config, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the dynamic config, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
}

// DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0 defines model for .
type DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0 = []string

// DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1 defines model for .
type DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1 = []float32

// DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2 defines model for .
type DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2 = string

// DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3 defines model for .
type DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3 = float32

// DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue defines model for DynamicConfigPartialUpdateDto.Rules.Conditions.TargetValue.
type DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// DynamicConfigPartialUpdateDtoRulesConditionsType defines model for DynamicConfigPartialUpdateDto.Rules.Conditions.Type.
type DynamicConfigPartialUpdateDtoRulesConditionsType string

// DynamicConfigPartialUpdateDtoTargetApps0 defines model for .
type DynamicConfigPartialUpdateDtoTargetApps0 = string

// DynamicConfigPartialUpdateDtoTargetApps1 defines model for .
type DynamicConfigPartialUpdateDtoTargetApps1 = []string

// DynamicConfigPartialUpdateDto_TargetApps defines model for DynamicConfigPartialUpdateDto.TargetApps.
type DynamicConfigPartialUpdateDto_TargetApps struct {
	union json.RawMessage
}

// DynamicConfigRuleAddDto defines model for DynamicConfigRuleAddDto.
type DynamicConfigRuleAddDto struct {
	// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
	BaseID *string `json:"baseID,omitempty"`

	// Conditions An array of Condition objects.
	Conditions []struct {
		CustomID    nullable.Nullable[string]                                         `json:"customID,omitempty"`
		Field       nullable.Nullable[string]                                         `json:"field,omitempty"`
		Operator    *string                                                           `json:"operator,omitempty"`
		TargetValue nullable.Nullable[DynamicConfigRuleAddDto_Conditions_TargetValue] `json:"targetValue,omitempty"`
		Type        DynamicConfigRuleAddDtoConditionsType                             `json:"type"`
	} `json:"conditions"`
	Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

	// Id The Statsig ID of this rule.
	Id *string `json:"id,omitempty"`

	// Name The name of this rule.
	Name string `json:"name"`

	// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
	PassPercentage   float64                 `json:"passPercentage"`
	ReturnValue      *map[string]interface{} `json:"returnValue,omitempty"`
	ReturnValueJson5 *string                 `json:"returnValueJson5,omitempty"`
}

// DynamicConfigRuleAddDtoConditionsTargetValue0 defines model for .
type DynamicConfigRuleAddDtoConditionsTargetValue0 = []string

// DynamicConfigRuleAddDtoConditionsTargetValue1 defines model for .
type DynamicConfigRuleAddDtoConditionsTargetValue1 = []float32

// DynamicConfigRuleAddDtoConditionsTargetValue2 defines model for .
type DynamicConfigRuleAddDtoConditionsTargetValue2 = string

// DynamicConfigRuleAddDtoConditionsTargetValue3 defines model for .
type DynamicConfigRuleAddDtoConditionsTargetValue3 = float32

// DynamicConfigRuleAddDto_Conditions_TargetValue defines model for DynamicConfigRuleAddDto.Conditions.TargetValue.
type DynamicConfigRuleAddDto_Conditions_TargetValue struct {
	union json.RawMessage
}

// DynamicConfigRuleAddDtoConditionsType defines model for DynamicConfigRuleAddDto.Conditions.Type.
type DynamicConfigRuleAddDtoConditionsType string

// DynamicConfigRuleDto defines model for DynamicConfigRuleDto.
type DynamicConfigRuleDto struct {
	// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
	BaseID *string `json:"baseID,omitempty"`

	// Conditions An array of Condition objects.
	Conditions []struct {
		CustomID    nullable.Nullable[string]                                      `json:"customID,omitempty"`
		Field       nullable.Nullable[string]                                      `json:"field,omitempty"`
		Operator    *string                                                        `json:"operator,omitempty"`
		TargetValue nullable.Nullable[DynamicConfigRuleDto_Conditions_TargetValue] `json:"targetValue,omitempty"`
		Type        DynamicConfigRuleDtoConditionsType                             `json:"type"`
	} `json:"conditions"`

	// Environments The environments this rule is enabled for.
	Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

	// Id The Statsig ID of this rule.
	Id *string `json:"id,omitempty"`

	// Name The name of this rule.
	Name string `json:"name"`

	// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
	PassPercentage float64 `json:"passPercentage"`

	// ReturnValue The return value of the rule.
	ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
}

// DynamicConfigRuleDtoConditionsTargetValue0 defines model for .
type DynamicConfigRuleDtoConditionsTargetValue0 = []string

// DynamicConfigRuleDtoConditionsTargetValue1 defines model for .
type DynamicConfigRuleDtoConditionsTargetValue1 = []float32

// DynamicConfigRuleDtoConditionsTargetValue2 defines model for .
type DynamicConfigRuleDtoConditionsTargetValue2 = string

// DynamicConfigRuleDtoConditionsTargetValue3 defines model for .
type DynamicConfigRuleDtoConditionsTargetValue3 = float32

// DynamicConfigRuleDto_Conditions_TargetValue defines model for DynamicConfigRuleDto.Conditions.TargetValue.
type DynamicConfigRuleDto_Conditions_TargetValue struct {
	union json.RawMessage
}

// DynamicConfigRuleDtoConditionsType defines model for DynamicConfigRuleDto.Conditions.Type.
type DynamicConfigRuleDtoConditionsType string

// DynamicConfigRulesDto defines model for DynamicConfigRulesDto.
type DynamicConfigRulesDto struct {
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                             `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                             `json:"field,omitempty"`
			Operator    *string                                                               `json:"operator,omitempty"`
			TargetValue nullable.Nullable[DynamicConfigRulesDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        DynamicConfigRulesDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules"`
}

// DynamicConfigRulesDtoRulesConditionsTargetValue0 defines model for .
type DynamicConfigRulesDtoRulesConditionsTargetValue0 = []string

// DynamicConfigRulesDtoRulesConditionsTargetValue1 defines model for .
type DynamicConfigRulesDtoRulesConditionsTargetValue1 = []float32

// DynamicConfigRulesDtoRulesConditionsTargetValue2 defines model for .
type DynamicConfigRulesDtoRulesConditionsTargetValue2 = string

// DynamicConfigRulesDtoRulesConditionsTargetValue3 defines model for .
type DynamicConfigRulesDtoRulesConditionsTargetValue3 = float32

// DynamicConfigRulesDto_Rules_Conditions_TargetValue defines model for DynamicConfigRulesDto.Rules.Conditions.TargetValue.
type DynamicConfigRulesDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// DynamicConfigRulesDtoRulesConditionsType defines model for DynamicConfigRulesDto.Rules.Conditions.Type.
type DynamicConfigRulesDtoRulesConditionsType string

// EchidnaGateLoadPulseQueryDto defines model for EchidnaGateLoadPulseQueryDto.
type EchidnaGateLoadPulseQueryDto struct {
	MetricIDs *[]string                            `json:"metricIDs,omitempty"`
	Refresh   *EchidnaGateLoadPulseQueryDtoRefresh `json:"refresh,omitempty"`
	RuleId    string                               `json:"ruleId"`
	TurboMode *bool                                `json:"turboMode,omitempty"`
}

// EchidnaGateLoadPulseQueryDtoRefresh defines model for EchidnaGateLoadPulseQueryDto.Refresh.
type EchidnaGateLoadPulseQueryDtoRefresh string

// EchidnaLoadPulseQueryDto defines model for EchidnaLoadPulseQueryDto.
type EchidnaLoadPulseQueryDto struct {
	MetricIDs *[]string                        `json:"metricIDs,omitempty"`
	Refresh   *EchidnaLoadPulseQueryDtoRefresh `json:"refresh,omitempty"`
	RuleId    *string                          `json:"ruleId,omitempty"`
	TurboMode *bool                            `json:"turboMode,omitempty"`
}

// EchidnaLoadPulseQueryDtoRefresh defines model for EchidnaLoadPulseQueryDto.Refresh.
type EchidnaLoadPulseQueryDtoRefresh string

// EnableDisableGroupsDto defines model for EnableDisableGroupsDto.
type EnableDisableGroupsDto struct {
	GroupNames []string `json:"group_names"`
}

// EntityPropertySourceCreationDto defines model for EntityPropertySourceCreationDto.
type EntityPropertySourceCreationDto struct {
	// Description Optional detailed context for the entity property source.
	Description *string `json:"description,omitempty"`

	// IdTypeMapping Mappings of Statsig units to their columns.
	IdTypeMapping []struct {
		// Column Column name linked to the ID.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Name Unique identifier for the entity property source.
	Name string `json:"name"`

	// Sql SQL query defining the data source.
	Sql string `json:"sql"`

	// Tags Optional tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampAsDay Indicates if the timestamp is treated as a day.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`

	// TimestampColumn Optional column name for timestamp.
	TimestampColumn *string `json:"timestampColumn,omitempty"`
}

// EntityPropertySourceDto defines model for EntityPropertySourceDto.
type EntityPropertySourceDto struct {
	// Description Detailed context and purpose of the entity property source.
	Description string `json:"description"`

	// IdTypeMapping Mappings of Statsig units to their columns.
	IdTypeMapping []struct {
		// Column Column name linked to the ID.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Name Unique identifier for the entity property source.
	Name string `json:"name"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// Sql SQL query defining the data source.
	Sql string `json:"sql"`

	// Tags Tags for categorization and search.
	Tags []string `json:"tags"`

	// TimestampAsDay Indicates if the timestamp is treated as a day.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`

	// TimestampColumn Optional column name for timestamp.
	TimestampColumn *string `json:"timestampColumn,omitempty"`
}

// EntityPropertySourcePartialUpdateDto defines model for EntityPropertySourcePartialUpdateDto.
type EntityPropertySourcePartialUpdateDto struct {
	// Description Detailed context and purpose of the entity property source.
	Description *string `json:"description,omitempty"`

	// IdTypeMapping Mappings of Statsig units to their columns.
	IdTypeMapping *[]struct {
		// Column Column name linked to the ID.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping,omitempty"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Name Unique identifier for the entity property source.
	Name *string `json:"name,omitempty"`

	// Sql SQL query defining the data source
	Sql *interface{} `json:"sql,omitempty"`

	// Tags Tags for categorization and search.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampAsDay Indicates if the timestamp is treated as a day.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`

	// TimestampColumn Optional column name for timestamp.
	TimestampColumn *string `json:"timestampColumn,omitempty"`
}

// EntityPropertySourceQueryUpdateDto defines model for EntityPropertySourceQueryUpdateDto.
type EntityPropertySourceQueryUpdateDto struct {
	// Description Optional updated context for the entity property source.
	Description *string `json:"description,omitempty"`

	// IdTypeMapping Mappings of Statsig units to their columns.
	IdTypeMapping []struct {
		// Column Column name linked to the ID.
		Column string `json:"column"`

		// StatsigUnitID ID for the Statsig unit.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Name Optional new name for the entity property source.
	Name *string `json:"name,omitempty"`

	// Sql SQL query defining the data source.
	Sql string `json:"sql"`

	// Tags Optional updated tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampAsDay Indicates if the timestamp is treated as a day.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`

	// TimestampColumn Optional column name for timestamp.
	TimestampColumn *string `json:"timestampColumn,omitempty"`
}

// ExperimentAbandonDto defines model for ExperimentAbandonDto.
type ExperimentAbandonDto struct {
	// DecisionReason The reason for making the decision to update the experiment status
	DecisionReason string `json:"decisionReason"`
}

// ExperimentArchiveDto Schema for archiving an experiment
type ExperimentArchiveDto struct {
	// ArchiveReason The reason for archiving the experiment
	ArchiveReason *string `json:"archiveReason,omitempty"`
}

// ExperimentCreateDto Create Experiment
type ExperimentCreateDto struct {
	// Allocation Percent of layer allocated to this experiment
	Allocation *float64 `json:"allocation,omitempty"`

	// AllocationDuration Warehouse Native Only - Allocation duration in days
	AllocationDuration nullable.Nullable[int64] `json:"allocationDuration,omitempty"`

	// AnalysisEndTime Warehouse Native only - end time for analysis only experiments
	AnalysisEndTime *string `json:"analysisEndTime,omitempty"`

	// AnalyticsType The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
	AnalyticsType *ExperimentCreateDtoAnalyticsType `json:"analyticsType,omitempty"`

	// AssignmentSourceExperimentName Name of the source experiment for assignment
	AssignmentSourceExperimentName *string `json:"assignmentSourceExperimentName,omitempty"`

	// AssignmentSourceFilters Array of criteria for filtering assignment sources.
	AssignmentSourceFilters *[]struct {
		// Column Column to filter on.
		Column    *string                                             `json:"column,omitempty"`
		Condition ExperimentCreateDtoAssignmentSourceFiltersCondition `json:"condition"`

		// Values Optional array of values for the criterion to match against.
		Values *[]string `json:"values,omitempty"`
	} `json:"assignmentSourceFilters,omitempty"`

	// AssignmentSourceName Source name of the assignment
	AssignmentSourceName *string `json:"assignmentSourceName,omitempty"`

	// BenjaminiHochbergPerMetric Is Benjamini-Hochberg procedure applied per metric?
	BenjaminiHochbergPerMetric *bool `json:"benjaminiHochbergPerMetric,omitempty"`

	// BenjaminiHochbergPerVariant Is Benjamini-Hochberg procedure applied per variant?
	BenjaminiHochbergPerVariant *bool `json:"benjaminiHochbergPerVariant,omitempty"`

	// BenjaminiPrimaryMetricsOnly Is Benjamini-Hochberg procedure applied for primary metrics only?
	BenjaminiPrimaryMetricsOnly *bool `json:"benjaminiPrimaryMetricsOnly,omitempty"`

	// BonferroniCorrection Is Bonferroni correction applied per variant?
	BonferroniCorrection *bool `json:"bonferroniCorrection,omitempty"`

	// BonferroniCorrectionPerMetric Is Bonferroni correction applied per metric?
	BonferroniCorrectionPerMetric *bool `json:"bonferroniCorrectionPerMetric,omitempty"`

	// CohortWaitUntilEndToInclude Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists
	CohortWaitUntilEndToInclude *bool `json:"cohortWaitUntilEndToInclude,omitempty"`

	// CohortedAnalysisDuration Warehouse Native Only - Cohorted analysis duration in days
	CohortedAnalysisDuration *int64 `json:"cohortedAnalysisDuration,omitempty"`

	// CohortedMetricsMatureAfterEnd Warehouse Native Only - Allow cohort metrics to mature after experiment end
	CohortedMetricsMatureAfterEnd *bool `json:"cohortedMetricsMatureAfterEnd,omitempty"`

	// ControlGroupID Optional control group ID
	ControlGroupID *string `json:"controlGroupID,omitempty"`

	// CreatorEmail The email of the creator of this experiment
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`

	// CreatorID The Statsig ID of the creator of this experiment
	CreatorID nullable.Nullable[string] `json:"creatorID,omitempty"`

	// DefaultConfidenceInterval Default error margin used for results
	DefaultConfidenceInterval *ExperimentCreateDtoDefaultConfidenceInterval `json:"defaultConfidenceInterval,omitempty"`

	// Description A description of the new experiment
	Description *string `json:"description,omitempty"`

	// Duration How long the experiment is expected to last in days
	Duration *int64 `json:"duration,omitempty"`

	// FixedAnalysisDuration Fixed analysis duration in days
	FixedAnalysisDuration *int64 `json:"fixedAnalysisDuration,omitempty"`

	// Groups The test groups for your experiment
	Groups *[]struct {
		Description     *string                   `json:"description,omitempty"`
		Disabled        *bool                     `json:"disabled,omitempty"`
		ForeignGroupID  *string                   `json:"foreignGroupID,omitempty"`
		Id              nullable.Nullable[string] `json:"id,omitempty"`
		Name            string                    `json:"name"`
		ParameterValues map[string]interface{}    `json:"parameterValues"`
		Size            float32                   `json:"size"`
	} `json:"groups,omitempty"`

	// Hypothesis A statement that will be tested by this experiment
	Hypothesis *string `json:"hypothesis,omitempty"`
	Id         *string `json:"id,omitempty"`

	// IdType The idType the experiment will be performed on
	IdType *string `json:"idType,omitempty"`

	// IdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
	IdentifierMappingMode *ExperimentCreateDtoIdentifierMappingMode `json:"identifierMappingMode,omitempty"`

	// IdentityResolutionSource The identity resolution entity property source for the experiment used in WHN for ID resolution
	IdentityResolutionSource nullable.Nullable[string] `json:"identityResolutionSource,omitempty"`

	// IsAnalysisOnly For Warehouse Native
	IsAnalysisOnly nullable.Nullable[bool] `json:"isAnalysisOnly,omitempty"`

	// LaunchedGroupID ID of the launched group, null otherwise
	LaunchedGroupID nullable.Nullable[string] `json:"launchedGroupID,omitempty"`

	// LayerID Which layer to place the experiment into.
	LayerID *string `json:"layerID,omitempty"`

	// Links Links to relevant documentation or resources
	Links *[]struct {
		// Title The title of the link
		Title *string `json:"title,omitempty"`

		// Url The URL of the link
		Url string `json:"url"`
	} `json:"links,omitempty"`

	// Name The name of the new experiment
	Name             string `json:"name"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// PrimaryMetricTags Primary metric tags for the experiment
	PrimaryMetricTags *[]string `json:"primaryMetricTags,omitempty"`

	// PrimaryMetrics Main metrics needed to evaluate your hypothesis
	PrimaryMetrics *[]struct {
		Direction         *ExperimentCreateDtoPrimaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                    `json:"hypothesizedValue,omitempty"`
		Name              string                                      `json:"name"`
		Type              string                                      `json:"type"`
	} `json:"primaryMetrics,omitempty"`

	// ScheduledReloadHour Warehouse Native only - UTC hour at which to run scheduled pulse loads
	ScheduledReloadHour *int64 `json:"scheduledReloadHour,omitempty"`

	// ScheduledReloadType Warehouse Native only - reload type for scheduled reloads
	ScheduledReloadType *ExperimentCreateDtoScheduledReloadType `json:"scheduledReloadType,omitempty"`

	// SecondaryIDType The secondary ID type for the experiment used in WHN for ID resolution
	SecondaryIDType nullable.Nullable[string] `json:"secondaryIDType,omitempty"`

	// SecondaryMetricTags Secondary metric tags for the experiment
	SecondaryMetricTags *[]string `json:"secondaryMetricTags,omitempty"`

	// SecondaryMetrics Additional metrics to monitor that might impact the analysis or final decision of the experiment
	SecondaryMetrics *[]struct {
		Direction         *ExperimentCreateDtoSecondaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                      `json:"hypothesizedValue,omitempty"`
		Name              string                                        `json:"name"`
		Type              string                                        `json:"type"`
	} `json:"secondaryMetrics,omitempty"`

	// SequentialTesting Apply sequential testing?
	SequentialTesting *bool `json:"sequentialTesting,omitempty"`

	// Status The current status of the experiment
	Status *ExperimentCreateDtoStatus `json:"status,omitempty"`

	// Tags Tags associated with the experiment
	Tags *[]string `json:"tags,omitempty"`

	// TargetApps Target apps assigned to this experiment
	TargetApps *ExperimentCreateDto_TargetApps `json:"targetApps,omitempty"`

	// TargetExposures Target exposures for the experiment
	TargetExposures *int64 `json:"targetExposures,omitempty"`

	// TargetingGateID Restrict your experiment to users passing the selected feature gate
	TargetingGateID nullable.Nullable[string] `json:"targetingGateID,omitempty"`

	// Team The team name associated with the experiment, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the experiment, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
}

// ExperimentCreateDtoAnalyticsType The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
type ExperimentCreateDtoAnalyticsType string

// ExperimentCreateDtoAssignmentSourceFiltersCondition defines model for ExperimentCreateDto.AssignmentSourceFilters.Condition.
type ExperimentCreateDtoAssignmentSourceFiltersCondition string

// ExperimentCreateDtoDefaultConfidenceInterval Default error margin used for results
type ExperimentCreateDtoDefaultConfidenceInterval string

// ExperimentCreateDtoIdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
type ExperimentCreateDtoIdentifierMappingMode string

// ExperimentCreateDtoPrimaryMetricsDirection defines model for ExperimentCreateDto.PrimaryMetrics.Direction.
type ExperimentCreateDtoPrimaryMetricsDirection string

// ExperimentCreateDtoScheduledReloadType Warehouse Native only - reload type for scheduled reloads
type ExperimentCreateDtoScheduledReloadType string

// ExperimentCreateDtoSecondaryMetricsDirection defines model for ExperimentCreateDto.SecondaryMetrics.Direction.
type ExperimentCreateDtoSecondaryMetricsDirection string

// ExperimentCreateDtoStatus The current status of the experiment
type ExperimentCreateDtoStatus string

// ExperimentCreateDtoTargetApps0 defines model for .
type ExperimentCreateDtoTargetApps0 = string

// ExperimentCreateDtoTargetApps1 defines model for .
type ExperimentCreateDtoTargetApps1 = []string

// ExperimentCreateDto_TargetApps Target apps assigned to this experiment
type ExperimentCreateDto_TargetApps struct {
	union json.RawMessage
}

// ExperimentFullUpdateDto defines model for ExperimentFullUpdateDto.
type ExperimentFullUpdateDto struct {
	// Allocation Percent of layer allocated to this experiment
	Allocation float64 `json:"allocation"`

	// AllocationDuration Warehouse Native Only - Allocation duration in days
	AllocationDuration nullable.Nullable[int64] `json:"allocationDuration,omitempty"`

	// AnalysisEndTime Warehouse Native only - end time for analysis only experiments
	AnalysisEndTime *string `json:"analysisEndTime,omitempty"`

	// AnalyticsType The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
	AnalyticsType *ExperimentFullUpdateDtoAnalyticsType `json:"analyticsType,omitempty"`

	// AssignmentSourceExperimentName Name of the source experiment for assignment
	AssignmentSourceExperimentName *string `json:"assignmentSourceExperimentName,omitempty"`

	// AssignmentSourceFilters Array of criteria for filtering assignment sources.
	AssignmentSourceFilters *[]struct {
		// Column Column to filter on.
		Column    *string                                                 `json:"column,omitempty"`
		Condition ExperimentFullUpdateDtoAssignmentSourceFiltersCondition `json:"condition"`

		// Values Optional array of values for the criterion to match against.
		Values *[]string `json:"values,omitempty"`
	} `json:"assignmentSourceFilters,omitempty"`

	// AssignmentSourceName Source name of the assignment
	AssignmentSourceName *string `json:"assignmentSourceName,omitempty"`

	// BenjaminiHochbergPerMetric Is Benjamini-Hochberg procedure applied per metric?
	BenjaminiHochbergPerMetric *bool `json:"benjaminiHochbergPerMetric,omitempty"`

	// BenjaminiHochbergPerVariant Is Benjamini-Hochberg procedure applied per variant?
	BenjaminiHochbergPerVariant *bool `json:"benjaminiHochbergPerVariant,omitempty"`

	// BenjaminiPrimaryMetricsOnly Is Benjamini-Hochberg procedure applied for primary metrics only?
	BenjaminiPrimaryMetricsOnly *bool `json:"benjaminiPrimaryMetricsOnly,omitempty"`

	// BonferroniCorrection Is Bonferroni correction applied per variant?
	BonferroniCorrection bool `json:"bonferroniCorrection"`

	// BonferroniCorrectionPerMetric Is Bonferroni correction applied per metric?
	BonferroniCorrectionPerMetric *bool `json:"bonferroniCorrectionPerMetric,omitempty"`

	// CohortWaitUntilEndToInclude Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists
	CohortWaitUntilEndToInclude *bool `json:"cohortWaitUntilEndToInclude,omitempty"`

	// CohortedAnalysisDuration Warehouse Native Only - Cohorted analysis duration in days
	CohortedAnalysisDuration *int64 `json:"cohortedAnalysisDuration,omitempty"`

	// CohortedMetricsMatureAfterEnd Warehouse Native Only - Allow cohort metrics to mature after experiment end
	CohortedMetricsMatureAfterEnd *bool `json:"cohortedMetricsMatureAfterEnd,omitempty"`

	// ControlGroupID Optional control group ID
	ControlGroupID *string `json:"controlGroupID,omitempty"`

	// CreatorEmail The email of the creator of this experiment
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`

	// CreatorID The Statsig ID of the creator of this experiment
	CreatorID nullable.Nullable[string] `json:"creatorID,omitempty"`

	// DefaultConfidenceInterval Default error margin used for results
	DefaultConfidenceInterval ExperimentFullUpdateDtoDefaultConfidenceInterval `json:"defaultConfidenceInterval"`

	// Description A helpful summary of what this experiment does
	Description string `json:"description"`

	// Duration How long the experiment is expected to last in days
	Duration *int64 `json:"duration,omitempty"`

	// FixedAnalysisDuration Fixed analysis duration in days
	FixedAnalysisDuration *int64 `json:"fixedAnalysisDuration,omitempty"`

	// Groups The test groups for your experiment
	Groups []struct {
		Description     *string                   `json:"description,omitempty"`
		Disabled        *bool                     `json:"disabled,omitempty"`
		ForeignGroupID  *string                   `json:"foreignGroupID,omitempty"`
		Id              nullable.Nullable[string] `json:"id,omitempty"`
		Name            string                    `json:"name"`
		ParameterValues map[string]interface{}    `json:"parameterValues"`
		Size            float32                   `json:"size"`
	} `json:"groups"`

	// Hypothesis A statement that will be tested by this experiment
	Hypothesis string `json:"hypothesis"`

	// IdType The type of ID which the experiment is based on
	IdType string `json:"idType"`

	// IdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
	IdentifierMappingMode *ExperimentFullUpdateDtoIdentifierMappingMode `json:"identifierMappingMode,omitempty"`

	// IdentityResolutionSource The identity resolution entity property source for the experiment used in WHN for ID resolution
	IdentityResolutionSource nullable.Nullable[string] `json:"identityResolutionSource,omitempty"`

	// IsAnalysisOnly For Warehouse Native
	IsAnalysisOnly nullable.Nullable[bool] `json:"isAnalysisOnly,omitempty"`

	// LaunchedGroupID ID of the launched group, null otherwise
	LaunchedGroupID nullable.Nullable[string] `json:"launchedGroupID,omitempty"`

	// Links Links to relevant documentation or resources
	Links *[]struct {
		// Title The title of the link
		Title *string `json:"title,omitempty"`

		// Url The URL of the link
		Url string `json:"url"`
	} `json:"links,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// PrimaryMetricTags Primary metric tags for the experiment
	PrimaryMetricTags *[]string `json:"primaryMetricTags,omitempty"`

	// PrimaryMetrics Main metrics needed to evaluate your hypothesis
	PrimaryMetrics *[]struct {
		Direction         *ExperimentFullUpdateDtoPrimaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                        `json:"hypothesizedValue,omitempty"`
		Name              string                                          `json:"name"`
		Type              string                                          `json:"type"`
	} `json:"primaryMetrics,omitempty"`

	// ScheduledReloadHour Warehouse Native only - UTC hour at which to run scheduled pulse loads
	ScheduledReloadHour *int64 `json:"scheduledReloadHour,omitempty"`

	// ScheduledReloadType Warehouse Native only - reload type for scheduled reloads
	ScheduledReloadType *ExperimentFullUpdateDtoScheduledReloadType `json:"scheduledReloadType,omitempty"`

	// SecondaryIDType The secondary ID type for the experiment used in WHN for ID resolution
	SecondaryIDType nullable.Nullable[string] `json:"secondaryIDType,omitempty"`

	// SecondaryMetricTags Secondary metric tags for the experiment
	SecondaryMetricTags *[]string `json:"secondaryMetricTags,omitempty"`

	// SecondaryMetrics Additional metrics to monitor that might impact the analysis or final decision of the experiment
	SecondaryMetrics *[]struct {
		Direction         *ExperimentFullUpdateDtoSecondaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                          `json:"hypothesizedValue,omitempty"`
		Name              string                                            `json:"name"`
		Type              string                                            `json:"type"`
	} `json:"secondaryMetrics,omitempty"`

	// SequentialTesting Apply sequential testing?
	SequentialTesting *bool `json:"sequentialTesting,omitempty"`

	// Status The current status of the experiment
	Status ExperimentFullUpdateDtoStatus `json:"status"`

	// Tags Tags associated with the experiment
	Tags *[]string `json:"tags,omitempty"`

	// TargetApps Target apps assigned to this experiment
	TargetApps *ExperimentFullUpdateDto_TargetApps `json:"targetApps,omitempty"`

	// TargetExposures Target exposures for the experiment
	TargetExposures *int64 `json:"targetExposures,omitempty"`

	// TargetingGateID Restrict your experiment to users passing the selected feature gate
	TargetingGateID nullable.Nullable[string] `json:"targetingGateID"`

	// Team The team name associated with the experiment, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the experiment, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
}

// ExperimentFullUpdateDtoAnalyticsType The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
type ExperimentFullUpdateDtoAnalyticsType string

// ExperimentFullUpdateDtoAssignmentSourceFiltersCondition defines model for ExperimentFullUpdateDto.AssignmentSourceFilters.Condition.
type ExperimentFullUpdateDtoAssignmentSourceFiltersCondition string

// ExperimentFullUpdateDtoDefaultConfidenceInterval Default error margin used for results
type ExperimentFullUpdateDtoDefaultConfidenceInterval string

// ExperimentFullUpdateDtoIdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
type ExperimentFullUpdateDtoIdentifierMappingMode string

// ExperimentFullUpdateDtoPrimaryMetricsDirection defines model for ExperimentFullUpdateDto.PrimaryMetrics.Direction.
type ExperimentFullUpdateDtoPrimaryMetricsDirection string

// ExperimentFullUpdateDtoScheduledReloadType Warehouse Native only - reload type for scheduled reloads
type ExperimentFullUpdateDtoScheduledReloadType string

// ExperimentFullUpdateDtoSecondaryMetricsDirection defines model for ExperimentFullUpdateDto.SecondaryMetrics.Direction.
type ExperimentFullUpdateDtoSecondaryMetricsDirection string

// ExperimentFullUpdateDtoStatus The current status of the experiment
type ExperimentFullUpdateDtoStatus string

// ExperimentFullUpdateDtoTargetApps0 defines model for .
type ExperimentFullUpdateDtoTargetApps0 = string

// ExperimentFullUpdateDtoTargetApps1 defines model for .
type ExperimentFullUpdateDtoTargetApps1 = []string

// ExperimentFullUpdateDto_TargetApps Target apps assigned to this experiment
type ExperimentFullUpdateDto_TargetApps struct {
	union json.RawMessage
}

// ExperimentOverridesDto defines model for ExperimentOverridesDto.
type ExperimentOverridesDto struct {
	// Overrides Array of experiment overrides, each specifying type, ID, and group ID.
	Overrides []struct {
		// GroupID The experiment group which user will be forced into
		GroupID string `json:"groupID"`

		// Id The id of the segment or gate
		Id   string                              `json:"id"`
		Type ExperimentOverridesDtoOverridesType `json:"type"`
	} `json:"overrides"`

	// UserIDOverrides Array of user ID overrides, specifying which users to force into experiment groups.
	UserIDOverrides []struct {
		// Environment Optional environment designation (e.g., production, staging) for the experiment.
		Environment nullable.Nullable[string] `json:"environment,omitempty"`

		// GroupID The experiment group the user will be forced into.
		GroupID string `json:"groupID"`

		// Ids Array of user IDs to be assigned to the specified experiment group.
		Ids []string `json:"ids"`

		// UnitType Optional type of unit for the experiment, defining the scope of the override.
		UnitType nullable.Nullable[string] `json:"unitType,omitempty"`
	} `json:"userIDOverrides"`
}

// ExperimentOverridesDtoOverridesType defines model for ExperimentOverridesDto.Overrides.Type.
type ExperimentOverridesDtoOverridesType string

// ExperimentPartialUpdateDto defines model for ExperimentPartialUpdateDto.
type ExperimentPartialUpdateDto struct {
	// Allocation Percent of layer allocated to this experiment
	Allocation *float64 `json:"allocation,omitempty"`

	// AllocationDuration Warehouse Native Only - Allocation duration in days
	AllocationDuration nullable.Nullable[int64] `json:"allocationDuration,omitempty"`

	// AnalysisEndTime Warehouse Native only - end time for analysis only experiments
	AnalysisEndTime *string `json:"analysisEndTime,omitempty"`

	// AnalyticsType The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
	AnalyticsType *ExperimentPartialUpdateDtoAnalyticsType `json:"analyticsType,omitempty"`

	// AssignmentSourceExperimentName Name of the source experiment for assignment
	AssignmentSourceExperimentName *string `json:"assignmentSourceExperimentName,omitempty"`

	// AssignmentSourceFilters Array of criteria for filtering assignment sources.
	AssignmentSourceFilters *[]struct {
		// Column Column to filter on.
		Column    *string                                                    `json:"column,omitempty"`
		Condition ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition `json:"condition"`

		// Values Optional array of values for the criterion to match against.
		Values *[]string `json:"values,omitempty"`
	} `json:"assignmentSourceFilters,omitempty"`

	// AssignmentSourceName Source name of the assignment
	AssignmentSourceName *string `json:"assignmentSourceName,omitempty"`

	// BenjaminiHochbergPerMetric Is Benjamini-Hochberg procedure applied per metric?
	BenjaminiHochbergPerMetric *bool `json:"benjaminiHochbergPerMetric,omitempty"`

	// BenjaminiHochbergPerVariant Is Benjamini-Hochberg procedure applied per variant?
	BenjaminiHochbergPerVariant *bool `json:"benjaminiHochbergPerVariant,omitempty"`

	// BenjaminiPrimaryMetricsOnly Is Benjamini-Hochberg procedure applied for primary metrics only?
	BenjaminiPrimaryMetricsOnly *bool `json:"benjaminiPrimaryMetricsOnly,omitempty"`

	// BonferroniCorrection Is Bonferroni correction applied per variant?
	BonferroniCorrection *bool `json:"bonferroniCorrection,omitempty"`

	// BonferroniCorrectionPerMetric Is Bonferroni correction applied per metric?
	BonferroniCorrectionPerMetric *bool `json:"bonferroniCorrectionPerMetric,omitempty"`

	// CohortWaitUntilEndToInclude Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists
	CohortWaitUntilEndToInclude *bool `json:"cohortWaitUntilEndToInclude,omitempty"`

	// CohortedAnalysisDuration Warehouse Native Only - Cohorted analysis duration in days
	CohortedAnalysisDuration *int64 `json:"cohortedAnalysisDuration,omitempty"`

	// CohortedMetricsMatureAfterEnd Warehouse Native Only - Allow cohort metrics to mature after experiment end
	CohortedMetricsMatureAfterEnd *bool `json:"cohortedMetricsMatureAfterEnd,omitempty"`

	// ControlGroupID Optional control group ID
	ControlGroupID *string `json:"controlGroupID,omitempty"`

	// CreatorEmail The email of the creator of this experiment
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`

	// CreatorID The Statsig ID of the creator of this experiment
	CreatorID nullable.Nullable[string] `json:"creatorID,omitempty"`

	// DefaultConfidenceInterval Default error margin used for results
	DefaultConfidenceInterval *ExperimentPartialUpdateDtoDefaultConfidenceInterval `json:"defaultConfidenceInterval,omitempty"`

	// Description A helpful summary of what this experiment does
	Description *string `json:"description,omitempty"`

	// Duration How long the experiment is expected to last in days
	Duration *int64 `json:"duration,omitempty"`

	// FixedAnalysisDuration Fixed analysis duration in days
	FixedAnalysisDuration *int64 `json:"fixedAnalysisDuration,omitempty"`

	// Groups The test groups for your experiment
	Groups *[]struct {
		Description     *string                   `json:"description,omitempty"`
		Disabled        *bool                     `json:"disabled,omitempty"`
		ForeignGroupID  *string                   `json:"foreignGroupID,omitempty"`
		Id              nullable.Nullable[string] `json:"id,omitempty"`
		Name            string                    `json:"name"`
		ParameterValues map[string]interface{}    `json:"parameterValues"`
		Size            float32                   `json:"size"`
	} `json:"groups,omitempty"`

	// Hypothesis A statement that will be tested by this experiment
	Hypothesis *string `json:"hypothesis,omitempty"`

	// IdType The type of ID which the experiment is based on
	IdType *string `json:"idType,omitempty"`

	// IdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
	IdentifierMappingMode *ExperimentPartialUpdateDtoIdentifierMappingMode `json:"identifierMappingMode,omitempty"`

	// IdentityResolutionSource The identity resolution entity property source for the experiment used in WHN for ID resolution
	IdentityResolutionSource nullable.Nullable[string] `json:"identityResolutionSource,omitempty"`

	// IsAnalysisOnly For Warehouse Native
	IsAnalysisOnly nullable.Nullable[bool] `json:"isAnalysisOnly,omitempty"`

	// LaunchedGroupID ID of the launched group, null otherwise
	LaunchedGroupID nullable.Nullable[string] `json:"launchedGroupID,omitempty"`

	// Links Links to relevant documentation or resources
	Links *[]struct {
		// Title The title of the link
		Title *string `json:"title,omitempty"`

		// Url The URL of the link
		Url string `json:"url"`
	} `json:"links,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// PrimaryMetricTags Primary metric tags for the experiment
	PrimaryMetricTags *[]string `json:"primaryMetricTags,omitempty"`

	// PrimaryMetrics Main metrics needed to evaluate your hypothesis
	PrimaryMetrics *[]struct {
		Direction         *ExperimentPartialUpdateDtoPrimaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                           `json:"hypothesizedValue,omitempty"`
		Name              string                                             `json:"name"`
		Type              string                                             `json:"type"`
	} `json:"primaryMetrics,omitempty"`

	// ScheduledReloadHour Warehouse Native only - UTC hour at which to run scheduled pulse loads
	ScheduledReloadHour *int64 `json:"scheduledReloadHour,omitempty"`

	// ScheduledReloadType Warehouse Native only - reload type for scheduled reloads
	ScheduledReloadType *ExperimentPartialUpdateDtoScheduledReloadType `json:"scheduledReloadType,omitempty"`

	// SecondaryIDType The secondary ID type for the experiment used in WHN for ID resolution
	SecondaryIDType nullable.Nullable[string] `json:"secondaryIDType,omitempty"`

	// SecondaryMetricTags Secondary metric tags for the experiment
	SecondaryMetricTags *[]string `json:"secondaryMetricTags,omitempty"`

	// SecondaryMetrics Additional metrics to monitor that might impact the analysis or final decision of the experiment
	SecondaryMetrics *[]struct {
		Direction         *ExperimentPartialUpdateDtoSecondaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                             `json:"hypothesizedValue,omitempty"`
		Name              string                                               `json:"name"`
		Type              string                                               `json:"type"`
	} `json:"secondaryMetrics,omitempty"`

	// SequentialTesting Apply sequential testing?
	SequentialTesting *bool `json:"sequentialTesting,omitempty"`

	// Status The current status of the experiment
	Status *ExperimentPartialUpdateDtoStatus `json:"status,omitempty"`

	// Tags Tags associated with the experiment
	Tags *[]string `json:"tags,omitempty"`

	// TargetApps Target apps assigned to this experiment
	TargetApps *ExperimentPartialUpdateDto_TargetApps `json:"targetApps,omitempty"`

	// TargetExposures Target exposures for the experiment
	TargetExposures *int64 `json:"targetExposures,omitempty"`

	// TargetingGateID Restrict your experiment to users passing the selected feature gate
	TargetingGateID nullable.Nullable[string] `json:"targetingGateID,omitempty"`

	// Team The team name associated with the experiment, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the experiment, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
}

// ExperimentPartialUpdateDtoAnalyticsType The mode of analysis for the experiment, e.g frequentist, bayesian, sprt
type ExperimentPartialUpdateDtoAnalyticsType string

// ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition defines model for ExperimentPartialUpdateDto.AssignmentSourceFilters.Condition.
type ExperimentPartialUpdateDtoAssignmentSourceFiltersCondition string

// ExperimentPartialUpdateDtoDefaultConfidenceInterval Default error margin used for results
type ExperimentPartialUpdateDtoDefaultConfidenceInterval string

// ExperimentPartialUpdateDtoIdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
type ExperimentPartialUpdateDtoIdentifierMappingMode string

// ExperimentPartialUpdateDtoPrimaryMetricsDirection defines model for ExperimentPartialUpdateDto.PrimaryMetrics.Direction.
type ExperimentPartialUpdateDtoPrimaryMetricsDirection string

// ExperimentPartialUpdateDtoScheduledReloadType Warehouse Native only - reload type for scheduled reloads
type ExperimentPartialUpdateDtoScheduledReloadType string

// ExperimentPartialUpdateDtoSecondaryMetricsDirection defines model for ExperimentPartialUpdateDto.SecondaryMetrics.Direction.
type ExperimentPartialUpdateDtoSecondaryMetricsDirection string

// ExperimentPartialUpdateDtoStatus The current status of the experiment
type ExperimentPartialUpdateDtoStatus string

// ExperimentPartialUpdateDtoTargetApps0 defines model for .
type ExperimentPartialUpdateDtoTargetApps0 = string

// ExperimentPartialUpdateDtoTargetApps1 defines model for .
type ExperimentPartialUpdateDtoTargetApps1 = []string

// ExperimentPartialUpdateDto_TargetApps Target apps assigned to this experiment
type ExperimentPartialUpdateDto_TargetApps struct {
	union json.RawMessage
}

// ExperimentPulseResultsDto defines model for ExperimentPulseResultsDto.
type ExperimentPulseResultsDto struct {
	Ds           string `json:"ds"`
	OtherMetrics *[]struct {
		AbsoluteChange                  *float32 `json:"absoluteChange,omitempty"`
		AbsoluteConfidenceIntervalDelta *float32 `json:"absoluteConfidenceIntervalDelta,omitempty"`
		AbsoluteToplineImpact           *float32 `json:"absoluteToplineImpact,omitempty"`
		AbsoluteToplineImpactDelta      *float32 `json:"absoluteToplineImpactDelta,omitempty"`
		ControlMean                     *float32 `json:"controlMean,omitempty"`
		ControlStd                      *float32 `json:"controlStd,omitempty"`
		ControlUnits                    *float32 `json:"controlUnits,omitempty"`

		// Directionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
		Directionality                                  ExperimentPulseResultsDtoOtherMetricsDirectionality `json:"directionality"`
		MetricID                                        string                                              `json:"metricID"`
		MetricName                                      string                                              `json:"metricName"`
		PValue                                          *float32                                            `json:"pValue,omitempty"`
		PercentChange                                   *float32                                            `json:"percentChange,omitempty"`
		PercentConfidenceIntervalDelta                  *float32                                            `json:"percentConfidenceIntervalDelta,omitempty"`
		PercentSequentialTestingConfidenceIntervalDelta *float32                                            `json:"percentSequentialTestingConfidenceIntervalDelta,omitempty"`
		ProjectedAbsoluteToplineImpact                  *float32                                            `json:"projectedAbsoluteToplineImpact,omitempty"`
		ProjectedAbsoluteToplineImpactDelta             *float32                                            `json:"projectedAbsoluteToplineImpactDelta,omitempty"`
		ProjectedRelativeToplineImpact                  *float32                                            `json:"projectedRelativeToplineImpact,omitempty"`
		ProjectedRelativeToplineImpactDelta             *float32                                            `json:"projectedRelativeToplineImpactDelta,omitempty"`
		RelativeToplineImpact                           *float32                                            `json:"relativeToplineImpact,omitempty"`
		RelativeToplineImpactDelta                      *float32                                            `json:"relativeToplineImpactDelta,omitempty"`
		SequentialTestingConfidenceIntervalDelta        *float32                                            `json:"sequentialTestingConfidenceIntervalDelta,omitempty"`
		TestMean                                        *float32                                            `json:"testMean,omitempty"`
		TestStd                                         *float32                                            `json:"testStd,omitempty"`
		TestUnits                                       *float32                                            `json:"testUnits,omitempty"`
	} `json:"otherMetrics,omitempty"`
	PrimaryMetrics []struct {
		AbsoluteChange                  *float32 `json:"absoluteChange,omitempty"`
		AbsoluteConfidenceIntervalDelta *float32 `json:"absoluteConfidenceIntervalDelta,omitempty"`
		AbsoluteToplineImpact           *float32 `json:"absoluteToplineImpact,omitempty"`
		AbsoluteToplineImpactDelta      *float32 `json:"absoluteToplineImpactDelta,omitempty"`
		ControlMean                     *float32 `json:"controlMean,omitempty"`
		ControlStd                      *float32 `json:"controlStd,omitempty"`
		ControlUnits                    *float32 `json:"controlUnits,omitempty"`

		// Directionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
		Directionality                                  ExperimentPulseResultsDtoPrimaryMetricsDirectionality `json:"directionality"`
		MetricID                                        string                                                `json:"metricID"`
		MetricName                                      string                                                `json:"metricName"`
		PValue                                          *float32                                              `json:"pValue,omitempty"`
		PercentChange                                   *float32                                              `json:"percentChange,omitempty"`
		PercentConfidenceIntervalDelta                  *float32                                              `json:"percentConfidenceIntervalDelta,omitempty"`
		PercentSequentialTestingConfidenceIntervalDelta *float32                                              `json:"percentSequentialTestingConfidenceIntervalDelta,omitempty"`
		ProjectedAbsoluteToplineImpact                  *float32                                              `json:"projectedAbsoluteToplineImpact,omitempty"`
		ProjectedAbsoluteToplineImpactDelta             *float32                                              `json:"projectedAbsoluteToplineImpactDelta,omitempty"`
		ProjectedRelativeToplineImpact                  *float32                                              `json:"projectedRelativeToplineImpact,omitempty"`
		ProjectedRelativeToplineImpactDelta             *float32                                              `json:"projectedRelativeToplineImpactDelta,omitempty"`
		RelativeToplineImpact                           *float32                                              `json:"relativeToplineImpact,omitempty"`
		RelativeToplineImpactDelta                      *float32                                              `json:"relativeToplineImpactDelta,omitempty"`
		SequentialTestingConfidenceIntervalDelta        *float32                                              `json:"sequentialTestingConfidenceIntervalDelta,omitempty"`
		TestMean                                        *float32                                              `json:"testMean,omitempty"`
		TestStd                                         *float32                                              `json:"testStd,omitempty"`
		TestUnits                                       *float32                                              `json:"testUnits,omitempty"`
	} `json:"primaryMetrics"`
	SecondaryMetrics []struct {
		AbsoluteChange                  *float32 `json:"absoluteChange,omitempty"`
		AbsoluteConfidenceIntervalDelta *float32 `json:"absoluteConfidenceIntervalDelta,omitempty"`
		AbsoluteToplineImpact           *float32 `json:"absoluteToplineImpact,omitempty"`
		AbsoluteToplineImpactDelta      *float32 `json:"absoluteToplineImpactDelta,omitempty"`
		ControlMean                     *float32 `json:"controlMean,omitempty"`
		ControlStd                      *float32 `json:"controlStd,omitempty"`
		ControlUnits                    *float32 `json:"controlUnits,omitempty"`

		// Directionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
		Directionality                                  ExperimentPulseResultsDtoSecondaryMetricsDirectionality `json:"directionality"`
		MetricID                                        string                                                  `json:"metricID"`
		MetricName                                      string                                                  `json:"metricName"`
		PValue                                          *float32                                                `json:"pValue,omitempty"`
		PercentChange                                   *float32                                                `json:"percentChange,omitempty"`
		PercentConfidenceIntervalDelta                  *float32                                                `json:"percentConfidenceIntervalDelta,omitempty"`
		PercentSequentialTestingConfidenceIntervalDelta *float32                                                `json:"percentSequentialTestingConfidenceIntervalDelta,omitempty"`
		ProjectedAbsoluteToplineImpact                  *float32                                                `json:"projectedAbsoluteToplineImpact,omitempty"`
		ProjectedAbsoluteToplineImpactDelta             *float32                                                `json:"projectedAbsoluteToplineImpactDelta,omitempty"`
		ProjectedRelativeToplineImpact                  *float32                                                `json:"projectedRelativeToplineImpact,omitempty"`
		ProjectedRelativeToplineImpactDelta             *float32                                                `json:"projectedRelativeToplineImpactDelta,omitempty"`
		RelativeToplineImpact                           *float32                                                `json:"relativeToplineImpact,omitempty"`
		RelativeToplineImpactDelta                      *float32                                                `json:"relativeToplineImpactDelta,omitempty"`
		SequentialTestingConfidenceIntervalDelta        *float32                                                `json:"sequentialTestingConfidenceIntervalDelta,omitempty"`
		TestMean                                        *float32                                                `json:"testMean,omitempty"`
		TestStd                                         *float32                                                `json:"testStd,omitempty"`
		TestUnits                                       *float32                                                `json:"testUnits,omitempty"`
	} `json:"secondaryMetrics"`
}

// ExperimentPulseResultsDtoOtherMetricsDirectionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
type ExperimentPulseResultsDtoOtherMetricsDirectionality string

// ExperimentPulseResultsDtoPrimaryMetricsDirectionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
type ExperimentPulseResultsDtoPrimaryMetricsDirectionality string

// ExperimentPulseResultsDtoSecondaryMetricsDirectionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
type ExperimentPulseResultsDtoSecondaryMetricsDirectionality string

// ExperimentStartDto defines model for ExperimentStartDto.
type ExperimentStartDto struct {
	// AnalysisEndTime For Warehouse Native analysis-only experiments; end time of experiment analysis.
	AnalysisEndTime *string `json:"analysisEndTime,omitempty"`

	// AnalysisStartTime For Warehouse Native analysis-only experiments; start time of experiment analysis.
	AnalysisStartTime *string `json:"analysisStartTime,omitempty"`
}

// ExperimentStatusUpdateDto Schema for updating the status of an experiment
type ExperimentStatusUpdateDto struct {
	// DecisionReason The reason for making the decision to update the experiment status
	DecisionReason string `json:"decisionReason"`

	// Id The ID of the group to launch
	Id string `json:"id"`

	// RemoveTargeting Indicates whether to remove targeting from the experiment
	RemoveTargeting *bool `json:"removeTargeting,omitempty"`
}

// ExposureCountDto defines model for ExposureCountDto.
type ExposureCountDto struct {
	// DynamicConfigs ids of dynamic configs to query (max 25)
	DynamicConfigs []struct {
		Id        string  `json:"id"`
		Past7Days float32 `json:"past7Days"`
		PastDay   float32 `json:"pastDay"`
	} `json:"dynamicConfigs"`

	// Experiments ids of experiments to query (max 25)
	Experiments []struct {
		Id        string  `json:"id"`
		Past7Days float32 `json:"past7Days"`
		PastDay   float32 `json:"pastDay"`
	} `json:"experiments"`

	// Gates ids of gates to query (max 25)
	Gates []struct {
		Id        string  `json:"id"`
		Past7Days float32 `json:"past7Days"`
		PastDay   float32 `json:"pastDay"`
	} `json:"gates"`
}

// ExternalExperimentDto defines model for ExternalExperimentDto.
type ExternalExperimentDto struct {
	ActiveReview *struct {
		Description  string `json:"description"`
		ReviewID     string `json:"reviewID"`
		ReviewStatus string `json:"reviewStatus"`
	} `json:"activeReview,omitempty"`

	// Allocation Percent of layer allocated to this experiment
	Allocation float64 `json:"allocation"`

	// AllocationDuration Warehouse Native Only - Allocation duration in days
	AllocationDuration nullable.Nullable[int64]  `json:"allocationDuration,omitempty"`
	AnalysisEndTime    *string                   `json:"analysisEndTime,omitempty"`
	AnalyticsType      nullable.Nullable[string] `json:"analyticsType,omitempty"`

	// AssignmentSourceExperimentName Name of the source experiment for assignment
	AssignmentSourceExperimentName *string `json:"assignmentSourceExperimentName,omitempty"`

	// AssignmentSourceFilters Array of criteria for filtering assignment sources.
	AssignmentSourceFilters *[]struct {
		// Column Column to filter on.
		Column    *string                                               `json:"column,omitempty"`
		Condition ExternalExperimentDtoAssignmentSourceFiltersCondition `json:"condition"`

		// Values Optional array of values for the criterion to match against.
		Values *[]string `json:"values,omitempty"`
	} `json:"assignmentSourceFilters,omitempty"`
	AssignmentSourceName *string `json:"assignmentSourceName,omitempty"`

	// BenjaminiHochbergPerMetric Is Benjamini-Hochberg procedure applied per metric?
	BenjaminiHochbergPerMetric *bool `json:"benjaminiHochbergPerMetric,omitempty"`

	// BenjaminiHochbergPerVariant Is Benjamini-Hochberg procedure applied per variant?
	BenjaminiHochbergPerVariant *bool `json:"benjaminiHochbergPerVariant,omitempty"`

	// BenjaminiPrimaryMetricsOnly Is Benjamini-Hochberg procedure applied for primary metrics only?
	BenjaminiPrimaryMetricsOnly *bool `json:"benjaminiPrimaryMetricsOnly,omitempty"`

	// BonferroniCorrection Is Bonferroni correction applied per variant?
	BonferroniCorrection bool `json:"bonferroniCorrection"`

	// BonferroniCorrectionPerMetric Is Bonferroni correction applied per metric?
	BonferroniCorrectionPerMetric *bool `json:"bonferroniCorrectionPerMetric,omitempty"`

	// CohortWaitUntilEndToInclude Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists
	CohortWaitUntilEndToInclude *bool `json:"cohortWaitUntilEndToInclude,omitempty"`

	// CohortedAnalysisDuration Warehouse Native Only - Cohorted analysis duration in days
	CohortedAnalysisDuration *int64 `json:"cohortedAnalysisDuration,omitempty"`

	// CohortedMetricsMatureAfterEnd Warehouse Native Only - Allow cohort metrics to mature after experiment end
	CohortedMetricsMatureAfterEnd *bool `json:"cohortedMetricsMatureAfterEnd,omitempty"`

	// ControlGroupID Optional control group ID
	ControlGroupID *string `json:"controlGroupID,omitempty"`

	// CreatedTime Timestamp when the entity was created.
	CreatedTime float64 `json:"createdTime"`

	// CreatorEmail The email of the creator of this experiment
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`

	// CreatorID The Statsig ID of the creator of this experiment
	CreatorID nullable.Nullable[string] `json:"creatorID,omitempty"`

	// CreatorName Name of the creator.
	CreatorName    nullable.Nullable[string]  `json:"creatorName"`
	DecisionReason nullable.Nullable[string]  `json:"decisionReason"`
	DecisionTime   nullable.Nullable[float64] `json:"decisionTime"`

	// DefaultConfidenceInterval Default error margin used for results
	DefaultConfidenceInterval ExternalExperimentDtoDefaultConfidenceInterval `json:"defaultConfidenceInterval"`

	// Description A helpful summary of what this experiment does
	Description string `json:"description"`

	// Duration How long the experiment is expected to last in days
	Duration               *int64                     `json:"duration,omitempty"`
	EndTime                nullable.Nullable[float64] `json:"endTime"`
	ExternalExperimentName *string                    `json:"externalExperimentName,omitempty"`

	// FixedAnalysisDuration Fixed analysis duration in days
	FixedAnalysisDuration *int64 `json:"fixedAnalysisDuration,omitempty"`

	// Groups The test groups for your experiment
	Groups []struct {
		Description     *string                   `json:"description,omitempty"`
		Disabled        *bool                     `json:"disabled,omitempty"`
		ForeignGroupID  *string                   `json:"foreignGroupID,omitempty"`
		Id              nullable.Nullable[string] `json:"id,omitempty"`
		Name            string                    `json:"name"`
		ParameterValues map[string]interface{}    `json:"parameterValues"`
		Size            float32                   `json:"size"`
	} `json:"groups"`

	// HealthCheckStatus Overall health check status
	HealthCheckStatus ExternalExperimentDtoHealthCheckStatus `json:"healthCheckStatus"`
	HealthChecks      *[]struct {
		Description string `json:"description"`
		Metadata    *struct {
			AssignmentSourceID   *string  `json:"assignmentSourceID,omitempty"`
			AssignmentSourceName *string  `json:"assignmentSourceName,omitempty"`
			CrossoverPercent     *float32 `json:"crossoverPercent,omitempty"`
			DeduplicationRate    *float32 `json:"deduplication_rate,omitempty"`
			DeduplicationRates   *[]struct {
				GroupId   string  `json:"group_id"`
				GroupName string  `json:"group_name"`
				Rate      float32 `json:"rate"`
			} `json:"deduplication_rates,omitempty"`
			ForeignExperimentID *string  `json:"foreignExperimentID,omitempty"`
			LastPulseLoadTime   *float32 `json:"lastPulseLoadTime,omitempty"`
			LastUpdatedDs       *string  `json:"lastUpdatedDs,omitempty"`
			Metrics             *[]struct {
				EarliestDate nullable.Nullable[time.Time] `json:"earliest_date"`
				LatestDate   nullable.Nullable[time.Time] `json:"latest_date"`
				MetricName   string                       `json:"metric_name"`
			} `json:"metrics,omitempty"`
			MissingMetrics  *[]string `json:"missingMetrics,omitempty"`
			PrimaryIdType   string    `json:"primary_id_type"`
			SecondaryIdType *string   `json:"secondary_id_type,omitempty"`
			Type            string    `json:"type"`
		} `json:"metadata,omitempty"`
		Name   string                                  `json:"name"`
		Status ExternalExperimentDtoHealthChecksStatus `json:"status"`
		Type   *ExternalExperimentDtoHealthChecksType  `json:"type,omitempty"`
	} `json:"healthChecks,omitempty"`

	// HoldoutIDs Holdouts applied to this configuration.
	HoldoutIDs *[]string `json:"holdoutIDs,omitempty"`

	// Hypothesis A statement that will be tested by this experiment
	Hypothesis string `json:"hypothesis"`

	// Id ID
	Id     string `json:"id"`
	IdType string `json:"idType"`

	// IdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
	IdentifierMappingMode *ExternalExperimentDtoIdentifierMappingMode `json:"identifierMappingMode,omitempty"`

	// IdentityResolutionSource The identity resolution entity property source for the experiment used in WHN for ID resolution
	IdentityResolutionSource nullable.Nullable[string] `json:"identityResolutionSource,omitempty"`
	InlineTargetingRulesJSON nullable.Nullable[string] `json:"inlineTargetingRulesJSON,omitempty"`
	IsAnalysisOnly           *bool                     `json:"isAnalysisOnly,omitempty"`

	// LastModifiedTime Time of the last modification.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID"`

	// LastModifierName Name of the last modifier.
	LastModifierName nullable.Nullable[string] `json:"lastModifierName"`

	// LaunchedGroupID ID of the launched group, null otherwise
	LaunchedGroupID nullable.Nullable[string] `json:"launchedGroupID,omitempty"`
	LayerID         nullable.Nullable[string] `json:"layerID"`

	// Links Links to relevant documentation or resources
	Links *[]struct {
		// Title The title of the link
		Title *string `json:"title,omitempty"`

		// Url The URL of the link
		Url string `json:"url"`
	} `json:"links,omitempty"`

	// Name Optional name for the configuration.
	Name *string `json:"name,omitempty"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`

	// PrimaryMetricTags Primary metric tags for the experiment
	PrimaryMetricTags *[]string `json:"primaryMetricTags,omitempty"`
	PrimaryMetrics    []struct {
		Direction         *ExternalExperimentDtoPrimaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                      `json:"hypothesizedValue,omitempty"`
		Name              string                                        `json:"name"`
		Type              string                                        `json:"type"`
	} `json:"primaryMetrics"`
	ReviewSettings *struct {
		AllowedReviewers nullable.Nullable[[]struct {
			Email string `json:"email"`
			Id    string `json:"id"`
			Name  string `json:"name"`
		}] `json:"allowedReviewers,omitempty"`
		RequiredReview bool `json:"requiredReview"`
	} `json:"reviewSettings,omitempty"`

	// ScheduledReloadHour Warehouse Native only - UTC hour at which to run scheduled pulse loads
	ScheduledReloadHour *int64 `json:"scheduledReloadHour,omitempty"`

	// ScheduledReloadType Warehouse Native only - reload type for scheduled reloads
	ScheduledReloadType *ExternalExperimentDtoScheduledReloadType `json:"scheduledReloadType,omitempty"`

	// SecondaryIDType The secondary ID type for the experiment used in WHN for ID resolution
	SecondaryIDType nullable.Nullable[string] `json:"secondaryIDType,omitempty"`

	// SecondaryMetricTags Secondary metric tags for the experiment
	SecondaryMetricTags *[]string `json:"secondaryMetricTags,omitempty"`
	SecondaryMetrics    []struct {
		Direction         *ExternalExperimentDtoSecondaryMetricsDirection `json:"direction,omitempty"`
		HypothesizedValue *float32                                        `json:"hypothesizedValue,omitempty"`
		Name              string                                          `json:"name"`
		Type              string                                          `json:"type"`
	} `json:"secondaryMetrics"`

	// SequentialTesting Apply sequential testing?
	SequentialTesting *bool                      `json:"sequentialTesting,omitempty"`
	StartTime         nullable.Nullable[float64] `json:"startTime"`

	// Status The current status of the experiment
	Status  ExternalExperimentDtoStatus   `json:"status"`
	Subtype *ExternalExperimentDtoSubtype `json:"subtype,omitempty"`
	Tags    []string                      `json:"tags"`

	// TargetApps Target apps assigned to this experiment
	TargetApps *ExternalExperimentDto_TargetApps `json:"targetApps,omitempty"`

	// TargetExposures Target exposures for the experiment
	TargetExposures *int64 `json:"targetExposures,omitempty"`

	// TargetingGateID Restrict your experiment to users passing the selected feature gate
	TargetingGateID nullable.Nullable[string] `json:"targetingGateID"`

	// Team The team name associated with the experiment, Enterprise only.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the experiment, Enterprise only.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// Version Version number
	Version *float64 `json:"version,omitempty"`
}

// ExternalExperimentDtoAssignmentSourceFiltersCondition defines model for ExternalExperimentDto.AssignmentSourceFilters.Condition.
type ExternalExperimentDtoAssignmentSourceFiltersCondition string

// ExternalExperimentDtoDefaultConfidenceInterval Default error margin used for results
type ExternalExperimentDtoDefaultConfidenceInterval string

// ExternalExperimentDtoHealthCheckStatus Overall health check status
type ExternalExperimentDtoHealthCheckStatus string

// ExternalExperimentDtoHealthChecksStatus defines model for ExternalExperimentDto.HealthChecks.Status.
type ExternalExperimentDtoHealthChecksStatus string

// ExternalExperimentDtoHealthChecksType defines model for ExternalExperimentDto.HealthChecks.Type.
type ExternalExperimentDtoHealthChecksType string

// ExternalExperimentDtoIdentifierMappingMode The identifier mapping mode for the experiment used in WHN for ID resolution
type ExternalExperimentDtoIdentifierMappingMode string

// ExternalExperimentDtoPrimaryMetricsDirection defines model for ExternalExperimentDto.PrimaryMetrics.Direction.
type ExternalExperimentDtoPrimaryMetricsDirection string

// ExternalExperimentDtoScheduledReloadType Warehouse Native only - reload type for scheduled reloads
type ExternalExperimentDtoScheduledReloadType string

// ExternalExperimentDtoSecondaryMetricsDirection defines model for ExternalExperimentDto.SecondaryMetrics.Direction.
type ExternalExperimentDtoSecondaryMetricsDirection string

// ExternalExperimentDtoStatus The current status of the experiment
type ExternalExperimentDtoStatus string

// ExternalExperimentDtoSubtype defines model for ExternalExperimentDto.Subtype.
type ExternalExperimentDtoSubtype string

// ExternalExperimentDtoTargetApps0 defines model for .
type ExternalExperimentDtoTargetApps0 = string

// ExternalExperimentDtoTargetApps1 defines model for .
type ExternalExperimentDtoTargetApps1 = []string

// ExternalExperimentDto_TargetApps Target apps assigned to this experiment
type ExternalExperimentDto_TargetApps struct {
	union json.RawMessage
}

// ExternalGateDto defines model for ExternalGateDto.
type ExternalGateDto struct {
	ActiveReview *struct {
		Description  string `json:"description"`
		ReviewID     string `json:"reviewID"`
		ReviewStatus string `json:"reviewStatus"`
	} `json:"activeReview,omitempty"`
	ChecksPerHour nullable.Nullable[float64] `json:"checksPerHour"`

	// CreatedTime Timestamp when the entity was created.
	CreatedTime  float64                   `json:"createdTime"`
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID    nullable.Nullable[string] `json:"creatorID,omitempty"`

	// CreatorName Name of the creator.
	CreatorName nullable.Nullable[string] `json:"creatorName"`
	Description string                    `json:"description"`

	// HoldoutIDs Holdouts applied to this configuration.
	HoldoutIDs *[]string `json:"holdoutIDs,omitempty"`

	// Id ID
	Id        string  `json:"id"`
	IdType    *string `json:"idType,omitempty"`
	IsEnabled bool    `json:"isEnabled"`

	// LastModifiedTime Time of the last modification.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID"`

	// LastModifierName Name of the last modifier.
	LastModifierName   nullable.Nullable[string] `json:"lastModifierName"`
	MeasureMetricLifts *bool                     `json:"measureMetricLifts,omitempty"`
	MonitoringMetrics  *[]struct {
		Name string `json:"name"`
		Type string `json:"type"`
	} `json:"monitoringMetrics,omitempty"`

	// Name Optional name for the configuration.
	Name *string `json:"name,omitempty"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`
	ReviewSettings    *struct {
		AllowedReviewers nullable.Nullable[[]struct {
			Email string `json:"email"`
			Id    string `json:"id"`
			Name  string `json:"name"`
		}] `json:"allowedReviewers,omitempty"`
		RequiredReview bool `json:"requiredReview"`
	} `json:"reviewSettings,omitempty"`
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                       `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                       `json:"field,omitempty"`
			Operator    *string                                                         `json:"operator,omitempty"`
			TargetValue nullable.Nullable[ExternalGateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        ExternalGateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules"`
	Status     ExternalGateDtoStatus       `json:"status"`
	Tags       *[]string                   `json:"tags,omitempty"`
	TargetApps *ExternalGateDto_TargetApps `json:"targetApps,omitempty"`
	Team       nullable.Nullable[string]   `json:"team,omitempty"`
	TeamID     nullable.Nullable[string]   `json:"teamID,omitempty"`
	Type       ExternalGateDtoType         `json:"type"`
	TypeReason ExternalGateDtoTypeReason   `json:"typeReason"`

	// Version Version number
	Version *float64 `json:"version,omitempty"`
}

// ExternalGateDtoRulesConditionsTargetValue0 defines model for .
type ExternalGateDtoRulesConditionsTargetValue0 = []string

// ExternalGateDtoRulesConditionsTargetValue1 defines model for .
type ExternalGateDtoRulesConditionsTargetValue1 = []float32

// ExternalGateDtoRulesConditionsTargetValue2 defines model for .
type ExternalGateDtoRulesConditionsTargetValue2 = string

// ExternalGateDtoRulesConditionsTargetValue3 defines model for .
type ExternalGateDtoRulesConditionsTargetValue3 = float32

// ExternalGateDto_Rules_Conditions_TargetValue defines model for ExternalGateDto.Rules.Conditions.TargetValue.
type ExternalGateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// ExternalGateDtoRulesConditionsType defines model for ExternalGateDto.Rules.Conditions.Type.
type ExternalGateDtoRulesConditionsType string

// ExternalGateDtoStatus defines model for ExternalGateDto.Status.
type ExternalGateDtoStatus string

// ExternalGateDtoTargetApps0 defines model for .
type ExternalGateDtoTargetApps0 = string

// ExternalGateDtoTargetApps1 defines model for .
type ExternalGateDtoTargetApps1 = []string

// ExternalGateDto_TargetApps defines model for ExternalGateDto.TargetApps.
type ExternalGateDto_TargetApps struct {
	union json.RawMessage
}

// ExternalGateDtoType defines model for ExternalGateDto.Type.
type ExternalGateDtoType string

// ExternalGateDtoTypeReason defines model for ExternalGateDto.TypeReason.
type ExternalGateDtoTypeReason string

// ExternalMetricDefinitionContractDto defines model for ExternalMetricDefinitionContractDto.
type ExternalMetricDefinitionContractDto struct {
	// CreatedTime Timestamp indicating when the metric was created.
	CreatedTime *float64 `json:"createdTime,omitempty"`

	// CreatorEmail Email address of the metric creator for contact purposes.
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`

	// CreatorName Name of the person who created the metric, if available.
	CreatorName nullable.Nullable[string] `json:"creatorName,omitempty"`

	// CustomRollUpEnd Custom time window end date in days since exposure.
	CustomRollUpEnd *float64 `json:"customRollUpEnd,omitempty"`

	// CustomRollUpStart Custom time window start date in days since exposure.
	CustomRollUpStart *float64 `json:"customRollUpStart,omitempty"`

	// Description An optional description providing additional context about the metric.
	Description *string `json:"description,omitempty"`

	// Directionality Specifies the desired directionality for the metric, indicating whether an increase or decrease is favorable.
	Directionality ExternalMetricDefinitionContractDtoDirectionality `json:"directionality"`

	// DryRun Skips persisting the metric (used to validate that inputs are correct)
	DryRun *bool `json:"dryRun,omitempty"`

	// FunnelCountDistinct Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct *ExternalMetricDefinitionContractDtoFunnelCountDistinct `json:"funnelCountDistinct,omitempty"`

	// FunnelEventList List of events used to create funnel metrics.
	FunnelEventList *[]struct {
		// Name The name of the funnel event used in the metric.
		Name string `json:"name"`

		// Type The type of funnel event, specifying how the event is tracked.
		Type ExternalMetricDefinitionContractDtoFunnelEventListType `json:"type"`
	} `json:"funnelEventList,omitempty"`

	// Id Unique identifier for the metric, used for referencing within the system.
	Id string `json:"id"`

	// IsHidden Indicates if the metric is hidden from the user interface.
	IsHidden *bool `json:"isHidden,omitempty"`

	// IsPermanent Indicates whether the metric is permanent and should not be deleted.
	IsPermanent *bool `json:"isPermanent,omitempty"`

	// IsReadOnly Set to true to make the metric definition editable only through the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// IsVerified Marks the metric as verified, indicating trustworthiness within the organization.
	IsVerified *bool `json:"isVerified,omitempty"`

	// LastModifiedTime Time of the last modification to this metric.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime,omitempty"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail,omitempty"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID,omitempty"`

	// LastModifierName Name of the last modifier.
	LastModifierName nullable.Nullable[string] `json:"lastModifierName,omitempty"`
	Lineage          struct {
		// Events List of event names that contribute to the metric’s calculation.
		Events []string `json:"events"`

		// Metrics List of metric names that are part of this metric’s lineage.
		Metrics []string `json:"metrics"`
	} `json:"lineage"`

	// MetricComponentMetrics List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics *[]struct {
		Name string `json:"name"`
		Type string `json:"type"`
	} `json:"metricComponentMetrics,omitempty"`

	// MetricEvents An array of event definitions used to compute the metric.
	MetricEvents *[]struct {
		// Criteria Filtering criteria for the metric event, including conditions and values to refine the event data.
		Criteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type ExternalMetricDefinitionContractDtoMetricEventsCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"criteria,omitempty"`

		// MetadataKey The key for associated metadata, if applicable.
		MetadataKey *string `json:"metadataKey,omitempty"`

		// Name The name of the metric event.
		Name string `json:"name"`

		// Type The type of metric event. Allowed values include: count, count_distinct, value, and metadata.
		Type nullable.Nullable[ExternalMetricDefinitionContractDtoMetricEventsType] `json:"type,omitempty"`
	} `json:"metricEvents,omitempty"`

	// Name The name of the metric, serving as its primary identifier.
	Name  string `json:"name"`
	Owner *struct {
		// Name Name of the owner responsible for the metric’s management.
		Name string `json:"name"`
	} `json:"owner,omitempty"`

	// RollupTimeWindow Time window for the metric rollup. Specify "custom" for a customized time window.
	RollupTimeWindow *string `json:"rollupTimeWindow,omitempty"`

	// Tags Optional tags for categorizing the metric and improving searchability.
	Tags *[]string `json:"tags,omitempty"`

	// Team The team associated with the metric, applicable for enterprise environments.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the metric, applicable for enterprise environments.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// Type The type of the metric, defining its aggregation method and characteristics.
	Type ExternalMetricDefinitionContractDtoType `json:"type"`

	// UnitTypes Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes *[]string `json:"unitTypes,omitempty"`

	// WarehouseNative Defines warehouse native metrics for advanced configurations.
	WarehouseNative *struct {
		// Aggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
		Aggregation *ExternalMetricDefinitionContractDtoWarehouseNativeAggregation `json:"aggregation,omitempty"`

		// AllowNullRatioDenominator Include units which do not have a denominator. Only applicable to ratios.
		AllowNullRatioDenominator *bool `json:"allowNullRatioDenominator,omitempty"`

		// Cap Maximum cap for metric values.
		Cap *float32 `json:"cap,omitempty"`

		// Criteria Filtering criteria for the metric source
		Criteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"criteria,omitempty"`

		// CupedAttributionWindow Attribution window for CUPED adjustments in days.
		CupedAttributionWindow nullable.Nullable[float32] `json:"cupedAttributionWindow,omitempty"`

		// CustomRollUpEnd Custom end date for rollup in days since exposure.
		CustomRollUpEnd *float32 `json:"customRollUpEnd,omitempty"`

		// CustomRollUpStart Custom start date for rollup in days since exposure.
		CustomRollUpStart *float32 `json:"customRollUpStart,omitempty"`

		// DenominatorAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
		DenominatorAggregation *ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation `json:"denominatorAggregation,omitempty"`

		// DenominatorCriteria Filtering criteria for the denominator metric source, if this metric is a ratio
		DenominatorCriteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"denominatorCriteria,omitempty"`

		// DenominatorCustomRollupEnd Custom end date for rollup in days since exposure.
		DenominatorCustomRollupEnd *float32 `json:"denominatorCustomRollupEnd,omitempty"`

		// DenominatorCustomRollupStart Custom start date for rollup in days since exposure.
		DenominatorCustomRollupStart *float32 `json:"denominatorCustomRollupStart,omitempty"`

		// DenominatorMetricSourceName Name of the metric source for the denominator.
		DenominatorMetricSourceName *string `json:"denominatorMetricSourceName,omitempty"`

		// DenominatorRollupTimeWindow Time window for the denominator metric. Specify "custom" for a custom window.
		DenominatorRollupTimeWindow *string `json:"denominatorRollupTimeWindow,omitempty"`

		// DenominatorValueColumn Column name for the denominator’s value.
		DenominatorValueColumn *string `json:"denominatorValueColumn,omitempty"`

		// FunnelCalculationWindow Duration for counting funnel events in days.
		FunnelCalculationWindow *float32 `json:"funnelCalculationWindow,omitempty"`

		// FunnelCountDistinct Allowed: users┃sessions for distinct count method in funnel events.
		FunnelCountDistinct *ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinct `json:"funnelCountDistinct,omitempty"`

		// FunnelEvents List of funnel events with associated criteria and identifiers.
		FunnelEvents *[]struct {
			// Criteria Optional array of criteria to filter the funnel events, defined by various types and conditions.
			Criteria *[]struct {
				// Column Optional column specifying which data attribute to filter on.
				Column *string `json:"column,omitempty"`

				// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
				Condition ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition `json:"condition"`

				// NullVacuousOverride If true, overrides null values in criterion evaluation.
				NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

				// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
				Type ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType `json:"type"`

				// Values Optional array of values for the criterion to match against.
				Values *[]string `json:"values,omitempty"`
			} `json:"criteria,omitempty"`

			// MetricSourceName Optional name of the metric source associated with the funnel event.
			MetricSourceName *string `json:"metricSourceName,omitempty"`

			// Name Optional step name for the funnel event, can be null if not specified.
			Name nullable.Nullable[string] `json:"name,omitempty"`

			// SessionIdentifierField Name of column which being used as session identifier. Funnel event with the same metric source
			SessionIdentifierField nullable.Nullable[string] `json:"sessionIdentifierField,omitempty"`
		} `json:"funnelEvents,omitempty"`

		// FunnelStartCriteria Allowed: start_event┃exposure to determine funnel start criteria.
		FunnelStartCriteria *ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteria `json:"funnelStartCriteria,omitempty"`

		// MetricBakeDays Number of days for metric baking; specify duration for analysis.
		MetricBakeDays *float32 `json:"metricBakeDays,omitempty"`

		// MetricDimensionColumns Specify metadata columns for breaking down metric analysis.
		MetricDimensionColumns *[]string `json:"metricDimensionColumns,omitempty"`

		// MetricSourceName For Count, Sum, Mean, User Count aggregation types: the name of metric source
		MetricSourceName *string `json:"metricSourceName,omitempty"`

		// NumeratorAggregation Aggregation type for numerator; Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile.
		NumeratorAggregation *ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation `json:"numeratorAggregation,omitempty"`

		// OnlyIncludeUsersWithConversionEvent Flag to include only users with a conversion event in the metric.
		OnlyIncludeUsersWithConversionEvent *bool `json:"onlyIncludeUsersWithConversionEvent,omitempty"`

		// Percentile Percentile value for statistical calculations.
		Percentile *float32 `json:"percentile,omitempty"`

		// RollupTimeWindow General time window for rollup; can specify custom settings.
		RollupTimeWindow *string `json:"rollupTimeWindow,omitempty"`

		// ValueColumn Column name representing the metric’s value.
		ValueColumn *string `json:"valueColumn,omitempty"`

		// ValueThreshold Threshold value for filtering metrics.
		ValueThreshold      *float32 `json:"valueThreshold,omitempty"`
		WaitForCohortWindow *bool    `json:"waitForCohortWindow,omitempty"`

		// WinsorizationHigh High threshold for winsorization; must be between 0 and 1.
		WinsorizationHigh *float32 `json:"winsorizationHigh,omitempty"`

		// WinsorizationLow Low threshold for winsorization; must be between 0 and 1.
		WinsorizationLow *float32 `json:"winsorizationLow,omitempty"`
	} `json:"warehouseNative,omitempty"`
}

// ExternalMetricDefinitionContractDtoDirectionality Specifies the desired directionality for the metric, indicating whether an increase or decrease is favorable.
type ExternalMetricDefinitionContractDtoDirectionality string

// ExternalMetricDefinitionContractDtoFunnelCountDistinct Specifies whether to count events or distinct users for the funnel metric.
type ExternalMetricDefinitionContractDtoFunnelCountDistinct string

// ExternalMetricDefinitionContractDtoFunnelEventListType The type of funnel event, specifying how the event is tracked.
type ExternalMetricDefinitionContractDtoFunnelEventListType string

// ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type ExternalMetricDefinitionContractDtoMetricEventsCriteriaCondition string

// ExternalMetricDefinitionContractDtoMetricEventsCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type ExternalMetricDefinitionContractDtoMetricEventsCriteriaType string

// ExternalMetricDefinitionContractDtoMetricEventsType The type of metric event. Allowed values include: count, count_distinct, value, and metadata.
type ExternalMetricDefinitionContractDtoMetricEventsType string

// ExternalMetricDefinitionContractDtoType The type of the metric, defining its aggregation method and characteristics.
type ExternalMetricDefinitionContractDtoType string

// ExternalMetricDefinitionContractDtoWarehouseNativeAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
type ExternalMetricDefinitionContractDtoWarehouseNativeAggregation string

// ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaCondition string

// ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type ExternalMetricDefinitionContractDtoWarehouseNativeCriteriaType string

// ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
type ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorAggregation string

// ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaCondition string

// ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type ExternalMetricDefinitionContractDtoWarehouseNativeDenominatorCriteriaType string

// ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinct Allowed: users┃sessions for distinct count method in funnel events.
type ExternalMetricDefinitionContractDtoWarehouseNativeFunnelCountDistinct string

// ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaCondition string

// ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type ExternalMetricDefinitionContractDtoWarehouseNativeFunnelEventsCriteriaType string

// ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteria Allowed: start_event┃exposure to determine funnel start criteria.
type ExternalMetricDefinitionContractDtoWarehouseNativeFunnelStartCriteria string

// ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation Aggregation type for numerator; Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile.
type ExternalMetricDefinitionContractDtoWarehouseNativeNumeratorAggregation string

// GateCreateDto Create a new gate
type GateCreateDto struct {
	CreatorEmail       nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID          nullable.Nullable[string] `json:"creatorID,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Id                 *string                   `json:"id,omitempty"`
	IdType             *string                   `json:"idType,omitempty"`
	IsEnabled          *bool                     `json:"isEnabled,omitempty"`
	MeasureMetricLifts *bool                     `json:"measureMetricLifts,omitempty"`
	MonitoringMetrics  *[]struct {
		Name string `json:"name"`
		Type string `json:"type"`
	} `json:"monitoringMetrics,omitempty"`
	Name             *string `json:"name,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`

	// ReviewSettings Whether reviews are required for this gate. If a gate has reviews required due to a project-level or team-level setting, setting this will have no effect.
	ReviewSettings *struct {
		RequiredReview bool `json:"requiredReview"`
	} `json:"reviewSettings,omitempty"`
	Rules *[]struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                     `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                     `json:"field,omitempty"`
			Operator    *string                                                       `json:"operator,omitempty"`
			TargetValue nullable.Nullable[GateCreateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        GateCreateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules,omitempty"`
	Tags       *[]string                 `json:"tags,omitempty"`
	TargetApps *GateCreateDto_TargetApps `json:"targetApps,omitempty"`
	Team       nullable.Nullable[string] `json:"team,omitempty"`
	TeamID     nullable.Nullable[string] `json:"teamID,omitempty"`
	Type       *GateCreateDtoType        `json:"type,omitempty"`
}

// GateCreateDtoRulesConditionsTargetValue0 defines model for .
type GateCreateDtoRulesConditionsTargetValue0 = []string

// GateCreateDtoRulesConditionsTargetValue1 defines model for .
type GateCreateDtoRulesConditionsTargetValue1 = []float32

// GateCreateDtoRulesConditionsTargetValue2 defines model for .
type GateCreateDtoRulesConditionsTargetValue2 = string

// GateCreateDtoRulesConditionsTargetValue3 defines model for .
type GateCreateDtoRulesConditionsTargetValue3 = float32

// GateCreateDto_Rules_Conditions_TargetValue defines model for GateCreateDto.Rules.Conditions.TargetValue.
type GateCreateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// GateCreateDtoRulesConditionsType defines model for GateCreateDto.Rules.Conditions.Type.
type GateCreateDtoRulesConditionsType string

// GateCreateDtoTargetApps0 defines model for .
type GateCreateDtoTargetApps0 = string

// GateCreateDtoTargetApps1 defines model for .
type GateCreateDtoTargetApps1 = []string

// GateCreateDto_TargetApps defines model for GateCreateDto.TargetApps.
type GateCreateDto_TargetApps struct {
	union json.RawMessage
}

// GateCreateDtoType defines model for GateCreateDto.Type.
type GateCreateDtoType string

// GateFullUpdateDto defines model for GateFullUpdateDto.
type GateFullUpdateDto struct {
	CreatorEmail       nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID          nullable.Nullable[string] `json:"creatorID,omitempty"`
	Description        string                    `json:"description"`
	IdType             *string                   `json:"idType,omitempty"`
	IsEnabled          bool                      `json:"isEnabled"`
	MeasureMetricLifts *bool                     `json:"measureMetricLifts,omitempty"`
	MonitoringMetrics  *[]struct {
		Name string `json:"name"`
		Type string `json:"type"`
	} `json:"monitoringMetrics,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`

	// ReviewSettings Whether reviews are required for this gate. If a gate has reviews required due to a project-level or team-level setting, setting this will have no effect.
	ReviewSettings *struct {
		RequiredReview bool `json:"requiredReview"`
	} `json:"reviewSettings,omitempty"`
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                         `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                         `json:"field,omitempty"`
			Operator    *string                                                           `json:"operator,omitempty"`
			TargetValue nullable.Nullable[GateFullUpdateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        GateFullUpdateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules"`
	Tags       *[]string                     `json:"tags,omitempty"`
	TargetApps *GateFullUpdateDto_TargetApps `json:"targetApps,omitempty"`
	Team       nullable.Nullable[string]     `json:"team,omitempty"`
	TeamID     nullable.Nullable[string]     `json:"teamID,omitempty"`
	Type       *GateFullUpdateDtoType        `json:"type,omitempty"`
}

// GateFullUpdateDtoRulesConditionsTargetValue0 defines model for .
type GateFullUpdateDtoRulesConditionsTargetValue0 = []string

// GateFullUpdateDtoRulesConditionsTargetValue1 defines model for .
type GateFullUpdateDtoRulesConditionsTargetValue1 = []float32

// GateFullUpdateDtoRulesConditionsTargetValue2 defines model for .
type GateFullUpdateDtoRulesConditionsTargetValue2 = string

// GateFullUpdateDtoRulesConditionsTargetValue3 defines model for .
type GateFullUpdateDtoRulesConditionsTargetValue3 = float32

// GateFullUpdateDto_Rules_Conditions_TargetValue defines model for GateFullUpdateDto.Rules.Conditions.TargetValue.
type GateFullUpdateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// GateFullUpdateDtoRulesConditionsType defines model for GateFullUpdateDto.Rules.Conditions.Type.
type GateFullUpdateDtoRulesConditionsType string

// GateFullUpdateDtoTargetApps0 defines model for .
type GateFullUpdateDtoTargetApps0 = string

// GateFullUpdateDtoTargetApps1 defines model for .
type GateFullUpdateDtoTargetApps1 = []string

// GateFullUpdateDto_TargetApps defines model for GateFullUpdateDto.TargetApps.
type GateFullUpdateDto_TargetApps struct {
	union json.RawMessage
}

// GateFullUpdateDtoType defines model for GateFullUpdateDto.Type.
type GateFullUpdateDtoType string

// GatePartialUpdateDto defines model for GatePartialUpdateDto.
type GatePartialUpdateDto struct {
	CreatorEmail       nullable.Nullable[string] `json:"creatorEmail,omitempty"`
	CreatorID          nullable.Nullable[string] `json:"creatorID,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	IdType             *string                   `json:"idType,omitempty"`
	IsEnabled          *bool                     `json:"isEnabled,omitempty"`
	MeasureMetricLifts *bool                     `json:"measureMetricLifts,omitempty"`
	MonitoringMetrics  *[]struct {
		Name string `json:"name"`
		Type string `json:"type"`
	} `json:"monitoringMetrics,omitempty"`
	PrecommitWebhook nullable.Nullable[struct {
		InternalStatusUrl string `json:"internalStatusUrl"`
		Url               string `json:"url"`
	}] `json:"precommitWebhook,omitempty"`
	ReleasePipelineID nullable.Nullable[string] `json:"releasePipelineID,omitempty"`

	// ReviewSettings Whether reviews are required for this gate. If a gate has reviews required due to a project-level or team-level setting, setting this will have no effect.
	ReviewSettings *struct {
		RequiredReview bool `json:"requiredReview"`
	} `json:"reviewSettings,omitempty"`
	Rules *[]struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                            `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                            `json:"field,omitempty"`
			Operator    *string                                                              `json:"operator,omitempty"`
			TargetValue nullable.Nullable[GatePartialUpdateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        GatePartialUpdateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules,omitempty"`
	Tags       *[]string                        `json:"tags,omitempty"`
	TargetApps *GatePartialUpdateDto_TargetApps `json:"targetApps,omitempty"`
	Team       nullable.Nullable[string]        `json:"team,omitempty"`
	TeamID     nullable.Nullable[string]        `json:"teamID,omitempty"`
	Type       *GatePartialUpdateDtoType        `json:"type,omitempty"`
}

// GatePartialUpdateDtoRulesConditionsTargetValue0 defines model for .
type GatePartialUpdateDtoRulesConditionsTargetValue0 = []string

// GatePartialUpdateDtoRulesConditionsTargetValue1 defines model for .
type GatePartialUpdateDtoRulesConditionsTargetValue1 = []float32

// GatePartialUpdateDtoRulesConditionsTargetValue2 defines model for .
type GatePartialUpdateDtoRulesConditionsTargetValue2 = string

// GatePartialUpdateDtoRulesConditionsTargetValue3 defines model for .
type GatePartialUpdateDtoRulesConditionsTargetValue3 = float32

// GatePartialUpdateDto_Rules_Conditions_TargetValue defines model for GatePartialUpdateDto.Rules.Conditions.TargetValue.
type GatePartialUpdateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// GatePartialUpdateDtoRulesConditionsType defines model for GatePartialUpdateDto.Rules.Conditions.Type.
type GatePartialUpdateDtoRulesConditionsType string

// GatePartialUpdateDtoTargetApps0 defines model for .
type GatePartialUpdateDtoTargetApps0 = string

// GatePartialUpdateDtoTargetApps1 defines model for .
type GatePartialUpdateDtoTargetApps1 = []string

// GatePartialUpdateDto_TargetApps defines model for GatePartialUpdateDto.TargetApps.
type GatePartialUpdateDto_TargetApps struct {
	union json.RawMessage
}

// GatePartialUpdateDtoType defines model for GatePartialUpdateDto.Type.
type GatePartialUpdateDtoType string

// GatePulseResultsDto defines model for GatePulseResultsDto.
type GatePulseResultsDto struct {
	Ds                string `json:"ds"`
	MonitoringMetrics []struct {
		AbsoluteChange                  *float32 `json:"absoluteChange,omitempty"`
		AbsoluteConfidenceIntervalDelta *float32 `json:"absoluteConfidenceIntervalDelta,omitempty"`
		AbsoluteToplineImpact           *float32 `json:"absoluteToplineImpact,omitempty"`
		AbsoluteToplineImpactDelta      *float32 `json:"absoluteToplineImpactDelta,omitempty"`
		ControlMean                     *float32 `json:"controlMean,omitempty"`
		ControlStd                      *float32 `json:"controlStd,omitempty"`
		ControlUnits                    *float32 `json:"controlUnits,omitempty"`

		// Directionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
		Directionality                                  GatePulseResultsDtoMonitoringMetricsDirectionality `json:"directionality"`
		MetricID                                        string                                             `json:"metricID"`
		MetricName                                      string                                             `json:"metricName"`
		PValue                                          *float32                                           `json:"pValue,omitempty"`
		PercentChange                                   *float32                                           `json:"percentChange,omitempty"`
		PercentConfidenceIntervalDelta                  *float32                                           `json:"percentConfidenceIntervalDelta,omitempty"`
		PercentSequentialTestingConfidenceIntervalDelta *float32                                           `json:"percentSequentialTestingConfidenceIntervalDelta,omitempty"`
		ProjectedAbsoluteToplineImpact                  *float32                                           `json:"projectedAbsoluteToplineImpact,omitempty"`
		ProjectedAbsoluteToplineImpactDelta             *float32                                           `json:"projectedAbsoluteToplineImpactDelta,omitempty"`
		ProjectedRelativeToplineImpact                  *float32                                           `json:"projectedRelativeToplineImpact,omitempty"`
		ProjectedRelativeToplineImpactDelta             *float32                                           `json:"projectedRelativeToplineImpactDelta,omitempty"`
		RelativeToplineImpact                           *float32                                           `json:"relativeToplineImpact,omitempty"`
		RelativeToplineImpactDelta                      *float32                                           `json:"relativeToplineImpactDelta,omitempty"`
		SequentialTestingConfidenceIntervalDelta        *float32                                           `json:"sequentialTestingConfidenceIntervalDelta,omitempty"`
		TestMean                                        *float32                                           `json:"testMean,omitempty"`
		TestStd                                         *float32                                           `json:"testStd,omitempty"`
		TestUnits                                       *float32                                           `json:"testUnits,omitempty"`
	} `json:"monitoringMetrics"`
}

// GatePulseResultsDtoMonitoringMetricsDirectionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
type GatePulseResultsDtoMonitoringMetricsDirectionality string

// GateRulesDto defines model for GateRulesDto.
type GateRulesDto struct {
	// Rules Gate Rules
	Rules []map[string]interface{} `json:"rules"`
}

// HoldoutCreateContractDto defines model for HoldoutCreateContractDto.
type HoldoutCreateContractDto struct {
	// Description description of the holdout
	Description *string `json:"description,omitempty"`

	// IdType type of id
	IdType *string `json:"idType,omitempty"`

	// Name name of the holdout
	Name string `json:"name"`

	// TeamID id of the team
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
}

// HoldoutDto defines model for HoldoutDto.
type HoldoutDto struct {
	// CreatedTime Timestamp when the entity was created.
	CreatedTime float64 `json:"createdTime"`

	// CreatorEmail Email of the creator.
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail"`

	// CreatorID ID of the user who created the entity.
	CreatorID nullable.Nullable[string] `json:"creatorID"`

	// CreatorName Name of the creator.
	CreatorName nullable.Nullable[string] `json:"creatorName"`

	// Description brief summary of what the holdout is being used for
	Description string `json:"description"`

	// ExperimentIDs an array of experimentIDs which this holdout is applied to
	ExperimentIDs []string `json:"experimentIDs"`

	// GateIDs an array of gateIDs which this holdout is applied to
	GateIDs []string `json:"gateIDs"`

	// HoldoutIDs Holdouts applied to this configuration.
	HoldoutIDs *[]string `json:"holdoutIDs,omitempty"`

	// Id ID
	Id string `json:"id"`

	// IdType type of id
	IdType string `json:"idType"`

	// IsEnabled enable or disable the holdout
	IsEnabled bool `json:"isEnabled"`

	// IsGlobal whether the holdout is being applied to all new gates
	IsGlobal bool `json:"isGlobal"`

	// LastModifiedTime Time of the last modification.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID"`

	// LastModifierName Name of the last modifier.
	LastModifierName nullable.Nullable[string] `json:"lastModifierName"`

	// LayerIDs an array of layerIDs which this holdout is applied to
	LayerIDs []string `json:"layerIDs"`

	// Name Optional name for the configuration.
	Name *string `json:"name,omitempty"`

	// PassPercentage percentage of users between 0-10% to pass through the holdout
	PassPercentage float64 `json:"passPercentage"`

	// Tags Optional tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TargetApps List of target applications associated with this configuration.
	TargetApps *[]string `json:"targetApps,omitempty"`

	// TargetingGateID the gateID that the holdout is targeting
	TargetingGateID nullable.Nullable[string] `json:"targetingGateID"`

	// Team Optional name for the responsible team.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID Optional ID of the responsible team.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// Version Version number
	Version *float64 `json:"version,omitempty"`
}

// HoldoutFullUpdateContractDto defines model for HoldoutFullUpdateContractDto.
type HoldoutFullUpdateContractDto struct {
	// Description brief summary of what the holdout is being used for
	Description string `json:"description"`

	// ExperimentIDs an array of experimentIDs which this holdout is applied to
	ExperimentIDs []string `json:"experimentIDs"`

	// GateIDs an array of gateIDs which this holdout is applied to
	GateIDs []string `json:"gateIDs"`

	// IsEnabled enable or disable the holdout
	IsEnabled bool `json:"isEnabled"`

	// IsGlobal whether the holdout is being applied to all new gates
	IsGlobal bool `json:"isGlobal"`

	// LayerIDs an array of layerIDs which this holdout is applied to
	LayerIDs []string `json:"layerIDs"`

	// PassPercentage percentage of users between 0-10% to pass through the holdout
	PassPercentage float64 `json:"passPercentage"`

	// TargetingGateID the gateID that the holdout is targeting
	TargetingGateID nullable.Nullable[string] `json:"targetingGateID"`
}

// HoldoutPartialUpdateContractDto defines model for HoldoutPartialUpdateContractDto.
type HoldoutPartialUpdateContractDto struct {
	// Description brief summary of what the holdout is being used for
	Description *string `json:"description,omitempty"`

	// ExperimentIDs an array of experimentIDs which this holdout is applied to
	ExperimentIDs *[]string `json:"experimentIDs,omitempty"`

	// GateIDs an array of gateIDs which this holdout is applied to
	GateIDs *[]string `json:"gateIDs,omitempty"`

	// IsEnabled enable or disable the holdout
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// IsGlobal whether the holdout is being applied to all new gates
	IsGlobal *bool `json:"isGlobal,omitempty"`

	// LayerIDs an array of layerIDs which this holdout is applied to
	LayerIDs *[]string `json:"layerIDs,omitempty"`

	// PassPercentage percentage of users between 0-10% to pass through the holdout
	PassPercentage *float64 `json:"passPercentage,omitempty"`

	// TargetingGateID the gateID that the holdout is targeting
	TargetingGateID nullable.Nullable[string] `json:"targetingGateID,omitempty"`
}

// IDListDto Schema for a list of IDs with a name and count
type IDListDto struct {
	// Count The count of IDs in the list
	Count float64 `json:"count"`

	// Ids The array of IDs
	Ids []string `json:"ids"`

	// Name The name associated with the list of IDs
	Name string `json:"name"`
}

// IngestionBackfillContractDto defines model for IngestionBackfillContractDto.
type IngestionBackfillContractDto struct {
	Dataset        IngestionBackfillContractDtoDataset                    `json:"dataset"`
	DatestampEnd   string                                                 `json:"datestamp_end"`
	DatestampStart string                                                 `json:"datestamp_start"`
	Source         nullable.Nullable[IngestionBackfillContractDto_Source] `json:"source,omitempty"`
	Type           IngestionBackfillContractDtoType                       `json:"type"`
}

// IngestionBackfillContractDtoDataset defines model for IngestionBackfillContractDto.Dataset.
type IngestionBackfillContractDtoDataset string

// IngestionBackfillContractDtoSource0 defines model for .
type IngestionBackfillContractDtoSource0 = string

// IngestionBackfillContractDtoSource1 defines model for .
type IngestionBackfillContractDtoSource1 = []string

// IngestionBackfillContractDto_Source defines model for IngestionBackfillContractDto.Source.
type IngestionBackfillContractDto_Source struct {
	union json.RawMessage
}

// IngestionBackfillContractDtoType defines model for IngestionBackfillContractDto.Type.
type IngestionBackfillContractDtoType string

// IngestionBackfillDataDto defines model for IngestionBackfillDataDto.
type IngestionBackfillDataDto struct {
	RunID string `json:"runID"`
}

// IngestionCreateDatabricksConnectionContractDto defines model for IngestionCreateDatabricksConnectionContractDto.
type IngestionCreateDatabricksConnectionContractDto struct {
	DeltaSharingCredentials *string `json:"deltaSharingCredentials,omitempty"`
	Host                    string  `json:"host"`
	Path                    string  `json:"path"`
	Token                   string  `json:"token"`
	Verified                *bool   `json:"verified,omitempty"`
}

// IngestionDto defines model for IngestionDto.
type IngestionDto struct {
	Data    map[string]interface{} `json:"data"`
	Enabled bool                   `json:"enabled"`
	Id      string                 `json:"id"`
	Type    string                 `json:"type"`
}

// IngestionEventCountResponseDto defines model for IngestionEventCountResponseDto.
type IngestionEventCountResponseDto struct {
	union json.RawMessage
}

// IngestionEventCountResponseDto0 defines model for .
type IngestionEventCountResponseDto0 = []struct {
	Count           float32   `json:"count"`
	Date            string    `json:"date"`
	Event           string    `json:"event"`
	LastUpdatedTime time.Time `json:"last_updated_time"`
}

// IngestionEventCountResponseDto1 defines model for .
type IngestionEventCountResponseDto1 = []struct {
	Date   string `json:"date"`
	Events []struct {
		Count           float32   `json:"count"`
		Event           string    `json:"event"`
		LastUpdatedTime time.Time `json:"last_updated_time"`
	} `json:"events"`
}

// IngestionEventDeltaResponseDto defines model for IngestionEventDeltaResponseDto.
type IngestionEventDeltaResponseDto struct {
	union json.RawMessage
}

// IngestionEventDeltaResponseDto0 defines model for .
type IngestionEventDeltaResponseDto0 = []struct {
	Date            string    `json:"date"`
	Event           string    `json:"event"`
	ExternalCount   float32   `json:"external_count"`
	HasDiff         bool      `json:"has_diff"`
	InternalCount   float32   `json:"internal_count"`
	LastUpdatedTime time.Time `json:"last_updated_time"`
	Source          string    `json:"source"`
	Threshold       float32   `json:"threshold"`
}

// IngestionEventDeltaResponseDto1 defines model for .
type IngestionEventDeltaResponseDto1 = []struct {
	Date   string `json:"date"`
	Events []struct {
		Event           string    `json:"event"`
		ExternalCount   float32   `json:"external_count"`
		HasDiff         bool      `json:"has_diff"`
		InternalCount   float32   `json:"internal_count"`
		LastUpdatedTime time.Time `json:"last_updated_time"`
		Source          string    `json:"source"`
		Threshold       float32   `json:"threshold"`
	} `json:"events"`
}

// IngestionRunDataContractDto defines model for IngestionRunDataContractDto.
type IngestionRunDataContractDto struct {
	CreatedAt       time.Time `json:"createdAt"`
	DateStamps      []string  `json:"dateStamps"`
	GranularHistory []struct {
		LatestSourceStatus string `json:"latestSourceStatus"`
		Source             string `json:"source"`
		StatusByDate       []struct {
			DateStamp string `json:"dateStamp"`
			Statuses  []struct {
				Status          string    `json:"status"`
				StatusTimestamp time.Time `json:"statusTimestamp"`
			} `json:"statuses"`
		} `json:"statusByDate"`
	} `json:"granularHistory"`
	LastUpdatedAt time.Time `json:"lastUpdatedAt"`
	LatestStatus  string    `json:"latestStatus"`
	RunHistory    []struct {
		Status          string    `json:"status"`
		StatusTimestamp time.Time `json:"statusTimestamp"`
	} `json:"runHistory"`
	RunID   string   `json:"runID"`
	Sources []string `json:"sources"`
	Trigger string   `json:"trigger"`
}

// IngestionScheduleDto defines model for IngestionScheduleDto.
type IngestionScheduleDto struct {
	Dataset          string  `json:"dataset"`
	ScheduledHourPst float64 `json:"scheduled_hour_pst"`
}

// IngestionScheduleUpdateContractDto defines model for IngestionScheduleUpdateContractDto.
type IngestionScheduleUpdateContractDto struct {
	Dataset          IngestionScheduleUpdateContractDtoDataset `json:"dataset"`
	ScheduledHourPst *float64                                  `json:"scheduled_hour_pst,omitempty"`
}

// IngestionScheduleUpdateContractDtoDataset defines model for IngestionScheduleUpdateContractDto.Dataset.
type IngestionScheduleUpdateContractDtoDataset string

// IngestionSourceCreateContractDto defines model for IngestionSourceCreateContractDto.
type IngestionSourceCreateContractDto struct {
	union json.RawMessage
}

// IngestionSourceCreateContractDto0 defines model for .
type IngestionSourceCreateContractDto0 struct {
	ColumnMapping *struct {
		// Dateid Date of the daily metric, ISO formatted (ex. 2021-02-17). We’ll load custom metrics to whatever date you use here.
		Dateid string `json:"dateid"`

		// Denominator Required for ratio metrics. If present along with a numerator in any record, the metric will be treated as ratio and only calculated for users with non-null numerators.
		Denominator *string `json:"denominator,omitempty"`

		// IdType The id_type the unit_id represents. Must be valid id_type. Default Statsig types are user_id/stable_id, but you may have generated custom id_types. Make sure this matches (case sensitive) a customID in your project, or you won’t get experiment results.
		IdType string `json:"id_type"`

		// MetricName String format. Not null. Length < 128 characters.
		MetricName string `json:"metric_name"`

		// MetricValue Numeric value for the metric. This OR both of numerator and denominator need to be provided.
		MetricValue *string `json:"metric_value,omitempty"`

		// Numerator Required for ratio metrics. If present along with a denominator in any record, the metric will be treated as ratio and only calculated for users with non-null denominators
		Numerator *string `json:"numerator,omitempty"`

		// UnitId The unique user identifier this metric is for. This might not necessarily be a user_id - it could be a custom_id of some kind. Make sure this is in the same format as your logged unit_ids.
		UnitId string `json:"unit_id"`
	} `json:"column_mapping,omitempty"`
	Dataset         IngestionSourceCreateContractDto0Dataset          `json:"dataset"`
	Enabled         *bool                                             `json:"enabled,omitempty"`
	Query           *string                                           `json:"query,omitempty"`
	Schema          *string                                           `json:"schema,omitempty"`
	Share           *string                                           `json:"share,omitempty"`
	SourceName      string                                            `json:"source_name"`
	Table           *string                                           `json:"table,omitempty"`
	Type            IngestionSourceCreateContractDto0Type             `json:"type"`
	UseDeltaSharing *IngestionSourceCreateContractDto0UseDeltaSharing `json:"use_delta_sharing,omitempty"`
}

// IngestionSourceCreateContractDto0Dataset defines model for IngestionSourceCreateContractDto.0.Dataset.
type IngestionSourceCreateContractDto0Dataset string

// IngestionSourceCreateContractDto0Type defines model for IngestionSourceCreateContractDto.0.Type.
type IngestionSourceCreateContractDto0Type string

// IngestionSourceCreateContractDto0UseDeltaSharing defines model for IngestionSourceCreateContractDto.0.UseDeltaSharing.
type IngestionSourceCreateContractDto0UseDeltaSharing bool

// IngestionSourceCreateContractDto1 defines model for .
type IngestionSourceCreateContractDto1 struct {
	ColumnMapping *struct {
		// EventName Name of the event. String under 128 characters, using ‘_’ for spaces.
		EventName      string             `json:"event_name"`
		EventValue     *string            `json:"event_value,omitempty"`
		Ids            map[string]string  `json:"ids"`
		Metadata       *map[string]string `json:"metadata,omitempty"`
		MetadataObject *string            `json:"metadata_object,omitempty"`

		// Timestamp Unix timestamp in seconds of the event (ex. 1613584800)
		Timestamp string `json:"timestamp"`

		// UnitId The unique user identifier this event is for. This might not necessarily be a single column for userID - it could be spread across multiple columns for deviceID etc.
		UnitId *string `json:"unit_id,omitempty"`
	} `json:"column_mapping,omitempty"`
	Dataset         IngestionSourceCreateContractDto1Dataset          `json:"dataset"`
	Enabled         *bool                                             `json:"enabled,omitempty"`
	Query           *string                                           `json:"query,omitempty"`
	Schema          *string                                           `json:"schema,omitempty"`
	Share           *string                                           `json:"share,omitempty"`
	SourceName      string                                            `json:"source_name"`
	Table           *string                                           `json:"table,omitempty"`
	Type            IngestionSourceCreateContractDto1Type             `json:"type"`
	UseDeltaSharing *IngestionSourceCreateContractDto1UseDeltaSharing `json:"use_delta_sharing,omitempty"`
}

// IngestionSourceCreateContractDto1Dataset defines model for IngestionSourceCreateContractDto.1.Dataset.
type IngestionSourceCreateContractDto1Dataset string

// IngestionSourceCreateContractDto1Type defines model for IngestionSourceCreateContractDto.1.Type.
type IngestionSourceCreateContractDto1Type string

// IngestionSourceCreateContractDto1UseDeltaSharing defines model for IngestionSourceCreateContractDto.1.UseDeltaSharing.
type IngestionSourceCreateContractDto1UseDeltaSharing bool

// IngestionSourceCreateContractDto2 defines model for .
type IngestionSourceCreateContractDto2 struct {
	ColumnMapping *struct {
		EventValue *string `json:"event_value,omitempty"`

		// Experiment Unique identifier for the experiment.
		Experiment string `json:"experiment"`

		// GroupId Unique identifier for the experiment groups.
		GroupId        string             `json:"group_id"`
		Ids            map[string]string  `json:"ids"`
		Metadata       *map[string]string `json:"metadata,omitempty"`
		MetadataObject *string            `json:"metadata_object,omitempty"`

		// Timestamp Unix timestamp in seconds of the event (ex. 1613584800)
		Timestamp string `json:"timestamp"`

		// UnitId The unique user identifier this exposure is for. This might not necessarily be a single column for userID - it could be spread across multiple columns for deviceID etc.
		UnitId *string `json:"unit_id,omitempty"`
	} `json:"column_mapping,omitempty"`
	Dataset         IngestionSourceCreateContractDto2Dataset          `json:"dataset"`
	Enabled         *bool                                             `json:"enabled,omitempty"`
	Query           *string                                           `json:"query,omitempty"`
	Schema          *string                                           `json:"schema,omitempty"`
	Share           *string                                           `json:"share,omitempty"`
	SourceName      string                                            `json:"source_name"`
	Table           *string                                           `json:"table,omitempty"`
	Type            IngestionSourceCreateContractDto2Type             `json:"type"`
	UseDeltaSharing *IngestionSourceCreateContractDto2UseDeltaSharing `json:"use_delta_sharing,omitempty"`
}

// IngestionSourceCreateContractDto2Dataset defines model for IngestionSourceCreateContractDto.2.Dataset.
type IngestionSourceCreateContractDto2Dataset string

// IngestionSourceCreateContractDto2Type defines model for IngestionSourceCreateContractDto.2.Type.
type IngestionSourceCreateContractDto2Type string

// IngestionSourceCreateContractDto2UseDeltaSharing defines model for IngestionSourceCreateContractDto.2.UseDeltaSharing.
type IngestionSourceCreateContractDto2UseDeltaSharing bool

// IngestionStatusDto defines model for IngestionStatusDto.
type IngestionStatusDto struct {
	Ds               *time.Time                   `json:"ds,omitempty"`
	IngestionDataset nullable.Nullable[string]    `json:"ingestion_dataset"`
	IngestionSource  nullable.Nullable[string]    `json:"ingestion_source"`
	Message          nullable.Nullable[string]    `json:"message"`
	MetricCount      *float64                     `json:"metricCount,omitempty"`
	RowCount         *float64                     `json:"rowCount,omitempty"`
	SourceName       nullable.Nullable[string]    `json:"source_name"`
	Status           nullable.Nullable[string]    `json:"status"`
	Timestamp        nullable.Nullable[time.Time] `json:"timestamp"`
}

// IngestionUpdateContractDto defines model for IngestionUpdateContractDto.
type IngestionUpdateContractDto struct {
	union json.RawMessage
}

// IngestionUpdateContractDto0 defines model for .
type IngestionUpdateContractDto0 struct {
	ColumnMapping *struct {
		// Dateid Date of the daily metric, ISO formatted (ex. 2021-02-17). We’ll load custom metrics to whatever date you use here.
		Dateid string `json:"dateid"`

		// Denominator Required for ratio metrics. If present along with a numerator in any record, the metric will be treated as ratio and only calculated for users with non-null numerators.
		Denominator *string `json:"denominator,omitempty"`

		// IdType The id_type the unit_id represents. Must be valid id_type. Default Statsig types are user_id/stable_id, but you may have generated custom id_types. Make sure this matches (case sensitive) a customID in your project, or you won’t get experiment results.
		IdType string `json:"id_type"`

		// MetricName String format. Not null. Length < 128 characters.
		MetricName string `json:"metric_name"`

		// MetricValue Numeric value for the metric. This OR both of numerator and denominator need to be provided.
		MetricValue *string `json:"metric_value,omitempty"`

		// Numerator Required for ratio metrics. If present along with a denominator in any record, the metric will be treated as ratio and only calculated for users with non-null denominators
		Numerator *string `json:"numerator,omitempty"`

		// UnitId The unique user identifier this metric is for. This might not necessarily be a user_id - it could be a custom_id of some kind. Make sure this is in the same format as your logged unit_ids.
		UnitId string `json:"unit_id"`
	} `json:"column_mapping,omitempty"`
	Dataset    IngestionUpdateContractDto0Dataset `json:"dataset"`
	Enabled    *bool                              `json:"enabled,omitempty"`
	Query      *string                            `json:"query,omitempty"`
	Schema     *string                            `json:"schema,omitempty"`
	Share      *string                            `json:"share,omitempty"`
	SourceName *string                            `json:"source_name,omitempty"`
	Table      *string                            `json:"table,omitempty"`
	Type       IngestionUpdateContractDto0Type    `json:"type"`
}

// IngestionUpdateContractDto0Dataset defines model for IngestionUpdateContractDto.0.Dataset.
type IngestionUpdateContractDto0Dataset string

// IngestionUpdateContractDto0Type defines model for IngestionUpdateContractDto.0.Type.
type IngestionUpdateContractDto0Type string

// IngestionUpdateContractDto1 defines model for .
type IngestionUpdateContractDto1 struct {
	ColumnMapping *struct {
		// EventName Name of the event. String under 128 characters, using ‘_’ for spaces.
		EventName      string             `json:"event_name"`
		EventValue     *string            `json:"event_value,omitempty"`
		Ids            map[string]string  `json:"ids"`
		Metadata       *map[string]string `json:"metadata,omitempty"`
		MetadataObject *string            `json:"metadata_object,omitempty"`

		// Timestamp Unix timestamp in seconds of the event (ex. 1613584800)
		Timestamp string `json:"timestamp"`

		// UnitId The unique user identifier this event is for. This might not necessarily be a single column for userID - it could be spread across multiple columns for deviceID etc.
		UnitId *string `json:"unit_id,omitempty"`
	} `json:"column_mapping,omitempty"`
	Dataset    IngestionUpdateContractDto1Dataset `json:"dataset"`
	Enabled    *bool                              `json:"enabled,omitempty"`
	Query      *string                            `json:"query,omitempty"`
	Schema     *string                            `json:"schema,omitempty"`
	Share      *string                            `json:"share,omitempty"`
	SourceName *string                            `json:"source_name,omitempty"`
	Table      *string                            `json:"table,omitempty"`
	Type       IngestionUpdateContractDto1Type    `json:"type"`
}

// IngestionUpdateContractDto1Dataset defines model for IngestionUpdateContractDto.1.Dataset.
type IngestionUpdateContractDto1Dataset string

// IngestionUpdateContractDto1Type defines model for IngestionUpdateContractDto.1.Type.
type IngestionUpdateContractDto1Type string

// IngestionUpdateContractDto2 defines model for .
type IngestionUpdateContractDto2 struct {
	ColumnMapping *struct {
		EventValue *string `json:"event_value,omitempty"`

		// Experiment Unique identifier for the experiment.
		Experiment string `json:"experiment"`

		// GroupId Unique identifier for the experiment groups.
		GroupId        string             `json:"group_id"`
		Ids            map[string]string  `json:"ids"`
		Metadata       *map[string]string `json:"metadata,omitempty"`
		MetadataObject *string            `json:"metadata_object,omitempty"`

		// Timestamp Unix timestamp in seconds of the event (ex. 1613584800)
		Timestamp string `json:"timestamp"`

		// UnitId The unique user identifier this exposure is for. This might not necessarily be a single column for userID - it could be spread across multiple columns for deviceID etc.
		UnitId *string `json:"unit_id,omitempty"`
	} `json:"column_mapping,omitempty"`
	Dataset    IngestionUpdateContractDto2Dataset `json:"dataset"`
	Enabled    *bool                              `json:"enabled,omitempty"`
	Query      *string                            `json:"query,omitempty"`
	Schema     *string                            `json:"schema,omitempty"`
	Share      *string                            `json:"share,omitempty"`
	SourceName *string                            `json:"source_name,omitempty"`
	Table      *string                            `json:"table,omitempty"`
	Type       IngestionUpdateContractDto2Type    `json:"type"`
}

// IngestionUpdateContractDto2Dataset defines model for IngestionUpdateContractDto.2.Dataset.
type IngestionUpdateContractDto2Dataset string

// IngestionUpdateContractDto2Type defines model for IngestionUpdateContractDto.2.Type.
type IngestionUpdateContractDto2Type string

// KeyCreateContractDto defines model for KeyCreateContractDto.
type KeyCreateContractDto struct {
	Description           string                        `json:"description"`
	Environments          *[]string                     `json:"environments,omitempty"`
	Scopes                *[]KeyCreateContractDtoScopes `json:"scopes,omitempty"`
	SecondaryTargetAppIDs *[]string                     `json:"secondaryTargetAppIDs,omitempty"`
	TargetAppID           *string                       `json:"targetAppID,omitempty"`
	Type                  KeyCreateContractDtoType      `json:"type"`
}

// KeyCreateContractDtoScopes defines model for KeyCreateContractDto.Scopes.
type KeyCreateContractDtoScopes string

// KeyCreateContractDtoType defines model for KeyCreateContractDto.Type.
type KeyCreateContractDtoType string

// KeyDto defines model for KeyDto.
type KeyDto struct {
	Description         string                      `json:"description"`
	Environments        *[]string                   `json:"environments,omitempty"`
	Key                 nullable.Nullable[string]   `json:"key"`
	PrimaryTargetApp    nullable.Nullable[string]   `json:"primaryTargetApp,omitempty"`
	Scopes              []KeyDtoScopes              `json:"scopes"`
	SecondaryTargetApps nullable.Nullable[[]string] `json:"secondaryTargetApps,omitempty"`
	Status              KeyDtoStatus                `json:"status"`
	Type                KeyDtoType                  `json:"type"`
}

// KeyDtoScopes defines model for KeyDto.Scopes.
type KeyDtoScopes string

// KeyDtoStatus defines model for KeyDto.Status.
type KeyDtoStatus string

// KeyDtoType defines model for KeyDto.Type.
type KeyDtoType string

// KeyUpdateContractDto defines model for KeyUpdateContractDto.
type KeyUpdateContractDto struct {
	Description           *string                       `json:"description,omitempty"`
	Environments          *[]string                     `json:"environments,omitempty"`
	Scopes                *[]KeyUpdateContractDtoScopes `json:"scopes,omitempty"`
	SecondaryTargetAppIDs nullable.Nullable[[]string]   `json:"secondaryTargetAppIDs,omitempty"`
	TargetAppID           nullable.Nullable[string]     `json:"targetAppID,omitempty"`
}

// KeyUpdateContractDtoScopes defines model for KeyUpdateContractDto.Scopes.
type KeyUpdateContractDtoScopes string

// LayerContractDto defines model for LayerContractDto.
type LayerContractDto struct {
	// CreatedTime Timestamp when the entity was created.
	CreatedTime float64 `json:"createdTime"`

	// CreatorEmail Email of the creator.
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail"`

	// CreatorID ID of the user who created the entity.
	CreatorID nullable.Nullable[string] `json:"creatorID"`

	// CreatorName Name of the creator.
	CreatorName nullable.Nullable[string] `json:"creatorName"`

	// Description A detailed description of the layer, explaining its purpose and functionality.
	Description string `json:"description"`

	// HoldoutIDs Holdouts applied to this configuration.
	HoldoutIDs *[]string `json:"holdoutIDs,omitempty"`

	// Id ID
	Id string `json:"id"`

	// IdType The ID type used for this layer, important for validation.
	IdType string `json:"idType"`

	// IsImplicitLayer Indicates if the layer was automatically created by Statsig during experiment creation.
	IsImplicitLayer bool `json:"isImplicitLayer"`

	// LastModifiedTime Time of the last modification.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID"`

	// LastModifierName Name of the last modifier.
	LastModifierName nullable.Nullable[string] `json:"lastModifierName"`

	// Name Optional name for the configuration.
	Name *string `json:"name,omitempty"`

	// Parameters An array of parameters associated with the layer, each defining specific attributes.
	Parameters []struct {
		// DefaultValue The default value for this parameter, which must match the specified type.
		DefaultValue LayerContractDto_Parameters_DefaultValue `json:"defaultValue"`

		// Name The name of this parameter, used for identification within the layer.
		Name string `json:"name"`

		// Type The data type that this parameter returns. Allowed types include: string, boolean, number, object, and array.
		Type LayerContractDtoParametersType `json:"type"`
	} `json:"parameters"`

	// Tags Optional tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TargetApps List of target applications that this layer is intended for.
	TargetApps *LayerContractDto_TargetApps `json:"targetApps,omitempty"`

	// Team Optional name for the responsible team.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID Optional ID of the responsible team.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// Version Version number
	Version *float64 `json:"version,omitempty"`
}

// LayerContractDtoParametersDefaultValue0 defines model for .
type LayerContractDtoParametersDefaultValue0 = string

// LayerContractDtoParametersDefaultValue1 defines model for .
type LayerContractDtoParametersDefaultValue1 = float32

// LayerContractDtoParametersDefaultValue2 defines model for .
type LayerContractDtoParametersDefaultValue2 = bool

// LayerContractDtoParametersDefaultValue3 defines model for .
type LayerContractDtoParametersDefaultValue3 map[string]interface{}

// LayerContractDtoParametersDefaultValue4 defines model for .
type LayerContractDtoParametersDefaultValue4 = []LayerContractDto_Parameters_DefaultValue_4_Item

// LayerContractDtoParametersDefaultValue40 defines model for .
type LayerContractDtoParametersDefaultValue40 = string

// LayerContractDtoParametersDefaultValue41 defines model for .
type LayerContractDtoParametersDefaultValue41 = float32

// LayerContractDtoParametersDefaultValue42 defines model for .
type LayerContractDtoParametersDefaultValue42 = bool

// LayerContractDtoParametersDefaultValue43 defines model for .
type LayerContractDtoParametersDefaultValue43 map[string]interface{}

// LayerContractDto_Parameters_DefaultValue_4_Item defines model for LayerContractDto.Parameters.DefaultValue.4.Item.
type LayerContractDto_Parameters_DefaultValue_4_Item struct {
	union json.RawMessage
}

// LayerContractDto_Parameters_DefaultValue The default value for this parameter, which must match the specified type.
type LayerContractDto_Parameters_DefaultValue struct {
	union json.RawMessage
}

// LayerContractDtoParametersType The data type that this parameter returns. Allowed types include: string, boolean, number, object, and array.
type LayerContractDtoParametersType string

// LayerContractDtoTargetApps0 defines model for .
type LayerContractDtoTargetApps0 = string

// LayerContractDtoTargetApps1 defines model for .
type LayerContractDtoTargetApps1 = []string

// LayerContractDto_TargetApps List of target applications that this layer is intended for.
type LayerContractDto_TargetApps struct {
	union json.RawMessage
}

// LayerCreateContractDto defines model for LayerCreateContractDto.
type LayerCreateContractDto struct {
	// Description A helpful description of what this layer does, providing context for its purpose.
	Description *string `json:"description,omitempty"`

	// IdType The type of ID used for this layer, essential for validation in services.
	IdType string `json:"idType"`

	// Name The unique name of the layer, formatted as an ID (e.g., "A Layer" becomes "a_layer").
	Name string `json:"name"`

	// TargetApps List of target applications that this layer is associated with.
	TargetApps *LayerCreateContractDto_TargetApps `json:"targetApps,omitempty"`

	// Team Optional identifier for the team responsible for this layer.
	Team *string `json:"team,omitempty"`
}

// LayerCreateContractDtoTargetApps0 defines model for .
type LayerCreateContractDtoTargetApps0 = string

// LayerCreateContractDtoTargetApps1 defines model for .
type LayerCreateContractDtoTargetApps1 = []string

// LayerCreateContractDto_TargetApps List of target applications that this layer is associated with.
type LayerCreateContractDto_TargetApps struct {
	union json.RawMessage
}

// LayerFullUpdateContractDto defines model for LayerFullUpdateContractDto.
type LayerFullUpdateContractDto struct {
	// Description A detailed description of the layer, explaining its purpose and functionality.
	Description string `json:"description"`

	// Parameters An array of parameters associated with the layer, each defining specific attributes.
	Parameters []struct {
		// DefaultValue The default value for this parameter, which must match the specified type.
		DefaultValue LayerFullUpdateContractDto_Parameters_DefaultValue `json:"defaultValue"`

		// Name The name of this parameter, used for identification within the layer.
		Name string `json:"name"`

		// Type The data type that this parameter returns. Allowed types include: string, boolean, number, object, and array.
		Type LayerFullUpdateContractDtoParametersType `json:"type"`
	} `json:"parameters"`

	// TargetApps List of target applications that this layer is intended for.
	TargetApps *LayerFullUpdateContractDto_TargetApps `json:"targetApps,omitempty"`
}

// LayerFullUpdateContractDtoParametersDefaultValue0 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue0 = string

// LayerFullUpdateContractDtoParametersDefaultValue1 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue1 = float32

// LayerFullUpdateContractDtoParametersDefaultValue2 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue2 = bool

// LayerFullUpdateContractDtoParametersDefaultValue3 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue3 map[string]interface{}

// LayerFullUpdateContractDtoParametersDefaultValue4 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue4 = []LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item

// LayerFullUpdateContractDtoParametersDefaultValue40 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue40 = string

// LayerFullUpdateContractDtoParametersDefaultValue41 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue41 = float32

// LayerFullUpdateContractDtoParametersDefaultValue42 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue42 = bool

// LayerFullUpdateContractDtoParametersDefaultValue43 defines model for .
type LayerFullUpdateContractDtoParametersDefaultValue43 map[string]interface{}

// LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item defines model for LayerFullUpdateContractDto.Parameters.DefaultValue.4.Item.
type LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item struct {
	union json.RawMessage
}

// LayerFullUpdateContractDto_Parameters_DefaultValue The default value for this parameter, which must match the specified type.
type LayerFullUpdateContractDto_Parameters_DefaultValue struct {
	union json.RawMessage
}

// LayerFullUpdateContractDtoParametersType The data type that this parameter returns. Allowed types include: string, boolean, number, object, and array.
type LayerFullUpdateContractDtoParametersType string

// LayerFullUpdateContractDtoTargetApps0 defines model for .
type LayerFullUpdateContractDtoTargetApps0 = string

// LayerFullUpdateContractDtoTargetApps1 defines model for .
type LayerFullUpdateContractDtoTargetApps1 = []string

// LayerFullUpdateContractDto_TargetApps List of target applications that this layer is intended for.
type LayerFullUpdateContractDto_TargetApps struct {
	union json.RawMessage
}

// LayerOverridesDto defines model for LayerOverridesDto.
type LayerOverridesDto struct {
	ConditionalOverrides []struct {
		ExperimentName string `json:"experimentName"`
		GroupName      string `json:"groupName"`

		// Name Name of override entity
		Name string `json:"name"`

		// Type Describes whether layer override is segment or gate
		Type string `json:"type"`
	} `json:"conditionalOverrides"`
	IdOverrides []struct {
		Environment    nullable.Nullable[string] `json:"environment,omitempty"`
		ExperimentName nullable.Nullable[string] `json:"experimentName,omitempty"`

		// GroupName Group that ID is overriden into
		GroupName string                    `json:"groupName"`
		IdType    nullable.Nullable[string] `json:"idType,omitempty"`

		// Ids ID being overriden into a particular group
		Ids []string `json:"ids"`
	} `json:"idOverrides"`
}

// LayerOverridesPatchDto defines model for LayerOverridesPatchDto.
type LayerOverridesPatchDto struct {
	ConditionalOverrides []struct {
		ExperimentName string `json:"experimentName"`
		GroupName      string `json:"groupName"`

		// Name Name of override entity
		Name string `json:"name"`

		// Type Describes whether layer override is segment or gate
		Type string `json:"type"`
	} `json:"conditionalOverrides"`
	IdOverrides []struct {
		Environment    nullable.Nullable[string] `json:"environment,omitempty"`
		ExperimentName nullable.Nullable[string] `json:"experimentName,omitempty"`

		// GroupName Group that ID is overriden into
		GroupName string                    `json:"groupName"`
		IdType    nullable.Nullable[string] `json:"idType,omitempty"`

		// Ids ID being overriden into a particular group
		Ids []string `json:"ids"`
	} `json:"idOverrides"`

	// Op Add a layer override
	Op LayerOverridesPatchDtoOp `json:"op"`
}

// LayerOverridesPatchDtoOp Add a layer override
type LayerOverridesPatchDtoOp string

// LayerPartialUpdateContractDto defines model for LayerPartialUpdateContractDto.
type LayerPartialUpdateContractDto struct {
	// Description A detailed description of the layer, explaining its purpose and functionality.
	Description *string `json:"description,omitempty"`

	// Parameters An array of parameters associated with the layer, each defining specific attributes.
	Parameters *[]struct {
		// DefaultValue The default value for this parameter, which must match the specified type.
		DefaultValue LayerPartialUpdateContractDto_Parameters_DefaultValue `json:"defaultValue"`

		// Name The name of this parameter, used for identification within the layer.
		Name string `json:"name"`

		// Type The data type that this parameter returns. Allowed types include: string, boolean, number, object, and array.
		Type LayerPartialUpdateContractDtoParametersType `json:"type"`
	} `json:"parameters,omitempty"`

	// TargetApps List of target applications that this layer is intended for.
	TargetApps *LayerPartialUpdateContractDto_TargetApps `json:"targetApps,omitempty"`
}

// LayerPartialUpdateContractDtoParametersDefaultValue0 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue0 = string

// LayerPartialUpdateContractDtoParametersDefaultValue1 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue1 = float32

// LayerPartialUpdateContractDtoParametersDefaultValue2 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue2 = bool

// LayerPartialUpdateContractDtoParametersDefaultValue3 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue3 map[string]interface{}

// LayerPartialUpdateContractDtoParametersDefaultValue4 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue4 = []LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item

// LayerPartialUpdateContractDtoParametersDefaultValue40 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue40 = string

// LayerPartialUpdateContractDtoParametersDefaultValue41 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue41 = float32

// LayerPartialUpdateContractDtoParametersDefaultValue42 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue42 = bool

// LayerPartialUpdateContractDtoParametersDefaultValue43 defines model for .
type LayerPartialUpdateContractDtoParametersDefaultValue43 map[string]interface{}

// LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item defines model for LayerPartialUpdateContractDto.Parameters.DefaultValue.4.Item.
type LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item struct {
	union json.RawMessage
}

// LayerPartialUpdateContractDto_Parameters_DefaultValue The default value for this parameter, which must match the specified type.
type LayerPartialUpdateContractDto_Parameters_DefaultValue struct {
	union json.RawMessage
}

// LayerPartialUpdateContractDtoParametersType The data type that this parameter returns. Allowed types include: string, boolean, number, object, and array.
type LayerPartialUpdateContractDtoParametersType string

// LayerPartialUpdateContractDtoTargetApps0 defines model for .
type LayerPartialUpdateContractDtoTargetApps0 = string

// LayerPartialUpdateContractDtoTargetApps1 defines model for .
type LayerPartialUpdateContractDtoTargetApps1 = []string

// LayerPartialUpdateContractDto_TargetApps List of target applications that this layer is intended for.
type LayerPartialUpdateContractDto_TargetApps struct {
	union json.RawMessage
}

// LoggedEventDto defines model for LoggedEventDto.
type LoggedEventDto struct {
	// Name The name of the event (e.g., "add_to_cart").
	Name string `json:"name"`

	// Source The source of the event, indicating where it was triggered from.
	Source string `json:"source"`

	// Timestamp The timestamp when the event occurred, represented as a string.
	Timestamp string `json:"timestamp"`

	// UserID The ID of the user who triggered the event.
	UserID string `json:"userID"`

	// Value The value associated with the event, providing additional context.
	Value string `json:"value"`
}

// MetricCreationContractDto defines model for MetricCreationContractDto.
type MetricCreationContractDto struct {
	// CustomRollUpEnd Custom time window end date in days since exposure.
	CustomRollUpEnd *float64 `json:"customRollUpEnd,omitempty"`

	// CustomRollUpStart Custom time window start date in days since exposure.
	CustomRollUpStart *float64 `json:"customRollUpStart,omitempty"`

	// Description A description of the new metric, providing context and purpose.
	Description *string `json:"description,omitempty"`

	// Directionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
	Directionality *MetricCreationContractDtoDirectionality `json:"directionality,omitempty"`

	// DryRun Skips persisting the metric (used to validate that inputs are correct)
	DryRun *bool `json:"dryRun,omitempty"`

	// FunnelCountDistinct Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct *MetricCreationContractDtoFunnelCountDistinct `json:"funnelCountDistinct,omitempty"`

	// FunnelEventList List of events used to create funnel metrics.
	FunnelEventList *[]struct {
		// Name The name of the funnel event used in the metric.
		Name string `json:"name"`

		// Type The type of funnel event, specifying how the event is tracked.
		Type MetricCreationContractDtoFunnelEventListType `json:"type"`
	} `json:"funnelEventList,omitempty"`

	// IsPermanent Indicates whether the metric is permanent and should not be deleted.
	IsPermanent *bool `json:"isPermanent,omitempty"`

	// IsReadOnly Set to true to make the metric definition editable only from the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// IsVerified Marks the metric as verified for internal trustworthiness.
	IsVerified *bool `json:"isVerified,omitempty"`

	// MetricComponentMetrics List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics *[]struct {
		Name string `json:"name"`
		Type string `json:"type"`
	} `json:"metricComponentMetrics,omitempty"`

	// MetricEvents An array of event definitions used to compute the metric.
	MetricEvents *[]struct {
		// Criteria Filtering criteria for the metric event, including conditions and values to refine the event data.
		Criteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition MetricCreationContractDtoMetricEventsCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type MetricCreationContractDtoMetricEventsCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"criteria,omitempty"`

		// MetadataKey The key for associated metadata, if applicable.
		MetadataKey *string `json:"metadataKey,omitempty"`

		// Name The name of the metric event.
		Name string `json:"name"`

		// Type The type of metric event. Allowed values include: count, count_distinct, value, and metadata.
		Type nullable.Nullable[MetricCreationContractDtoMetricEventsType] `json:"type,omitempty"`
	} `json:"metricEvents,omitempty"`

	// Name The name of the new metric, which identifies it within the system.
	Name string `json:"name"`

	// RollupTimeWindow Time window for the metric rollup. Specify "custom" for a customized time window.
	RollupTimeWindow *string `json:"rollupTimeWindow,omitempty"`

	// Tags Tags associated with the metric for categorization and searchability.
	Tags *MetricCreationContractDto_Tags `json:"tags,omitempty"`

	// Team The team associated with the metric, applicable for enterprise environments.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID The team ID associated with the metric, applicable for enterprise environments.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// Type The type of the metric. Allowed values include sum, ratio, mean, event_count_sum, composite, composite_sum, undefined, funnel, user_warehouse.
	Type MetricCreationContractDtoType `json:"type"`

	// UnitTypes Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes *[]string `json:"unitTypes,omitempty"`

	// WarehouseNative Defines warehouse native metrics for advanced configurations.
	WarehouseNative *struct {
		// Aggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
		Aggregation *MetricCreationContractDtoWarehouseNativeAggregation `json:"aggregation,omitempty"`

		// AllowNullRatioDenominator Include units which do not have a denominator. Only applicable to ratios.
		AllowNullRatioDenominator *bool `json:"allowNullRatioDenominator,omitempty"`

		// Cap Maximum cap for metric values.
		Cap *float32 `json:"cap,omitempty"`

		// Criteria Filtering criteria for the metric source
		Criteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition MetricCreationContractDtoWarehouseNativeCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type MetricCreationContractDtoWarehouseNativeCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"criteria,omitempty"`

		// CupedAttributionWindow Attribution window for CUPED adjustments in days.
		CupedAttributionWindow nullable.Nullable[float32] `json:"cupedAttributionWindow,omitempty"`

		// CustomRollUpEnd Custom end date for rollup in days since exposure.
		CustomRollUpEnd *float32 `json:"customRollUpEnd,omitempty"`

		// CustomRollUpStart Custom start date for rollup in days since exposure.
		CustomRollUpStart *float32 `json:"customRollUpStart,omitempty"`

		// DenominatorAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
		DenominatorAggregation *MetricCreationContractDtoWarehouseNativeDenominatorAggregation `json:"denominatorAggregation,omitempty"`

		// DenominatorCriteria Filtering criteria for the denominator metric source, if this metric is a ratio
		DenominatorCriteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"denominatorCriteria,omitempty"`

		// DenominatorCustomRollupEnd Custom end date for rollup in days since exposure.
		DenominatorCustomRollupEnd *float32 `json:"denominatorCustomRollupEnd,omitempty"`

		// DenominatorCustomRollupStart Custom start date for rollup in days since exposure.
		DenominatorCustomRollupStart *float32 `json:"denominatorCustomRollupStart,omitempty"`

		// DenominatorMetricSourceName Name of the metric source for the denominator.
		DenominatorMetricSourceName *string `json:"denominatorMetricSourceName,omitempty"`

		// DenominatorRollupTimeWindow Time window for the denominator metric. Specify "custom" for a custom window.
		DenominatorRollupTimeWindow *string `json:"denominatorRollupTimeWindow,omitempty"`

		// DenominatorValueColumn Column name for the denominator’s value.
		DenominatorValueColumn *string `json:"denominatorValueColumn,omitempty"`

		// FunnelCalculationWindow Duration for counting funnel events in days.
		FunnelCalculationWindow *float32 `json:"funnelCalculationWindow,omitempty"`

		// FunnelCountDistinct Allowed: users┃sessions for distinct count method in funnel events.
		FunnelCountDistinct *MetricCreationContractDtoWarehouseNativeFunnelCountDistinct `json:"funnelCountDistinct,omitempty"`

		// FunnelEvents List of funnel events with associated criteria and identifiers.
		FunnelEvents *[]struct {
			// Criteria Optional array of criteria to filter the funnel events, defined by various types and conditions.
			Criteria *[]struct {
				// Column Optional column specifying which data attribute to filter on.
				Column *string `json:"column,omitempty"`

				// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
				Condition MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition `json:"condition"`

				// NullVacuousOverride If true, overrides null values in criterion evaluation.
				NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

				// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
				Type MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType `json:"type"`

				// Values Optional array of values for the criterion to match against.
				Values *[]string `json:"values,omitempty"`
			} `json:"criteria,omitempty"`

			// MetricSourceName Optional name of the metric source associated with the funnel event.
			MetricSourceName *string `json:"metricSourceName,omitempty"`

			// Name Optional step name for the funnel event, can be null if not specified.
			Name nullable.Nullable[string] `json:"name,omitempty"`

			// SessionIdentifierField Name of column which being used as session identifier. Funnel event with the same metric source
			SessionIdentifierField nullable.Nullable[string] `json:"sessionIdentifierField,omitempty"`
		} `json:"funnelEvents,omitempty"`

		// FunnelStartCriteria Allowed: start_event┃exposure to determine funnel start criteria.
		FunnelStartCriteria *MetricCreationContractDtoWarehouseNativeFunnelStartCriteria `json:"funnelStartCriteria,omitempty"`

		// MetricBakeDays Number of days for metric baking; specify duration for analysis.
		MetricBakeDays *float32 `json:"metricBakeDays,omitempty"`

		// MetricDimensionColumns Specify metadata columns for breaking down metric analysis.
		MetricDimensionColumns *[]string `json:"metricDimensionColumns,omitempty"`

		// MetricSourceName For Count, Sum, Mean, User Count aggregation types: the name of metric source
		MetricSourceName *string `json:"metricSourceName,omitempty"`

		// NumeratorAggregation Aggregation type for numerator; Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile.
		NumeratorAggregation *MetricCreationContractDtoWarehouseNativeNumeratorAggregation `json:"numeratorAggregation,omitempty"`

		// OnlyIncludeUsersWithConversionEvent Flag to include only users with a conversion event in the metric.
		OnlyIncludeUsersWithConversionEvent *bool `json:"onlyIncludeUsersWithConversionEvent,omitempty"`

		// Percentile Percentile value for statistical calculations.
		Percentile *float32 `json:"percentile,omitempty"`

		// RollupTimeWindow General time window for rollup; can specify custom settings.
		RollupTimeWindow *string `json:"rollupTimeWindow,omitempty"`

		// ValueColumn Column name representing the metric’s value.
		ValueColumn *string `json:"valueColumn,omitempty"`

		// ValueThreshold Threshold value for filtering metrics.
		ValueThreshold      *float32 `json:"valueThreshold,omitempty"`
		WaitForCohortWindow *bool    `json:"waitForCohortWindow,omitempty"`

		// WinsorizationHigh High threshold for winsorization; must be between 0 and 1.
		WinsorizationHigh *float32 `json:"winsorizationHigh,omitempty"`

		// WinsorizationLow Low threshold for winsorization; must be between 0 and 1.
		WinsorizationLow *float32 `json:"winsorizationLow,omitempty"`
	} `json:"warehouseNative,omitempty"`
}

// MetricCreationContractDtoDirectionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
type MetricCreationContractDtoDirectionality string

// MetricCreationContractDtoFunnelCountDistinct Specifies whether to count events or distinct users for the funnel metric.
type MetricCreationContractDtoFunnelCountDistinct string

// MetricCreationContractDtoFunnelEventListType The type of funnel event, specifying how the event is tracked.
type MetricCreationContractDtoFunnelEventListType string

// MetricCreationContractDtoMetricEventsCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type MetricCreationContractDtoMetricEventsCriteriaCondition string

// MetricCreationContractDtoMetricEventsCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type MetricCreationContractDtoMetricEventsCriteriaType string

// MetricCreationContractDtoMetricEventsType The type of metric event. Allowed values include: count, count_distinct, value, and metadata.
type MetricCreationContractDtoMetricEventsType string

// MetricCreationContractDtoTags0 defines model for .
type MetricCreationContractDtoTags0 = []string

// MetricCreationContractDtoTags1 defines model for .
type MetricCreationContractDtoTags1 = string

// MetricCreationContractDto_Tags Tags associated with the metric for categorization and searchability.
type MetricCreationContractDto_Tags struct {
	union json.RawMessage
}

// MetricCreationContractDtoType The type of the metric. Allowed values include sum, ratio, mean, event_count_sum, composite, composite_sum, undefined, funnel, user_warehouse.
type MetricCreationContractDtoType string

// MetricCreationContractDtoWarehouseNativeAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
type MetricCreationContractDtoWarehouseNativeAggregation string

// MetricCreationContractDtoWarehouseNativeCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type MetricCreationContractDtoWarehouseNativeCriteriaCondition string

// MetricCreationContractDtoWarehouseNativeCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type MetricCreationContractDtoWarehouseNativeCriteriaType string

// MetricCreationContractDtoWarehouseNativeDenominatorAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
type MetricCreationContractDtoWarehouseNativeDenominatorAggregation string

// MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type MetricCreationContractDtoWarehouseNativeDenominatorCriteriaCondition string

// MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type MetricCreationContractDtoWarehouseNativeDenominatorCriteriaType string

// MetricCreationContractDtoWarehouseNativeFunnelCountDistinct Allowed: users┃sessions for distinct count method in funnel events.
type MetricCreationContractDtoWarehouseNativeFunnelCountDistinct string

// MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaCondition string

// MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type MetricCreationContractDtoWarehouseNativeFunnelEventsCriteriaType string

// MetricCreationContractDtoWarehouseNativeFunnelStartCriteria Allowed: start_event┃exposure to determine funnel start criteria.
type MetricCreationContractDtoWarehouseNativeFunnelStartCriteria string

// MetricCreationContractDtoWarehouseNativeNumeratorAggregation Aggregation type for numerator; Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile.
type MetricCreationContractDtoWarehouseNativeNumeratorAggregation string

// MetricSourceContractDto defines model for MetricSourceContractDto.
type MetricSourceContractDto struct {
	// CustomFieldMapping Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMapping *[]struct {
		// Formula The formula or expression used to compute the custom field value.
		Formula string `json:"formula"`

		// Key The identifier for the custom field mapping.
		Key string `json:"key"`
	} `json:"customFieldMapping,omitempty"`

	// Description A detailed description of the source, providing context and usage information.
	Description string `json:"description"`

	// IdTypeMapping Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMapping []struct {
		// Column The corresponding column name in the source that relates to the Statsig unit ID.
		Column string `json:"column"`

		// StatsigUnitID The identifier mapping for Statsig units.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Name The name of the source, serving as its primary identifier.
	Name string `json:"name"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// SourceType The type of source, indicating whether it is a database table or a custom query.
	SourceType *MetricSourceContractDtoSourceType `json:"sourceType,omitempty"`

	// Sql The SQL query or statement used to extract data from the source.
	Sql string `json:"sql"`

	// TableName The name of the database table if the source type is "table".
	TableName *string `json:"tableName,omitempty"`

	// Tags Optional tags for categorizing the source and improving searchability.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampAsDay Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`

	// TimestampColumn The name of the column containing timestamp data for the source.
	TimestampColumn string `json:"timestampColumn"`
}

// MetricSourceContractDtoSourceType The type of source, indicating whether it is a database table or a custom query.
type MetricSourceContractDtoSourceType string

// MetricSourceCreationContractDto defines model for MetricSourceCreationContractDto.
type MetricSourceCreationContractDto struct {
	// CustomFieldMapping Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMapping *[]struct {
		// Formula The formula or expression used to compute the custom field value.
		Formula string `json:"formula"`

		// Key The identifier for the custom field mapping.
		Key string `json:"key"`
	} `json:"customFieldMapping,omitempty"`

	// Description An optional description for the source, providing context and details about its purpose and usage.
	Description *string `json:"description,omitempty"`

	// DryRun Skips persisting the source (used to validate that inputs are correct)
	DryRun *bool `json:"dryRun,omitempty"`

	// IdTypeMapping Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMapping []struct {
		// Column The corresponding column name in the source that relates to the Statsig unit ID.
		Column string `json:"column"`

		// StatsigUnitID The identifier mapping for Statsig units.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Name The name of the source, serving as its primary identifier.
	Name string `json:"name"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// SourceType The type of source, indicating whether it is a database table or a custom query.
	SourceType *MetricSourceCreationContractDtoSourceType `json:"sourceType,omitempty"`

	// Sql The SQL query or statement used to extract data from the source.
	Sql string `json:"sql"`

	// TableName The name of the database table if the source type is "table".
	TableName *string `json:"tableName,omitempty"`

	// Tags Optional array of tags to categorize the source, facilitating easier organization and retrieval.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampAsDay Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`

	// TimestampColumn The name of the column containing timestamp data for the source.
	TimestampColumn string `json:"timestampColumn"`
}

// MetricSourceCreationContractDtoSourceType The type of source, indicating whether it is a database table or a custom query.
type MetricSourceCreationContractDtoSourceType string

// MetricSourceUpdateContractDto defines model for MetricSourceUpdateContractDto.
type MetricSourceUpdateContractDto struct {
	// CustomFieldMapping Optional array defining mappings for custom fields using specific formulas.
	CustomFieldMapping *[]struct {
		// Formula The formula or expression used to compute the custom field value.
		Formula string `json:"formula"`

		// Key The identifier for the custom field mapping.
		Key string `json:"key"`
	} `json:"customFieldMapping,omitempty"`

	// Description An optional updated description for the source, providing additional context or changes.
	Description *string `json:"description,omitempty"`

	// DryRun Skips persisting updates to the source (used to validate that inputs are correct)
	DryRun *bool `json:"dryRun,omitempty"`

	// IdTypeMapping Array defining the mapping between Statsig unit IDs and their respective source columns.
	IdTypeMapping []struct {
		// Column The corresponding column name in the source that relates to the Statsig unit ID.
		Column string `json:"column"`

		// StatsigUnitID The identifier mapping for Statsig units.
		StatsigUnitID string `json:"statsigUnitID"`
	} `json:"idTypeMapping"`

	// IsReadOnly Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// Name The name of the source cannot be changed in this update, ensuring the identity remains consistent.
	Name *interface{} `json:"name,omitempty"`

	// Owner Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner nullable.Nullable[struct {
		// OwnerEmail The email of the owner. This field is optional.
		OwnerEmail *string `json:"ownerEmail,omitempty"`

		// OwnerID ID of the owner
		OwnerID *string `json:"ownerID,omitempty"`

		// OwnerName The name of the owner. This field is optional.
		OwnerName *string `json:"ownerName,omitempty"`

		// OwnerType Type of the owner (e.g., SDK_KEY or USER)
		OwnerType *string `json:"ownerType,omitempty"`
	}] `json:"owner,omitempty"`

	// SourceType The type of source, indicating whether it is a database table or a custom query.
	SourceType *MetricSourceUpdateContractDtoSourceType `json:"sourceType,omitempty"`

	// Sql The SQL query or statement used to extract data from the source.
	Sql string `json:"sql"`

	// TableName The name of the database table if the source type is "table".
	TableName *string `json:"tableName,omitempty"`

	// Tags Optional array of tags for categorizing the source, allowing for updates to its categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TimestampAsDay Indicates whether the timestamp should be treated as a day-level granularity.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`

	// TimestampColumn The name of the column containing timestamp data for the source.
	TimestampColumn string `json:"timestampColumn"`
}

// MetricSourceUpdateContractDtoSourceType The type of source, indicating whether it is a database table or a custom query.
type MetricSourceUpdateContractDtoSourceType string

// MetricValueDto defines model for MetricValueDto.
type MetricValueDto struct {
	Denominator *float64 `json:"denominator,omitempty"`
	InputRows   *float64 `json:"inputRows,omitempty"`
	MetricName  string   `json:"metricName"`
	MetricType  string   `json:"metricType"`
	Numerator   *float64 `json:"numerator,omitempty"`
	UnitType    string   `json:"unitType"`
	Value       float64  `json:"value"`
}

// MetricValuesDto defines model for MetricValuesDto.
type MetricValuesDto struct {
	// Denominator Denominator of a ratio metric, optional
	Denominator *float64 `json:"denominator,omitempty"`

	// Numerator Numerator of a ratio metric, optional
	Numerator *float64 `json:"numerator,omitempty"`

	// RowCount Row count for imported metric, optional
	RowCount *float64 `json:"row_count,omitempty"`

	// UnitType Unit of the metric: stableID, userID, and other custom ids
	UnitType string `json:"unit_type"`

	// Value Metric value for the given unit_type
	Value float64 `json:"value"`
}

// MetricsUpdateContractDto defines model for MetricsUpdateContractDto.
type MetricsUpdateContractDto struct {
	// Description A detailed description of the metric, providing insights into its purpose and application.
	Description *string `json:"description,omitempty"`

	// Directionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
	Directionality *MetricsUpdateContractDtoDirectionality `json:"directionality,omitempty"`

	// DryRun Skips persisting updates to the metric (used to validate that inputs are correct)
	DryRun *bool `json:"dryRun,omitempty"`

	// IsPermanent Determines if the metric is permanent, preventing it from being deleted or modified inadvertently.
	IsPermanent *bool `json:"isPermanent,omitempty"`

	// IsReadOnly Specifies if the metric definition can only be edited via the Console API, enhancing control over modifications.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`

	// IsVerified Flag to mark the metric as verified, ensuring it is deemed trustworthy within the organization.
	IsVerified *bool `json:"isVerified,omitempty"`

	// Tags An array of tags associated with the metric, used for categorization and easier retrieval.
	Tags *[]string `json:"tags,omitempty"`

	// Team Optional field indicating the team name responsible for the metric, aiding in accountability and management.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID Optional field indicating the team ID responsible for the metric, aiding in accountability and management.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// UnitTypes Array of unit types that the metric can utilize, such as stableID, userID, or other custom identifiers.
	UnitTypes *[]string `json:"unitTypes,omitempty"`

	// WarehouseNative Optional configuration for metrics utilizing Warehouse Native features, defining specific behaviors and criteria.
	WarehouseNative *struct {
		// Aggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
		Aggregation *MetricsUpdateContractDtoWarehouseNativeAggregation `json:"aggregation,omitempty"`

		// AllowNullRatioDenominator Include units which do not have a denominator. Only applicable to ratios.
		AllowNullRatioDenominator *bool `json:"allowNullRatioDenominator,omitempty"`

		// Cap Maximum cap for metric values.
		Cap *float32 `json:"cap,omitempty"`

		// Criteria Filtering criteria for the metric source
		Criteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition MetricsUpdateContractDtoWarehouseNativeCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type MetricsUpdateContractDtoWarehouseNativeCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"criteria,omitempty"`

		// CupedAttributionWindow Attribution window for CUPED adjustments in days.
		CupedAttributionWindow nullable.Nullable[float32] `json:"cupedAttributionWindow,omitempty"`

		// CustomRollUpEnd Custom end date for rollup in days since exposure.
		CustomRollUpEnd *float32 `json:"customRollUpEnd,omitempty"`

		// CustomRollUpStart Custom start date for rollup in days since exposure.
		CustomRollUpStart *float32 `json:"customRollUpStart,omitempty"`

		// DenominatorAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
		DenominatorAggregation *MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation `json:"denominatorAggregation,omitempty"`

		// DenominatorCriteria Filtering criteria for the denominator metric source, if this metric is a ratio
		DenominatorCriteria *[]struct {
			// Column Optional column specifying which data attribute to filter on.
			Column *string `json:"column,omitempty"`

			// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
			Condition MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition `json:"condition"`

			// NullVacuousOverride If true, overrides null values in criterion evaluation.
			NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

			// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
			Type MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType `json:"type"`

			// Values Optional array of values for the criterion to match against.
			Values *[]string `json:"values,omitempty"`
		} `json:"denominatorCriteria,omitempty"`

		// DenominatorCustomRollupEnd Custom end date for rollup in days since exposure.
		DenominatorCustomRollupEnd *float32 `json:"denominatorCustomRollupEnd,omitempty"`

		// DenominatorCustomRollupStart Custom start date for rollup in days since exposure.
		DenominatorCustomRollupStart *float32 `json:"denominatorCustomRollupStart,omitempty"`

		// DenominatorMetricSourceName Name of the metric source for the denominator.
		DenominatorMetricSourceName *string `json:"denominatorMetricSourceName,omitempty"`

		// DenominatorRollupTimeWindow Time window for the denominator metric. Specify "custom" for a custom window.
		DenominatorRollupTimeWindow *string `json:"denominatorRollupTimeWindow,omitempty"`

		// DenominatorValueColumn Column name for the denominator’s value.
		DenominatorValueColumn *string `json:"denominatorValueColumn,omitempty"`

		// FunnelCalculationWindow Duration for counting funnel events in days.
		FunnelCalculationWindow *float32 `json:"funnelCalculationWindow,omitempty"`

		// FunnelCountDistinct Allowed: users┃sessions for distinct count method in funnel events.
		FunnelCountDistinct *MetricsUpdateContractDtoWarehouseNativeFunnelCountDistinct `json:"funnelCountDistinct,omitempty"`

		// FunnelEvents List of funnel events with associated criteria and identifiers.
		FunnelEvents *[]struct {
			// Criteria Optional array of criteria to filter the funnel events, defined by various types and conditions.
			Criteria *[]struct {
				// Column Optional column specifying which data attribute to filter on.
				Column *string `json:"column,omitempty"`

				// Condition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
				Condition MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition `json:"condition"`

				// NullVacuousOverride If true, overrides null values in criterion evaluation.
				NullVacuousOverride *bool `json:"nullVacuousOverride,omitempty"`

				// Type Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
				Type MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType `json:"type"`

				// Values Optional array of values for the criterion to match against.
				Values *[]string `json:"values,omitempty"`
			} `json:"criteria,omitempty"`

			// MetricSourceName Optional name of the metric source associated with the funnel event.
			MetricSourceName *string `json:"metricSourceName,omitempty"`

			// Name Optional step name for the funnel event, can be null if not specified.
			Name nullable.Nullable[string] `json:"name,omitempty"`

			// SessionIdentifierField Name of column which being used as session identifier. Funnel event with the same metric source
			SessionIdentifierField nullable.Nullable[string] `json:"sessionIdentifierField,omitempty"`
		} `json:"funnelEvents,omitempty"`

		// FunnelStartCriteria Allowed: start_event┃exposure to determine funnel start criteria.
		FunnelStartCriteria *MetricsUpdateContractDtoWarehouseNativeFunnelStartCriteria `json:"funnelStartCriteria,omitempty"`

		// MetricBakeDays Number of days for metric baking; specify duration for analysis.
		MetricBakeDays *float32 `json:"metricBakeDays,omitempty"`

		// MetricDimensionColumns Specify metadata columns for breaking down metric analysis.
		MetricDimensionColumns *[]string `json:"metricDimensionColumns,omitempty"`

		// MetricSourceName For Count, Sum, Mean, User Count aggregation types: the name of metric source
		MetricSourceName *string `json:"metricSourceName,omitempty"`

		// NumeratorAggregation Aggregation type for numerator; Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile.
		NumeratorAggregation *MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation `json:"numeratorAggregation,omitempty"`

		// OnlyIncludeUsersWithConversionEvent Flag to include only users with a conversion event in the metric.
		OnlyIncludeUsersWithConversionEvent *bool `json:"onlyIncludeUsersWithConversionEvent,omitempty"`

		// Percentile Percentile value for statistical calculations.
		Percentile *float32 `json:"percentile,omitempty"`

		// RollupTimeWindow General time window for rollup; can specify custom settings.
		RollupTimeWindow *string `json:"rollupTimeWindow,omitempty"`

		// ValueColumn Column name representing the metric’s value.
		ValueColumn *string `json:"valueColumn,omitempty"`

		// ValueThreshold Threshold value for filtering metrics.
		ValueThreshold      *float32 `json:"valueThreshold,omitempty"`
		WaitForCohortWindow *bool    `json:"waitForCohortWindow,omitempty"`

		// WinsorizationHigh High threshold for winsorization; must be between 0 and 1.
		WinsorizationHigh *float32 `json:"winsorizationHigh,omitempty"`

		// WinsorizationLow Low threshold for winsorization; must be between 0 and 1.
		WinsorizationLow *float32 `json:"winsorizationLow,omitempty"`
	} `json:"warehouseNative,omitempty"`
}

// MetricsUpdateContractDtoDirectionality Indicates the desired change direction for the metric. Use "increase" for positive changes and "decrease" for negative changes.
type MetricsUpdateContractDtoDirectionality string

// MetricsUpdateContractDtoWarehouseNativeAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
type MetricsUpdateContractDtoWarehouseNativeAggregation string

// MetricsUpdateContractDtoWarehouseNativeCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type MetricsUpdateContractDtoWarehouseNativeCriteriaCondition string

// MetricsUpdateContractDtoWarehouseNativeCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type MetricsUpdateContractDtoWarehouseNativeCriteriaType string

// MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile
type MetricsUpdateContractDtoWarehouseNativeDenominatorAggregation string

// MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaCondition string

// MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type MetricsUpdateContractDtoWarehouseNativeDenominatorCriteriaType string

// MetricsUpdateContractDtoWarehouseNativeFunnelCountDistinct Allowed: users┃sessions for distinct count method in funnel events.
type MetricsUpdateContractDtoWarehouseNativeFunnelCountDistinct string

// MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition sql_filter, start_withs, ends_with, and after_exposure are only applicable in Warehouse Native
type MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaCondition string

// MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType Type of event criterion for filtering metrics. Options include `value`, `metadata`, `user`, and `user_custom`; in Warehouse Native, this should always be `metadata`.
type MetricsUpdateContractDtoWarehouseNativeFunnelEventsCriteriaType string

// MetricsUpdateContractDtoWarehouseNativeFunnelStartCriteria Allowed: start_event┃exposure to determine funnel start criteria.
type MetricsUpdateContractDtoWarehouseNativeFunnelStartCriteria string

// MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation Aggregation type for numerator; Allowed: count┃sum┃mean┃daily_participation┃ratio┃funnel┃count_distinct┃percentile.
type MetricsUpdateContractDtoWarehouseNativeNumeratorAggregation string

// MultiDynamicConfigRuleAddDto defines model for MultiDynamicConfigRuleAddDto.
type MultiDynamicConfigRuleAddDto struct {
	// Rules A list of new dynamic config rules
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                                    `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                                    `json:"field,omitempty"`
			Operator    *string                                                                      `json:"operator,omitempty"`
			TargetValue nullable.Nullable[MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        MultiDynamicConfigRuleAddDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage   float32                 `json:"passPercentage"`
		ReturnValue      *map[string]interface{} `json:"returnValue,omitempty"`
		ReturnValueJson5 *string                 `json:"returnValueJson5,omitempty"`
	} `json:"rules"`
}

// MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0 defines model for .
type MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0 = []string

// MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1 defines model for .
type MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1 = []float32

// MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2 defines model for .
type MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2 = string

// MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3 defines model for .
type MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3 = float32

// MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue defines model for MultiDynamicConfigRuleAddDto.Rules.Conditions.TargetValue.
type MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// MultiDynamicConfigRuleAddDtoRulesConditionsType defines model for MultiDynamicConfigRuleAddDto.Rules.Conditions.Type.
type MultiDynamicConfigRuleAddDtoRulesConditionsType string

// MultiRuleDto defines model for MultiRuleDto.
type MultiRuleDto struct {
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                    `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                    `json:"field,omitempty"`
			Operator    *string                                                      `json:"operator,omitempty"`
			TargetValue nullable.Nullable[MultiRuleDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        MultiRuleDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules"`
}

// MultiRuleDtoRulesConditionsTargetValue0 defines model for .
type MultiRuleDtoRulesConditionsTargetValue0 = []string

// MultiRuleDtoRulesConditionsTargetValue1 defines model for .
type MultiRuleDtoRulesConditionsTargetValue1 = []float32

// MultiRuleDtoRulesConditionsTargetValue2 defines model for .
type MultiRuleDtoRulesConditionsTargetValue2 = string

// MultiRuleDtoRulesConditionsTargetValue3 defines model for .
type MultiRuleDtoRulesConditionsTargetValue3 = float32

// MultiRuleDto_Rules_Conditions_TargetValue defines model for MultiRuleDto.Rules.Conditions.TargetValue.
type MultiRuleDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// MultiRuleDtoRulesConditionsType defines model for MultiRuleDto.Rules.Conditions.Type.
type MultiRuleDtoRulesConditionsType string

// MultiRuleUpdateDto defines model for MultiRuleUpdateDto.
type MultiRuleUpdateDto struct {
	Rules []struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions *[]struct {
			CustomID    nullable.Nullable[string]                                          `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                          `json:"field,omitempty"`
			Operator    *string                                                            `json:"operator,omitempty"`
			TargetValue nullable.Nullable[MultiRuleUpdateDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        MultiRuleUpdateDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions,omitempty"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name *string `json:"name,omitempty"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage *float32 `json:"passPercentage,omitempty"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules"`
}

// MultiRuleUpdateDtoRulesConditionsTargetValue0 defines model for .
type MultiRuleUpdateDtoRulesConditionsTargetValue0 = []string

// MultiRuleUpdateDtoRulesConditionsTargetValue1 defines model for .
type MultiRuleUpdateDtoRulesConditionsTargetValue1 = []float32

// MultiRuleUpdateDtoRulesConditionsTargetValue2 defines model for .
type MultiRuleUpdateDtoRulesConditionsTargetValue2 = string

// MultiRuleUpdateDtoRulesConditionsTargetValue3 defines model for .
type MultiRuleUpdateDtoRulesConditionsTargetValue3 = float32

// MultiRuleUpdateDto_Rules_Conditions_TargetValue defines model for MultiRuleUpdateDto.Rules.Conditions.TargetValue.
type MultiRuleUpdateDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// MultiRuleUpdateDtoRulesConditionsType defines model for MultiRuleUpdateDto.Rules.Conditions.Type.
type MultiRuleUpdateDtoRulesConditionsType string

// OverrideDto Contract for overrides
type OverrideDto struct {
	EnvironmentOverrides []struct {
		// Environment Environment
		Environment nullable.Nullable[string] `json:"environment,omitempty"`

		// FailingIDs List of failing IDs
		FailingIDs []string `json:"failingIDs"`

		// PassingIDs List of passing IDs
		PassingIDs []string `json:"passingIDs"`

		// UnitID Unit ID
		UnitID nullable.Nullable[string] `json:"unitID"`
	} `json:"environmentOverrides"`

	// FailingCustomIDs Optional list of custom IDs
	FailingCustomIDs *[]string `json:"failingCustomIDs,omitempty"`

	// FailingUserIDs List of user IDs
	FailingUserIDs []string `json:"failingUserIDs"`

	// PassingCustomIDs Optional list of custom IDs
	PassingCustomIDs *[]string `json:"passingCustomIDs,omitempty"`

	// PassingUserIDs List of user IDs
	PassingUserIDs []string `json:"passingUserIDs"`
}

// PaginationResponseMetadataDto defines model for PaginationResponseMetadataDto.
type PaginationResponseMetadataDto struct {
	All          *string                   `json:"all,omitempty"`
	ItemsPerPage float64                   `json:"itemsPerPage"`
	NextPage     nullable.Nullable[string] `json:"nextPage"`
	PageNumber   float64                   `json:"pageNumber"`
	PreviousPage nullable.Nullable[string] `json:"previousPage"`
	TotalItems   *float64                  `json:"totalItems,omitempty"`
}

// PaginationResponseWithMessage defines model for PaginationResponseWithMessage.
type PaginationResponseWithMessage struct {
	// Data Array of results returned by pagination limit.
	Data []map[string]interface{} `json:"data"`

	// Message A simple string explaining the result of the operation.
	Message string `json:"message"`

	// Pagination Pagination metadata for checking if there is next page for example.
	Pagination PaginationResponseMetadataDto `json:"pagination"`
}

// ProjectDto defines model for ProjectDto.
type ProjectDto struct {
	Id string `json:"id"`
}

// PulseLoadHistoryDto defines model for PulseLoadHistoryDto.
type PulseLoadHistoryDto struct {
	CreatedTime   float64                           `json:"createdTime"`
	CreatorName   *string                           `json:"creatorName,omitempty"`
	EndDs         string                            `json:"endDs"`
	FinishedState *PulseLoadHistoryDtoFinishedState `json:"finishedState,omitempty"`
	FinishedTime  *float64                          `json:"finishedTime,omitempty"`
	ReloadType    PulseLoadHistoryDtoReloadType     `json:"reloadType"`
	StartDs       string                            `json:"startDs"`
	TurboMode     bool                              `json:"turboMode"`
}

// PulseLoadHistoryDtoFinishedState defines model for PulseLoadHistoryDto.FinishedState.
type PulseLoadHistoryDtoFinishedState string

// PulseLoadHistoryDtoReloadType defines model for PulseLoadHistoryDto.ReloadType.
type PulseLoadHistoryDtoReloadType string

// ReleasePipelineDto defines model for ReleasePipelineDto.
type ReleasePipelineDto struct {
	// CreatedTime Pipeline Creation Time
	CreatedTime float64 `json:"createdTime"`

	// CreatorID Pipeline Creator ID
	CreatorID string `json:"creatorID"`

	// Id Pipeline ID
	Id string `json:"id"`

	// LastModifierID Last Modifier ID
	LastModifierID string `json:"lastModifierID"`

	// Name Pipeline Name
	Name string `json:"name"`

	// Phases Phases of the release pipeline that will be executed in order.
	Phases *[]struct {
		Id             string `json:"id"`
		Name           string `json:"name"`
		RequiredReview bool   `json:"requiredReview"`
		Rules          []struct {
			// Conditions An array of Condition objects.
			Conditions []struct {
				CustomID    nullable.Nullable[string]                                                 `json:"customID,omitempty"`
				Field       nullable.Nullable[string]                                                 `json:"field,omitempty"`
				Operator    *string                                                                   `json:"operator,omitempty"`
				TargetValue nullable.Nullable[ReleasePipelineDto_Phases_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
				Type        ReleasePipelineDtoPhasesRulesConditionsType                               `json:"type"`
			} `json:"conditions"`

			// Environments The environments this rule is enabled for.
			Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

			// Id The Statsig ID of this rule.
			Id *string `json:"id,omitempty"`

			// Name The name of this rule.
			Name string `json:"name"`
		} `json:"rules"`
		TimeIntervalMs float32 `json:"timeIntervalMs"`
	} `json:"phases,omitempty"`
}

// ReleasePipelineDtoPhasesRulesConditionsTargetValue0 defines model for .
type ReleasePipelineDtoPhasesRulesConditionsTargetValue0 = []string

// ReleasePipelineDtoPhasesRulesConditionsTargetValue1 defines model for .
type ReleasePipelineDtoPhasesRulesConditionsTargetValue1 = []float32

// ReleasePipelineDtoPhasesRulesConditionsTargetValue2 defines model for .
type ReleasePipelineDtoPhasesRulesConditionsTargetValue2 = string

// ReleasePipelineDtoPhasesRulesConditionsTargetValue3 defines model for .
type ReleasePipelineDtoPhasesRulesConditionsTargetValue3 = float32

// ReleasePipelineDto_Phases_Rules_Conditions_TargetValue defines model for ReleasePipelineDto.Phases.Rules.Conditions.TargetValue.
type ReleasePipelineDto_Phases_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// ReleasePipelineDtoPhasesRulesConditionsType defines model for ReleasePipelineDto.Phases.Rules.Conditions.Type.
type ReleasePipelineDtoPhasesRulesConditionsType string

// ReleasePipelineTriggerResponseDto defines model for ReleasePipelineTriggerResponseDto.
type ReleasePipelineTriggerResponseDto struct {
	// Actions Actions
	Actions []struct {
		ActorID   string                                         `json:"actorID"`
		ActorName string                                         `json:"actorName"`
		PhaseID   string                                         `json:"phaseID"`
		TimeMs    float32                                        `json:"timeMs"`
		Type      ReleasePipelineTriggerResponseDto_Actions_Type `json:"type"`
	} `json:"actions"`

	// CreatedTime Trigger Creation Time
	CreatedTime float64 `json:"createdTime"`

	// CreatorID Trigger Creator ID
	CreatorID string `json:"creatorID"`

	// Description Optional description for this trigger
	Description *string `json:"description,omitempty"`

	// DynamicConfigID Dynamic Config ID
	DynamicConfigID *string `json:"dynamicConfigID,omitempty"`

	// GateID Gate ID
	GateID *string `json:"gateID,omitempty"`

	// Id Trigger ID
	Id string `json:"id"`

	// LastModifierID Last modifier ID
	LastModifierID string `json:"lastModifierID"`

	// LastModifierName Last modifier name
	LastModifierName string `json:"lastModifierName"`

	// ReleasePipelineID Release Pipeline ID
	ReleasePipelineID string `json:"releasePipelineID"`

	// Status Status of the trigger
	Status string `json:"status"`
}

// ReleasePipelineTriggerResponseDtoActionsType0 defines model for ReleasePipelineTriggerResponseDto.Actions.Type.0.
type ReleasePipelineTriggerResponseDtoActionsType0 string

// ReleasePipelineTriggerResponseDtoActionsType1 defines model for ReleasePipelineTriggerResponseDto.Actions.Type.1.
type ReleasePipelineTriggerResponseDtoActionsType1 string

// ReleasePipelineTriggerResponseDto_Actions_Type defines model for ReleasePipelineTriggerResponseDto.Actions.Type.
type ReleasePipelineTriggerResponseDto_Actions_Type struct {
	union json.RawMessage
}

// ReportDto defines model for ReportDto.
type ReportDto struct {
	// Url URL to the report
	Url string `json:"url"`
}

// RuleDto defines model for RuleDto.
type RuleDto struct {
	// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
	BaseID *string `json:"baseID,omitempty"`

	// Conditions An array of Condition objects.
	Conditions []struct {
		CustomID    nullable.Nullable[string]                         `json:"customID,omitempty"`
		Field       nullable.Nullable[string]                         `json:"field,omitempty"`
		Operator    *string                                           `json:"operator,omitempty"`
		TargetValue nullable.Nullable[RuleDto_Conditions_TargetValue] `json:"targetValue,omitempty"`
		Type        RuleDtoConditionsType                             `json:"type"`
	} `json:"conditions"`

	// Environments The environments this rule is enabled for.
	Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

	// Id The Statsig ID of this rule.
	Id *string `json:"id,omitempty"`

	// Name The name of this rule.
	Name string `json:"name"`

	// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
	PassPercentage float64 `json:"passPercentage"`

	// ReturnValue The return value of the rule.
	ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
}

// RuleDtoConditionsTargetValue0 defines model for .
type RuleDtoConditionsTargetValue0 = []string

// RuleDtoConditionsTargetValue1 defines model for .
type RuleDtoConditionsTargetValue1 = []float32

// RuleDtoConditionsTargetValue2 defines model for .
type RuleDtoConditionsTargetValue2 = string

// RuleDtoConditionsTargetValue3 defines model for .
type RuleDtoConditionsTargetValue3 = float32

// RuleDto_Conditions_TargetValue defines model for RuleDto.Conditions.TargetValue.
type RuleDto_Conditions_TargetValue struct {
	union json.RawMessage
}

// RuleDtoConditionsType defines model for RuleDto.Conditions.Type.
type RuleDtoConditionsType string

// RuleUpdateDto defines model for RuleUpdateDto.
type RuleUpdateDto struct {
	// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
	BaseID *string `json:"baseID,omitempty"`

	// Conditions An array of Condition objects.
	Conditions *[]struct {
		CustomID    nullable.Nullable[string]                               `json:"customID,omitempty"`
		Field       nullable.Nullable[string]                               `json:"field,omitempty"`
		Operator    *string                                                 `json:"operator,omitempty"`
		TargetValue nullable.Nullable[RuleUpdateDto_Conditions_TargetValue] `json:"targetValue,omitempty"`
		Type        RuleUpdateDtoConditionsType                             `json:"type"`
	} `json:"conditions,omitempty"`

	// Environments The environments this rule is enabled for.
	Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

	// Id The Statsig ID of this rule.
	Id *string `json:"id,omitempty"`

	// Name The name of this rule.
	Name *string `json:"name,omitempty"`

	// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
	PassPercentage *float64 `json:"passPercentage,omitempty"`

	// ReturnValue The return value of the rule.
	ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
}

// RuleUpdateDtoConditionsTargetValue0 defines model for .
type RuleUpdateDtoConditionsTargetValue0 = []string

// RuleUpdateDtoConditionsTargetValue1 defines model for .
type RuleUpdateDtoConditionsTargetValue1 = []float32

// RuleUpdateDtoConditionsTargetValue2 defines model for .
type RuleUpdateDtoConditionsTargetValue2 = string

// RuleUpdateDtoConditionsTargetValue3 defines model for .
type RuleUpdateDtoConditionsTargetValue3 = float32

// RuleUpdateDto_Conditions_TargetValue defines model for RuleUpdateDto.Conditions.TargetValue.
type RuleUpdateDto_Conditions_TargetValue struct {
	union json.RawMessage
}

// RuleUpdateDtoConditionsType defines model for RuleUpdateDto.Conditions.Type.
type RuleUpdateDtoConditionsType string

// SegmentCreateContractDto defines model for SegmentCreateContractDto.
type SegmentCreateContractDto struct {
	// CreatorEmail the email of the creator of this experiment
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail,omitempty"`

	// CreatorID the Statsig ID of the creator of this experiment
	CreatorID nullable.Nullable[string] `json:"creatorID,omitempty"`

	// Description description of the segment
	Description *string `json:"description,omitempty"`

	// Id optional id of the segment (defaults to name)
	Id *string `json:"id,omitempty"`

	// IdType type of id
	IdType *string `json:"idType,omitempty"`

	// Name name of the segment
	Name string `json:"name"`

	// Rules Rule Object
	Rules *[]struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID     *string `json:"baseID,omitempty"`
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                                `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                                `json:"field,omitempty"`
			Operator    *string                                                                  `json:"operator,omitempty"`
			TargetValue nullable.Nullable[SegmentCreateContractDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        SegmentCreateContractDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules,omitempty"`

	// Tags optional tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Team optional name identifier for the responsible team (enterprise only)
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID optional identifier for the responsible team (enterprise only)
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`

	// Type type of the segment
	Type SegmentCreateContractDtoType `json:"type"`
}

// SegmentCreateContractDtoRulesConditionsTargetValue0 defines model for .
type SegmentCreateContractDtoRulesConditionsTargetValue0 = []string

// SegmentCreateContractDtoRulesConditionsTargetValue1 defines model for .
type SegmentCreateContractDtoRulesConditionsTargetValue1 = []float32

// SegmentCreateContractDtoRulesConditionsTargetValue2 defines model for .
type SegmentCreateContractDtoRulesConditionsTargetValue2 = string

// SegmentCreateContractDtoRulesConditionsTargetValue3 defines model for .
type SegmentCreateContractDtoRulesConditionsTargetValue3 = float32

// SegmentCreateContractDto_Rules_Conditions_TargetValue defines model for SegmentCreateContractDto.Rules.Conditions.TargetValue.
type SegmentCreateContractDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// SegmentCreateContractDtoRulesConditionsType defines model for SegmentCreateContractDto.Rules.Conditions.Type.
type SegmentCreateContractDtoRulesConditionsType string

// SegmentCreateContractDtoType type of the segment
type SegmentCreateContractDtoType string

// SegmentDto defines model for SegmentDto.
type SegmentDto struct {
	// Count For id_list segments: the length of the ID list
	Count *float64 `json:"count,omitempty"`

	// CreatedTime Timestamp when the entity was created.
	CreatedTime float64 `json:"createdTime"`

	// CreatorEmail Email of the creator.
	CreatorEmail nullable.Nullable[string] `json:"creatorEmail"`

	// CreatorID ID of the user who created the entity.
	CreatorID nullable.Nullable[string] `json:"creatorID"`

	// CreatorName Name of the creator.
	CreatorName nullable.Nullable[string] `json:"creatorName"`

	// Description Detailed description of the configuration’s purpose.
	Description string `json:"description"`

	// HoldoutIDs Holdouts applied to this configuration.
	HoldoutIDs *[]string `json:"holdoutIDs,omitempty"`

	// Id ID
	Id string `json:"id"`

	// IdType Type of ID
	IdType string `json:"idType"`

	// IsEnabled Is the segment enabled.
	IsEnabled bool `json:"isEnabled"`

	// LastModifiedTime Time of the last modification.
	LastModifiedTime nullable.Nullable[float64] `json:"lastModifiedTime"`

	// LastModifierEmail Email of the last modifier.
	LastModifierEmail nullable.Nullable[string] `json:"lastModifierEmail"`

	// LastModifierID ID of the last modifier.
	LastModifierID nullable.Nullable[string] `json:"lastModifierID"`

	// LastModifierName Name of the last modifier.
	LastModifierName nullable.Nullable[string] `json:"lastModifierName"`

	// Name Optional name for the configuration.
	Name *string `json:"name,omitempty"`

	// Rules Rule Object
	Rules *[]struct {
		// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
		BaseID *string `json:"baseID,omitempty"`

		// Conditions An array of Condition objects.
		Conditions []struct {
			CustomID    nullable.Nullable[string]                                  `json:"customID,omitempty"`
			Field       nullable.Nullable[string]                                  `json:"field,omitempty"`
			Operator    *string                                                    `json:"operator,omitempty"`
			TargetValue nullable.Nullable[SegmentDto_Rules_Conditions_TargetValue] `json:"targetValue,omitempty"`
			Type        SegmentDtoRulesConditionsType                              `json:"type"`
		} `json:"conditions"`

		// Environments The environments this rule is enabled for.
		Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

		// Id The Statsig ID of this rule.
		Id *string `json:"id,omitempty"`

		// Name The name of this rule.
		Name string `json:"name"`

		// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
		PassPercentage float32 `json:"passPercentage"`

		// ReturnValue The return value of the rule.
		ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
	} `json:"rules,omitempty"`

	// Tags Optional tags for categorization.
	Tags *[]string `json:"tags,omitempty"`

	// TargetApps List of target applications associated with this configuration.
	TargetApps *[]string `json:"targetApps,omitempty"`

	// Team Optional name for the responsible team.
	Team nullable.Nullable[string] `json:"team,omitempty"`

	// TeamID Optional ID of the responsible team.
	TeamID nullable.Nullable[string] `json:"teamID,omitempty"`
	Type   SegmentDtoType            `json:"type"`

	// Version Version number
	Version *float64 `json:"version,omitempty"`
}

// SegmentDtoRulesConditionsTargetValue0 defines model for .
type SegmentDtoRulesConditionsTargetValue0 = []string

// SegmentDtoRulesConditionsTargetValue1 defines model for .
type SegmentDtoRulesConditionsTargetValue1 = []float32

// SegmentDtoRulesConditionsTargetValue2 defines model for .
type SegmentDtoRulesConditionsTargetValue2 = string

// SegmentDtoRulesConditionsTargetValue3 defines model for .
type SegmentDtoRulesConditionsTargetValue3 = float32

// SegmentDto_Rules_Conditions_TargetValue defines model for SegmentDto.Rules.Conditions.TargetValue.
type SegmentDto_Rules_Conditions_TargetValue struct {
	union json.RawMessage
}

// SegmentDtoRulesConditionsType defines model for SegmentDto.Rules.Conditions.Type.
type SegmentDtoRulesConditionsType string

// SegmentDtoType defines model for SegmentDto.Type.
type SegmentDtoType string

// SegmentIDListContractDto defines model for SegmentIDListContractDto.
type SegmentIDListContractDto struct {
	Ids []string `json:"ids"`
}

// SegmentIDListResetContractDto defines model for SegmentIDListResetContractDto.
type SegmentIDListResetContractDto struct {
	Ids []string `json:"ids"`
}

// SegmentRulesDto defines model for SegmentRulesDto.
type SegmentRulesDto = []struct {
	// BaseID The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout
	BaseID     *string `json:"baseID,omitempty"`
	Conditions []struct {
		CustomID    nullable.Nullable[string]                                 `json:"customID,omitempty"`
		Field       nullable.Nullable[string]                                 `json:"field,omitempty"`
		Operator    *string                                                   `json:"operator,omitempty"`
		TargetValue nullable.Nullable[SegmentRulesDto_Conditions_TargetValue] `json:"targetValue,omitempty"`
		Type        SegmentRulesDtoConditionsType                             `json:"type"`
	} `json:"conditions"`

	// Environments The environments this rule is enabled for.
	Environments nullable.Nullable[[]string] `json:"environments,omitempty"`

	// Id The Statsig ID of this rule.
	Id *string `json:"id,omitempty"`

	// Name The name of this rule.
	Name string `json:"name"`

	// PassPercentage Of the users that meet the conditions of this rule, what percent should return true.
	PassPercentage float32 `json:"passPercentage"`

	// ReturnValue The return value of the rule.
	ReturnValue *map[string]interface{} `json:"returnValue,omitempty"`
}

// SegmentRulesDtoConditionsTargetValue0 defines model for .
type SegmentRulesDtoConditionsTargetValue0 = []string

// SegmentRulesDtoConditionsTargetValue1 defines model for .
type SegmentRulesDtoConditionsTargetValue1 = []float32

// SegmentRulesDtoConditionsTargetValue2 defines model for .
type SegmentRulesDtoConditionsTargetValue2 = string

// SegmentRulesDtoConditionsTargetValue3 defines model for .
type SegmentRulesDtoConditionsTargetValue3 = float32

// SegmentRulesDto_Conditions_TargetValue defines model for SegmentRulesDto.Conditions.TargetValue.
type SegmentRulesDto_Conditions_TargetValue struct {
	union json.RawMessage
}

// SegmentRulesDtoConditionsType defines model for SegmentRulesDto.Conditions.Type.
type SegmentRulesDtoConditionsType string

// SingleDataResponse defines model for SingleDataResponse.
type SingleDataResponse struct {
	// Data A single result.
	Data map[string]interface{} `json:"data"`

	// Message A simple string explaining the result of the operation.
	Message string `json:"message"`
}

// TagCreateDto defines model for TagCreateDto.
type TagCreateDto struct {
	Description string `json:"description"`
	IsCore      *bool  `json:"isCore,omitempty"`
	Name        string `json:"name"`
}

// TagDto defines model for TagDto.
type TagDto struct {
	// Description description of the tag
	Description string `json:"description"`

	// Id id of the tag
	Id string `json:"id"`

	// IsCore is this a core tag
	IsCore bool `json:"isCore"`

	// Name name of the tag
	Name string `json:"name"`
}

// TagUpdateDto defines model for TagUpdateDto.
type TagUpdateDto struct {
	Description *string `json:"description,omitempty"`
	IsCore      *bool   `json:"isCore,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// TargetAppCreateDto defines model for TargetAppCreateDto.
type TargetAppCreateDto struct {
	// Description a description of the target app
	Description string `json:"description"`

	// DynamicConfigs Dynamic Config IDs to assign to target app(s)
	DynamicConfigs *[]string `json:"dynamicConfigs,omitempty"`

	// Experiments Experiment IDs to assign to target app(s)
	Experiments *[]string `json:"experiments,omitempty"`

	// Gates Gate IDs to assign to target app(s)
	Gates *[]string `json:"gates,omitempty"`

	// Name name of the target app
	Name string `json:"name"`
}

// TargetAppDto defines model for TargetAppDto.
type TargetAppDto struct {
	// Id id of target app
	Id *string `json:"id,omitempty"`

	// Name name of the target app
	Name string `json:"name"`
}

// TeamCreationDto defines model for TeamCreationDto.
type TeamCreationDto struct {
	// Admins Array of admin email addresses in the team.
	Admins []string `json:"admins"`

	// ChangeTeamConfigs Who can change team configurations: "anyone" or "team_only".
	ChangeTeamConfigs TeamCreationDtoChangeTeamConfigs `json:"changeTeamConfigs"`

	// DefaultExperimentPrimaryMetrics Default primary metrics for experiments in the team.
	DefaultExperimentPrimaryMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultExperimentPrimaryMetrics"`

	// DefaultExperimentSecondaryMetrics Default secondary metrics for experiments in the team.
	DefaultExperimentSecondaryMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultExperimentSecondaryMetrics"`

	// DefaultGateMetrics Default gate metrics for the team.
	DefaultGateMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultGateMetrics"`

	// DefaultHoldoutID Default holdout ID for the team, if applicable.
	DefaultHoldoutID nullable.Nullable[string] `json:"defaultHoldoutID,omitempty"`

	// DefaultHoldoutMetrics Default holdout metrics for the team.
	DefaultHoldoutMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultHoldoutMetrics"`

	// DefaultTargetApplications Default target applications for the team.
	DefaultTargetApplications []string `json:"defaultTargetApplications"`

	// Description Description of the team.
	Description *string `json:"description,omitempty"`

	// Members Array of member email addresses in the team.
	Members []string `json:"members"`

	// Name The name of the team.
	Name string `json:"name"`

	// RequireDynamicConfigTemplates Whether dynamic config templates are required for the team, if applicable.
	RequireDynamicConfigTemplates nullable.Nullable[bool] `json:"requireDynamicConfigTemplates,omitempty"`

	// RequireExperimentTemplates Whether experiment templates are required for the team, if applicable.
	RequireExperimentTemplates nullable.Nullable[bool] `json:"requireExperimentTemplates,omitempty"`

	// RequireGateTemplates Whether gate templates are required for the team, if applicable.
	RequireGateTemplates nullable.Nullable[bool] `json:"requireGateTemplates,omitempty"`

	// RequireReviews Whether reviews are required for changes, if applicable.
	RequireReviews nullable.Nullable[bool] `json:"requireReviews,omitempty"`

	// ReviewApproval Who can review and approve changes: "anyone", "team_only", or "admin_only".
	ReviewApproval TeamCreationDtoReviewApproval `json:"reviewApproval"`
}

// TeamCreationDtoChangeTeamConfigs Who can change team configurations: "anyone" or "team_only".
type TeamCreationDtoChangeTeamConfigs string

// TeamCreationDtoReviewApproval Who can review and approve changes: "anyone", "team_only", or "admin_only".
type TeamCreationDtoReviewApproval string

// TeamDto defines model for TeamDto.
type TeamDto struct {
	Admins []struct {
		// Email The email address of the user.
		Email openapi_types.Email `json:"email"`

		// FirstName The user's first name.
		FirstName string `json:"firstName"`

		// LastName The user's last name.
		LastName string `json:"lastName"`

		// Role The user's role, which can be 'Admin', 'Read Only', 'Member', or any custom role name.
		Role string `json:"role"`
	} `json:"admins"`

	// ChangeTeamConfigs Who can change team configurations: "anyone" or "team_only".
	ChangeTeamConfigs TeamDtoChangeTeamConfigs `json:"changeTeamConfigs"`

	// DefaultExperimentPrimaryMetrics Default primary metrics for experiments in the team.
	DefaultExperimentPrimaryMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultExperimentPrimaryMetrics"`

	// DefaultExperimentSecondaryMetrics Default secondary metrics for experiments in the team.
	DefaultExperimentSecondaryMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultExperimentSecondaryMetrics"`

	// DefaultGateMetrics Default gate metrics for the team.
	DefaultGateMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultGateMetrics"`

	// DefaultHoldoutID Default holdout ID for the team, if applicable.
	DefaultHoldoutID nullable.Nullable[string] `json:"defaultHoldoutID,omitempty"`

	// DefaultHoldoutMetrics Default holdout metrics for the team.
	DefaultHoldoutMetrics []struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultHoldoutMetrics"`

	// DefaultTargetApplications Default target applications for the team.
	DefaultTargetApplications []string `json:"defaultTargetApplications"`

	// Description Description of the team.
	Description *string `json:"description,omitempty"`

	// Id The ID of the team.
	Id      string `json:"id"`
	Members []struct {
		// Email The email address of the user.
		Email openapi_types.Email `json:"email"`

		// FirstName The user's first name.
		FirstName string `json:"firstName"`

		// LastName The user's last name.
		LastName string `json:"lastName"`

		// Role The user's role, which can be 'Admin', 'Read Only', 'Member', or any custom role name.
		Role string `json:"role"`
	} `json:"members"`

	// Name The name of the team.
	Name string `json:"name"`

	// RequireDynamicConfigTemplates Whether dynamic config templates are required for the team, if applicable.
	RequireDynamicConfigTemplates nullable.Nullable[bool] `json:"requireDynamicConfigTemplates,omitempty"`

	// RequireExperimentTemplates Whether experiment templates are required for the team, if applicable.
	RequireExperimentTemplates nullable.Nullable[bool] `json:"requireExperimentTemplates,omitempty"`

	// RequireGateTemplates Whether gate templates are required for the team, if applicable.
	RequireGateTemplates nullable.Nullable[bool] `json:"requireGateTemplates,omitempty"`

	// RequireReviews Whether reviews are required for changes, if applicable.
	RequireReviews nullable.Nullable[bool] `json:"requireReviews,omitempty"`

	// ReviewApproval Who can review and approve changes: "anyone", "team_only", or "admin_only".
	ReviewApproval TeamDtoReviewApproval `json:"reviewApproval"`
}

// TeamDtoChangeTeamConfigs Who can change team configurations: "anyone" or "team_only".
type TeamDtoChangeTeamConfigs string

// TeamDtoReviewApproval Who can review and approve changes: "anyone", "team_only", or "admin_only".
type TeamDtoReviewApproval string

// TeamPartialUpdateDto defines model for TeamPartialUpdateDto.
type TeamPartialUpdateDto struct {
	// Admins Array of admin email addresses in the team.
	Admins *[]string `json:"admins,omitempty"`

	// ChangeTeamConfigs Who can change team configurations: "anyone" or "team_only".
	ChangeTeamConfigs *TeamPartialUpdateDtoChangeTeamConfigs `json:"changeTeamConfigs,omitempty"`

	// DefaultExperimentPrimaryMetrics Default primary metrics for experiments in the team.
	DefaultExperimentPrimaryMetrics *[]struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultExperimentPrimaryMetrics,omitempty"`

	// DefaultExperimentSecondaryMetrics Default secondary metrics for experiments in the team.
	DefaultExperimentSecondaryMetrics *[]struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultExperimentSecondaryMetrics,omitempty"`

	// DefaultGateMetrics Default gate metrics for the team.
	DefaultGateMetrics *[]struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultGateMetrics,omitempty"`

	// DefaultHoldoutID Default holdout ID for the team, if applicable.
	DefaultHoldoutID nullable.Nullable[string] `json:"defaultHoldoutID,omitempty"`

	// DefaultHoldoutMetrics Default holdout metrics for the team.
	DefaultHoldoutMetrics *[]struct {
		// Name The name of the metric.
		Name string `json:"name"`

		// Type The type of the metric.
		Type string `json:"type"`
	} `json:"defaultHoldoutMetrics,omitempty"`

	// DefaultTargetApplications Default target applications for the team.
	DefaultTargetApplications *[]string `json:"defaultTargetApplications,omitempty"`

	// Description Description of the team.
	Description *string `json:"description,omitempty"`

	// Id The ID of the team.
	Id *string `json:"id,omitempty"`

	// Members Array of member email addresses in the team.
	Members *[]string `json:"members,omitempty"`

	// Name The name of the team.
	Name *string `json:"name,omitempty"`

	// RequireDynamicConfigTemplates Whether dynamic config templates are required for the team, if applicable.
	RequireDynamicConfigTemplates nullable.Nullable[bool] `json:"requireDynamicConfigTemplates,omitempty"`

	// RequireExperimentTemplates Whether experiment templates are required for the team, if applicable.
	RequireExperimentTemplates nullable.Nullable[bool] `json:"requireExperimentTemplates,omitempty"`

	// RequireGateTemplates Whether gate templates are required for the team, if applicable.
	RequireGateTemplates nullable.Nullable[bool] `json:"requireGateTemplates,omitempty"`

	// RequireReviews Whether reviews are required for changes, if applicable.
	RequireReviews nullable.Nullable[bool] `json:"requireReviews,omitempty"`

	// ReviewApproval Who can review and approve changes: "anyone", "team_only", or "admin_only".
	ReviewApproval *TeamPartialUpdateDtoReviewApproval `json:"reviewApproval,omitempty"`
}

// TeamPartialUpdateDtoChangeTeamConfigs Who can change team configurations: "anyone" or "team_only".
type TeamPartialUpdateDtoChangeTeamConfigs string

// TeamPartialUpdateDtoReviewApproval Who can review and approve changes: "anyone", "team_only", or "admin_only".
type TeamPartialUpdateDtoReviewApproval string

// UpdateOverridesContractDto Contract for updating overrides
type UpdateOverridesContractDto struct {
	union json.RawMessage
}

// UpdateOverridesContractDto0 Contract for updating environment overrides
type UpdateOverridesContractDto0 struct {
	EnvironmentOverrides []struct {
		// Environment Environment
		Environment nullable.Nullable[string] `json:"environment,omitempty"`

		// FailingIDs List of failing IDs
		FailingIDs []string `json:"failingIDs"`

		// PassingIDs List of passing IDs
		PassingIDs []string `json:"passingIDs"`

		// UnitID Unit ID
		UnitID nullable.Nullable[string] `json:"unitID"`
	} `json:"environmentOverrides"`
}

// UpdateOverridesContractDto1 Contract for updating ID overrides
type UpdateOverridesContractDto1 struct {
	// FailingCustomIDs Optional list of custom IDs
	FailingCustomIDs *[]string `json:"failingCustomIDs,omitempty"`

	// FailingUserIDs List of user IDs
	FailingUserIDs []string `json:"failingUserIDs"`

	// PassingCustomIDs Optional list of custom IDs
	PassingCustomIDs *[]string `json:"passingCustomIDs,omitempty"`

	// PassingUserIDs List of user IDs
	PassingUserIDs []string `json:"passingUserIDs"`
}

// UpdateTargetAppDto defines model for UpdateTargetAppDto.
type UpdateTargetAppDto struct {
	// Description a description of the target app
	Description *string `json:"description,omitempty"`

	// Name name of the target app
	Name *string `json:"name,omitempty"`
}

// UserContractDto defines model for UserContractDto.
type UserContractDto struct {
	// Email The email address of the user.
	Email openapi_types.Email `json:"email"`

	// FirstName The user's first name.
	FirstName string `json:"firstName"`

	// LastName The user's last name.
	LastName string `json:"lastName"`

	// Role The user's role, which can be 'Admin', 'Read Only', 'Member', or any custom role name.
	Role string `json:"role"`
}

// UserInvitesDto defines model for UserInvitesDto.
type UserInvitesDto struct {
	// Emails List of email addresses to send invitations to. Invitee Emails must have the same domain to your company email domain.
	Emails []openapi_types.Email `json:"emails"`

	// Role Role assigned to the invited users. Can be 'Admin', 'Read Only', 'Member', or any custom role name.
	Role string `json:"role"`

	// Teams Optional list of teams that the invited users will be associated with.
	Teams *[]string `json:"teams,omitempty"`
}

// UserUpdateDto Schema for updating user information.
type UserUpdateDto struct {
	// FirstName Update the user's first name.
	FirstName *string `json:"firstName,omitempty"`

	// LastName Update the user's last name.
	LastName *string `json:"lastName,omitempty"`

	// Role Update the user's role. Can be 'Admin', 'Read Only', 'Member', or any custom role name.
	Role *string `json:"role,omitempty"`
}

// GetConsoleV1AlertsParams defines parameters for GetConsoleV1Alerts.
type GetConsoleV1AlertsParams struct {
	// CreatorName Name of the creator.
	CreatorName *string `form:"creatorName,omitempty" json:"creatorName,omitempty"`

	// CreatorID ID of the user who created the entity.
	CreatorID *string `form:"creatorID,omitempty" json:"creatorID,omitempty"`

	// Tags Filter by tags
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1AlertsParamsTags0 defines parameters for GetConsoleV1Alerts.
type GetConsoleV1AlertsParamsTags0 = string

// GetConsoleV1AlertsParamsTags1 defines parameters for GetConsoleV1Alerts.
type GetConsoleV1AlertsParamsTags1 = []string

// GetConsoleV1AuditLogsParams defines parameters for GetConsoleV1AuditLogs.
type GetConsoleV1AuditLogsParams struct {
	Id          *string                                   `form:"id,omitempty" json:"id,omitempty"`
	SortKey     *GetConsoleV1AuditLogsParamsSortKey       `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder   *GetConsoleV1AuditLogsParamsSortOrder     `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
	LatestID    *string                                   `form:"latestID,omitempty" json:"latestID,omitempty"`
	Tags        *[]string                                 `form:"tags,omitempty" json:"tags,omitempty"`
	ActionType  *GetConsoleV1AuditLogsParamsActionType    `form:"actionType,omitempty" json:"actionType,omitempty"`
	ActionTypes *[]GetConsoleV1AuditLogsParamsActionTypes `form:"actionTypes,omitempty" json:"actionTypes,omitempty"`
	StartDate   *string                                   `form:"startDate,omitempty" json:"startDate,omitempty"`
	EndDate     *string                                   `form:"endDate,omitempty" json:"endDate,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1AuditLogsParamsSortKey defines parameters for GetConsoleV1AuditLogs.
type GetConsoleV1AuditLogsParamsSortKey string

// GetConsoleV1AuditLogsParamsSortOrder defines parameters for GetConsoleV1AuditLogs.
type GetConsoleV1AuditLogsParamsSortOrder string

// GetConsoleV1AuditLogsParamsActionType defines parameters for GetConsoleV1AuditLogs.
type GetConsoleV1AuditLogsParamsActionType string

// GetConsoleV1AuditLogsParamsActionTypes defines parameters for GetConsoleV1AuditLogs.
type GetConsoleV1AuditLogsParamsActionTypes string

// GetConsoleV1AutotunesParams defines parameters for GetConsoleV1Autotunes.
type GetConsoleV1AutotunesParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1AutotunesParams defines parameters for PostConsoleV1Autotunes.
type PostConsoleV1AutotunesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1AutotunesIdParams defines parameters for DeleteConsoleV1AutotunesId.
type DeleteConsoleV1AutotunesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1AutotunesIdParams defines parameters for GetConsoleV1AutotunesId.
type GetConsoleV1AutotunesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1AutotunesIdParams defines parameters for PatchConsoleV1AutotunesId.
type PatchConsoleV1AutotunesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1AutotunesIdParams defines parameters for PostConsoleV1AutotunesId.
type PostConsoleV1AutotunesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1AutotunesIdMakeDecisionParams defines parameters for PutConsoleV1AutotunesIdMakeDecision.
type PutConsoleV1AutotunesIdMakeDecisionParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1AutotunesIdResetParams defines parameters for PutConsoleV1AutotunesIdReset.
type PutConsoleV1AutotunesIdResetParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1AutotunesIdStartParams defines parameters for PutConsoleV1AutotunesIdStart.
type PutConsoleV1AutotunesIdStartParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1CompanyParams defines parameters for GetConsoleV1Company.
type GetConsoleV1CompanyParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1DynamicConfigsParams defines parameters for GetConsoleV1DynamicConfigs.
type GetConsoleV1DynamicConfigsParams struct {
	// ReleasePipelineID The release pipeline ID associated with the dynamic config
	ReleasePipelineID *string `form:"releasePipelineID,omitempty" json:"releasePipelineID,omitempty"`

	// CreatorName Name of the creator.
	CreatorName *string `form:"creatorName,omitempty" json:"creatorName,omitempty"`

	// CreatorID ID of the user who created the entity.
	CreatorID *string `form:"creatorID,omitempty" json:"creatorID,omitempty"`

	// Tags Filter by tags
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1DynamicConfigsParamsTags0 defines parameters for GetConsoleV1DynamicConfigs.
type GetConsoleV1DynamicConfigsParamsTags0 = string

// GetConsoleV1DynamicConfigsParamsTags1 defines parameters for GetConsoleV1DynamicConfigs.
type GetConsoleV1DynamicConfigsParamsTags1 = []string

// PostConsoleV1DynamicConfigsParams defines parameters for PostConsoleV1DynamicConfigs.
type PostConsoleV1DynamicConfigsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1DynamicConfigsIdParams defines parameters for DeleteConsoleV1DynamicConfigsId.
type DeleteConsoleV1DynamicConfigsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1DynamicConfigsIdParams defines parameters for GetConsoleV1DynamicConfigsId.
type GetConsoleV1DynamicConfigsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1DynamicConfigsIdParams defines parameters for PatchConsoleV1DynamicConfigsId.
type PatchConsoleV1DynamicConfigsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1DynamicConfigsIdParams defines parameters for PostConsoleV1DynamicConfigsId.
type PostConsoleV1DynamicConfigsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1DynamicConfigsIdDisableParams defines parameters for PutConsoleV1DynamicConfigsIdDisable.
type PutConsoleV1DynamicConfigsIdDisableParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1DynamicConfigsIdEnableParams defines parameters for PutConsoleV1DynamicConfigsIdEnable.
type PutConsoleV1DynamicConfigsIdEnableParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1DynamicConfigsIdRuleParams defines parameters for PostConsoleV1DynamicConfigsIdRule.
type PostConsoleV1DynamicConfigsIdRuleParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameParams defines parameters for DeleteConsoleV1DynamicConfigsIdRuleNameRuleName.
type DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams defines parameters for PatchConsoleV1DynamicConfigsIdRuleNameRuleName.
type PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1DynamicConfigsIdRuleRuleIdParams defines parameters for DeleteConsoleV1DynamicConfigsIdRuleRuleId.
type DeleteConsoleV1DynamicConfigsIdRuleRuleIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1DynamicConfigsIdRuleRuleIdParams defines parameters for GetConsoleV1DynamicConfigsIdRuleRuleId.
type GetConsoleV1DynamicConfigsIdRuleRuleIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1DynamicConfigsIdRuleRuleIdParams defines parameters for PatchConsoleV1DynamicConfigsIdRuleRuleId.
type PatchConsoleV1DynamicConfigsIdRuleRuleIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1DynamicConfigsIdRulesParams defines parameters for GetConsoleV1DynamicConfigsIdRules.
type GetConsoleV1DynamicConfigsIdRulesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1DynamicConfigsIdRulesParams defines parameters for PatchConsoleV1DynamicConfigsIdRules.
type PatchConsoleV1DynamicConfigsIdRulesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1DynamicConfigsIdRulesParams defines parameters for PostConsoleV1DynamicConfigsIdRules.
type PostConsoleV1DynamicConfigsIdRulesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1DynamicConfigsIdVersionsParams defines parameters for GetConsoleV1DynamicConfigsIdVersions.
type GetConsoleV1DynamicConfigsIdVersionsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1EventsParams defines parameters for GetConsoleV1Events.
type GetConsoleV1EventsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1EventsEventNameParams defines parameters for GetConsoleV1EventsEventName.
type GetConsoleV1EventsEventNameParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1EventsEventNameMetricsParams defines parameters for GetConsoleV1EventsEventNameMetrics.
type GetConsoleV1EventsEventNameMetricsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsParams defines parameters for GetConsoleV1Experiments.
type GetConsoleV1ExperimentsParams struct {
	// LayerID Which layer to place the experiment into.
	LayerID *string `form:"layerID,omitempty" json:"layerID,omitempty"`

	// IdType The idType the experiment will be performed on
	IdType *string `form:"idType,omitempty" json:"idType,omitempty"`

	// Status The current status of the experiment
	Status *struct {
		union json.RawMessage
	} `form:"status,omitempty" json:"status,omitempty"`

	// CreatorName Name of the creator.
	CreatorName *string `form:"creatorName,omitempty" json:"creatorName,omitempty"`

	// CreatorID ID of the user who created the entity.
	CreatorID *string `form:"creatorID,omitempty" json:"creatorID,omitempty"`

	// Tags Filter by tags
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsParamsStatus0 defines parameters for GetConsoleV1Experiments.
type GetConsoleV1ExperimentsParamsStatus0 = string

// GetConsoleV1ExperimentsParamsStatus1 defines parameters for GetConsoleV1Experiments.
type GetConsoleV1ExperimentsParamsStatus1 = []string

// GetConsoleV1ExperimentsParamsTags0 defines parameters for GetConsoleV1Experiments.
type GetConsoleV1ExperimentsParamsTags0 = string

// GetConsoleV1ExperimentsParamsTags1 defines parameters for GetConsoleV1Experiments.
type GetConsoleV1ExperimentsParamsTags1 = []string

// PostConsoleV1ExperimentsParams defines parameters for PostConsoleV1Experiments.
type PostConsoleV1ExperimentsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1ExperimentsAssignmentSourceNameParams defines parameters for DeleteConsoleV1ExperimentsAssignmentSourceName.
type DeleteConsoleV1ExperimentsAssignmentSourceNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1ExperimentsAssignmentSourceNameParams defines parameters for PatchConsoleV1ExperimentsAssignmentSourceName.
type PatchConsoleV1ExperimentsAssignmentSourceNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsAssignmentSourceNameParams defines parameters for PostConsoleV1ExperimentsAssignmentSourceName.
type PostConsoleV1ExperimentsAssignmentSourceNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsAssignmentSourcesParams defines parameters for GetConsoleV1ExperimentsAssignmentSources.
type GetConsoleV1ExperimentsAssignmentSourcesParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsAssignmentSourcesParams defines parameters for PostConsoleV1ExperimentsAssignmentSources.
type PostConsoleV1ExperimentsAssignmentSourcesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsEntityPropertiesParams defines parameters for GetConsoleV1ExperimentsEntityProperties.
type GetConsoleV1ExperimentsEntityPropertiesParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsEntityPropertiesParams defines parameters for PostConsoleV1ExperimentsEntityProperties.
type PostConsoleV1ExperimentsEntityPropertiesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1ExperimentsEntityPropertyNameParams defines parameters for DeleteConsoleV1ExperimentsEntityPropertyName.
type DeleteConsoleV1ExperimentsEntityPropertyNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsEntityPropertyNameParams defines parameters for GetConsoleV1ExperimentsEntityPropertyName.
type GetConsoleV1ExperimentsEntityPropertyNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1ExperimentsEntityPropertyNameParams defines parameters for PatchConsoleV1ExperimentsEntityPropertyName.
type PatchConsoleV1ExperimentsEntityPropertyNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsEntityPropertyNameParams defines parameters for PostConsoleV1ExperimentsEntityPropertyName.
type PostConsoleV1ExperimentsEntityPropertyNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1ExperimentsIdParams defines parameters for DeleteConsoleV1ExperimentsId.
type DeleteConsoleV1ExperimentsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsIdParams defines parameters for GetConsoleV1ExperimentsId.
type GetConsoleV1ExperimentsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1ExperimentsIdParams defines parameters for PatchConsoleV1ExperimentsId.
type PatchConsoleV1ExperimentsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsIdParams defines parameters for PostConsoleV1ExperimentsId.
type PostConsoleV1ExperimentsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1ExperimentsIdAbandonParams defines parameters for PutConsoleV1ExperimentsIdAbandon.
type PutConsoleV1ExperimentsIdAbandonParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1ExperimentsIdArchiveParams defines parameters for PutConsoleV1ExperimentsIdArchive.
type PutConsoleV1ExperimentsIdArchiveParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsIdCumulativeExposuresParams defines parameters for GetConsoleV1ExperimentsIdCumulativeExposures.
type GetConsoleV1ExperimentsIdCumulativeExposuresParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsIdDisableGroupsParams defines parameters for PostConsoleV1ExperimentsIdDisableGroups.
type PostConsoleV1ExperimentsIdDisableGroupsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsIdEnableGroupsParams defines parameters for PostConsoleV1ExperimentsIdEnableGroups.
type PostConsoleV1ExperimentsIdEnableGroupsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsIdLoadPulseParams defines parameters for PostConsoleV1ExperimentsIdLoadPulse.
type PostConsoleV1ExperimentsIdLoadPulseParams struct {
	Refresh   *PostConsoleV1ExperimentsIdLoadPulseParamsRefresh `form:"refresh,omitempty" json:"refresh,omitempty"`
	MetricIDs *[]string                                         `form:"metricIDs,omitempty" json:"metricIDs,omitempty"`
	RuleId    *string                                           `form:"ruleId,omitempty" json:"ruleId,omitempty"`
	TurboMode *bool                                             `form:"turboMode,omitempty" json:"turboMode,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsIdLoadPulseParamsRefresh defines parameters for PostConsoleV1ExperimentsIdLoadPulse.
type PostConsoleV1ExperimentsIdLoadPulseParamsRefresh string

// PutConsoleV1ExperimentsIdMakeDecisionParams defines parameters for PutConsoleV1ExperimentsIdMakeDecision.
type PutConsoleV1ExperimentsIdMakeDecisionParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1ExperimentsIdOverridesParams defines parameters for DeleteConsoleV1ExperimentsIdOverrides.
type DeleteConsoleV1ExperimentsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsIdOverridesParams defines parameters for GetConsoleV1ExperimentsIdOverrides.
type GetConsoleV1ExperimentsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1ExperimentsIdOverridesParams defines parameters for PatchConsoleV1ExperimentsIdOverrides.
type PatchConsoleV1ExperimentsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1ExperimentsIdOverridesParams defines parameters for PostConsoleV1ExperimentsIdOverrides.
type PostConsoleV1ExperimentsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsIdPulseLoadHistoryParams defines parameters for GetConsoleV1ExperimentsIdPulseLoadHistory.
type GetConsoleV1ExperimentsIdPulseLoadHistoryParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExperimentsIdPulseResultsParams defines parameters for GetConsoleV1ExperimentsIdPulseResults.
type GetConsoleV1ExperimentsIdPulseResultsParams struct {
	// Control Control Group ID
	Control string `form:"control" json:"control"`

	// Test Test Group ID
	Test string `form:"test" json:"test"`

	// Cuped Whether to apply CUPED. Allowed values are "true" or "false".
	Cuped *string `form:"cuped,omitempty" json:"cuped,omitempty"`

	// Confidence Confidence interval (0-100)
	Confidence *string `form:"confidence,omitempty" json:"confidence,omitempty"`

	// ApplyBonferroniPerVariant Whether to apply Bonferroni Per Variant. Allowed values are "true" or "false".
	ApplyBonferroniPerVariant *string `form:"applyBonferroniPerVariant,omitempty" json:"applyBonferroniPerVariant,omitempty"`

	// ApplyBonferroniPerMetric Whether to apply Bonferroni Per Metric. Allowed values are "true" or "false".
	ApplyBonferroniPerMetric *string `form:"applyBonferroniPerMetric,omitempty" json:"applyBonferroniPerMetric,omitempty"`

	// BonferroniPrimaryMetricWeight α allocated to primary metrics
	BonferroniPrimaryMetricWeight *string `form:"bonferroniPrimaryMetricWeight,omitempty" json:"bonferroniPrimaryMetricWeight,omitempty"`

	// ApplyBenjaminiHochbergPerMetric Whether to apply Benjamini-Hochberg Correction Per Metric. Allowed values are "true" or "false".
	ApplyBenjaminiHochbergPerMetric *string `form:"applyBenjaminiHochbergPerMetric,omitempty" json:"applyBenjaminiHochbergPerMetric,omitempty"`

	// ApplyBenjaminiHochbergPerVariant Whether to apply Benjamini-Hochberg Correction Per Variant. Allowed values are "true" or "false".
	ApplyBenjaminiHochbergPerVariant *string `form:"applyBenjaminiHochbergPerVariant,omitempty" json:"applyBenjaminiHochbergPerVariant,omitempty"`

	// Date Date for pulse results. format must be YYYY-MM-DD
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1ExperimentsIdResetParams defines parameters for PutConsoleV1ExperimentsIdReset.
type PutConsoleV1ExperimentsIdResetParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1ExperimentsIdStartParams defines parameters for PutConsoleV1ExperimentsIdStart.
type PutConsoleV1ExperimentsIdStartParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1ExperimentsIdUnarchiveParams defines parameters for PutConsoleV1ExperimentsIdUnarchive.
type PutConsoleV1ExperimentsIdUnarchiveParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExposureCountParams defines parameters for GetConsoleV1ExposureCount.
type GetConsoleV1ExposureCountParams struct {
	Experiments *struct {
		union json.RawMessage
	} `form:"experiments,omitempty" json:"experiments,omitempty"`
	Gates *struct {
		union json.RawMessage
	} `form:"gates,omitempty" json:"gates,omitempty"`
	DynamicConfigs *struct {
		union json.RawMessage
	} `form:"dynamicConfigs,omitempty" json:"dynamicConfigs,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ExposureCountParamsExperiments0 defines parameters for GetConsoleV1ExposureCount.
type GetConsoleV1ExposureCountParamsExperiments0 = string

// GetConsoleV1ExposureCountParamsExperiments1 defines parameters for GetConsoleV1ExposureCount.
type GetConsoleV1ExposureCountParamsExperiments1 = []string

// GetConsoleV1ExposureCountParamsGates0 defines parameters for GetConsoleV1ExposureCount.
type GetConsoleV1ExposureCountParamsGates0 = string

// GetConsoleV1ExposureCountParamsGates1 defines parameters for GetConsoleV1ExposureCount.
type GetConsoleV1ExposureCountParamsGates1 = []string

// GetConsoleV1ExposureCountParamsDynamicConfigs0 defines parameters for GetConsoleV1ExposureCount.
type GetConsoleV1ExposureCountParamsDynamicConfigs0 = string

// GetConsoleV1ExposureCountParamsDynamicConfigs1 defines parameters for GetConsoleV1ExposureCount.
type GetConsoleV1ExposureCountParamsDynamicConfigs1 = []string

// GetConsoleV1GatesParams defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParams struct {
	// IdType Filter by idType
	IdType *struct {
		union json.RawMessage
	} `form:"idType,omitempty" json:"idType,omitempty"`

	// Type Filter by type
	Type *GetConsoleV1GatesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// TypeReason Filter by typeReason
	TypeReason *GetConsoleV1GatesParamsTypeReason `form:"typeReason,omitempty" json:"typeReason,omitempty"`

	// PassRate Filter by pass rate of the gates, as determined by a sampling of overall true/false values returned: 0, 100, or INBETWEEN (pass rate greater than zero but less than 100)
	PassRate *[]GetConsoleV1GatesParamsPassRate `form:"passRate,omitempty" json:"passRate,omitempty"`

	// RolloutRate Filter by rollout rate of the gates: 0 (all rules are set to pass 0%), 100 (all rules pass 100% including an "everyone" catch all rule), or INBETWEEN (at least one rule has a pass rate greater than 0 but less than 100)
	RolloutRate *[]GetConsoleV1GatesParamsRolloutRate `form:"rolloutRate,omitempty" json:"rolloutRate,omitempty"`

	// ReleasePipelineID Filter by release pipeline ID
	ReleasePipelineID *string `form:"releasePipelineID,omitempty" json:"releasePipelineID,omitempty"`

	// CreatorName Name of the creator.
	CreatorName *string `form:"creatorName,omitempty" json:"creatorName,omitempty"`

	// CreatorID ID of the user who created the entity.
	CreatorID *string `form:"creatorID,omitempty" json:"creatorID,omitempty"`

	// Tags Filter by tags
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1GatesParamsIdType0 defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsIdType0 = string

// GetConsoleV1GatesParamsIdType1 defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsIdType1 = []string

// GetConsoleV1GatesParamsType defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsType string

// GetConsoleV1GatesParamsTypeReason defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsTypeReason string

// GetConsoleV1GatesParamsPassRate defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsPassRate string

// GetConsoleV1GatesParamsRolloutRate defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsRolloutRate string

// GetConsoleV1GatesParamsTags0 defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsTags0 = string

// GetConsoleV1GatesParamsTags1 defines parameters for GetConsoleV1Gates.
type GetConsoleV1GatesParamsTags1 = []string

// PostConsoleV1GatesParams defines parameters for PostConsoleV1Gates.
type PostConsoleV1GatesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1GatesIdParams defines parameters for DeleteConsoleV1GatesId.
type DeleteConsoleV1GatesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1GatesIdParams defines parameters for GetConsoleV1GatesId.
type GetConsoleV1GatesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1GatesIdParams defines parameters for PatchConsoleV1GatesId.
type PatchConsoleV1GatesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1GatesIdParams defines parameters for PostConsoleV1GatesId.
type PostConsoleV1GatesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1GatesIdArchiveParams defines parameters for PutConsoleV1GatesIdArchive.
type PutConsoleV1GatesIdArchiveParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1GatesIdDisableParams defines parameters for PutConsoleV1GatesIdDisable.
type PutConsoleV1GatesIdDisableParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1GatesIdEnableParams defines parameters for PutConsoleV1GatesIdEnable.
type PutConsoleV1GatesIdEnableParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1GatesIdLaunchParams defines parameters for PutConsoleV1GatesIdLaunch.
type PutConsoleV1GatesIdLaunchParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1GatesIdLoadPulseParams defines parameters for PostConsoleV1GatesIdLoadPulse.
type PostConsoleV1GatesIdLoadPulseParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1GatesIdOverridesParams defines parameters for DeleteConsoleV1GatesIdOverrides.
type DeleteConsoleV1GatesIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1GatesIdOverridesParams defines parameters for GetConsoleV1GatesIdOverrides.
type GetConsoleV1GatesIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1GatesIdOverridesParams defines parameters for PatchConsoleV1GatesIdOverrides.
type PatchConsoleV1GatesIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1GatesIdOverridesParams defines parameters for PostConsoleV1GatesIdOverrides.
type PostConsoleV1GatesIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1GatesIdRuleParams defines parameters for PostConsoleV1GatesIdRule.
type PostConsoleV1GatesIdRuleParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1GatesIdRulesParams defines parameters for GetConsoleV1GatesIdRules.
type GetConsoleV1GatesIdRulesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1GatesIdRulesParams defines parameters for PatchConsoleV1GatesIdRules.
type PatchConsoleV1GatesIdRulesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1GatesIdRulesParams defines parameters for PostConsoleV1GatesIdRules.
type PostConsoleV1GatesIdRulesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1GatesIdRulesRuleIDParams defines parameters for DeleteConsoleV1GatesIdRulesRuleID.
type DeleteConsoleV1GatesIdRulesRuleIDParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1GatesIdRulesRuleIDParams defines parameters for PatchConsoleV1GatesIdRulesRuleID.
type PatchConsoleV1GatesIdRulesRuleIDParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryParams defines parameters for GetConsoleV1GatesIdRulesRuleIDPulseLoadHistory.
type GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1GatesIdRulesRuleIDPulseResultsParams defines parameters for GetConsoleV1GatesIdRulesRuleIDPulseResults.
type GetConsoleV1GatesIdRulesRuleIDPulseResultsParams struct {
	// Cuped Whether to apply CUPED. Allowed values are "true" or "false".
	Cuped *string `form:"cuped,omitempty" json:"cuped,omitempty"`

	// Confidence Confidence interval (0-100)
	Confidence *string `form:"confidence,omitempty" json:"confidence,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1GatesIdVersionsParams defines parameters for GetConsoleV1GatesIdVersions.
type GetConsoleV1GatesIdVersionsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1HoldoutsParams defines parameters for GetConsoleV1Holdouts.
type GetConsoleV1HoldoutsParams struct {
	// CreatorName Name of the creator.
	CreatorName *string `form:"creatorName,omitempty" json:"creatorName,omitempty"`

	// CreatorID ID of the user who created the entity.
	CreatorID *string `form:"creatorID,omitempty" json:"creatorID,omitempty"`

	// Tags Filter by tags
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1HoldoutsParamsTags0 defines parameters for GetConsoleV1Holdouts.
type GetConsoleV1HoldoutsParamsTags0 = string

// GetConsoleV1HoldoutsParamsTags1 defines parameters for GetConsoleV1Holdouts.
type GetConsoleV1HoldoutsParamsTags1 = []string

// PostConsoleV1HoldoutsParams defines parameters for PostConsoleV1Holdouts.
type PostConsoleV1HoldoutsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1HoldoutsIdParams defines parameters for DeleteConsoleV1HoldoutsId.
type DeleteConsoleV1HoldoutsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1HoldoutsIdParams defines parameters for GetConsoleV1HoldoutsId.
type GetConsoleV1HoldoutsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1HoldoutsIdParams defines parameters for PatchConsoleV1HoldoutsId.
type PatchConsoleV1HoldoutsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1HoldoutsIdParams defines parameters for PostConsoleV1HoldoutsId.
type PostConsoleV1HoldoutsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1HoldoutsIdOverridesParams defines parameters for DeleteConsoleV1HoldoutsIdOverrides.
type DeleteConsoleV1HoldoutsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1HoldoutsIdOverridesParams defines parameters for GetConsoleV1HoldoutsIdOverrides.
type GetConsoleV1HoldoutsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1HoldoutsIdOverridesParams defines parameters for PatchConsoleV1HoldoutsIdOverrides.
type PatchConsoleV1HoldoutsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1HoldoutsIdOverridesParams defines parameters for PostConsoleV1HoldoutsIdOverrides.
type PostConsoleV1HoldoutsIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1IngestionParams defines parameters for DeleteConsoleV1Ingestion.
type DeleteConsoleV1IngestionParams struct {
	Type       DeleteConsoleV1IngestionParamsType    `form:"type" json:"type"`
	Dataset    DeleteConsoleV1IngestionParamsDataset `form:"dataset" json:"dataset"`
	SourceName *string                               `form:"source_name,omitempty" json:"source_name,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1IngestionParamsType defines parameters for DeleteConsoleV1Ingestion.
type DeleteConsoleV1IngestionParamsType string

// DeleteConsoleV1IngestionParamsDataset defines parameters for DeleteConsoleV1Ingestion.
type DeleteConsoleV1IngestionParamsDataset string

// GetConsoleV1IngestionParams defines parameters for GetConsoleV1Ingestion.
type GetConsoleV1IngestionParams struct {
	Type       GetConsoleV1IngestionParamsType    `form:"type" json:"type"`
	Dataset    GetConsoleV1IngestionParamsDataset `form:"dataset" json:"dataset"`
	SourceName *string                            `form:"source_name,omitempty" json:"source_name,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionParamsType defines parameters for GetConsoleV1Ingestion.
type GetConsoleV1IngestionParamsType string

// GetConsoleV1IngestionParamsDataset defines parameters for GetConsoleV1Ingestion.
type GetConsoleV1IngestionParamsDataset string

// PatchConsoleV1IngestionParams defines parameters for PatchConsoleV1Ingestion.
type PatchConsoleV1IngestionParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1IngestionParams defines parameters for PostConsoleV1Ingestion.
type PostConsoleV1IngestionParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1IngestionBackfillParams defines parameters for PostConsoleV1IngestionBackfill.
type PostConsoleV1IngestionBackfillParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1IngestionConnectionDatabricksParams defines parameters for PostConsoleV1IngestionConnectionDatabricks.
type PostConsoleV1IngestionConnectionDatabricksParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionEventsCountParams defines parameters for GetConsoleV1IngestionEventsCount.
type GetConsoleV1IngestionEventsCountParams struct {
	SourceName *string `form:"source_name,omitempty" json:"source_name,omitempty"`
	EventName  *string `form:"event_name,omitempty" json:"event_name,omitempty"`
	StartDate  string  `form:"start_date" json:"start_date"`
	EndDate    string  `form:"end_date" json:"end_date"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionEventsDeltaParams defines parameters for GetConsoleV1IngestionEventsDelta.
type GetConsoleV1IngestionEventsDeltaParams struct {
	SourceName *string `form:"source_name,omitempty" json:"source_name,omitempty"`
	EventName  *string `form:"event_name,omitempty" json:"event_name,omitempty"`
	StartDate  string  `form:"start_date" json:"start_date"`
	EndDate    string  `form:"end_date" json:"end_date"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionRunsParams defines parameters for GetConsoleV1IngestionRuns.
type GetConsoleV1IngestionRunsParams struct {
	Page *struct {
		union json.RawMessage
	} `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionRunsParamsPage0 defines parameters for GetConsoleV1IngestionRuns.
type GetConsoleV1IngestionRunsParamsPage0 = string

// GetConsoleV1IngestionRunsParamsPage1 defines parameters for GetConsoleV1IngestionRuns.
type GetConsoleV1IngestionRunsParamsPage1 = float32

// GetConsoleV1IngestionRunsIdParams defines parameters for GetConsoleV1IngestionRunsId.
type GetConsoleV1IngestionRunsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionScheduleParams defines parameters for GetConsoleV1IngestionSchedule.
type GetConsoleV1IngestionScheduleParams struct {
	Dataset GetConsoleV1IngestionScheduleParamsDataset `form:"dataset" json:"dataset"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionScheduleParamsDataset defines parameters for GetConsoleV1IngestionSchedule.
type GetConsoleV1IngestionScheduleParamsDataset string

// PostConsoleV1IngestionScheduleParams defines parameters for PostConsoleV1IngestionSchedule.
type PostConsoleV1IngestionScheduleParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionStatusParams defines parameters for GetConsoleV1IngestionStatus.
type GetConsoleV1IngestionStatusParams struct {
	StartDate string                                       `form:"startDate" json:"startDate"`
	EndDate   string                                       `form:"endDate" json:"endDate"`
	Source    *string                                      `form:"source,omitempty" json:"source,omitempty"`
	Dataset   *GetConsoleV1IngestionStatusParamsDataset    `form:"dataset,omitempty" json:"dataset,omitempty"`
	Status    *GetConsoleV1IngestionStatusParamsStatus     `form:"status,omitempty" json:"status,omitempty"`
	Statuses  *[]GetConsoleV1IngestionStatusParamsStatuses `form:"statuses,omitempty" json:"statuses,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1IngestionStatusParamsDataset defines parameters for GetConsoleV1IngestionStatus.
type GetConsoleV1IngestionStatusParamsDataset string

// GetConsoleV1IngestionStatusParamsStatus defines parameters for GetConsoleV1IngestionStatus.
type GetConsoleV1IngestionStatusParamsStatus string

// GetConsoleV1IngestionStatusParamsStatuses defines parameters for GetConsoleV1IngestionStatus.
type GetConsoleV1IngestionStatusParamsStatuses string

// GetConsoleV1KeysParams defines parameters for GetConsoleV1Keys.
type GetConsoleV1KeysParams struct {
	PrimaryTargetApp *string `form:"primaryTargetApp,omitempty" json:"primaryTargetApp,omitempty"`
	Environment      *string `form:"environment,omitempty" json:"environment,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1KeysParams defines parameters for PostConsoleV1Keys.
type PostConsoleV1KeysParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1KeysIdParams defines parameters for DeleteConsoleV1KeysId.
type DeleteConsoleV1KeysIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1KeysIdParams defines parameters for GetConsoleV1KeysId.
type GetConsoleV1KeysIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1KeysIdParams defines parameters for PatchConsoleV1KeysId.
type PatchConsoleV1KeysIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1KeysIdDeactivateParams defines parameters for PatchConsoleV1KeysIdDeactivate.
type PatchConsoleV1KeysIdDeactivateParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1KeysIdRotateParams defines parameters for PatchConsoleV1KeysIdRotate.
type PatchConsoleV1KeysIdRotateParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1LayersParams defines parameters for GetConsoleV1Layers.
type GetConsoleV1LayersParams struct {
	// CreatorName Name of the creator.
	CreatorName *string `form:"creatorName,omitempty" json:"creatorName,omitempty"`

	// CreatorID ID of the user who created the entity.
	CreatorID *string `form:"creatorID,omitempty" json:"creatorID,omitempty"`

	// Tags Filter by tags
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1LayersParamsTags0 defines parameters for GetConsoleV1Layers.
type GetConsoleV1LayersParamsTags0 = string

// GetConsoleV1LayersParamsTags1 defines parameters for GetConsoleV1Layers.
type GetConsoleV1LayersParamsTags1 = []string

// PostConsoleV1LayersParams defines parameters for PostConsoleV1Layers.
type PostConsoleV1LayersParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1LayersIdParams defines parameters for DeleteConsoleV1LayersId.
type DeleteConsoleV1LayersIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1LayersIdParams defines parameters for GetConsoleV1LayersId.
type GetConsoleV1LayersIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1LayersIdParams defines parameters for PatchConsoleV1LayersId.
type PatchConsoleV1LayersIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1LayersIdParams defines parameters for PostConsoleV1LayersId.
type PostConsoleV1LayersIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1LayersIdExperimentsParams defines parameters for GetConsoleV1LayersIdExperiments.
type GetConsoleV1LayersIdExperimentsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1LayersIdOverridesParams defines parameters for DeleteConsoleV1LayersIdOverrides.
type DeleteConsoleV1LayersIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1LayersIdOverridesParams defines parameters for GetConsoleV1LayersIdOverrides.
type GetConsoleV1LayersIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1LayersIdOverridesParams defines parameters for PatchConsoleV1LayersIdOverrides.
type PatchConsoleV1LayersIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1LayersIdOverridesParams defines parameters for PostConsoleV1LayersIdOverrides.
type PostConsoleV1LayersIdOverridesParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsParams defines parameters for GetConsoleV1Metrics.
type GetConsoleV1MetricsParams struct {
	// Id The unique identifier of the metric
	Id   string `form:"id" json:"id"`
	Date string `form:"date" json:"date"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1MetricsParams defines parameters for PostConsoleV1Metrics.
type PostConsoleV1MetricsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsListParams defines parameters for GetConsoleV1MetricsList.
type GetConsoleV1MetricsListParams struct {
	// ShowHiddenMetrics Should hidden metrics be returned: Allowed values are "true" or "false".
	ShowHiddenMetrics *GetConsoleV1MetricsListParamsShowHiddenMetrics `form:"showHiddenMetrics,omitempty" json:"showHiddenMetrics,omitempty"`

	// Tags Filter metrics based on a given tagID, found on /tags endpoint. Can be a single string or an array of strings.
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Filters Additional filters for metrics. Can be a string or an object with tags filter.
	Filters *string `form:"filters,omitempty" json:"filters,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsListParamsShowHiddenMetrics defines parameters for GetConsoleV1MetricsList.
type GetConsoleV1MetricsListParamsShowHiddenMetrics string

// GetConsoleV1MetricsListParamsTags0 defines parameters for GetConsoleV1MetricsList.
type GetConsoleV1MetricsListParamsTags0 = string

// GetConsoleV1MetricsListParamsTags1 defines parameters for GetConsoleV1MetricsList.
type GetConsoleV1MetricsListParamsTags1 = []string

// PostConsoleV1MetricsMetricSourceParams defines parameters for PostConsoleV1MetricsMetricSource.
type PostConsoleV1MetricsMetricSourceParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsMetricSourceListParams defines parameters for GetConsoleV1MetricsMetricSourceList.
type GetConsoleV1MetricsMetricSourceListParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1MetricsMetricSourceNameParams defines parameters for DeleteConsoleV1MetricsMetricSourceName.
type DeleteConsoleV1MetricsMetricSourceNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsMetricSourceNameParams defines parameters for GetConsoleV1MetricsMetricSourceName.
type GetConsoleV1MetricsMetricSourceNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1MetricsMetricSourceNameParams defines parameters for PostConsoleV1MetricsMetricSourceName.
type PostConsoleV1MetricsMetricSourceNameParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsMetricSourceNameMetricsParams defines parameters for GetConsoleV1MetricsMetricSourceNameMetrics.
type GetConsoleV1MetricsMetricSourceNameMetricsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsValuesParams defines parameters for GetConsoleV1MetricsValues.
type GetConsoleV1MetricsValuesParams struct {
	Date       string  `form:"date" json:"date"`
	MetricName *string `form:"metricName,omitempty" json:"metricName,omitempty"`
	MetricType *string `form:"metricType,omitempty" json:"metricType,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1MetricsIdParams defines parameters for DeleteConsoleV1MetricsId.
type DeleteConsoleV1MetricsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsIdParams defines parameters for GetConsoleV1MetricsId.
type GetConsoleV1MetricsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1MetricsIdParams defines parameters for PostConsoleV1MetricsId.
type PostConsoleV1MetricsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1MetricsIdCancelArchiveParams defines parameters for PutConsoleV1MetricsIdCancelArchive.
type PutConsoleV1MetricsIdCancelArchiveParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsIdExperimentsParams defines parameters for GetConsoleV1MetricsIdExperiments.
type GetConsoleV1MetricsIdExperimentsParams struct {
	// LayerID Which layer to place the experiment into.
	LayerID *string `form:"layerID,omitempty" json:"layerID,omitempty"`

	// IdType The idType the experiment will be performed on
	IdType *string `form:"idType,omitempty" json:"idType,omitempty"`

	// Status The current status of the experiment
	Status *struct {
		union json.RawMessage
	} `form:"status,omitempty" json:"status,omitempty"`

	// CreatorName Name of the creator.
	CreatorName *string `form:"creatorName,omitempty" json:"creatorName,omitempty"`

	// CreatorID ID of the user who created the entity.
	CreatorID *string `form:"creatorID,omitempty" json:"creatorID,omitempty"`

	// Tags Filter by tags
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1MetricsIdExperimentsParamsStatus0 defines parameters for GetConsoleV1MetricsIdExperiments.
type GetConsoleV1MetricsIdExperimentsParamsStatus0 = string

// GetConsoleV1MetricsIdExperimentsParamsStatus1 defines parameters for GetConsoleV1MetricsIdExperiments.
type GetConsoleV1MetricsIdExperimentsParamsStatus1 = []string

// GetConsoleV1MetricsIdExperimentsParamsTags0 defines parameters for GetConsoleV1MetricsIdExperiments.
type GetConsoleV1MetricsIdExperimentsParamsTags0 = string

// GetConsoleV1MetricsIdExperimentsParamsTags1 defines parameters for GetConsoleV1MetricsIdExperiments.
type GetConsoleV1MetricsIdExperimentsParamsTags1 = []string

// PostConsoleV1MetricsIdReloadParams defines parameters for PostConsoleV1MetricsIdReload.
type PostConsoleV1MetricsIdReloadParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1MetricsIdScheduleArchiveParams defines parameters for PutConsoleV1MetricsIdScheduleArchive.
type PutConsoleV1MetricsIdScheduleArchiveParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1MetricsIdUnarchiveParams defines parameters for PutConsoleV1MetricsIdUnarchive.
type PutConsoleV1MetricsIdUnarchiveParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ProjectParams defines parameters for GetConsoleV1Project.
type GetConsoleV1ProjectParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ProjectUsageBillingReportParams defines parameters for GetConsoleV1ProjectUsageBillingReport.
type GetConsoleV1ProjectUsageBillingReportParams struct {
	// Start Unix timestamp in ms
	Start *int `form:"start,omitempty" json:"start,omitempty"`

	// End Unix timestamp in ms
	End int `form:"end" json:"end"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ReleasePipelineTriggersParams defines parameters for GetConsoleV1ReleasePipelineTriggers.
type GetConsoleV1ReleasePipelineTriggersParams struct {
	// ReleasePipelineID Filter by Release Pipeline ID
	ReleasePipelineID *string `form:"releasePipelineID,omitempty" json:"releasePipelineID,omitempty"`

	// GateID Filter by Config ID
	GateID *string `form:"gateID,omitempty" json:"gateID,omitempty"`

	// DynamicConfigID Filter by Config ID
	DynamicConfigID *string `form:"dynamicConfigID,omitempty" json:"dynamicConfigID,omitempty"`

	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ReleasePipelineTriggersIdParams defines parameters for GetConsoleV1ReleasePipelineTriggersId.
type GetConsoleV1ReleasePipelineTriggersIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ReleasePipelinesParams defines parameters for GetConsoleV1ReleasePipelines.
type GetConsoleV1ReleasePipelinesParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ReleasePipelinesIdParams defines parameters for GetConsoleV1ReleasePipelinesId.
type GetConsoleV1ReleasePipelinesIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ReportsParams defines parameters for GetConsoleV1Reports.
type GetConsoleV1ReportsParams struct {
	// Type report type
	Type GetConsoleV1ReportsParamsType `form:"type" json:"type"`

	// Date date for the report
	Date string `form:"date" json:"date"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1ReportsParamsType defines parameters for GetConsoleV1Reports.
type GetConsoleV1ReportsParamsType string

// GetConsoleV1SegmentsParams defines parameters for GetConsoleV1Segments.
type GetConsoleV1SegmentsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1SegmentsParams defines parameters for PostConsoleV1Segments.
type PostConsoleV1SegmentsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1SegmentsIdParams defines parameters for DeleteConsoleV1SegmentsId.
type DeleteConsoleV1SegmentsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1SegmentsIdParams defines parameters for GetConsoleV1SegmentsId.
type GetConsoleV1SegmentsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PutConsoleV1SegmentsIdArchiveParams defines parameters for PutConsoleV1SegmentsIdArchive.
type PutConsoleV1SegmentsIdArchiveParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1SegmentsIdConditionalParams defines parameters for PostConsoleV1SegmentsIdConditional.
type PostConsoleV1SegmentsIdConditionalParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1SegmentsIdIdListParams defines parameters for DeleteConsoleV1SegmentsIdIdList.
type DeleteConsoleV1SegmentsIdIdListParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1SegmentsIdIdListParams defines parameters for GetConsoleV1SegmentsIdIdList.
type GetConsoleV1SegmentsIdIdListParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1SegmentsIdIdListParams defines parameters for PatchConsoleV1SegmentsIdIdList.
type PatchConsoleV1SegmentsIdIdListParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1SegmentsIdIdListResetParams defines parameters for PostConsoleV1SegmentsIdIdListReset.
type PostConsoleV1SegmentsIdIdListResetParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1TagsParams defines parameters for GetConsoleV1Tags.
type GetConsoleV1TagsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1TagsParams defines parameters for PostConsoleV1Tags.
type PostConsoleV1TagsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1TagsIdParams defines parameters for DeleteConsoleV1TagsId.
type DeleteConsoleV1TagsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1TagsIdParams defines parameters for GetConsoleV1TagsId.
type GetConsoleV1TagsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1TagsIdParams defines parameters for PatchConsoleV1TagsId.
type PatchConsoleV1TagsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1TargetAppParams defines parameters for GetConsoleV1TargetApp.
type GetConsoleV1TargetAppParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1TargetAppParams defines parameters for PatchConsoleV1TargetApp.
type PatchConsoleV1TargetAppParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1TargetAppParams defines parameters for PostConsoleV1TargetApp.
type PostConsoleV1TargetAppParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1TargetAppIdParams defines parameters for DeleteConsoleV1TargetAppId.
type DeleteConsoleV1TargetAppIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1TargetAppIdParams defines parameters for GetConsoleV1TargetAppId.
type GetConsoleV1TargetAppIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1TargetAppIdParams defines parameters for PatchConsoleV1TargetAppId.
type PatchConsoleV1TargetAppIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1UsersParams defines parameters for GetConsoleV1Users.
type GetConsoleV1UsersParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1UsersInviteParams defines parameters for PostConsoleV1UsersInvite.
type PostConsoleV1UsersInviteParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1UsersTeamsParams defines parameters for GetConsoleV1UsersTeams.
type GetConsoleV1UsersTeamsParams struct {
	// Limit Results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1UsersTeamsParams defines parameters for PostConsoleV1UsersTeams.
type PostConsoleV1UsersTeamsParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// DeleteConsoleV1UsersTeamsIdParams defines parameters for DeleteConsoleV1UsersTeamsId.
type DeleteConsoleV1UsersTeamsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1UsersTeamsIdParams defines parameters for GetConsoleV1UsersTeamsId.
type GetConsoleV1UsersTeamsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PatchConsoleV1UsersTeamsIdParams defines parameters for PatchConsoleV1UsersTeamsId.
type PatchConsoleV1UsersTeamsIdParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// GetConsoleV1UsersEmailParams defines parameters for GetConsoleV1UsersEmail.
type GetConsoleV1UsersEmailParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1UsersEmailParams defines parameters for PostConsoleV1UsersEmail.
type PostConsoleV1UsersEmailParams struct {
	// XRespectReviewSettings Optional header to respect review settings for mutation endpoints.
	XRespectReviewSettings *string `json:"x-respect-review-settings,omitempty"`
}

// PostConsoleV1AutotunesJSONRequestBody defines body for PostConsoleV1Autotunes for application/json ContentType.
type PostConsoleV1AutotunesJSONRequestBody = AutotuneCreateDto

// PatchConsoleV1AutotunesIdJSONRequestBody defines body for PatchConsoleV1AutotunesId for application/json ContentType.
type PatchConsoleV1AutotunesIdJSONRequestBody = AutotunePartialUpdateDto

// PostConsoleV1AutotunesIdJSONRequestBody defines body for PostConsoleV1AutotunesId for application/json ContentType.
type PostConsoleV1AutotunesIdJSONRequestBody = AutotuneFullUpdateDto

// PutConsoleV1AutotunesIdMakeDecisionJSONRequestBody defines body for PutConsoleV1AutotunesIdMakeDecision for application/json ContentType.
type PutConsoleV1AutotunesIdMakeDecisionJSONRequestBody = ExperimentStatusUpdateDto

// PostConsoleV1DynamicConfigsJSONRequestBody defines body for PostConsoleV1DynamicConfigs for application/json ContentType.
type PostConsoleV1DynamicConfigsJSONRequestBody = DynamicConfigCreateDto

// PatchConsoleV1DynamicConfigsIdJSONRequestBody defines body for PatchConsoleV1DynamicConfigsId for application/json ContentType.
type PatchConsoleV1DynamicConfigsIdJSONRequestBody = DynamicConfigPartialUpdateDto

// PostConsoleV1DynamicConfigsIdJSONRequestBody defines body for PostConsoleV1DynamicConfigsId for application/json ContentType.
type PostConsoleV1DynamicConfigsIdJSONRequestBody = DynamicConfigFullUpdateDto

// PostConsoleV1DynamicConfigsIdRuleJSONRequestBody defines body for PostConsoleV1DynamicConfigsIdRule for application/json ContentType.
type PostConsoleV1DynamicConfigsIdRuleJSONRequestBody = DynamicConfigRuleAddDto

// PatchConsoleV1DynamicConfigsIdRuleNameRuleNameJSONRequestBody defines body for PatchConsoleV1DynamicConfigsIdRuleNameRuleName for application/json ContentType.
type PatchConsoleV1DynamicConfigsIdRuleNameRuleNameJSONRequestBody = RuleUpdateDto

// PatchConsoleV1DynamicConfigsIdRuleRuleIdJSONRequestBody defines body for PatchConsoleV1DynamicConfigsIdRuleRuleId for application/json ContentType.
type PatchConsoleV1DynamicConfigsIdRuleRuleIdJSONRequestBody = RuleUpdateDto

// PatchConsoleV1DynamicConfigsIdRulesJSONRequestBody defines body for PatchConsoleV1DynamicConfigsIdRules for application/json ContentType.
type PatchConsoleV1DynamicConfigsIdRulesJSONRequestBody = MultiRuleUpdateDto

// PostConsoleV1DynamicConfigsIdRulesJSONRequestBody defines body for PostConsoleV1DynamicConfigsIdRules for application/json ContentType.
type PostConsoleV1DynamicConfigsIdRulesJSONRequestBody = MultiDynamicConfigRuleAddDto

// PostConsoleV1ExperimentsJSONRequestBody defines body for PostConsoleV1Experiments for application/json ContentType.
type PostConsoleV1ExperimentsJSONRequestBody = ExperimentCreateDto

// PatchConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody defines body for PatchConsoleV1ExperimentsAssignmentSourceName for application/json ContentType.
type PatchConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody = AssignmentSourcePartialUpdateDto

// PostConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody defines body for PostConsoleV1ExperimentsAssignmentSourceName for application/json ContentType.
type PostConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody = AssignmentSourceQueryUpdateDto

// PostConsoleV1ExperimentsAssignmentSourcesJSONRequestBody defines body for PostConsoleV1ExperimentsAssignmentSources for application/json ContentType.
type PostConsoleV1ExperimentsAssignmentSourcesJSONRequestBody = AssignmentSourceCreationDto

// PostConsoleV1ExperimentsEntityPropertiesJSONRequestBody defines body for PostConsoleV1ExperimentsEntityProperties for application/json ContentType.
type PostConsoleV1ExperimentsEntityPropertiesJSONRequestBody = EntityPropertySourceCreationDto

// PatchConsoleV1ExperimentsEntityPropertyNameJSONRequestBody defines body for PatchConsoleV1ExperimentsEntityPropertyName for application/json ContentType.
type PatchConsoleV1ExperimentsEntityPropertyNameJSONRequestBody = EntityPropertySourcePartialUpdateDto

// PostConsoleV1ExperimentsEntityPropertyNameJSONRequestBody defines body for PostConsoleV1ExperimentsEntityPropertyName for application/json ContentType.
type PostConsoleV1ExperimentsEntityPropertyNameJSONRequestBody = EntityPropertySourceQueryUpdateDto

// PatchConsoleV1ExperimentsIdJSONRequestBody defines body for PatchConsoleV1ExperimentsId for application/json ContentType.
type PatchConsoleV1ExperimentsIdJSONRequestBody = ExperimentPartialUpdateDto

// PostConsoleV1ExperimentsIdJSONRequestBody defines body for PostConsoleV1ExperimentsId for application/json ContentType.
type PostConsoleV1ExperimentsIdJSONRequestBody = ExperimentFullUpdateDto

// PutConsoleV1ExperimentsIdAbandonJSONRequestBody defines body for PutConsoleV1ExperimentsIdAbandon for application/json ContentType.
type PutConsoleV1ExperimentsIdAbandonJSONRequestBody = ExperimentAbandonDto

// PutConsoleV1ExperimentsIdArchiveJSONRequestBody defines body for PutConsoleV1ExperimentsIdArchive for application/json ContentType.
type PutConsoleV1ExperimentsIdArchiveJSONRequestBody = ExperimentArchiveDto

// PostConsoleV1ExperimentsIdDisableGroupsJSONRequestBody defines body for PostConsoleV1ExperimentsIdDisableGroups for application/json ContentType.
type PostConsoleV1ExperimentsIdDisableGroupsJSONRequestBody = EnableDisableGroupsDto

// PostConsoleV1ExperimentsIdEnableGroupsJSONRequestBody defines body for PostConsoleV1ExperimentsIdEnableGroups for application/json ContentType.
type PostConsoleV1ExperimentsIdEnableGroupsJSONRequestBody = EnableDisableGroupsDto

// PostConsoleV1ExperimentsIdLoadPulseJSONRequestBody defines body for PostConsoleV1ExperimentsIdLoadPulse for application/json ContentType.
type PostConsoleV1ExperimentsIdLoadPulseJSONRequestBody = EchidnaLoadPulseQueryDto

// PutConsoleV1ExperimentsIdMakeDecisionJSONRequestBody defines body for PutConsoleV1ExperimentsIdMakeDecision for application/json ContentType.
type PutConsoleV1ExperimentsIdMakeDecisionJSONRequestBody = ExperimentStatusUpdateDto

// PatchConsoleV1ExperimentsIdOverridesJSONRequestBody defines body for PatchConsoleV1ExperimentsIdOverrides for application/json ContentType.
type PatchConsoleV1ExperimentsIdOverridesJSONRequestBody = ExperimentOverridesDto

// PostConsoleV1ExperimentsIdOverridesJSONRequestBody defines body for PostConsoleV1ExperimentsIdOverrides for application/json ContentType.
type PostConsoleV1ExperimentsIdOverridesJSONRequestBody = ExperimentOverridesDto

// PutConsoleV1ExperimentsIdStartJSONRequestBody defines body for PutConsoleV1ExperimentsIdStart for application/json ContentType.
type PutConsoleV1ExperimentsIdStartJSONRequestBody = ExperimentStartDto

// PostConsoleV1GatesJSONRequestBody defines body for PostConsoleV1Gates for application/json ContentType.
type PostConsoleV1GatesJSONRequestBody = GateCreateDto

// PatchConsoleV1GatesIdJSONRequestBody defines body for PatchConsoleV1GatesId for application/json ContentType.
type PatchConsoleV1GatesIdJSONRequestBody = GatePartialUpdateDto

// PostConsoleV1GatesIdJSONRequestBody defines body for PostConsoleV1GatesId for application/json ContentType.
type PostConsoleV1GatesIdJSONRequestBody = GateFullUpdateDto

// PutConsoleV1GatesIdArchiveJSONRequestBody defines body for PutConsoleV1GatesIdArchive for application/json ContentType.
type PutConsoleV1GatesIdArchiveJSONRequestBody = ArchiveSchemaDto

// PostConsoleV1GatesIdLoadPulseJSONRequestBody defines body for PostConsoleV1GatesIdLoadPulse for application/json ContentType.
type PostConsoleV1GatesIdLoadPulseJSONRequestBody = EchidnaGateLoadPulseQueryDto

// PatchConsoleV1GatesIdOverridesJSONRequestBody defines body for PatchConsoleV1GatesIdOverrides for application/json ContentType.
type PatchConsoleV1GatesIdOverridesJSONRequestBody = UpdateOverridesContractDto

// PostConsoleV1GatesIdOverridesJSONRequestBody defines body for PostConsoleV1GatesIdOverrides for application/json ContentType.
type PostConsoleV1GatesIdOverridesJSONRequestBody = UpdateOverridesContractDto

// PostConsoleV1GatesIdRuleJSONRequestBody defines body for PostConsoleV1GatesIdRule for application/json ContentType.
type PostConsoleV1GatesIdRuleJSONRequestBody = RuleDto

// PatchConsoleV1GatesIdRulesJSONRequestBody defines body for PatchConsoleV1GatesIdRules for application/json ContentType.
type PatchConsoleV1GatesIdRulesJSONRequestBody = MultiRuleUpdateDto

// PostConsoleV1GatesIdRulesJSONRequestBody defines body for PostConsoleV1GatesIdRules for application/json ContentType.
type PostConsoleV1GatesIdRulesJSONRequestBody = MultiRuleDto

// PatchConsoleV1GatesIdRulesRuleIDJSONRequestBody defines body for PatchConsoleV1GatesIdRulesRuleID for application/json ContentType.
type PatchConsoleV1GatesIdRulesRuleIDJSONRequestBody = RuleUpdateDto

// PostConsoleV1HoldoutsJSONRequestBody defines body for PostConsoleV1Holdouts for application/json ContentType.
type PostConsoleV1HoldoutsJSONRequestBody = HoldoutCreateContractDto

// PatchConsoleV1HoldoutsIdJSONRequestBody defines body for PatchConsoleV1HoldoutsId for application/json ContentType.
type PatchConsoleV1HoldoutsIdJSONRequestBody = HoldoutPartialUpdateContractDto

// PostConsoleV1HoldoutsIdJSONRequestBody defines body for PostConsoleV1HoldoutsId for application/json ContentType.
type PostConsoleV1HoldoutsIdJSONRequestBody = HoldoutFullUpdateContractDto

// PatchConsoleV1HoldoutsIdOverridesJSONRequestBody defines body for PatchConsoleV1HoldoutsIdOverrides for application/json ContentType.
type PatchConsoleV1HoldoutsIdOverridesJSONRequestBody = UpdateOverridesContractDto

// PostConsoleV1HoldoutsIdOverridesJSONRequestBody defines body for PostConsoleV1HoldoutsIdOverrides for application/json ContentType.
type PostConsoleV1HoldoutsIdOverridesJSONRequestBody = UpdateOverridesContractDto

// PatchConsoleV1IngestionJSONRequestBody defines body for PatchConsoleV1Ingestion for application/json ContentType.
type PatchConsoleV1IngestionJSONRequestBody = IngestionUpdateContractDto

// PostConsoleV1IngestionJSONRequestBody defines body for PostConsoleV1Ingestion for application/json ContentType.
type PostConsoleV1IngestionJSONRequestBody = IngestionSourceCreateContractDto

// PostConsoleV1IngestionBackfillJSONRequestBody defines body for PostConsoleV1IngestionBackfill for application/json ContentType.
type PostConsoleV1IngestionBackfillJSONRequestBody = IngestionBackfillContractDto

// PostConsoleV1IngestionConnectionDatabricksJSONRequestBody defines body for PostConsoleV1IngestionConnectionDatabricks for application/json ContentType.
type PostConsoleV1IngestionConnectionDatabricksJSONRequestBody = IngestionCreateDatabricksConnectionContractDto

// PostConsoleV1IngestionScheduleJSONRequestBody defines body for PostConsoleV1IngestionSchedule for application/json ContentType.
type PostConsoleV1IngestionScheduleJSONRequestBody = IngestionScheduleUpdateContractDto

// PostConsoleV1KeysJSONRequestBody defines body for PostConsoleV1Keys for application/json ContentType.
type PostConsoleV1KeysJSONRequestBody = KeyCreateContractDto

// PatchConsoleV1KeysIdJSONRequestBody defines body for PatchConsoleV1KeysId for application/json ContentType.
type PatchConsoleV1KeysIdJSONRequestBody = KeyUpdateContractDto

// PostConsoleV1LayersJSONRequestBody defines body for PostConsoleV1Layers for application/json ContentType.
type PostConsoleV1LayersJSONRequestBody = LayerCreateContractDto

// PatchConsoleV1LayersIdJSONRequestBody defines body for PatchConsoleV1LayersId for application/json ContentType.
type PatchConsoleV1LayersIdJSONRequestBody = LayerPartialUpdateContractDto

// PostConsoleV1LayersIdJSONRequestBody defines body for PostConsoleV1LayersId for application/json ContentType.
type PostConsoleV1LayersIdJSONRequestBody = LayerFullUpdateContractDto

// PatchConsoleV1LayersIdOverridesJSONRequestBody defines body for PatchConsoleV1LayersIdOverrides for application/json ContentType.
type PatchConsoleV1LayersIdOverridesJSONRequestBody = LayerOverridesPatchDto

// PostConsoleV1LayersIdOverridesJSONRequestBody defines body for PostConsoleV1LayersIdOverrides for application/json ContentType.
type PostConsoleV1LayersIdOverridesJSONRequestBody = LayerOverridesDto

// PostConsoleV1MetricsJSONRequestBody defines body for PostConsoleV1Metrics for application/json ContentType.
type PostConsoleV1MetricsJSONRequestBody = MetricCreationContractDto

// PostConsoleV1MetricsMetricSourceJSONRequestBody defines body for PostConsoleV1MetricsMetricSource for application/json ContentType.
type PostConsoleV1MetricsMetricSourceJSONRequestBody = MetricSourceCreationContractDto

// PostConsoleV1MetricsMetricSourceNameJSONRequestBody defines body for PostConsoleV1MetricsMetricSourceName for application/json ContentType.
type PostConsoleV1MetricsMetricSourceNameJSONRequestBody = MetricSourceUpdateContractDto

// PostConsoleV1MetricsIdJSONRequestBody defines body for PostConsoleV1MetricsId for application/json ContentType.
type PostConsoleV1MetricsIdJSONRequestBody = MetricsUpdateContractDto

// PostConsoleV1SegmentsJSONRequestBody defines body for PostConsoleV1Segments for application/json ContentType.
type PostConsoleV1SegmentsJSONRequestBody = SegmentCreateContractDto

// PostConsoleV1SegmentsIdConditionalJSONRequestBody defines body for PostConsoleV1SegmentsIdConditional for application/json ContentType.
type PostConsoleV1SegmentsIdConditionalJSONRequestBody = SegmentRulesDto

// PatchConsoleV1SegmentsIdIdListJSONRequestBody defines body for PatchConsoleV1SegmentsIdIdList for application/json ContentType.
type PatchConsoleV1SegmentsIdIdListJSONRequestBody = SegmentIDListContractDto

// PostConsoleV1SegmentsIdIdListResetJSONRequestBody defines body for PostConsoleV1SegmentsIdIdListReset for application/json ContentType.
type PostConsoleV1SegmentsIdIdListResetJSONRequestBody = SegmentIDListResetContractDto

// PostConsoleV1TagsJSONRequestBody defines body for PostConsoleV1Tags for application/json ContentType.
type PostConsoleV1TagsJSONRequestBody = TagCreateDto

// PatchConsoleV1TagsIdJSONRequestBody defines body for PatchConsoleV1TagsId for application/json ContentType.
type PatchConsoleV1TagsIdJSONRequestBody = TagUpdateDto

// PatchConsoleV1TargetAppJSONRequestBody defines body for PatchConsoleV1TargetApp for application/json ContentType.
type PatchConsoleV1TargetAppJSONRequestBody = BulkAssignConfigTargetAppDto

// PostConsoleV1TargetAppJSONRequestBody defines body for PostConsoleV1TargetApp for application/json ContentType.
type PostConsoleV1TargetAppJSONRequestBody = TargetAppCreateDto

// PatchConsoleV1TargetAppIdJSONRequestBody defines body for PatchConsoleV1TargetAppId for application/json ContentType.
type PatchConsoleV1TargetAppIdJSONRequestBody = UpdateTargetAppDto

// PostConsoleV1UsersInviteJSONRequestBody defines body for PostConsoleV1UsersInvite for application/json ContentType.
type PostConsoleV1UsersInviteJSONRequestBody = UserInvitesDto

// PostConsoleV1UsersTeamsJSONRequestBody defines body for PostConsoleV1UsersTeams for application/json ContentType.
type PostConsoleV1UsersTeamsJSONRequestBody = TeamCreationDto

// PatchConsoleV1UsersTeamsIdJSONRequestBody defines body for PatchConsoleV1UsersTeamsId for application/json ContentType.
type PatchConsoleV1UsersTeamsIdJSONRequestBody = TeamPartialUpdateDto

// PostConsoleV1UsersEmailJSONRequestBody defines body for PostConsoleV1UsersEmail for application/json ContentType.
type PostConsoleV1UsersEmailJSONRequestBody = UserUpdateDto

// AsDynamicConfigCreateDtoRulesConditionsTargetValue0 returns the union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as a DynamicConfigCreateDtoRulesConditionsTargetValue0
func (t DynamicConfigCreateDto_Rules_Conditions_TargetValue) AsDynamicConfigCreateDtoRulesConditionsTargetValue0() (DynamicConfigCreateDtoRulesConditionsTargetValue0, error) {
	var body DynamicConfigCreateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigCreateDtoRulesConditionsTargetValue0 overwrites any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as the provided DynamicConfigCreateDtoRulesConditionsTargetValue0
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) FromDynamicConfigCreateDtoRulesConditionsTargetValue0(v DynamicConfigCreateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigCreateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigCreateDtoRulesConditionsTargetValue0
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) MergeDynamicConfigCreateDtoRulesConditionsTargetValue0(v DynamicConfigCreateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigCreateDtoRulesConditionsTargetValue1 returns the union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as a DynamicConfigCreateDtoRulesConditionsTargetValue1
func (t DynamicConfigCreateDto_Rules_Conditions_TargetValue) AsDynamicConfigCreateDtoRulesConditionsTargetValue1() (DynamicConfigCreateDtoRulesConditionsTargetValue1, error) {
	var body DynamicConfigCreateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigCreateDtoRulesConditionsTargetValue1 overwrites any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as the provided DynamicConfigCreateDtoRulesConditionsTargetValue1
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) FromDynamicConfigCreateDtoRulesConditionsTargetValue1(v DynamicConfigCreateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigCreateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigCreateDtoRulesConditionsTargetValue1
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) MergeDynamicConfigCreateDtoRulesConditionsTargetValue1(v DynamicConfigCreateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigCreateDtoRulesConditionsTargetValue2 returns the union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as a DynamicConfigCreateDtoRulesConditionsTargetValue2
func (t DynamicConfigCreateDto_Rules_Conditions_TargetValue) AsDynamicConfigCreateDtoRulesConditionsTargetValue2() (DynamicConfigCreateDtoRulesConditionsTargetValue2, error) {
	var body DynamicConfigCreateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigCreateDtoRulesConditionsTargetValue2 overwrites any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as the provided DynamicConfigCreateDtoRulesConditionsTargetValue2
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) FromDynamicConfigCreateDtoRulesConditionsTargetValue2(v DynamicConfigCreateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigCreateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigCreateDtoRulesConditionsTargetValue2
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) MergeDynamicConfigCreateDtoRulesConditionsTargetValue2(v DynamicConfigCreateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigCreateDtoRulesConditionsTargetValue3 returns the union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as a DynamicConfigCreateDtoRulesConditionsTargetValue3
func (t DynamicConfigCreateDto_Rules_Conditions_TargetValue) AsDynamicConfigCreateDtoRulesConditionsTargetValue3() (DynamicConfigCreateDtoRulesConditionsTargetValue3, error) {
	var body DynamicConfigCreateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigCreateDtoRulesConditionsTargetValue3 overwrites any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue as the provided DynamicConfigCreateDtoRulesConditionsTargetValue3
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) FromDynamicConfigCreateDtoRulesConditionsTargetValue3(v DynamicConfigCreateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigCreateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the DynamicConfigCreateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigCreateDtoRulesConditionsTargetValue3
func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) MergeDynamicConfigCreateDtoRulesConditionsTargetValue3(v DynamicConfigCreateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigCreateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigCreateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigCreateDtoTargetApps0 returns the union data inside the DynamicConfigCreateDto_TargetApps as a DynamicConfigCreateDtoTargetApps0
func (t DynamicConfigCreateDto_TargetApps) AsDynamicConfigCreateDtoTargetApps0() (DynamicConfigCreateDtoTargetApps0, error) {
	var body DynamicConfigCreateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigCreateDtoTargetApps0 overwrites any union data inside the DynamicConfigCreateDto_TargetApps as the provided DynamicConfigCreateDtoTargetApps0
func (t *DynamicConfigCreateDto_TargetApps) FromDynamicConfigCreateDtoTargetApps0(v DynamicConfigCreateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigCreateDtoTargetApps0 performs a merge with any union data inside the DynamicConfigCreateDto_TargetApps, using the provided DynamicConfigCreateDtoTargetApps0
func (t *DynamicConfigCreateDto_TargetApps) MergeDynamicConfigCreateDtoTargetApps0(v DynamicConfigCreateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigCreateDtoTargetApps1 returns the union data inside the DynamicConfigCreateDto_TargetApps as a DynamicConfigCreateDtoTargetApps1
func (t DynamicConfigCreateDto_TargetApps) AsDynamicConfigCreateDtoTargetApps1() (DynamicConfigCreateDtoTargetApps1, error) {
	var body DynamicConfigCreateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigCreateDtoTargetApps1 overwrites any union data inside the DynamicConfigCreateDto_TargetApps as the provided DynamicConfigCreateDtoTargetApps1
func (t *DynamicConfigCreateDto_TargetApps) FromDynamicConfigCreateDtoTargetApps1(v DynamicConfigCreateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigCreateDtoTargetApps1 performs a merge with any union data inside the DynamicConfigCreateDto_TargetApps, using the provided DynamicConfigCreateDtoTargetApps1
func (t *DynamicConfigCreateDto_TargetApps) MergeDynamicConfigCreateDtoTargetApps1(v DynamicConfigCreateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigCreateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigCreateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigDtoRulesConditionsTargetValue0 returns the union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as a DynamicConfigDtoRulesConditionsTargetValue0
func (t DynamicConfigDto_Rules_Conditions_TargetValue) AsDynamicConfigDtoRulesConditionsTargetValue0() (DynamicConfigDtoRulesConditionsTargetValue0, error) {
	var body DynamicConfigDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigDtoRulesConditionsTargetValue0 overwrites any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as the provided DynamicConfigDtoRulesConditionsTargetValue0
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) FromDynamicConfigDtoRulesConditionsTargetValue0(v DynamicConfigDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigDtoRulesConditionsTargetValue0 performs a merge with any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue, using the provided DynamicConfigDtoRulesConditionsTargetValue0
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) MergeDynamicConfigDtoRulesConditionsTargetValue0(v DynamicConfigDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigDtoRulesConditionsTargetValue1 returns the union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as a DynamicConfigDtoRulesConditionsTargetValue1
func (t DynamicConfigDto_Rules_Conditions_TargetValue) AsDynamicConfigDtoRulesConditionsTargetValue1() (DynamicConfigDtoRulesConditionsTargetValue1, error) {
	var body DynamicConfigDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigDtoRulesConditionsTargetValue1 overwrites any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as the provided DynamicConfigDtoRulesConditionsTargetValue1
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) FromDynamicConfigDtoRulesConditionsTargetValue1(v DynamicConfigDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigDtoRulesConditionsTargetValue1 performs a merge with any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue, using the provided DynamicConfigDtoRulesConditionsTargetValue1
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) MergeDynamicConfigDtoRulesConditionsTargetValue1(v DynamicConfigDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigDtoRulesConditionsTargetValue2 returns the union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as a DynamicConfigDtoRulesConditionsTargetValue2
func (t DynamicConfigDto_Rules_Conditions_TargetValue) AsDynamicConfigDtoRulesConditionsTargetValue2() (DynamicConfigDtoRulesConditionsTargetValue2, error) {
	var body DynamicConfigDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigDtoRulesConditionsTargetValue2 overwrites any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as the provided DynamicConfigDtoRulesConditionsTargetValue2
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) FromDynamicConfigDtoRulesConditionsTargetValue2(v DynamicConfigDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigDtoRulesConditionsTargetValue2 performs a merge with any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue, using the provided DynamicConfigDtoRulesConditionsTargetValue2
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) MergeDynamicConfigDtoRulesConditionsTargetValue2(v DynamicConfigDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigDtoRulesConditionsTargetValue3 returns the union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as a DynamicConfigDtoRulesConditionsTargetValue3
func (t DynamicConfigDto_Rules_Conditions_TargetValue) AsDynamicConfigDtoRulesConditionsTargetValue3() (DynamicConfigDtoRulesConditionsTargetValue3, error) {
	var body DynamicConfigDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigDtoRulesConditionsTargetValue3 overwrites any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue as the provided DynamicConfigDtoRulesConditionsTargetValue3
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) FromDynamicConfigDtoRulesConditionsTargetValue3(v DynamicConfigDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigDtoRulesConditionsTargetValue3 performs a merge with any union data inside the DynamicConfigDto_Rules_Conditions_TargetValue, using the provided DynamicConfigDtoRulesConditionsTargetValue3
func (t *DynamicConfigDto_Rules_Conditions_TargetValue) MergeDynamicConfigDtoRulesConditionsTargetValue3(v DynamicConfigDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigDtoTargetApps0 returns the union data inside the DynamicConfigDto_TargetApps as a DynamicConfigDtoTargetApps0
func (t DynamicConfigDto_TargetApps) AsDynamicConfigDtoTargetApps0() (DynamicConfigDtoTargetApps0, error) {
	var body DynamicConfigDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigDtoTargetApps0 overwrites any union data inside the DynamicConfigDto_TargetApps as the provided DynamicConfigDtoTargetApps0
func (t *DynamicConfigDto_TargetApps) FromDynamicConfigDtoTargetApps0(v DynamicConfigDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigDtoTargetApps0 performs a merge with any union data inside the DynamicConfigDto_TargetApps, using the provided DynamicConfigDtoTargetApps0
func (t *DynamicConfigDto_TargetApps) MergeDynamicConfigDtoTargetApps0(v DynamicConfigDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigDtoTargetApps1 returns the union data inside the DynamicConfigDto_TargetApps as a DynamicConfigDtoTargetApps1
func (t DynamicConfigDto_TargetApps) AsDynamicConfigDtoTargetApps1() (DynamicConfigDtoTargetApps1, error) {
	var body DynamicConfigDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigDtoTargetApps1 overwrites any union data inside the DynamicConfigDto_TargetApps as the provided DynamicConfigDtoTargetApps1
func (t *DynamicConfigDto_TargetApps) FromDynamicConfigDtoTargetApps1(v DynamicConfigDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigDtoTargetApps1 performs a merge with any union data inside the DynamicConfigDto_TargetApps, using the provided DynamicConfigDtoTargetApps1
func (t *DynamicConfigDto_TargetApps) MergeDynamicConfigDtoTargetApps1(v DynamicConfigDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue0 returns the union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigFullUpdateDtoRulesConditionsTargetValue0
func (t DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue0() (DynamicConfigFullUpdateDtoRulesConditionsTargetValue0, error) {
	var body DynamicConfigFullUpdateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue0 overwrites any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue0
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue0(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue0
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue0(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue1 returns the union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigFullUpdateDtoRulesConditionsTargetValue1
func (t DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue1() (DynamicConfigFullUpdateDtoRulesConditionsTargetValue1, error) {
	var body DynamicConfigFullUpdateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue1 overwrites any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue1
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue1(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue1
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue1(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue2 returns the union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigFullUpdateDtoRulesConditionsTargetValue2
func (t DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue2() (DynamicConfigFullUpdateDtoRulesConditionsTargetValue2, error) {
	var body DynamicConfigFullUpdateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue2 overwrites any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue2
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue2(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue2
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue2(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue3 returns the union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigFullUpdateDtoRulesConditionsTargetValue3
func (t DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigFullUpdateDtoRulesConditionsTargetValue3() (DynamicConfigFullUpdateDtoRulesConditionsTargetValue3, error) {
	var body DynamicConfigFullUpdateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue3 overwrites any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue3
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigFullUpdateDtoRulesConditionsTargetValue3(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigFullUpdateDtoRulesConditionsTargetValue3
func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigFullUpdateDtoRulesConditionsTargetValue3(v DynamicConfigFullUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigFullUpdateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigFullUpdateDtoTargetApps0 returns the union data inside the DynamicConfigFullUpdateDto_TargetApps as a DynamicConfigFullUpdateDtoTargetApps0
func (t DynamicConfigFullUpdateDto_TargetApps) AsDynamicConfigFullUpdateDtoTargetApps0() (DynamicConfigFullUpdateDtoTargetApps0, error) {
	var body DynamicConfigFullUpdateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigFullUpdateDtoTargetApps0 overwrites any union data inside the DynamicConfigFullUpdateDto_TargetApps as the provided DynamicConfigFullUpdateDtoTargetApps0
func (t *DynamicConfigFullUpdateDto_TargetApps) FromDynamicConfigFullUpdateDtoTargetApps0(v DynamicConfigFullUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigFullUpdateDtoTargetApps0 performs a merge with any union data inside the DynamicConfigFullUpdateDto_TargetApps, using the provided DynamicConfigFullUpdateDtoTargetApps0
func (t *DynamicConfigFullUpdateDto_TargetApps) MergeDynamicConfigFullUpdateDtoTargetApps0(v DynamicConfigFullUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigFullUpdateDtoTargetApps1 returns the union data inside the DynamicConfigFullUpdateDto_TargetApps as a DynamicConfigFullUpdateDtoTargetApps1
func (t DynamicConfigFullUpdateDto_TargetApps) AsDynamicConfigFullUpdateDtoTargetApps1() (DynamicConfigFullUpdateDtoTargetApps1, error) {
	var body DynamicConfigFullUpdateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigFullUpdateDtoTargetApps1 overwrites any union data inside the DynamicConfigFullUpdateDto_TargetApps as the provided DynamicConfigFullUpdateDtoTargetApps1
func (t *DynamicConfigFullUpdateDto_TargetApps) FromDynamicConfigFullUpdateDtoTargetApps1(v DynamicConfigFullUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigFullUpdateDtoTargetApps1 performs a merge with any union data inside the DynamicConfigFullUpdateDto_TargetApps, using the provided DynamicConfigFullUpdateDtoTargetApps1
func (t *DynamicConfigFullUpdateDto_TargetApps) MergeDynamicConfigFullUpdateDtoTargetApps1(v DynamicConfigFullUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigFullUpdateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigFullUpdateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue0 returns the union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0
func (t DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue0() (DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0, error) {
	var body DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue0 overwrites any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue0(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue0(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue1 returns the union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1
func (t DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue1() (DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1, error) {
	var body DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue1 overwrites any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue1(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue1(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue2 returns the union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2
func (t DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue2() (DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2, error) {
	var body DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue2 overwrites any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue2(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue2(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue3 returns the union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as a DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3
func (t DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) AsDynamicConfigPartialUpdateDtoRulesConditionsTargetValue3() (DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3, error) {
	var body DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue3 overwrites any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue as the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) FromDynamicConfigPartialUpdateDtoRulesConditionsTargetValue3(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue, using the provided DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3
func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) MergeDynamicConfigPartialUpdateDtoRulesConditionsTargetValue3(v DynamicConfigPartialUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigPartialUpdateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigPartialUpdateDtoTargetApps0 returns the union data inside the DynamicConfigPartialUpdateDto_TargetApps as a DynamicConfigPartialUpdateDtoTargetApps0
func (t DynamicConfigPartialUpdateDto_TargetApps) AsDynamicConfigPartialUpdateDtoTargetApps0() (DynamicConfigPartialUpdateDtoTargetApps0, error) {
	var body DynamicConfigPartialUpdateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigPartialUpdateDtoTargetApps0 overwrites any union data inside the DynamicConfigPartialUpdateDto_TargetApps as the provided DynamicConfigPartialUpdateDtoTargetApps0
func (t *DynamicConfigPartialUpdateDto_TargetApps) FromDynamicConfigPartialUpdateDtoTargetApps0(v DynamicConfigPartialUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigPartialUpdateDtoTargetApps0 performs a merge with any union data inside the DynamicConfigPartialUpdateDto_TargetApps, using the provided DynamicConfigPartialUpdateDtoTargetApps0
func (t *DynamicConfigPartialUpdateDto_TargetApps) MergeDynamicConfigPartialUpdateDtoTargetApps0(v DynamicConfigPartialUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigPartialUpdateDtoTargetApps1 returns the union data inside the DynamicConfigPartialUpdateDto_TargetApps as a DynamicConfigPartialUpdateDtoTargetApps1
func (t DynamicConfigPartialUpdateDto_TargetApps) AsDynamicConfigPartialUpdateDtoTargetApps1() (DynamicConfigPartialUpdateDtoTargetApps1, error) {
	var body DynamicConfigPartialUpdateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigPartialUpdateDtoTargetApps1 overwrites any union data inside the DynamicConfigPartialUpdateDto_TargetApps as the provided DynamicConfigPartialUpdateDtoTargetApps1
func (t *DynamicConfigPartialUpdateDto_TargetApps) FromDynamicConfigPartialUpdateDtoTargetApps1(v DynamicConfigPartialUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigPartialUpdateDtoTargetApps1 performs a merge with any union data inside the DynamicConfigPartialUpdateDto_TargetApps, using the provided DynamicConfigPartialUpdateDtoTargetApps1
func (t *DynamicConfigPartialUpdateDto_TargetApps) MergeDynamicConfigPartialUpdateDtoTargetApps1(v DynamicConfigPartialUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigPartialUpdateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigPartialUpdateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigRuleAddDtoConditionsTargetValue0 returns the union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as a DynamicConfigRuleAddDtoConditionsTargetValue0
func (t DynamicConfigRuleAddDto_Conditions_TargetValue) AsDynamicConfigRuleAddDtoConditionsTargetValue0() (DynamicConfigRuleAddDtoConditionsTargetValue0, error) {
	var body DynamicConfigRuleAddDtoConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleAddDtoConditionsTargetValue0 overwrites any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as the provided DynamicConfigRuleAddDtoConditionsTargetValue0
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) FromDynamicConfigRuleAddDtoConditionsTargetValue0(v DynamicConfigRuleAddDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleAddDtoConditionsTargetValue0 performs a merge with any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue, using the provided DynamicConfigRuleAddDtoConditionsTargetValue0
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) MergeDynamicConfigRuleAddDtoConditionsTargetValue0(v DynamicConfigRuleAddDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRuleAddDtoConditionsTargetValue1 returns the union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as a DynamicConfigRuleAddDtoConditionsTargetValue1
func (t DynamicConfigRuleAddDto_Conditions_TargetValue) AsDynamicConfigRuleAddDtoConditionsTargetValue1() (DynamicConfigRuleAddDtoConditionsTargetValue1, error) {
	var body DynamicConfigRuleAddDtoConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleAddDtoConditionsTargetValue1 overwrites any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as the provided DynamicConfigRuleAddDtoConditionsTargetValue1
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) FromDynamicConfigRuleAddDtoConditionsTargetValue1(v DynamicConfigRuleAddDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleAddDtoConditionsTargetValue1 performs a merge with any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue, using the provided DynamicConfigRuleAddDtoConditionsTargetValue1
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) MergeDynamicConfigRuleAddDtoConditionsTargetValue1(v DynamicConfigRuleAddDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRuleAddDtoConditionsTargetValue2 returns the union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as a DynamicConfigRuleAddDtoConditionsTargetValue2
func (t DynamicConfigRuleAddDto_Conditions_TargetValue) AsDynamicConfigRuleAddDtoConditionsTargetValue2() (DynamicConfigRuleAddDtoConditionsTargetValue2, error) {
	var body DynamicConfigRuleAddDtoConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleAddDtoConditionsTargetValue2 overwrites any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as the provided DynamicConfigRuleAddDtoConditionsTargetValue2
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) FromDynamicConfigRuleAddDtoConditionsTargetValue2(v DynamicConfigRuleAddDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleAddDtoConditionsTargetValue2 performs a merge with any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue, using the provided DynamicConfigRuleAddDtoConditionsTargetValue2
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) MergeDynamicConfigRuleAddDtoConditionsTargetValue2(v DynamicConfigRuleAddDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRuleAddDtoConditionsTargetValue3 returns the union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as a DynamicConfigRuleAddDtoConditionsTargetValue3
func (t DynamicConfigRuleAddDto_Conditions_TargetValue) AsDynamicConfigRuleAddDtoConditionsTargetValue3() (DynamicConfigRuleAddDtoConditionsTargetValue3, error) {
	var body DynamicConfigRuleAddDtoConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleAddDtoConditionsTargetValue3 overwrites any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue as the provided DynamicConfigRuleAddDtoConditionsTargetValue3
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) FromDynamicConfigRuleAddDtoConditionsTargetValue3(v DynamicConfigRuleAddDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleAddDtoConditionsTargetValue3 performs a merge with any union data inside the DynamicConfigRuleAddDto_Conditions_TargetValue, using the provided DynamicConfigRuleAddDtoConditionsTargetValue3
func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) MergeDynamicConfigRuleAddDtoConditionsTargetValue3(v DynamicConfigRuleAddDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigRuleAddDto_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigRuleAddDto_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigRuleDtoConditionsTargetValue0 returns the union data inside the DynamicConfigRuleDto_Conditions_TargetValue as a DynamicConfigRuleDtoConditionsTargetValue0
func (t DynamicConfigRuleDto_Conditions_TargetValue) AsDynamicConfigRuleDtoConditionsTargetValue0() (DynamicConfigRuleDtoConditionsTargetValue0, error) {
	var body DynamicConfigRuleDtoConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleDtoConditionsTargetValue0 overwrites any union data inside the DynamicConfigRuleDto_Conditions_TargetValue as the provided DynamicConfigRuleDtoConditionsTargetValue0
func (t *DynamicConfigRuleDto_Conditions_TargetValue) FromDynamicConfigRuleDtoConditionsTargetValue0(v DynamicConfigRuleDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleDtoConditionsTargetValue0 performs a merge with any union data inside the DynamicConfigRuleDto_Conditions_TargetValue, using the provided DynamicConfigRuleDtoConditionsTargetValue0
func (t *DynamicConfigRuleDto_Conditions_TargetValue) MergeDynamicConfigRuleDtoConditionsTargetValue0(v DynamicConfigRuleDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRuleDtoConditionsTargetValue1 returns the union data inside the DynamicConfigRuleDto_Conditions_TargetValue as a DynamicConfigRuleDtoConditionsTargetValue1
func (t DynamicConfigRuleDto_Conditions_TargetValue) AsDynamicConfigRuleDtoConditionsTargetValue1() (DynamicConfigRuleDtoConditionsTargetValue1, error) {
	var body DynamicConfigRuleDtoConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleDtoConditionsTargetValue1 overwrites any union data inside the DynamicConfigRuleDto_Conditions_TargetValue as the provided DynamicConfigRuleDtoConditionsTargetValue1
func (t *DynamicConfigRuleDto_Conditions_TargetValue) FromDynamicConfigRuleDtoConditionsTargetValue1(v DynamicConfigRuleDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleDtoConditionsTargetValue1 performs a merge with any union data inside the DynamicConfigRuleDto_Conditions_TargetValue, using the provided DynamicConfigRuleDtoConditionsTargetValue1
func (t *DynamicConfigRuleDto_Conditions_TargetValue) MergeDynamicConfigRuleDtoConditionsTargetValue1(v DynamicConfigRuleDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRuleDtoConditionsTargetValue2 returns the union data inside the DynamicConfigRuleDto_Conditions_TargetValue as a DynamicConfigRuleDtoConditionsTargetValue2
func (t DynamicConfigRuleDto_Conditions_TargetValue) AsDynamicConfigRuleDtoConditionsTargetValue2() (DynamicConfigRuleDtoConditionsTargetValue2, error) {
	var body DynamicConfigRuleDtoConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleDtoConditionsTargetValue2 overwrites any union data inside the DynamicConfigRuleDto_Conditions_TargetValue as the provided DynamicConfigRuleDtoConditionsTargetValue2
func (t *DynamicConfigRuleDto_Conditions_TargetValue) FromDynamicConfigRuleDtoConditionsTargetValue2(v DynamicConfigRuleDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleDtoConditionsTargetValue2 performs a merge with any union data inside the DynamicConfigRuleDto_Conditions_TargetValue, using the provided DynamicConfigRuleDtoConditionsTargetValue2
func (t *DynamicConfigRuleDto_Conditions_TargetValue) MergeDynamicConfigRuleDtoConditionsTargetValue2(v DynamicConfigRuleDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRuleDtoConditionsTargetValue3 returns the union data inside the DynamicConfigRuleDto_Conditions_TargetValue as a DynamicConfigRuleDtoConditionsTargetValue3
func (t DynamicConfigRuleDto_Conditions_TargetValue) AsDynamicConfigRuleDtoConditionsTargetValue3() (DynamicConfigRuleDtoConditionsTargetValue3, error) {
	var body DynamicConfigRuleDtoConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRuleDtoConditionsTargetValue3 overwrites any union data inside the DynamicConfigRuleDto_Conditions_TargetValue as the provided DynamicConfigRuleDtoConditionsTargetValue3
func (t *DynamicConfigRuleDto_Conditions_TargetValue) FromDynamicConfigRuleDtoConditionsTargetValue3(v DynamicConfigRuleDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRuleDtoConditionsTargetValue3 performs a merge with any union data inside the DynamicConfigRuleDto_Conditions_TargetValue, using the provided DynamicConfigRuleDtoConditionsTargetValue3
func (t *DynamicConfigRuleDto_Conditions_TargetValue) MergeDynamicConfigRuleDtoConditionsTargetValue3(v DynamicConfigRuleDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigRuleDto_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigRuleDto_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDynamicConfigRulesDtoRulesConditionsTargetValue0 returns the union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as a DynamicConfigRulesDtoRulesConditionsTargetValue0
func (t DynamicConfigRulesDto_Rules_Conditions_TargetValue) AsDynamicConfigRulesDtoRulesConditionsTargetValue0() (DynamicConfigRulesDtoRulesConditionsTargetValue0, error) {
	var body DynamicConfigRulesDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRulesDtoRulesConditionsTargetValue0 overwrites any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as the provided DynamicConfigRulesDtoRulesConditionsTargetValue0
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) FromDynamicConfigRulesDtoRulesConditionsTargetValue0(v DynamicConfigRulesDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRulesDtoRulesConditionsTargetValue0 performs a merge with any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue, using the provided DynamicConfigRulesDtoRulesConditionsTargetValue0
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) MergeDynamicConfigRulesDtoRulesConditionsTargetValue0(v DynamicConfigRulesDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRulesDtoRulesConditionsTargetValue1 returns the union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as a DynamicConfigRulesDtoRulesConditionsTargetValue1
func (t DynamicConfigRulesDto_Rules_Conditions_TargetValue) AsDynamicConfigRulesDtoRulesConditionsTargetValue1() (DynamicConfigRulesDtoRulesConditionsTargetValue1, error) {
	var body DynamicConfigRulesDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRulesDtoRulesConditionsTargetValue1 overwrites any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as the provided DynamicConfigRulesDtoRulesConditionsTargetValue1
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) FromDynamicConfigRulesDtoRulesConditionsTargetValue1(v DynamicConfigRulesDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRulesDtoRulesConditionsTargetValue1 performs a merge with any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue, using the provided DynamicConfigRulesDtoRulesConditionsTargetValue1
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) MergeDynamicConfigRulesDtoRulesConditionsTargetValue1(v DynamicConfigRulesDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRulesDtoRulesConditionsTargetValue2 returns the union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as a DynamicConfigRulesDtoRulesConditionsTargetValue2
func (t DynamicConfigRulesDto_Rules_Conditions_TargetValue) AsDynamicConfigRulesDtoRulesConditionsTargetValue2() (DynamicConfigRulesDtoRulesConditionsTargetValue2, error) {
	var body DynamicConfigRulesDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRulesDtoRulesConditionsTargetValue2 overwrites any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as the provided DynamicConfigRulesDtoRulesConditionsTargetValue2
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) FromDynamicConfigRulesDtoRulesConditionsTargetValue2(v DynamicConfigRulesDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRulesDtoRulesConditionsTargetValue2 performs a merge with any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue, using the provided DynamicConfigRulesDtoRulesConditionsTargetValue2
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) MergeDynamicConfigRulesDtoRulesConditionsTargetValue2(v DynamicConfigRulesDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDynamicConfigRulesDtoRulesConditionsTargetValue3 returns the union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as a DynamicConfigRulesDtoRulesConditionsTargetValue3
func (t DynamicConfigRulesDto_Rules_Conditions_TargetValue) AsDynamicConfigRulesDtoRulesConditionsTargetValue3() (DynamicConfigRulesDtoRulesConditionsTargetValue3, error) {
	var body DynamicConfigRulesDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDynamicConfigRulesDtoRulesConditionsTargetValue3 overwrites any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue as the provided DynamicConfigRulesDtoRulesConditionsTargetValue3
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) FromDynamicConfigRulesDtoRulesConditionsTargetValue3(v DynamicConfigRulesDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDynamicConfigRulesDtoRulesConditionsTargetValue3 performs a merge with any union data inside the DynamicConfigRulesDto_Rules_Conditions_TargetValue, using the provided DynamicConfigRulesDtoRulesConditionsTargetValue3
func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) MergeDynamicConfigRulesDtoRulesConditionsTargetValue3(v DynamicConfigRulesDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DynamicConfigRulesDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DynamicConfigRulesDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExperimentCreateDtoTargetApps0 returns the union data inside the ExperimentCreateDto_TargetApps as a ExperimentCreateDtoTargetApps0
func (t ExperimentCreateDto_TargetApps) AsExperimentCreateDtoTargetApps0() (ExperimentCreateDtoTargetApps0, error) {
	var body ExperimentCreateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentCreateDtoTargetApps0 overwrites any union data inside the ExperimentCreateDto_TargetApps as the provided ExperimentCreateDtoTargetApps0
func (t *ExperimentCreateDto_TargetApps) FromExperimentCreateDtoTargetApps0(v ExperimentCreateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentCreateDtoTargetApps0 performs a merge with any union data inside the ExperimentCreateDto_TargetApps, using the provided ExperimentCreateDtoTargetApps0
func (t *ExperimentCreateDto_TargetApps) MergeExperimentCreateDtoTargetApps0(v ExperimentCreateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExperimentCreateDtoTargetApps1 returns the union data inside the ExperimentCreateDto_TargetApps as a ExperimentCreateDtoTargetApps1
func (t ExperimentCreateDto_TargetApps) AsExperimentCreateDtoTargetApps1() (ExperimentCreateDtoTargetApps1, error) {
	var body ExperimentCreateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentCreateDtoTargetApps1 overwrites any union data inside the ExperimentCreateDto_TargetApps as the provided ExperimentCreateDtoTargetApps1
func (t *ExperimentCreateDto_TargetApps) FromExperimentCreateDtoTargetApps1(v ExperimentCreateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentCreateDtoTargetApps1 performs a merge with any union data inside the ExperimentCreateDto_TargetApps, using the provided ExperimentCreateDtoTargetApps1
func (t *ExperimentCreateDto_TargetApps) MergeExperimentCreateDtoTargetApps1(v ExperimentCreateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExperimentCreateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExperimentCreateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExperimentFullUpdateDtoTargetApps0 returns the union data inside the ExperimentFullUpdateDto_TargetApps as a ExperimentFullUpdateDtoTargetApps0
func (t ExperimentFullUpdateDto_TargetApps) AsExperimentFullUpdateDtoTargetApps0() (ExperimentFullUpdateDtoTargetApps0, error) {
	var body ExperimentFullUpdateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentFullUpdateDtoTargetApps0 overwrites any union data inside the ExperimentFullUpdateDto_TargetApps as the provided ExperimentFullUpdateDtoTargetApps0
func (t *ExperimentFullUpdateDto_TargetApps) FromExperimentFullUpdateDtoTargetApps0(v ExperimentFullUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentFullUpdateDtoTargetApps0 performs a merge with any union data inside the ExperimentFullUpdateDto_TargetApps, using the provided ExperimentFullUpdateDtoTargetApps0
func (t *ExperimentFullUpdateDto_TargetApps) MergeExperimentFullUpdateDtoTargetApps0(v ExperimentFullUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExperimentFullUpdateDtoTargetApps1 returns the union data inside the ExperimentFullUpdateDto_TargetApps as a ExperimentFullUpdateDtoTargetApps1
func (t ExperimentFullUpdateDto_TargetApps) AsExperimentFullUpdateDtoTargetApps1() (ExperimentFullUpdateDtoTargetApps1, error) {
	var body ExperimentFullUpdateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentFullUpdateDtoTargetApps1 overwrites any union data inside the ExperimentFullUpdateDto_TargetApps as the provided ExperimentFullUpdateDtoTargetApps1
func (t *ExperimentFullUpdateDto_TargetApps) FromExperimentFullUpdateDtoTargetApps1(v ExperimentFullUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentFullUpdateDtoTargetApps1 performs a merge with any union data inside the ExperimentFullUpdateDto_TargetApps, using the provided ExperimentFullUpdateDtoTargetApps1
func (t *ExperimentFullUpdateDto_TargetApps) MergeExperimentFullUpdateDtoTargetApps1(v ExperimentFullUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExperimentFullUpdateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExperimentFullUpdateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExperimentPartialUpdateDtoTargetApps0 returns the union data inside the ExperimentPartialUpdateDto_TargetApps as a ExperimentPartialUpdateDtoTargetApps0
func (t ExperimentPartialUpdateDto_TargetApps) AsExperimentPartialUpdateDtoTargetApps0() (ExperimentPartialUpdateDtoTargetApps0, error) {
	var body ExperimentPartialUpdateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentPartialUpdateDtoTargetApps0 overwrites any union data inside the ExperimentPartialUpdateDto_TargetApps as the provided ExperimentPartialUpdateDtoTargetApps0
func (t *ExperimentPartialUpdateDto_TargetApps) FromExperimentPartialUpdateDtoTargetApps0(v ExperimentPartialUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentPartialUpdateDtoTargetApps0 performs a merge with any union data inside the ExperimentPartialUpdateDto_TargetApps, using the provided ExperimentPartialUpdateDtoTargetApps0
func (t *ExperimentPartialUpdateDto_TargetApps) MergeExperimentPartialUpdateDtoTargetApps0(v ExperimentPartialUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExperimentPartialUpdateDtoTargetApps1 returns the union data inside the ExperimentPartialUpdateDto_TargetApps as a ExperimentPartialUpdateDtoTargetApps1
func (t ExperimentPartialUpdateDto_TargetApps) AsExperimentPartialUpdateDtoTargetApps1() (ExperimentPartialUpdateDtoTargetApps1, error) {
	var body ExperimentPartialUpdateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentPartialUpdateDtoTargetApps1 overwrites any union data inside the ExperimentPartialUpdateDto_TargetApps as the provided ExperimentPartialUpdateDtoTargetApps1
func (t *ExperimentPartialUpdateDto_TargetApps) FromExperimentPartialUpdateDtoTargetApps1(v ExperimentPartialUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentPartialUpdateDtoTargetApps1 performs a merge with any union data inside the ExperimentPartialUpdateDto_TargetApps, using the provided ExperimentPartialUpdateDtoTargetApps1
func (t *ExperimentPartialUpdateDto_TargetApps) MergeExperimentPartialUpdateDtoTargetApps1(v ExperimentPartialUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExperimentPartialUpdateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExperimentPartialUpdateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExternalExperimentDtoTargetApps0 returns the union data inside the ExternalExperimentDto_TargetApps as a ExternalExperimentDtoTargetApps0
func (t ExternalExperimentDto_TargetApps) AsExternalExperimentDtoTargetApps0() (ExternalExperimentDtoTargetApps0, error) {
	var body ExternalExperimentDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalExperimentDtoTargetApps0 overwrites any union data inside the ExternalExperimentDto_TargetApps as the provided ExternalExperimentDtoTargetApps0
func (t *ExternalExperimentDto_TargetApps) FromExternalExperimentDtoTargetApps0(v ExternalExperimentDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalExperimentDtoTargetApps0 performs a merge with any union data inside the ExternalExperimentDto_TargetApps, using the provided ExternalExperimentDtoTargetApps0
func (t *ExternalExperimentDto_TargetApps) MergeExternalExperimentDtoTargetApps0(v ExternalExperimentDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalExperimentDtoTargetApps1 returns the union data inside the ExternalExperimentDto_TargetApps as a ExternalExperimentDtoTargetApps1
func (t ExternalExperimentDto_TargetApps) AsExternalExperimentDtoTargetApps1() (ExternalExperimentDtoTargetApps1, error) {
	var body ExternalExperimentDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalExperimentDtoTargetApps1 overwrites any union data inside the ExternalExperimentDto_TargetApps as the provided ExternalExperimentDtoTargetApps1
func (t *ExternalExperimentDto_TargetApps) FromExternalExperimentDtoTargetApps1(v ExternalExperimentDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalExperimentDtoTargetApps1 performs a merge with any union data inside the ExternalExperimentDto_TargetApps, using the provided ExternalExperimentDtoTargetApps1
func (t *ExternalExperimentDto_TargetApps) MergeExternalExperimentDtoTargetApps1(v ExternalExperimentDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExternalExperimentDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExternalExperimentDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExternalGateDtoRulesConditionsTargetValue0 returns the union data inside the ExternalGateDto_Rules_Conditions_TargetValue as a ExternalGateDtoRulesConditionsTargetValue0
func (t ExternalGateDto_Rules_Conditions_TargetValue) AsExternalGateDtoRulesConditionsTargetValue0() (ExternalGateDtoRulesConditionsTargetValue0, error) {
	var body ExternalGateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalGateDtoRulesConditionsTargetValue0 overwrites any union data inside the ExternalGateDto_Rules_Conditions_TargetValue as the provided ExternalGateDtoRulesConditionsTargetValue0
func (t *ExternalGateDto_Rules_Conditions_TargetValue) FromExternalGateDtoRulesConditionsTargetValue0(v ExternalGateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalGateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the ExternalGateDto_Rules_Conditions_TargetValue, using the provided ExternalGateDtoRulesConditionsTargetValue0
func (t *ExternalGateDto_Rules_Conditions_TargetValue) MergeExternalGateDtoRulesConditionsTargetValue0(v ExternalGateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalGateDtoRulesConditionsTargetValue1 returns the union data inside the ExternalGateDto_Rules_Conditions_TargetValue as a ExternalGateDtoRulesConditionsTargetValue1
func (t ExternalGateDto_Rules_Conditions_TargetValue) AsExternalGateDtoRulesConditionsTargetValue1() (ExternalGateDtoRulesConditionsTargetValue1, error) {
	var body ExternalGateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalGateDtoRulesConditionsTargetValue1 overwrites any union data inside the ExternalGateDto_Rules_Conditions_TargetValue as the provided ExternalGateDtoRulesConditionsTargetValue1
func (t *ExternalGateDto_Rules_Conditions_TargetValue) FromExternalGateDtoRulesConditionsTargetValue1(v ExternalGateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalGateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the ExternalGateDto_Rules_Conditions_TargetValue, using the provided ExternalGateDtoRulesConditionsTargetValue1
func (t *ExternalGateDto_Rules_Conditions_TargetValue) MergeExternalGateDtoRulesConditionsTargetValue1(v ExternalGateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalGateDtoRulesConditionsTargetValue2 returns the union data inside the ExternalGateDto_Rules_Conditions_TargetValue as a ExternalGateDtoRulesConditionsTargetValue2
func (t ExternalGateDto_Rules_Conditions_TargetValue) AsExternalGateDtoRulesConditionsTargetValue2() (ExternalGateDtoRulesConditionsTargetValue2, error) {
	var body ExternalGateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalGateDtoRulesConditionsTargetValue2 overwrites any union data inside the ExternalGateDto_Rules_Conditions_TargetValue as the provided ExternalGateDtoRulesConditionsTargetValue2
func (t *ExternalGateDto_Rules_Conditions_TargetValue) FromExternalGateDtoRulesConditionsTargetValue2(v ExternalGateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalGateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the ExternalGateDto_Rules_Conditions_TargetValue, using the provided ExternalGateDtoRulesConditionsTargetValue2
func (t *ExternalGateDto_Rules_Conditions_TargetValue) MergeExternalGateDtoRulesConditionsTargetValue2(v ExternalGateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalGateDtoRulesConditionsTargetValue3 returns the union data inside the ExternalGateDto_Rules_Conditions_TargetValue as a ExternalGateDtoRulesConditionsTargetValue3
func (t ExternalGateDto_Rules_Conditions_TargetValue) AsExternalGateDtoRulesConditionsTargetValue3() (ExternalGateDtoRulesConditionsTargetValue3, error) {
	var body ExternalGateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalGateDtoRulesConditionsTargetValue3 overwrites any union data inside the ExternalGateDto_Rules_Conditions_TargetValue as the provided ExternalGateDtoRulesConditionsTargetValue3
func (t *ExternalGateDto_Rules_Conditions_TargetValue) FromExternalGateDtoRulesConditionsTargetValue3(v ExternalGateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalGateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the ExternalGateDto_Rules_Conditions_TargetValue, using the provided ExternalGateDtoRulesConditionsTargetValue3
func (t *ExternalGateDto_Rules_Conditions_TargetValue) MergeExternalGateDtoRulesConditionsTargetValue3(v ExternalGateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExternalGateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExternalGateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExternalGateDtoTargetApps0 returns the union data inside the ExternalGateDto_TargetApps as a ExternalGateDtoTargetApps0
func (t ExternalGateDto_TargetApps) AsExternalGateDtoTargetApps0() (ExternalGateDtoTargetApps0, error) {
	var body ExternalGateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalGateDtoTargetApps0 overwrites any union data inside the ExternalGateDto_TargetApps as the provided ExternalGateDtoTargetApps0
func (t *ExternalGateDto_TargetApps) FromExternalGateDtoTargetApps0(v ExternalGateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalGateDtoTargetApps0 performs a merge with any union data inside the ExternalGateDto_TargetApps, using the provided ExternalGateDtoTargetApps0
func (t *ExternalGateDto_TargetApps) MergeExternalGateDtoTargetApps0(v ExternalGateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalGateDtoTargetApps1 returns the union data inside the ExternalGateDto_TargetApps as a ExternalGateDtoTargetApps1
func (t ExternalGateDto_TargetApps) AsExternalGateDtoTargetApps1() (ExternalGateDtoTargetApps1, error) {
	var body ExternalGateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalGateDtoTargetApps1 overwrites any union data inside the ExternalGateDto_TargetApps as the provided ExternalGateDtoTargetApps1
func (t *ExternalGateDto_TargetApps) FromExternalGateDtoTargetApps1(v ExternalGateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalGateDtoTargetApps1 performs a merge with any union data inside the ExternalGateDto_TargetApps, using the provided ExternalGateDtoTargetApps1
func (t *ExternalGateDto_TargetApps) MergeExternalGateDtoTargetApps1(v ExternalGateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExternalGateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExternalGateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGateCreateDtoRulesConditionsTargetValue0 returns the union data inside the GateCreateDto_Rules_Conditions_TargetValue as a GateCreateDtoRulesConditionsTargetValue0
func (t GateCreateDto_Rules_Conditions_TargetValue) AsGateCreateDtoRulesConditionsTargetValue0() (GateCreateDtoRulesConditionsTargetValue0, error) {
	var body GateCreateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateCreateDtoRulesConditionsTargetValue0 overwrites any union data inside the GateCreateDto_Rules_Conditions_TargetValue as the provided GateCreateDtoRulesConditionsTargetValue0
func (t *GateCreateDto_Rules_Conditions_TargetValue) FromGateCreateDtoRulesConditionsTargetValue0(v GateCreateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateCreateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the GateCreateDto_Rules_Conditions_TargetValue, using the provided GateCreateDtoRulesConditionsTargetValue0
func (t *GateCreateDto_Rules_Conditions_TargetValue) MergeGateCreateDtoRulesConditionsTargetValue0(v GateCreateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateCreateDtoRulesConditionsTargetValue1 returns the union data inside the GateCreateDto_Rules_Conditions_TargetValue as a GateCreateDtoRulesConditionsTargetValue1
func (t GateCreateDto_Rules_Conditions_TargetValue) AsGateCreateDtoRulesConditionsTargetValue1() (GateCreateDtoRulesConditionsTargetValue1, error) {
	var body GateCreateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateCreateDtoRulesConditionsTargetValue1 overwrites any union data inside the GateCreateDto_Rules_Conditions_TargetValue as the provided GateCreateDtoRulesConditionsTargetValue1
func (t *GateCreateDto_Rules_Conditions_TargetValue) FromGateCreateDtoRulesConditionsTargetValue1(v GateCreateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateCreateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the GateCreateDto_Rules_Conditions_TargetValue, using the provided GateCreateDtoRulesConditionsTargetValue1
func (t *GateCreateDto_Rules_Conditions_TargetValue) MergeGateCreateDtoRulesConditionsTargetValue1(v GateCreateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateCreateDtoRulesConditionsTargetValue2 returns the union data inside the GateCreateDto_Rules_Conditions_TargetValue as a GateCreateDtoRulesConditionsTargetValue2
func (t GateCreateDto_Rules_Conditions_TargetValue) AsGateCreateDtoRulesConditionsTargetValue2() (GateCreateDtoRulesConditionsTargetValue2, error) {
	var body GateCreateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateCreateDtoRulesConditionsTargetValue2 overwrites any union data inside the GateCreateDto_Rules_Conditions_TargetValue as the provided GateCreateDtoRulesConditionsTargetValue2
func (t *GateCreateDto_Rules_Conditions_TargetValue) FromGateCreateDtoRulesConditionsTargetValue2(v GateCreateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateCreateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the GateCreateDto_Rules_Conditions_TargetValue, using the provided GateCreateDtoRulesConditionsTargetValue2
func (t *GateCreateDto_Rules_Conditions_TargetValue) MergeGateCreateDtoRulesConditionsTargetValue2(v GateCreateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateCreateDtoRulesConditionsTargetValue3 returns the union data inside the GateCreateDto_Rules_Conditions_TargetValue as a GateCreateDtoRulesConditionsTargetValue3
func (t GateCreateDto_Rules_Conditions_TargetValue) AsGateCreateDtoRulesConditionsTargetValue3() (GateCreateDtoRulesConditionsTargetValue3, error) {
	var body GateCreateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateCreateDtoRulesConditionsTargetValue3 overwrites any union data inside the GateCreateDto_Rules_Conditions_TargetValue as the provided GateCreateDtoRulesConditionsTargetValue3
func (t *GateCreateDto_Rules_Conditions_TargetValue) FromGateCreateDtoRulesConditionsTargetValue3(v GateCreateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateCreateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the GateCreateDto_Rules_Conditions_TargetValue, using the provided GateCreateDtoRulesConditionsTargetValue3
func (t *GateCreateDto_Rules_Conditions_TargetValue) MergeGateCreateDtoRulesConditionsTargetValue3(v GateCreateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GateCreateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GateCreateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGateCreateDtoTargetApps0 returns the union data inside the GateCreateDto_TargetApps as a GateCreateDtoTargetApps0
func (t GateCreateDto_TargetApps) AsGateCreateDtoTargetApps0() (GateCreateDtoTargetApps0, error) {
	var body GateCreateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateCreateDtoTargetApps0 overwrites any union data inside the GateCreateDto_TargetApps as the provided GateCreateDtoTargetApps0
func (t *GateCreateDto_TargetApps) FromGateCreateDtoTargetApps0(v GateCreateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateCreateDtoTargetApps0 performs a merge with any union data inside the GateCreateDto_TargetApps, using the provided GateCreateDtoTargetApps0
func (t *GateCreateDto_TargetApps) MergeGateCreateDtoTargetApps0(v GateCreateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateCreateDtoTargetApps1 returns the union data inside the GateCreateDto_TargetApps as a GateCreateDtoTargetApps1
func (t GateCreateDto_TargetApps) AsGateCreateDtoTargetApps1() (GateCreateDtoTargetApps1, error) {
	var body GateCreateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateCreateDtoTargetApps1 overwrites any union data inside the GateCreateDto_TargetApps as the provided GateCreateDtoTargetApps1
func (t *GateCreateDto_TargetApps) FromGateCreateDtoTargetApps1(v GateCreateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateCreateDtoTargetApps1 performs a merge with any union data inside the GateCreateDto_TargetApps, using the provided GateCreateDtoTargetApps1
func (t *GateCreateDto_TargetApps) MergeGateCreateDtoTargetApps1(v GateCreateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GateCreateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GateCreateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGateFullUpdateDtoRulesConditionsTargetValue0 returns the union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as a GateFullUpdateDtoRulesConditionsTargetValue0
func (t GateFullUpdateDto_Rules_Conditions_TargetValue) AsGateFullUpdateDtoRulesConditionsTargetValue0() (GateFullUpdateDtoRulesConditionsTargetValue0, error) {
	var body GateFullUpdateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateFullUpdateDtoRulesConditionsTargetValue0 overwrites any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as the provided GateFullUpdateDtoRulesConditionsTargetValue0
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) FromGateFullUpdateDtoRulesConditionsTargetValue0(v GateFullUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateFullUpdateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue, using the provided GateFullUpdateDtoRulesConditionsTargetValue0
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) MergeGateFullUpdateDtoRulesConditionsTargetValue0(v GateFullUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateFullUpdateDtoRulesConditionsTargetValue1 returns the union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as a GateFullUpdateDtoRulesConditionsTargetValue1
func (t GateFullUpdateDto_Rules_Conditions_TargetValue) AsGateFullUpdateDtoRulesConditionsTargetValue1() (GateFullUpdateDtoRulesConditionsTargetValue1, error) {
	var body GateFullUpdateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateFullUpdateDtoRulesConditionsTargetValue1 overwrites any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as the provided GateFullUpdateDtoRulesConditionsTargetValue1
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) FromGateFullUpdateDtoRulesConditionsTargetValue1(v GateFullUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateFullUpdateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue, using the provided GateFullUpdateDtoRulesConditionsTargetValue1
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) MergeGateFullUpdateDtoRulesConditionsTargetValue1(v GateFullUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateFullUpdateDtoRulesConditionsTargetValue2 returns the union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as a GateFullUpdateDtoRulesConditionsTargetValue2
func (t GateFullUpdateDto_Rules_Conditions_TargetValue) AsGateFullUpdateDtoRulesConditionsTargetValue2() (GateFullUpdateDtoRulesConditionsTargetValue2, error) {
	var body GateFullUpdateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateFullUpdateDtoRulesConditionsTargetValue2 overwrites any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as the provided GateFullUpdateDtoRulesConditionsTargetValue2
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) FromGateFullUpdateDtoRulesConditionsTargetValue2(v GateFullUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateFullUpdateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue, using the provided GateFullUpdateDtoRulesConditionsTargetValue2
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) MergeGateFullUpdateDtoRulesConditionsTargetValue2(v GateFullUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateFullUpdateDtoRulesConditionsTargetValue3 returns the union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as a GateFullUpdateDtoRulesConditionsTargetValue3
func (t GateFullUpdateDto_Rules_Conditions_TargetValue) AsGateFullUpdateDtoRulesConditionsTargetValue3() (GateFullUpdateDtoRulesConditionsTargetValue3, error) {
	var body GateFullUpdateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateFullUpdateDtoRulesConditionsTargetValue3 overwrites any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue as the provided GateFullUpdateDtoRulesConditionsTargetValue3
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) FromGateFullUpdateDtoRulesConditionsTargetValue3(v GateFullUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateFullUpdateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the GateFullUpdateDto_Rules_Conditions_TargetValue, using the provided GateFullUpdateDtoRulesConditionsTargetValue3
func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) MergeGateFullUpdateDtoRulesConditionsTargetValue3(v GateFullUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GateFullUpdateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GateFullUpdateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGateFullUpdateDtoTargetApps0 returns the union data inside the GateFullUpdateDto_TargetApps as a GateFullUpdateDtoTargetApps0
func (t GateFullUpdateDto_TargetApps) AsGateFullUpdateDtoTargetApps0() (GateFullUpdateDtoTargetApps0, error) {
	var body GateFullUpdateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateFullUpdateDtoTargetApps0 overwrites any union data inside the GateFullUpdateDto_TargetApps as the provided GateFullUpdateDtoTargetApps0
func (t *GateFullUpdateDto_TargetApps) FromGateFullUpdateDtoTargetApps0(v GateFullUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateFullUpdateDtoTargetApps0 performs a merge with any union data inside the GateFullUpdateDto_TargetApps, using the provided GateFullUpdateDtoTargetApps0
func (t *GateFullUpdateDto_TargetApps) MergeGateFullUpdateDtoTargetApps0(v GateFullUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGateFullUpdateDtoTargetApps1 returns the union data inside the GateFullUpdateDto_TargetApps as a GateFullUpdateDtoTargetApps1
func (t GateFullUpdateDto_TargetApps) AsGateFullUpdateDtoTargetApps1() (GateFullUpdateDtoTargetApps1, error) {
	var body GateFullUpdateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGateFullUpdateDtoTargetApps1 overwrites any union data inside the GateFullUpdateDto_TargetApps as the provided GateFullUpdateDtoTargetApps1
func (t *GateFullUpdateDto_TargetApps) FromGateFullUpdateDtoTargetApps1(v GateFullUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGateFullUpdateDtoTargetApps1 performs a merge with any union data inside the GateFullUpdateDto_TargetApps, using the provided GateFullUpdateDtoTargetApps1
func (t *GateFullUpdateDto_TargetApps) MergeGateFullUpdateDtoTargetApps1(v GateFullUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GateFullUpdateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GateFullUpdateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGatePartialUpdateDtoRulesConditionsTargetValue0 returns the union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as a GatePartialUpdateDtoRulesConditionsTargetValue0
func (t GatePartialUpdateDto_Rules_Conditions_TargetValue) AsGatePartialUpdateDtoRulesConditionsTargetValue0() (GatePartialUpdateDtoRulesConditionsTargetValue0, error) {
	var body GatePartialUpdateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGatePartialUpdateDtoRulesConditionsTargetValue0 overwrites any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as the provided GatePartialUpdateDtoRulesConditionsTargetValue0
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) FromGatePartialUpdateDtoRulesConditionsTargetValue0(v GatePartialUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGatePartialUpdateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue, using the provided GatePartialUpdateDtoRulesConditionsTargetValue0
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) MergeGatePartialUpdateDtoRulesConditionsTargetValue0(v GatePartialUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGatePartialUpdateDtoRulesConditionsTargetValue1 returns the union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as a GatePartialUpdateDtoRulesConditionsTargetValue1
func (t GatePartialUpdateDto_Rules_Conditions_TargetValue) AsGatePartialUpdateDtoRulesConditionsTargetValue1() (GatePartialUpdateDtoRulesConditionsTargetValue1, error) {
	var body GatePartialUpdateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGatePartialUpdateDtoRulesConditionsTargetValue1 overwrites any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as the provided GatePartialUpdateDtoRulesConditionsTargetValue1
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) FromGatePartialUpdateDtoRulesConditionsTargetValue1(v GatePartialUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGatePartialUpdateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue, using the provided GatePartialUpdateDtoRulesConditionsTargetValue1
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) MergeGatePartialUpdateDtoRulesConditionsTargetValue1(v GatePartialUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGatePartialUpdateDtoRulesConditionsTargetValue2 returns the union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as a GatePartialUpdateDtoRulesConditionsTargetValue2
func (t GatePartialUpdateDto_Rules_Conditions_TargetValue) AsGatePartialUpdateDtoRulesConditionsTargetValue2() (GatePartialUpdateDtoRulesConditionsTargetValue2, error) {
	var body GatePartialUpdateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGatePartialUpdateDtoRulesConditionsTargetValue2 overwrites any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as the provided GatePartialUpdateDtoRulesConditionsTargetValue2
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) FromGatePartialUpdateDtoRulesConditionsTargetValue2(v GatePartialUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGatePartialUpdateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue, using the provided GatePartialUpdateDtoRulesConditionsTargetValue2
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) MergeGatePartialUpdateDtoRulesConditionsTargetValue2(v GatePartialUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGatePartialUpdateDtoRulesConditionsTargetValue3 returns the union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as a GatePartialUpdateDtoRulesConditionsTargetValue3
func (t GatePartialUpdateDto_Rules_Conditions_TargetValue) AsGatePartialUpdateDtoRulesConditionsTargetValue3() (GatePartialUpdateDtoRulesConditionsTargetValue3, error) {
	var body GatePartialUpdateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGatePartialUpdateDtoRulesConditionsTargetValue3 overwrites any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue as the provided GatePartialUpdateDtoRulesConditionsTargetValue3
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) FromGatePartialUpdateDtoRulesConditionsTargetValue3(v GatePartialUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGatePartialUpdateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the GatePartialUpdateDto_Rules_Conditions_TargetValue, using the provided GatePartialUpdateDtoRulesConditionsTargetValue3
func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) MergeGatePartialUpdateDtoRulesConditionsTargetValue3(v GatePartialUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GatePartialUpdateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GatePartialUpdateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGatePartialUpdateDtoTargetApps0 returns the union data inside the GatePartialUpdateDto_TargetApps as a GatePartialUpdateDtoTargetApps0
func (t GatePartialUpdateDto_TargetApps) AsGatePartialUpdateDtoTargetApps0() (GatePartialUpdateDtoTargetApps0, error) {
	var body GatePartialUpdateDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGatePartialUpdateDtoTargetApps0 overwrites any union data inside the GatePartialUpdateDto_TargetApps as the provided GatePartialUpdateDtoTargetApps0
func (t *GatePartialUpdateDto_TargetApps) FromGatePartialUpdateDtoTargetApps0(v GatePartialUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGatePartialUpdateDtoTargetApps0 performs a merge with any union data inside the GatePartialUpdateDto_TargetApps, using the provided GatePartialUpdateDtoTargetApps0
func (t *GatePartialUpdateDto_TargetApps) MergeGatePartialUpdateDtoTargetApps0(v GatePartialUpdateDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGatePartialUpdateDtoTargetApps1 returns the union data inside the GatePartialUpdateDto_TargetApps as a GatePartialUpdateDtoTargetApps1
func (t GatePartialUpdateDto_TargetApps) AsGatePartialUpdateDtoTargetApps1() (GatePartialUpdateDtoTargetApps1, error) {
	var body GatePartialUpdateDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGatePartialUpdateDtoTargetApps1 overwrites any union data inside the GatePartialUpdateDto_TargetApps as the provided GatePartialUpdateDtoTargetApps1
func (t *GatePartialUpdateDto_TargetApps) FromGatePartialUpdateDtoTargetApps1(v GatePartialUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGatePartialUpdateDtoTargetApps1 performs a merge with any union data inside the GatePartialUpdateDto_TargetApps, using the provided GatePartialUpdateDtoTargetApps1
func (t *GatePartialUpdateDto_TargetApps) MergeGatePartialUpdateDtoTargetApps1(v GatePartialUpdateDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GatePartialUpdateDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GatePartialUpdateDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIngestionBackfillContractDtoSource0 returns the union data inside the IngestionBackfillContractDto_Source as a IngestionBackfillContractDtoSource0
func (t IngestionBackfillContractDto_Source) AsIngestionBackfillContractDtoSource0() (IngestionBackfillContractDtoSource0, error) {
	var body IngestionBackfillContractDtoSource0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionBackfillContractDtoSource0 overwrites any union data inside the IngestionBackfillContractDto_Source as the provided IngestionBackfillContractDtoSource0
func (t *IngestionBackfillContractDto_Source) FromIngestionBackfillContractDtoSource0(v IngestionBackfillContractDtoSource0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionBackfillContractDtoSource0 performs a merge with any union data inside the IngestionBackfillContractDto_Source, using the provided IngestionBackfillContractDtoSource0
func (t *IngestionBackfillContractDto_Source) MergeIngestionBackfillContractDtoSource0(v IngestionBackfillContractDtoSource0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestionBackfillContractDtoSource1 returns the union data inside the IngestionBackfillContractDto_Source as a IngestionBackfillContractDtoSource1
func (t IngestionBackfillContractDto_Source) AsIngestionBackfillContractDtoSource1() (IngestionBackfillContractDtoSource1, error) {
	var body IngestionBackfillContractDtoSource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionBackfillContractDtoSource1 overwrites any union data inside the IngestionBackfillContractDto_Source as the provided IngestionBackfillContractDtoSource1
func (t *IngestionBackfillContractDto_Source) FromIngestionBackfillContractDtoSource1(v IngestionBackfillContractDtoSource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionBackfillContractDtoSource1 performs a merge with any union data inside the IngestionBackfillContractDto_Source, using the provided IngestionBackfillContractDtoSource1
func (t *IngestionBackfillContractDto_Source) MergeIngestionBackfillContractDtoSource1(v IngestionBackfillContractDtoSource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IngestionBackfillContractDto_Source) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IngestionBackfillContractDto_Source) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIngestionEventCountResponseDto0 returns the union data inside the IngestionEventCountResponseDto as a IngestionEventCountResponseDto0
func (t IngestionEventCountResponseDto) AsIngestionEventCountResponseDto0() (IngestionEventCountResponseDto0, error) {
	var body IngestionEventCountResponseDto0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionEventCountResponseDto0 overwrites any union data inside the IngestionEventCountResponseDto as the provided IngestionEventCountResponseDto0
func (t *IngestionEventCountResponseDto) FromIngestionEventCountResponseDto0(v IngestionEventCountResponseDto0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionEventCountResponseDto0 performs a merge with any union data inside the IngestionEventCountResponseDto, using the provided IngestionEventCountResponseDto0
func (t *IngestionEventCountResponseDto) MergeIngestionEventCountResponseDto0(v IngestionEventCountResponseDto0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestionEventCountResponseDto1 returns the union data inside the IngestionEventCountResponseDto as a IngestionEventCountResponseDto1
func (t IngestionEventCountResponseDto) AsIngestionEventCountResponseDto1() (IngestionEventCountResponseDto1, error) {
	var body IngestionEventCountResponseDto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionEventCountResponseDto1 overwrites any union data inside the IngestionEventCountResponseDto as the provided IngestionEventCountResponseDto1
func (t *IngestionEventCountResponseDto) FromIngestionEventCountResponseDto1(v IngestionEventCountResponseDto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionEventCountResponseDto1 performs a merge with any union data inside the IngestionEventCountResponseDto, using the provided IngestionEventCountResponseDto1
func (t *IngestionEventCountResponseDto) MergeIngestionEventCountResponseDto1(v IngestionEventCountResponseDto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IngestionEventCountResponseDto) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IngestionEventCountResponseDto) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIngestionEventDeltaResponseDto0 returns the union data inside the IngestionEventDeltaResponseDto as a IngestionEventDeltaResponseDto0
func (t IngestionEventDeltaResponseDto) AsIngestionEventDeltaResponseDto0() (IngestionEventDeltaResponseDto0, error) {
	var body IngestionEventDeltaResponseDto0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionEventDeltaResponseDto0 overwrites any union data inside the IngestionEventDeltaResponseDto as the provided IngestionEventDeltaResponseDto0
func (t *IngestionEventDeltaResponseDto) FromIngestionEventDeltaResponseDto0(v IngestionEventDeltaResponseDto0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionEventDeltaResponseDto0 performs a merge with any union data inside the IngestionEventDeltaResponseDto, using the provided IngestionEventDeltaResponseDto0
func (t *IngestionEventDeltaResponseDto) MergeIngestionEventDeltaResponseDto0(v IngestionEventDeltaResponseDto0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestionEventDeltaResponseDto1 returns the union data inside the IngestionEventDeltaResponseDto as a IngestionEventDeltaResponseDto1
func (t IngestionEventDeltaResponseDto) AsIngestionEventDeltaResponseDto1() (IngestionEventDeltaResponseDto1, error) {
	var body IngestionEventDeltaResponseDto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionEventDeltaResponseDto1 overwrites any union data inside the IngestionEventDeltaResponseDto as the provided IngestionEventDeltaResponseDto1
func (t *IngestionEventDeltaResponseDto) FromIngestionEventDeltaResponseDto1(v IngestionEventDeltaResponseDto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionEventDeltaResponseDto1 performs a merge with any union data inside the IngestionEventDeltaResponseDto, using the provided IngestionEventDeltaResponseDto1
func (t *IngestionEventDeltaResponseDto) MergeIngestionEventDeltaResponseDto1(v IngestionEventDeltaResponseDto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IngestionEventDeltaResponseDto) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IngestionEventDeltaResponseDto) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIngestionSourceCreateContractDto0 returns the union data inside the IngestionSourceCreateContractDto as a IngestionSourceCreateContractDto0
func (t IngestionSourceCreateContractDto) AsIngestionSourceCreateContractDto0() (IngestionSourceCreateContractDto0, error) {
	var body IngestionSourceCreateContractDto0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionSourceCreateContractDto0 overwrites any union data inside the IngestionSourceCreateContractDto as the provided IngestionSourceCreateContractDto0
func (t *IngestionSourceCreateContractDto) FromIngestionSourceCreateContractDto0(v IngestionSourceCreateContractDto0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionSourceCreateContractDto0 performs a merge with any union data inside the IngestionSourceCreateContractDto, using the provided IngestionSourceCreateContractDto0
func (t *IngestionSourceCreateContractDto) MergeIngestionSourceCreateContractDto0(v IngestionSourceCreateContractDto0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestionSourceCreateContractDto1 returns the union data inside the IngestionSourceCreateContractDto as a IngestionSourceCreateContractDto1
func (t IngestionSourceCreateContractDto) AsIngestionSourceCreateContractDto1() (IngestionSourceCreateContractDto1, error) {
	var body IngestionSourceCreateContractDto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionSourceCreateContractDto1 overwrites any union data inside the IngestionSourceCreateContractDto as the provided IngestionSourceCreateContractDto1
func (t *IngestionSourceCreateContractDto) FromIngestionSourceCreateContractDto1(v IngestionSourceCreateContractDto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionSourceCreateContractDto1 performs a merge with any union data inside the IngestionSourceCreateContractDto, using the provided IngestionSourceCreateContractDto1
func (t *IngestionSourceCreateContractDto) MergeIngestionSourceCreateContractDto1(v IngestionSourceCreateContractDto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestionSourceCreateContractDto2 returns the union data inside the IngestionSourceCreateContractDto as a IngestionSourceCreateContractDto2
func (t IngestionSourceCreateContractDto) AsIngestionSourceCreateContractDto2() (IngestionSourceCreateContractDto2, error) {
	var body IngestionSourceCreateContractDto2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionSourceCreateContractDto2 overwrites any union data inside the IngestionSourceCreateContractDto as the provided IngestionSourceCreateContractDto2
func (t *IngestionSourceCreateContractDto) FromIngestionSourceCreateContractDto2(v IngestionSourceCreateContractDto2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionSourceCreateContractDto2 performs a merge with any union data inside the IngestionSourceCreateContractDto, using the provided IngestionSourceCreateContractDto2
func (t *IngestionSourceCreateContractDto) MergeIngestionSourceCreateContractDto2(v IngestionSourceCreateContractDto2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IngestionSourceCreateContractDto) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IngestionSourceCreateContractDto) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIngestionUpdateContractDto0 returns the union data inside the IngestionUpdateContractDto as a IngestionUpdateContractDto0
func (t IngestionUpdateContractDto) AsIngestionUpdateContractDto0() (IngestionUpdateContractDto0, error) {
	var body IngestionUpdateContractDto0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionUpdateContractDto0 overwrites any union data inside the IngestionUpdateContractDto as the provided IngestionUpdateContractDto0
func (t *IngestionUpdateContractDto) FromIngestionUpdateContractDto0(v IngestionUpdateContractDto0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionUpdateContractDto0 performs a merge with any union data inside the IngestionUpdateContractDto, using the provided IngestionUpdateContractDto0
func (t *IngestionUpdateContractDto) MergeIngestionUpdateContractDto0(v IngestionUpdateContractDto0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestionUpdateContractDto1 returns the union data inside the IngestionUpdateContractDto as a IngestionUpdateContractDto1
func (t IngestionUpdateContractDto) AsIngestionUpdateContractDto1() (IngestionUpdateContractDto1, error) {
	var body IngestionUpdateContractDto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionUpdateContractDto1 overwrites any union data inside the IngestionUpdateContractDto as the provided IngestionUpdateContractDto1
func (t *IngestionUpdateContractDto) FromIngestionUpdateContractDto1(v IngestionUpdateContractDto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionUpdateContractDto1 performs a merge with any union data inside the IngestionUpdateContractDto, using the provided IngestionUpdateContractDto1
func (t *IngestionUpdateContractDto) MergeIngestionUpdateContractDto1(v IngestionUpdateContractDto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIngestionUpdateContractDto2 returns the union data inside the IngestionUpdateContractDto as a IngestionUpdateContractDto2
func (t IngestionUpdateContractDto) AsIngestionUpdateContractDto2() (IngestionUpdateContractDto2, error) {
	var body IngestionUpdateContractDto2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIngestionUpdateContractDto2 overwrites any union data inside the IngestionUpdateContractDto as the provided IngestionUpdateContractDto2
func (t *IngestionUpdateContractDto) FromIngestionUpdateContractDto2(v IngestionUpdateContractDto2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIngestionUpdateContractDto2 performs a merge with any union data inside the IngestionUpdateContractDto, using the provided IngestionUpdateContractDto2
func (t *IngestionUpdateContractDto) MergeIngestionUpdateContractDto2(v IngestionUpdateContractDto2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IngestionUpdateContractDto) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IngestionUpdateContractDto) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerContractDtoParametersDefaultValue40 returns the union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as a LayerContractDtoParametersDefaultValue40
func (t LayerContractDto_Parameters_DefaultValue_4_Item) AsLayerContractDtoParametersDefaultValue40() (LayerContractDtoParametersDefaultValue40, error) {
	var body LayerContractDtoParametersDefaultValue40
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue40 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as the provided LayerContractDtoParametersDefaultValue40
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) FromLayerContractDtoParametersDefaultValue40(v LayerContractDtoParametersDefaultValue40) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue40 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item, using the provided LayerContractDtoParametersDefaultValue40
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) MergeLayerContractDtoParametersDefaultValue40(v LayerContractDtoParametersDefaultValue40) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoParametersDefaultValue41 returns the union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as a LayerContractDtoParametersDefaultValue41
func (t LayerContractDto_Parameters_DefaultValue_4_Item) AsLayerContractDtoParametersDefaultValue41() (LayerContractDtoParametersDefaultValue41, error) {
	var body LayerContractDtoParametersDefaultValue41
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue41 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as the provided LayerContractDtoParametersDefaultValue41
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) FromLayerContractDtoParametersDefaultValue41(v LayerContractDtoParametersDefaultValue41) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue41 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item, using the provided LayerContractDtoParametersDefaultValue41
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) MergeLayerContractDtoParametersDefaultValue41(v LayerContractDtoParametersDefaultValue41) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoParametersDefaultValue42 returns the union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as a LayerContractDtoParametersDefaultValue42
func (t LayerContractDto_Parameters_DefaultValue_4_Item) AsLayerContractDtoParametersDefaultValue42() (LayerContractDtoParametersDefaultValue42, error) {
	var body LayerContractDtoParametersDefaultValue42
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue42 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as the provided LayerContractDtoParametersDefaultValue42
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) FromLayerContractDtoParametersDefaultValue42(v LayerContractDtoParametersDefaultValue42) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue42 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item, using the provided LayerContractDtoParametersDefaultValue42
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) MergeLayerContractDtoParametersDefaultValue42(v LayerContractDtoParametersDefaultValue42) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoParametersDefaultValue43 returns the union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as a LayerContractDtoParametersDefaultValue43
func (t LayerContractDto_Parameters_DefaultValue_4_Item) AsLayerContractDtoParametersDefaultValue43() (LayerContractDtoParametersDefaultValue43, error) {
	var body LayerContractDtoParametersDefaultValue43
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue43 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item as the provided LayerContractDtoParametersDefaultValue43
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) FromLayerContractDtoParametersDefaultValue43(v LayerContractDtoParametersDefaultValue43) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue43 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue_4_Item, using the provided LayerContractDtoParametersDefaultValue43
func (t *LayerContractDto_Parameters_DefaultValue_4_Item) MergeLayerContractDtoParametersDefaultValue43(v LayerContractDtoParametersDefaultValue43) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerContractDto_Parameters_DefaultValue_4_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerContractDto_Parameters_DefaultValue_4_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerContractDtoParametersDefaultValue0 returns the union data inside the LayerContractDto_Parameters_DefaultValue as a LayerContractDtoParametersDefaultValue0
func (t LayerContractDto_Parameters_DefaultValue) AsLayerContractDtoParametersDefaultValue0() (LayerContractDtoParametersDefaultValue0, error) {
	var body LayerContractDtoParametersDefaultValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue0 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue as the provided LayerContractDtoParametersDefaultValue0
func (t *LayerContractDto_Parameters_DefaultValue) FromLayerContractDtoParametersDefaultValue0(v LayerContractDtoParametersDefaultValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue0 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue, using the provided LayerContractDtoParametersDefaultValue0
func (t *LayerContractDto_Parameters_DefaultValue) MergeLayerContractDtoParametersDefaultValue0(v LayerContractDtoParametersDefaultValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoParametersDefaultValue1 returns the union data inside the LayerContractDto_Parameters_DefaultValue as a LayerContractDtoParametersDefaultValue1
func (t LayerContractDto_Parameters_DefaultValue) AsLayerContractDtoParametersDefaultValue1() (LayerContractDtoParametersDefaultValue1, error) {
	var body LayerContractDtoParametersDefaultValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue1 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue as the provided LayerContractDtoParametersDefaultValue1
func (t *LayerContractDto_Parameters_DefaultValue) FromLayerContractDtoParametersDefaultValue1(v LayerContractDtoParametersDefaultValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue1 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue, using the provided LayerContractDtoParametersDefaultValue1
func (t *LayerContractDto_Parameters_DefaultValue) MergeLayerContractDtoParametersDefaultValue1(v LayerContractDtoParametersDefaultValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoParametersDefaultValue2 returns the union data inside the LayerContractDto_Parameters_DefaultValue as a LayerContractDtoParametersDefaultValue2
func (t LayerContractDto_Parameters_DefaultValue) AsLayerContractDtoParametersDefaultValue2() (LayerContractDtoParametersDefaultValue2, error) {
	var body LayerContractDtoParametersDefaultValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue2 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue as the provided LayerContractDtoParametersDefaultValue2
func (t *LayerContractDto_Parameters_DefaultValue) FromLayerContractDtoParametersDefaultValue2(v LayerContractDtoParametersDefaultValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue2 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue, using the provided LayerContractDtoParametersDefaultValue2
func (t *LayerContractDto_Parameters_DefaultValue) MergeLayerContractDtoParametersDefaultValue2(v LayerContractDtoParametersDefaultValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoParametersDefaultValue3 returns the union data inside the LayerContractDto_Parameters_DefaultValue as a LayerContractDtoParametersDefaultValue3
func (t LayerContractDto_Parameters_DefaultValue) AsLayerContractDtoParametersDefaultValue3() (LayerContractDtoParametersDefaultValue3, error) {
	var body LayerContractDtoParametersDefaultValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue3 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue as the provided LayerContractDtoParametersDefaultValue3
func (t *LayerContractDto_Parameters_DefaultValue) FromLayerContractDtoParametersDefaultValue3(v LayerContractDtoParametersDefaultValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue3 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue, using the provided LayerContractDtoParametersDefaultValue3
func (t *LayerContractDto_Parameters_DefaultValue) MergeLayerContractDtoParametersDefaultValue3(v LayerContractDtoParametersDefaultValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoParametersDefaultValue4 returns the union data inside the LayerContractDto_Parameters_DefaultValue as a LayerContractDtoParametersDefaultValue4
func (t LayerContractDto_Parameters_DefaultValue) AsLayerContractDtoParametersDefaultValue4() (LayerContractDtoParametersDefaultValue4, error) {
	var body LayerContractDtoParametersDefaultValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoParametersDefaultValue4 overwrites any union data inside the LayerContractDto_Parameters_DefaultValue as the provided LayerContractDtoParametersDefaultValue4
func (t *LayerContractDto_Parameters_DefaultValue) FromLayerContractDtoParametersDefaultValue4(v LayerContractDtoParametersDefaultValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoParametersDefaultValue4 performs a merge with any union data inside the LayerContractDto_Parameters_DefaultValue, using the provided LayerContractDtoParametersDefaultValue4
func (t *LayerContractDto_Parameters_DefaultValue) MergeLayerContractDtoParametersDefaultValue4(v LayerContractDtoParametersDefaultValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerContractDto_Parameters_DefaultValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerContractDto_Parameters_DefaultValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerContractDtoTargetApps0 returns the union data inside the LayerContractDto_TargetApps as a LayerContractDtoTargetApps0
func (t LayerContractDto_TargetApps) AsLayerContractDtoTargetApps0() (LayerContractDtoTargetApps0, error) {
	var body LayerContractDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoTargetApps0 overwrites any union data inside the LayerContractDto_TargetApps as the provided LayerContractDtoTargetApps0
func (t *LayerContractDto_TargetApps) FromLayerContractDtoTargetApps0(v LayerContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoTargetApps0 performs a merge with any union data inside the LayerContractDto_TargetApps, using the provided LayerContractDtoTargetApps0
func (t *LayerContractDto_TargetApps) MergeLayerContractDtoTargetApps0(v LayerContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerContractDtoTargetApps1 returns the union data inside the LayerContractDto_TargetApps as a LayerContractDtoTargetApps1
func (t LayerContractDto_TargetApps) AsLayerContractDtoTargetApps1() (LayerContractDtoTargetApps1, error) {
	var body LayerContractDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerContractDtoTargetApps1 overwrites any union data inside the LayerContractDto_TargetApps as the provided LayerContractDtoTargetApps1
func (t *LayerContractDto_TargetApps) FromLayerContractDtoTargetApps1(v LayerContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerContractDtoTargetApps1 performs a merge with any union data inside the LayerContractDto_TargetApps, using the provided LayerContractDtoTargetApps1
func (t *LayerContractDto_TargetApps) MergeLayerContractDtoTargetApps1(v LayerContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerContractDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerContractDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerCreateContractDtoTargetApps0 returns the union data inside the LayerCreateContractDto_TargetApps as a LayerCreateContractDtoTargetApps0
func (t LayerCreateContractDto_TargetApps) AsLayerCreateContractDtoTargetApps0() (LayerCreateContractDtoTargetApps0, error) {
	var body LayerCreateContractDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerCreateContractDtoTargetApps0 overwrites any union data inside the LayerCreateContractDto_TargetApps as the provided LayerCreateContractDtoTargetApps0
func (t *LayerCreateContractDto_TargetApps) FromLayerCreateContractDtoTargetApps0(v LayerCreateContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerCreateContractDtoTargetApps0 performs a merge with any union data inside the LayerCreateContractDto_TargetApps, using the provided LayerCreateContractDtoTargetApps0
func (t *LayerCreateContractDto_TargetApps) MergeLayerCreateContractDtoTargetApps0(v LayerCreateContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerCreateContractDtoTargetApps1 returns the union data inside the LayerCreateContractDto_TargetApps as a LayerCreateContractDtoTargetApps1
func (t LayerCreateContractDto_TargetApps) AsLayerCreateContractDtoTargetApps1() (LayerCreateContractDtoTargetApps1, error) {
	var body LayerCreateContractDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerCreateContractDtoTargetApps1 overwrites any union data inside the LayerCreateContractDto_TargetApps as the provided LayerCreateContractDtoTargetApps1
func (t *LayerCreateContractDto_TargetApps) FromLayerCreateContractDtoTargetApps1(v LayerCreateContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerCreateContractDtoTargetApps1 performs a merge with any union data inside the LayerCreateContractDto_TargetApps, using the provided LayerCreateContractDtoTargetApps1
func (t *LayerCreateContractDto_TargetApps) MergeLayerCreateContractDtoTargetApps1(v LayerCreateContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerCreateContractDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerCreateContractDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue40 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerFullUpdateContractDtoParametersDefaultValue40
func (t LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerFullUpdateContractDtoParametersDefaultValue40() (LayerFullUpdateContractDtoParametersDefaultValue40, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue40
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue40 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerFullUpdateContractDtoParametersDefaultValue40
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerFullUpdateContractDtoParametersDefaultValue40(v LayerFullUpdateContractDtoParametersDefaultValue40) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue40 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerFullUpdateContractDtoParametersDefaultValue40
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerFullUpdateContractDtoParametersDefaultValue40(v LayerFullUpdateContractDtoParametersDefaultValue40) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue41 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerFullUpdateContractDtoParametersDefaultValue41
func (t LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerFullUpdateContractDtoParametersDefaultValue41() (LayerFullUpdateContractDtoParametersDefaultValue41, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue41
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue41 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerFullUpdateContractDtoParametersDefaultValue41
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerFullUpdateContractDtoParametersDefaultValue41(v LayerFullUpdateContractDtoParametersDefaultValue41) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue41 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerFullUpdateContractDtoParametersDefaultValue41
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerFullUpdateContractDtoParametersDefaultValue41(v LayerFullUpdateContractDtoParametersDefaultValue41) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue42 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerFullUpdateContractDtoParametersDefaultValue42
func (t LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerFullUpdateContractDtoParametersDefaultValue42() (LayerFullUpdateContractDtoParametersDefaultValue42, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue42
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue42 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerFullUpdateContractDtoParametersDefaultValue42
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerFullUpdateContractDtoParametersDefaultValue42(v LayerFullUpdateContractDtoParametersDefaultValue42) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue42 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerFullUpdateContractDtoParametersDefaultValue42
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerFullUpdateContractDtoParametersDefaultValue42(v LayerFullUpdateContractDtoParametersDefaultValue42) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue43 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerFullUpdateContractDtoParametersDefaultValue43
func (t LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerFullUpdateContractDtoParametersDefaultValue43() (LayerFullUpdateContractDtoParametersDefaultValue43, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue43
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue43 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerFullUpdateContractDtoParametersDefaultValue43
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerFullUpdateContractDtoParametersDefaultValue43(v LayerFullUpdateContractDtoParametersDefaultValue43) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue43 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerFullUpdateContractDtoParametersDefaultValue43
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerFullUpdateContractDtoParametersDefaultValue43(v LayerFullUpdateContractDtoParametersDefaultValue43) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerFullUpdateContractDto_Parameters_DefaultValue_4_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue0 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as a LayerFullUpdateContractDtoParametersDefaultValue0
func (t LayerFullUpdateContractDto_Parameters_DefaultValue) AsLayerFullUpdateContractDtoParametersDefaultValue0() (LayerFullUpdateContractDtoParametersDefaultValue0, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue0 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as the provided LayerFullUpdateContractDtoParametersDefaultValue0
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) FromLayerFullUpdateContractDtoParametersDefaultValue0(v LayerFullUpdateContractDtoParametersDefaultValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue0 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue, using the provided LayerFullUpdateContractDtoParametersDefaultValue0
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) MergeLayerFullUpdateContractDtoParametersDefaultValue0(v LayerFullUpdateContractDtoParametersDefaultValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue1 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as a LayerFullUpdateContractDtoParametersDefaultValue1
func (t LayerFullUpdateContractDto_Parameters_DefaultValue) AsLayerFullUpdateContractDtoParametersDefaultValue1() (LayerFullUpdateContractDtoParametersDefaultValue1, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue1 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as the provided LayerFullUpdateContractDtoParametersDefaultValue1
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) FromLayerFullUpdateContractDtoParametersDefaultValue1(v LayerFullUpdateContractDtoParametersDefaultValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue1 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue, using the provided LayerFullUpdateContractDtoParametersDefaultValue1
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) MergeLayerFullUpdateContractDtoParametersDefaultValue1(v LayerFullUpdateContractDtoParametersDefaultValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue2 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as a LayerFullUpdateContractDtoParametersDefaultValue2
func (t LayerFullUpdateContractDto_Parameters_DefaultValue) AsLayerFullUpdateContractDtoParametersDefaultValue2() (LayerFullUpdateContractDtoParametersDefaultValue2, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue2 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as the provided LayerFullUpdateContractDtoParametersDefaultValue2
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) FromLayerFullUpdateContractDtoParametersDefaultValue2(v LayerFullUpdateContractDtoParametersDefaultValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue2 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue, using the provided LayerFullUpdateContractDtoParametersDefaultValue2
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) MergeLayerFullUpdateContractDtoParametersDefaultValue2(v LayerFullUpdateContractDtoParametersDefaultValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue3 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as a LayerFullUpdateContractDtoParametersDefaultValue3
func (t LayerFullUpdateContractDto_Parameters_DefaultValue) AsLayerFullUpdateContractDtoParametersDefaultValue3() (LayerFullUpdateContractDtoParametersDefaultValue3, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue3 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as the provided LayerFullUpdateContractDtoParametersDefaultValue3
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) FromLayerFullUpdateContractDtoParametersDefaultValue3(v LayerFullUpdateContractDtoParametersDefaultValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue3 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue, using the provided LayerFullUpdateContractDtoParametersDefaultValue3
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) MergeLayerFullUpdateContractDtoParametersDefaultValue3(v LayerFullUpdateContractDtoParametersDefaultValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoParametersDefaultValue4 returns the union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as a LayerFullUpdateContractDtoParametersDefaultValue4
func (t LayerFullUpdateContractDto_Parameters_DefaultValue) AsLayerFullUpdateContractDtoParametersDefaultValue4() (LayerFullUpdateContractDtoParametersDefaultValue4, error) {
	var body LayerFullUpdateContractDtoParametersDefaultValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoParametersDefaultValue4 overwrites any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue as the provided LayerFullUpdateContractDtoParametersDefaultValue4
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) FromLayerFullUpdateContractDtoParametersDefaultValue4(v LayerFullUpdateContractDtoParametersDefaultValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoParametersDefaultValue4 performs a merge with any union data inside the LayerFullUpdateContractDto_Parameters_DefaultValue, using the provided LayerFullUpdateContractDtoParametersDefaultValue4
func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) MergeLayerFullUpdateContractDtoParametersDefaultValue4(v LayerFullUpdateContractDtoParametersDefaultValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerFullUpdateContractDto_Parameters_DefaultValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerFullUpdateContractDto_Parameters_DefaultValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerFullUpdateContractDtoTargetApps0 returns the union data inside the LayerFullUpdateContractDto_TargetApps as a LayerFullUpdateContractDtoTargetApps0
func (t LayerFullUpdateContractDto_TargetApps) AsLayerFullUpdateContractDtoTargetApps0() (LayerFullUpdateContractDtoTargetApps0, error) {
	var body LayerFullUpdateContractDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoTargetApps0 overwrites any union data inside the LayerFullUpdateContractDto_TargetApps as the provided LayerFullUpdateContractDtoTargetApps0
func (t *LayerFullUpdateContractDto_TargetApps) FromLayerFullUpdateContractDtoTargetApps0(v LayerFullUpdateContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoTargetApps0 performs a merge with any union data inside the LayerFullUpdateContractDto_TargetApps, using the provided LayerFullUpdateContractDtoTargetApps0
func (t *LayerFullUpdateContractDto_TargetApps) MergeLayerFullUpdateContractDtoTargetApps0(v LayerFullUpdateContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerFullUpdateContractDtoTargetApps1 returns the union data inside the LayerFullUpdateContractDto_TargetApps as a LayerFullUpdateContractDtoTargetApps1
func (t LayerFullUpdateContractDto_TargetApps) AsLayerFullUpdateContractDtoTargetApps1() (LayerFullUpdateContractDtoTargetApps1, error) {
	var body LayerFullUpdateContractDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerFullUpdateContractDtoTargetApps1 overwrites any union data inside the LayerFullUpdateContractDto_TargetApps as the provided LayerFullUpdateContractDtoTargetApps1
func (t *LayerFullUpdateContractDto_TargetApps) FromLayerFullUpdateContractDtoTargetApps1(v LayerFullUpdateContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerFullUpdateContractDtoTargetApps1 performs a merge with any union data inside the LayerFullUpdateContractDto_TargetApps, using the provided LayerFullUpdateContractDtoTargetApps1
func (t *LayerFullUpdateContractDto_TargetApps) MergeLayerFullUpdateContractDtoTargetApps1(v LayerFullUpdateContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerFullUpdateContractDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerFullUpdateContractDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue40 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerPartialUpdateContractDtoParametersDefaultValue40
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerPartialUpdateContractDtoParametersDefaultValue40() (LayerPartialUpdateContractDtoParametersDefaultValue40, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue40
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue40 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerPartialUpdateContractDtoParametersDefaultValue40
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerPartialUpdateContractDtoParametersDefaultValue40(v LayerPartialUpdateContractDtoParametersDefaultValue40) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue40 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerPartialUpdateContractDtoParametersDefaultValue40
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerPartialUpdateContractDtoParametersDefaultValue40(v LayerPartialUpdateContractDtoParametersDefaultValue40) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue41 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerPartialUpdateContractDtoParametersDefaultValue41
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerPartialUpdateContractDtoParametersDefaultValue41() (LayerPartialUpdateContractDtoParametersDefaultValue41, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue41
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue41 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerPartialUpdateContractDtoParametersDefaultValue41
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerPartialUpdateContractDtoParametersDefaultValue41(v LayerPartialUpdateContractDtoParametersDefaultValue41) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue41 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerPartialUpdateContractDtoParametersDefaultValue41
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerPartialUpdateContractDtoParametersDefaultValue41(v LayerPartialUpdateContractDtoParametersDefaultValue41) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue42 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerPartialUpdateContractDtoParametersDefaultValue42
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerPartialUpdateContractDtoParametersDefaultValue42() (LayerPartialUpdateContractDtoParametersDefaultValue42, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue42
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue42 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerPartialUpdateContractDtoParametersDefaultValue42
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerPartialUpdateContractDtoParametersDefaultValue42(v LayerPartialUpdateContractDtoParametersDefaultValue42) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue42 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerPartialUpdateContractDtoParametersDefaultValue42
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerPartialUpdateContractDtoParametersDefaultValue42(v LayerPartialUpdateContractDtoParametersDefaultValue42) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue43 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as a LayerPartialUpdateContractDtoParametersDefaultValue43
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) AsLayerPartialUpdateContractDtoParametersDefaultValue43() (LayerPartialUpdateContractDtoParametersDefaultValue43, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue43
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue43 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item as the provided LayerPartialUpdateContractDtoParametersDefaultValue43
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) FromLayerPartialUpdateContractDtoParametersDefaultValue43(v LayerPartialUpdateContractDtoParametersDefaultValue43) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue43 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item, using the provided LayerPartialUpdateContractDtoParametersDefaultValue43
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) MergeLayerPartialUpdateContractDtoParametersDefaultValue43(v LayerPartialUpdateContractDtoParametersDefaultValue43) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue_4_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue0 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as a LayerPartialUpdateContractDtoParametersDefaultValue0
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue) AsLayerPartialUpdateContractDtoParametersDefaultValue0() (LayerPartialUpdateContractDtoParametersDefaultValue0, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue0 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as the provided LayerPartialUpdateContractDtoParametersDefaultValue0
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) FromLayerPartialUpdateContractDtoParametersDefaultValue0(v LayerPartialUpdateContractDtoParametersDefaultValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue0 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue, using the provided LayerPartialUpdateContractDtoParametersDefaultValue0
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) MergeLayerPartialUpdateContractDtoParametersDefaultValue0(v LayerPartialUpdateContractDtoParametersDefaultValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue1 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as a LayerPartialUpdateContractDtoParametersDefaultValue1
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue) AsLayerPartialUpdateContractDtoParametersDefaultValue1() (LayerPartialUpdateContractDtoParametersDefaultValue1, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue1 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as the provided LayerPartialUpdateContractDtoParametersDefaultValue1
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) FromLayerPartialUpdateContractDtoParametersDefaultValue1(v LayerPartialUpdateContractDtoParametersDefaultValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue1 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue, using the provided LayerPartialUpdateContractDtoParametersDefaultValue1
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) MergeLayerPartialUpdateContractDtoParametersDefaultValue1(v LayerPartialUpdateContractDtoParametersDefaultValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue2 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as a LayerPartialUpdateContractDtoParametersDefaultValue2
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue) AsLayerPartialUpdateContractDtoParametersDefaultValue2() (LayerPartialUpdateContractDtoParametersDefaultValue2, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue2 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as the provided LayerPartialUpdateContractDtoParametersDefaultValue2
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) FromLayerPartialUpdateContractDtoParametersDefaultValue2(v LayerPartialUpdateContractDtoParametersDefaultValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue2 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue, using the provided LayerPartialUpdateContractDtoParametersDefaultValue2
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) MergeLayerPartialUpdateContractDtoParametersDefaultValue2(v LayerPartialUpdateContractDtoParametersDefaultValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue3 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as a LayerPartialUpdateContractDtoParametersDefaultValue3
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue) AsLayerPartialUpdateContractDtoParametersDefaultValue3() (LayerPartialUpdateContractDtoParametersDefaultValue3, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue3 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as the provided LayerPartialUpdateContractDtoParametersDefaultValue3
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) FromLayerPartialUpdateContractDtoParametersDefaultValue3(v LayerPartialUpdateContractDtoParametersDefaultValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue3 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue, using the provided LayerPartialUpdateContractDtoParametersDefaultValue3
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) MergeLayerPartialUpdateContractDtoParametersDefaultValue3(v LayerPartialUpdateContractDtoParametersDefaultValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoParametersDefaultValue4 returns the union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as a LayerPartialUpdateContractDtoParametersDefaultValue4
func (t LayerPartialUpdateContractDto_Parameters_DefaultValue) AsLayerPartialUpdateContractDtoParametersDefaultValue4() (LayerPartialUpdateContractDtoParametersDefaultValue4, error) {
	var body LayerPartialUpdateContractDtoParametersDefaultValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoParametersDefaultValue4 overwrites any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue as the provided LayerPartialUpdateContractDtoParametersDefaultValue4
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) FromLayerPartialUpdateContractDtoParametersDefaultValue4(v LayerPartialUpdateContractDtoParametersDefaultValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoParametersDefaultValue4 performs a merge with any union data inside the LayerPartialUpdateContractDto_Parameters_DefaultValue, using the provided LayerPartialUpdateContractDtoParametersDefaultValue4
func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) MergeLayerPartialUpdateContractDtoParametersDefaultValue4(v LayerPartialUpdateContractDtoParametersDefaultValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerPartialUpdateContractDto_Parameters_DefaultValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerPartialUpdateContractDto_Parameters_DefaultValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLayerPartialUpdateContractDtoTargetApps0 returns the union data inside the LayerPartialUpdateContractDto_TargetApps as a LayerPartialUpdateContractDtoTargetApps0
func (t LayerPartialUpdateContractDto_TargetApps) AsLayerPartialUpdateContractDtoTargetApps0() (LayerPartialUpdateContractDtoTargetApps0, error) {
	var body LayerPartialUpdateContractDtoTargetApps0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoTargetApps0 overwrites any union data inside the LayerPartialUpdateContractDto_TargetApps as the provided LayerPartialUpdateContractDtoTargetApps0
func (t *LayerPartialUpdateContractDto_TargetApps) FromLayerPartialUpdateContractDtoTargetApps0(v LayerPartialUpdateContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoTargetApps0 performs a merge with any union data inside the LayerPartialUpdateContractDto_TargetApps, using the provided LayerPartialUpdateContractDtoTargetApps0
func (t *LayerPartialUpdateContractDto_TargetApps) MergeLayerPartialUpdateContractDtoTargetApps0(v LayerPartialUpdateContractDtoTargetApps0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLayerPartialUpdateContractDtoTargetApps1 returns the union data inside the LayerPartialUpdateContractDto_TargetApps as a LayerPartialUpdateContractDtoTargetApps1
func (t LayerPartialUpdateContractDto_TargetApps) AsLayerPartialUpdateContractDtoTargetApps1() (LayerPartialUpdateContractDtoTargetApps1, error) {
	var body LayerPartialUpdateContractDtoTargetApps1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLayerPartialUpdateContractDtoTargetApps1 overwrites any union data inside the LayerPartialUpdateContractDto_TargetApps as the provided LayerPartialUpdateContractDtoTargetApps1
func (t *LayerPartialUpdateContractDto_TargetApps) FromLayerPartialUpdateContractDtoTargetApps1(v LayerPartialUpdateContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLayerPartialUpdateContractDtoTargetApps1 performs a merge with any union data inside the LayerPartialUpdateContractDto_TargetApps, using the provided LayerPartialUpdateContractDtoTargetApps1
func (t *LayerPartialUpdateContractDto_TargetApps) MergeLayerPartialUpdateContractDtoTargetApps1(v LayerPartialUpdateContractDtoTargetApps1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LayerPartialUpdateContractDto_TargetApps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LayerPartialUpdateContractDto_TargetApps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMetricCreationContractDtoTags0 returns the union data inside the MetricCreationContractDto_Tags as a MetricCreationContractDtoTags0
func (t MetricCreationContractDto_Tags) AsMetricCreationContractDtoTags0() (MetricCreationContractDtoTags0, error) {
	var body MetricCreationContractDtoTags0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetricCreationContractDtoTags0 overwrites any union data inside the MetricCreationContractDto_Tags as the provided MetricCreationContractDtoTags0
func (t *MetricCreationContractDto_Tags) FromMetricCreationContractDtoTags0(v MetricCreationContractDtoTags0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetricCreationContractDtoTags0 performs a merge with any union data inside the MetricCreationContractDto_Tags, using the provided MetricCreationContractDtoTags0
func (t *MetricCreationContractDto_Tags) MergeMetricCreationContractDtoTags0(v MetricCreationContractDtoTags0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMetricCreationContractDtoTags1 returns the union data inside the MetricCreationContractDto_Tags as a MetricCreationContractDtoTags1
func (t MetricCreationContractDto_Tags) AsMetricCreationContractDtoTags1() (MetricCreationContractDtoTags1, error) {
	var body MetricCreationContractDtoTags1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMetricCreationContractDtoTags1 overwrites any union data inside the MetricCreationContractDto_Tags as the provided MetricCreationContractDtoTags1
func (t *MetricCreationContractDto_Tags) FromMetricCreationContractDtoTags1(v MetricCreationContractDtoTags1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMetricCreationContractDtoTags1 performs a merge with any union data inside the MetricCreationContractDto_Tags, using the provided MetricCreationContractDtoTags1
func (t *MetricCreationContractDto_Tags) MergeMetricCreationContractDtoTags1(v MetricCreationContractDtoTags1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MetricCreationContractDto_Tags) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MetricCreationContractDto_Tags) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0 returns the union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as a MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0
func (t MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0() (MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0, error) {
	var body MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0 overwrites any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0 performs a merge with any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue, using the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1 returns the union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as a MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1
func (t MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1() (MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1, error) {
	var body MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1 overwrites any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1 performs a merge with any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue, using the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2 returns the union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as a MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2
func (t MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2() (MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2, error) {
	var body MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2 overwrites any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2 performs a merge with any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue, using the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3 returns the union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as a MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3
func (t MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) AsMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3() (MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3, error) {
	var body MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3 overwrites any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue as the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) FromMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3 performs a merge with any union data inside the MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue, using the provided MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3
func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) MergeMultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3(v MultiDynamicConfigRuleAddDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MultiDynamicConfigRuleAddDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMultiRuleDtoRulesConditionsTargetValue0 returns the union data inside the MultiRuleDto_Rules_Conditions_TargetValue as a MultiRuleDtoRulesConditionsTargetValue0
func (t MultiRuleDto_Rules_Conditions_TargetValue) AsMultiRuleDtoRulesConditionsTargetValue0() (MultiRuleDtoRulesConditionsTargetValue0, error) {
	var body MultiRuleDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleDtoRulesConditionsTargetValue0 overwrites any union data inside the MultiRuleDto_Rules_Conditions_TargetValue as the provided MultiRuleDtoRulesConditionsTargetValue0
func (t *MultiRuleDto_Rules_Conditions_TargetValue) FromMultiRuleDtoRulesConditionsTargetValue0(v MultiRuleDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleDtoRulesConditionsTargetValue0 performs a merge with any union data inside the MultiRuleDto_Rules_Conditions_TargetValue, using the provided MultiRuleDtoRulesConditionsTargetValue0
func (t *MultiRuleDto_Rules_Conditions_TargetValue) MergeMultiRuleDtoRulesConditionsTargetValue0(v MultiRuleDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiRuleDtoRulesConditionsTargetValue1 returns the union data inside the MultiRuleDto_Rules_Conditions_TargetValue as a MultiRuleDtoRulesConditionsTargetValue1
func (t MultiRuleDto_Rules_Conditions_TargetValue) AsMultiRuleDtoRulesConditionsTargetValue1() (MultiRuleDtoRulesConditionsTargetValue1, error) {
	var body MultiRuleDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleDtoRulesConditionsTargetValue1 overwrites any union data inside the MultiRuleDto_Rules_Conditions_TargetValue as the provided MultiRuleDtoRulesConditionsTargetValue1
func (t *MultiRuleDto_Rules_Conditions_TargetValue) FromMultiRuleDtoRulesConditionsTargetValue1(v MultiRuleDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleDtoRulesConditionsTargetValue1 performs a merge with any union data inside the MultiRuleDto_Rules_Conditions_TargetValue, using the provided MultiRuleDtoRulesConditionsTargetValue1
func (t *MultiRuleDto_Rules_Conditions_TargetValue) MergeMultiRuleDtoRulesConditionsTargetValue1(v MultiRuleDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiRuleDtoRulesConditionsTargetValue2 returns the union data inside the MultiRuleDto_Rules_Conditions_TargetValue as a MultiRuleDtoRulesConditionsTargetValue2
func (t MultiRuleDto_Rules_Conditions_TargetValue) AsMultiRuleDtoRulesConditionsTargetValue2() (MultiRuleDtoRulesConditionsTargetValue2, error) {
	var body MultiRuleDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleDtoRulesConditionsTargetValue2 overwrites any union data inside the MultiRuleDto_Rules_Conditions_TargetValue as the provided MultiRuleDtoRulesConditionsTargetValue2
func (t *MultiRuleDto_Rules_Conditions_TargetValue) FromMultiRuleDtoRulesConditionsTargetValue2(v MultiRuleDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleDtoRulesConditionsTargetValue2 performs a merge with any union data inside the MultiRuleDto_Rules_Conditions_TargetValue, using the provided MultiRuleDtoRulesConditionsTargetValue2
func (t *MultiRuleDto_Rules_Conditions_TargetValue) MergeMultiRuleDtoRulesConditionsTargetValue2(v MultiRuleDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiRuleDtoRulesConditionsTargetValue3 returns the union data inside the MultiRuleDto_Rules_Conditions_TargetValue as a MultiRuleDtoRulesConditionsTargetValue3
func (t MultiRuleDto_Rules_Conditions_TargetValue) AsMultiRuleDtoRulesConditionsTargetValue3() (MultiRuleDtoRulesConditionsTargetValue3, error) {
	var body MultiRuleDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleDtoRulesConditionsTargetValue3 overwrites any union data inside the MultiRuleDto_Rules_Conditions_TargetValue as the provided MultiRuleDtoRulesConditionsTargetValue3
func (t *MultiRuleDto_Rules_Conditions_TargetValue) FromMultiRuleDtoRulesConditionsTargetValue3(v MultiRuleDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleDtoRulesConditionsTargetValue3 performs a merge with any union data inside the MultiRuleDto_Rules_Conditions_TargetValue, using the provided MultiRuleDtoRulesConditionsTargetValue3
func (t *MultiRuleDto_Rules_Conditions_TargetValue) MergeMultiRuleDtoRulesConditionsTargetValue3(v MultiRuleDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MultiRuleDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MultiRuleDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMultiRuleUpdateDtoRulesConditionsTargetValue0 returns the union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as a MultiRuleUpdateDtoRulesConditionsTargetValue0
func (t MultiRuleUpdateDto_Rules_Conditions_TargetValue) AsMultiRuleUpdateDtoRulesConditionsTargetValue0() (MultiRuleUpdateDtoRulesConditionsTargetValue0, error) {
	var body MultiRuleUpdateDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleUpdateDtoRulesConditionsTargetValue0 overwrites any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as the provided MultiRuleUpdateDtoRulesConditionsTargetValue0
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) FromMultiRuleUpdateDtoRulesConditionsTargetValue0(v MultiRuleUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleUpdateDtoRulesConditionsTargetValue0 performs a merge with any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue, using the provided MultiRuleUpdateDtoRulesConditionsTargetValue0
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) MergeMultiRuleUpdateDtoRulesConditionsTargetValue0(v MultiRuleUpdateDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiRuleUpdateDtoRulesConditionsTargetValue1 returns the union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as a MultiRuleUpdateDtoRulesConditionsTargetValue1
func (t MultiRuleUpdateDto_Rules_Conditions_TargetValue) AsMultiRuleUpdateDtoRulesConditionsTargetValue1() (MultiRuleUpdateDtoRulesConditionsTargetValue1, error) {
	var body MultiRuleUpdateDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleUpdateDtoRulesConditionsTargetValue1 overwrites any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as the provided MultiRuleUpdateDtoRulesConditionsTargetValue1
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) FromMultiRuleUpdateDtoRulesConditionsTargetValue1(v MultiRuleUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleUpdateDtoRulesConditionsTargetValue1 performs a merge with any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue, using the provided MultiRuleUpdateDtoRulesConditionsTargetValue1
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) MergeMultiRuleUpdateDtoRulesConditionsTargetValue1(v MultiRuleUpdateDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiRuleUpdateDtoRulesConditionsTargetValue2 returns the union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as a MultiRuleUpdateDtoRulesConditionsTargetValue2
func (t MultiRuleUpdateDto_Rules_Conditions_TargetValue) AsMultiRuleUpdateDtoRulesConditionsTargetValue2() (MultiRuleUpdateDtoRulesConditionsTargetValue2, error) {
	var body MultiRuleUpdateDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleUpdateDtoRulesConditionsTargetValue2 overwrites any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as the provided MultiRuleUpdateDtoRulesConditionsTargetValue2
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) FromMultiRuleUpdateDtoRulesConditionsTargetValue2(v MultiRuleUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleUpdateDtoRulesConditionsTargetValue2 performs a merge with any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue, using the provided MultiRuleUpdateDtoRulesConditionsTargetValue2
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) MergeMultiRuleUpdateDtoRulesConditionsTargetValue2(v MultiRuleUpdateDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMultiRuleUpdateDtoRulesConditionsTargetValue3 returns the union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as a MultiRuleUpdateDtoRulesConditionsTargetValue3
func (t MultiRuleUpdateDto_Rules_Conditions_TargetValue) AsMultiRuleUpdateDtoRulesConditionsTargetValue3() (MultiRuleUpdateDtoRulesConditionsTargetValue3, error) {
	var body MultiRuleUpdateDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMultiRuleUpdateDtoRulesConditionsTargetValue3 overwrites any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue as the provided MultiRuleUpdateDtoRulesConditionsTargetValue3
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) FromMultiRuleUpdateDtoRulesConditionsTargetValue3(v MultiRuleUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMultiRuleUpdateDtoRulesConditionsTargetValue3 performs a merge with any union data inside the MultiRuleUpdateDto_Rules_Conditions_TargetValue, using the provided MultiRuleUpdateDtoRulesConditionsTargetValue3
func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) MergeMultiRuleUpdateDtoRulesConditionsTargetValue3(v MultiRuleUpdateDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MultiRuleUpdateDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MultiRuleUpdateDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReleasePipelineDtoPhasesRulesConditionsTargetValue0 returns the union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as a ReleasePipelineDtoPhasesRulesConditionsTargetValue0
func (t ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) AsReleasePipelineDtoPhasesRulesConditionsTargetValue0() (ReleasePipelineDtoPhasesRulesConditionsTargetValue0, error) {
	var body ReleasePipelineDtoPhasesRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReleasePipelineDtoPhasesRulesConditionsTargetValue0 overwrites any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue0
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) FromReleasePipelineDtoPhasesRulesConditionsTargetValue0(v ReleasePipelineDtoPhasesRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReleasePipelineDtoPhasesRulesConditionsTargetValue0 performs a merge with any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue, using the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue0
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) MergeReleasePipelineDtoPhasesRulesConditionsTargetValue0(v ReleasePipelineDtoPhasesRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReleasePipelineDtoPhasesRulesConditionsTargetValue1 returns the union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as a ReleasePipelineDtoPhasesRulesConditionsTargetValue1
func (t ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) AsReleasePipelineDtoPhasesRulesConditionsTargetValue1() (ReleasePipelineDtoPhasesRulesConditionsTargetValue1, error) {
	var body ReleasePipelineDtoPhasesRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReleasePipelineDtoPhasesRulesConditionsTargetValue1 overwrites any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue1
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) FromReleasePipelineDtoPhasesRulesConditionsTargetValue1(v ReleasePipelineDtoPhasesRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReleasePipelineDtoPhasesRulesConditionsTargetValue1 performs a merge with any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue, using the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue1
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) MergeReleasePipelineDtoPhasesRulesConditionsTargetValue1(v ReleasePipelineDtoPhasesRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReleasePipelineDtoPhasesRulesConditionsTargetValue2 returns the union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as a ReleasePipelineDtoPhasesRulesConditionsTargetValue2
func (t ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) AsReleasePipelineDtoPhasesRulesConditionsTargetValue2() (ReleasePipelineDtoPhasesRulesConditionsTargetValue2, error) {
	var body ReleasePipelineDtoPhasesRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReleasePipelineDtoPhasesRulesConditionsTargetValue2 overwrites any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue2
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) FromReleasePipelineDtoPhasesRulesConditionsTargetValue2(v ReleasePipelineDtoPhasesRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReleasePipelineDtoPhasesRulesConditionsTargetValue2 performs a merge with any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue, using the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue2
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) MergeReleasePipelineDtoPhasesRulesConditionsTargetValue2(v ReleasePipelineDtoPhasesRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReleasePipelineDtoPhasesRulesConditionsTargetValue3 returns the union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as a ReleasePipelineDtoPhasesRulesConditionsTargetValue3
func (t ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) AsReleasePipelineDtoPhasesRulesConditionsTargetValue3() (ReleasePipelineDtoPhasesRulesConditionsTargetValue3, error) {
	var body ReleasePipelineDtoPhasesRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReleasePipelineDtoPhasesRulesConditionsTargetValue3 overwrites any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue as the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue3
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) FromReleasePipelineDtoPhasesRulesConditionsTargetValue3(v ReleasePipelineDtoPhasesRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReleasePipelineDtoPhasesRulesConditionsTargetValue3 performs a merge with any union data inside the ReleasePipelineDto_Phases_Rules_Conditions_TargetValue, using the provided ReleasePipelineDtoPhasesRulesConditionsTargetValue3
func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) MergeReleasePipelineDtoPhasesRulesConditionsTargetValue3(v ReleasePipelineDtoPhasesRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReleasePipelineDto_Phases_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReleasePipelineTriggerResponseDtoActionsType0 returns the union data inside the ReleasePipelineTriggerResponseDto_Actions_Type as a ReleasePipelineTriggerResponseDtoActionsType0
func (t ReleasePipelineTriggerResponseDto_Actions_Type) AsReleasePipelineTriggerResponseDtoActionsType0() (ReleasePipelineTriggerResponseDtoActionsType0, error) {
	var body ReleasePipelineTriggerResponseDtoActionsType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReleasePipelineTriggerResponseDtoActionsType0 overwrites any union data inside the ReleasePipelineTriggerResponseDto_Actions_Type as the provided ReleasePipelineTriggerResponseDtoActionsType0
func (t *ReleasePipelineTriggerResponseDto_Actions_Type) FromReleasePipelineTriggerResponseDtoActionsType0(v ReleasePipelineTriggerResponseDtoActionsType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReleasePipelineTriggerResponseDtoActionsType0 performs a merge with any union data inside the ReleasePipelineTriggerResponseDto_Actions_Type, using the provided ReleasePipelineTriggerResponseDtoActionsType0
func (t *ReleasePipelineTriggerResponseDto_Actions_Type) MergeReleasePipelineTriggerResponseDtoActionsType0(v ReleasePipelineTriggerResponseDtoActionsType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReleasePipelineTriggerResponseDtoActionsType1 returns the union data inside the ReleasePipelineTriggerResponseDto_Actions_Type as a ReleasePipelineTriggerResponseDtoActionsType1
func (t ReleasePipelineTriggerResponseDto_Actions_Type) AsReleasePipelineTriggerResponseDtoActionsType1() (ReleasePipelineTriggerResponseDtoActionsType1, error) {
	var body ReleasePipelineTriggerResponseDtoActionsType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReleasePipelineTriggerResponseDtoActionsType1 overwrites any union data inside the ReleasePipelineTriggerResponseDto_Actions_Type as the provided ReleasePipelineTriggerResponseDtoActionsType1
func (t *ReleasePipelineTriggerResponseDto_Actions_Type) FromReleasePipelineTriggerResponseDtoActionsType1(v ReleasePipelineTriggerResponseDtoActionsType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReleasePipelineTriggerResponseDtoActionsType1 performs a merge with any union data inside the ReleasePipelineTriggerResponseDto_Actions_Type, using the provided ReleasePipelineTriggerResponseDtoActionsType1
func (t *ReleasePipelineTriggerResponseDto_Actions_Type) MergeReleasePipelineTriggerResponseDtoActionsType1(v ReleasePipelineTriggerResponseDtoActionsType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReleasePipelineTriggerResponseDto_Actions_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReleasePipelineTriggerResponseDto_Actions_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRuleDtoConditionsTargetValue0 returns the union data inside the RuleDto_Conditions_TargetValue as a RuleDtoConditionsTargetValue0
func (t RuleDto_Conditions_TargetValue) AsRuleDtoConditionsTargetValue0() (RuleDtoConditionsTargetValue0, error) {
	var body RuleDtoConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleDtoConditionsTargetValue0 overwrites any union data inside the RuleDto_Conditions_TargetValue as the provided RuleDtoConditionsTargetValue0
func (t *RuleDto_Conditions_TargetValue) FromRuleDtoConditionsTargetValue0(v RuleDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleDtoConditionsTargetValue0 performs a merge with any union data inside the RuleDto_Conditions_TargetValue, using the provided RuleDtoConditionsTargetValue0
func (t *RuleDto_Conditions_TargetValue) MergeRuleDtoConditionsTargetValue0(v RuleDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRuleDtoConditionsTargetValue1 returns the union data inside the RuleDto_Conditions_TargetValue as a RuleDtoConditionsTargetValue1
func (t RuleDto_Conditions_TargetValue) AsRuleDtoConditionsTargetValue1() (RuleDtoConditionsTargetValue1, error) {
	var body RuleDtoConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleDtoConditionsTargetValue1 overwrites any union data inside the RuleDto_Conditions_TargetValue as the provided RuleDtoConditionsTargetValue1
func (t *RuleDto_Conditions_TargetValue) FromRuleDtoConditionsTargetValue1(v RuleDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleDtoConditionsTargetValue1 performs a merge with any union data inside the RuleDto_Conditions_TargetValue, using the provided RuleDtoConditionsTargetValue1
func (t *RuleDto_Conditions_TargetValue) MergeRuleDtoConditionsTargetValue1(v RuleDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRuleDtoConditionsTargetValue2 returns the union data inside the RuleDto_Conditions_TargetValue as a RuleDtoConditionsTargetValue2
func (t RuleDto_Conditions_TargetValue) AsRuleDtoConditionsTargetValue2() (RuleDtoConditionsTargetValue2, error) {
	var body RuleDtoConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleDtoConditionsTargetValue2 overwrites any union data inside the RuleDto_Conditions_TargetValue as the provided RuleDtoConditionsTargetValue2
func (t *RuleDto_Conditions_TargetValue) FromRuleDtoConditionsTargetValue2(v RuleDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleDtoConditionsTargetValue2 performs a merge with any union data inside the RuleDto_Conditions_TargetValue, using the provided RuleDtoConditionsTargetValue2
func (t *RuleDto_Conditions_TargetValue) MergeRuleDtoConditionsTargetValue2(v RuleDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRuleDtoConditionsTargetValue3 returns the union data inside the RuleDto_Conditions_TargetValue as a RuleDtoConditionsTargetValue3
func (t RuleDto_Conditions_TargetValue) AsRuleDtoConditionsTargetValue3() (RuleDtoConditionsTargetValue3, error) {
	var body RuleDtoConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleDtoConditionsTargetValue3 overwrites any union data inside the RuleDto_Conditions_TargetValue as the provided RuleDtoConditionsTargetValue3
func (t *RuleDto_Conditions_TargetValue) FromRuleDtoConditionsTargetValue3(v RuleDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleDtoConditionsTargetValue3 performs a merge with any union data inside the RuleDto_Conditions_TargetValue, using the provided RuleDtoConditionsTargetValue3
func (t *RuleDto_Conditions_TargetValue) MergeRuleDtoConditionsTargetValue3(v RuleDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RuleDto_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RuleDto_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRuleUpdateDtoConditionsTargetValue0 returns the union data inside the RuleUpdateDto_Conditions_TargetValue as a RuleUpdateDtoConditionsTargetValue0
func (t RuleUpdateDto_Conditions_TargetValue) AsRuleUpdateDtoConditionsTargetValue0() (RuleUpdateDtoConditionsTargetValue0, error) {
	var body RuleUpdateDtoConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleUpdateDtoConditionsTargetValue0 overwrites any union data inside the RuleUpdateDto_Conditions_TargetValue as the provided RuleUpdateDtoConditionsTargetValue0
func (t *RuleUpdateDto_Conditions_TargetValue) FromRuleUpdateDtoConditionsTargetValue0(v RuleUpdateDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleUpdateDtoConditionsTargetValue0 performs a merge with any union data inside the RuleUpdateDto_Conditions_TargetValue, using the provided RuleUpdateDtoConditionsTargetValue0
func (t *RuleUpdateDto_Conditions_TargetValue) MergeRuleUpdateDtoConditionsTargetValue0(v RuleUpdateDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRuleUpdateDtoConditionsTargetValue1 returns the union data inside the RuleUpdateDto_Conditions_TargetValue as a RuleUpdateDtoConditionsTargetValue1
func (t RuleUpdateDto_Conditions_TargetValue) AsRuleUpdateDtoConditionsTargetValue1() (RuleUpdateDtoConditionsTargetValue1, error) {
	var body RuleUpdateDtoConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleUpdateDtoConditionsTargetValue1 overwrites any union data inside the RuleUpdateDto_Conditions_TargetValue as the provided RuleUpdateDtoConditionsTargetValue1
func (t *RuleUpdateDto_Conditions_TargetValue) FromRuleUpdateDtoConditionsTargetValue1(v RuleUpdateDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleUpdateDtoConditionsTargetValue1 performs a merge with any union data inside the RuleUpdateDto_Conditions_TargetValue, using the provided RuleUpdateDtoConditionsTargetValue1
func (t *RuleUpdateDto_Conditions_TargetValue) MergeRuleUpdateDtoConditionsTargetValue1(v RuleUpdateDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRuleUpdateDtoConditionsTargetValue2 returns the union data inside the RuleUpdateDto_Conditions_TargetValue as a RuleUpdateDtoConditionsTargetValue2
func (t RuleUpdateDto_Conditions_TargetValue) AsRuleUpdateDtoConditionsTargetValue2() (RuleUpdateDtoConditionsTargetValue2, error) {
	var body RuleUpdateDtoConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleUpdateDtoConditionsTargetValue2 overwrites any union data inside the RuleUpdateDto_Conditions_TargetValue as the provided RuleUpdateDtoConditionsTargetValue2
func (t *RuleUpdateDto_Conditions_TargetValue) FromRuleUpdateDtoConditionsTargetValue2(v RuleUpdateDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleUpdateDtoConditionsTargetValue2 performs a merge with any union data inside the RuleUpdateDto_Conditions_TargetValue, using the provided RuleUpdateDtoConditionsTargetValue2
func (t *RuleUpdateDto_Conditions_TargetValue) MergeRuleUpdateDtoConditionsTargetValue2(v RuleUpdateDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRuleUpdateDtoConditionsTargetValue3 returns the union data inside the RuleUpdateDto_Conditions_TargetValue as a RuleUpdateDtoConditionsTargetValue3
func (t RuleUpdateDto_Conditions_TargetValue) AsRuleUpdateDtoConditionsTargetValue3() (RuleUpdateDtoConditionsTargetValue3, error) {
	var body RuleUpdateDtoConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRuleUpdateDtoConditionsTargetValue3 overwrites any union data inside the RuleUpdateDto_Conditions_TargetValue as the provided RuleUpdateDtoConditionsTargetValue3
func (t *RuleUpdateDto_Conditions_TargetValue) FromRuleUpdateDtoConditionsTargetValue3(v RuleUpdateDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRuleUpdateDtoConditionsTargetValue3 performs a merge with any union data inside the RuleUpdateDto_Conditions_TargetValue, using the provided RuleUpdateDtoConditionsTargetValue3
func (t *RuleUpdateDto_Conditions_TargetValue) MergeRuleUpdateDtoConditionsTargetValue3(v RuleUpdateDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RuleUpdateDto_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RuleUpdateDto_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSegmentCreateContractDtoRulesConditionsTargetValue0 returns the union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as a SegmentCreateContractDtoRulesConditionsTargetValue0
func (t SegmentCreateContractDto_Rules_Conditions_TargetValue) AsSegmentCreateContractDtoRulesConditionsTargetValue0() (SegmentCreateContractDtoRulesConditionsTargetValue0, error) {
	var body SegmentCreateContractDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentCreateContractDtoRulesConditionsTargetValue0 overwrites any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as the provided SegmentCreateContractDtoRulesConditionsTargetValue0
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) FromSegmentCreateContractDtoRulesConditionsTargetValue0(v SegmentCreateContractDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentCreateContractDtoRulesConditionsTargetValue0 performs a merge with any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue, using the provided SegmentCreateContractDtoRulesConditionsTargetValue0
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) MergeSegmentCreateContractDtoRulesConditionsTargetValue0(v SegmentCreateContractDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentCreateContractDtoRulesConditionsTargetValue1 returns the union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as a SegmentCreateContractDtoRulesConditionsTargetValue1
func (t SegmentCreateContractDto_Rules_Conditions_TargetValue) AsSegmentCreateContractDtoRulesConditionsTargetValue1() (SegmentCreateContractDtoRulesConditionsTargetValue1, error) {
	var body SegmentCreateContractDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentCreateContractDtoRulesConditionsTargetValue1 overwrites any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as the provided SegmentCreateContractDtoRulesConditionsTargetValue1
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) FromSegmentCreateContractDtoRulesConditionsTargetValue1(v SegmentCreateContractDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentCreateContractDtoRulesConditionsTargetValue1 performs a merge with any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue, using the provided SegmentCreateContractDtoRulesConditionsTargetValue1
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) MergeSegmentCreateContractDtoRulesConditionsTargetValue1(v SegmentCreateContractDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentCreateContractDtoRulesConditionsTargetValue2 returns the union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as a SegmentCreateContractDtoRulesConditionsTargetValue2
func (t SegmentCreateContractDto_Rules_Conditions_TargetValue) AsSegmentCreateContractDtoRulesConditionsTargetValue2() (SegmentCreateContractDtoRulesConditionsTargetValue2, error) {
	var body SegmentCreateContractDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentCreateContractDtoRulesConditionsTargetValue2 overwrites any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as the provided SegmentCreateContractDtoRulesConditionsTargetValue2
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) FromSegmentCreateContractDtoRulesConditionsTargetValue2(v SegmentCreateContractDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentCreateContractDtoRulesConditionsTargetValue2 performs a merge with any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue, using the provided SegmentCreateContractDtoRulesConditionsTargetValue2
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) MergeSegmentCreateContractDtoRulesConditionsTargetValue2(v SegmentCreateContractDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentCreateContractDtoRulesConditionsTargetValue3 returns the union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as a SegmentCreateContractDtoRulesConditionsTargetValue3
func (t SegmentCreateContractDto_Rules_Conditions_TargetValue) AsSegmentCreateContractDtoRulesConditionsTargetValue3() (SegmentCreateContractDtoRulesConditionsTargetValue3, error) {
	var body SegmentCreateContractDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentCreateContractDtoRulesConditionsTargetValue3 overwrites any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue as the provided SegmentCreateContractDtoRulesConditionsTargetValue3
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) FromSegmentCreateContractDtoRulesConditionsTargetValue3(v SegmentCreateContractDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentCreateContractDtoRulesConditionsTargetValue3 performs a merge with any union data inside the SegmentCreateContractDto_Rules_Conditions_TargetValue, using the provided SegmentCreateContractDtoRulesConditionsTargetValue3
func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) MergeSegmentCreateContractDtoRulesConditionsTargetValue3(v SegmentCreateContractDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SegmentCreateContractDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SegmentCreateContractDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSegmentDtoRulesConditionsTargetValue0 returns the union data inside the SegmentDto_Rules_Conditions_TargetValue as a SegmentDtoRulesConditionsTargetValue0
func (t SegmentDto_Rules_Conditions_TargetValue) AsSegmentDtoRulesConditionsTargetValue0() (SegmentDtoRulesConditionsTargetValue0, error) {
	var body SegmentDtoRulesConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentDtoRulesConditionsTargetValue0 overwrites any union data inside the SegmentDto_Rules_Conditions_TargetValue as the provided SegmentDtoRulesConditionsTargetValue0
func (t *SegmentDto_Rules_Conditions_TargetValue) FromSegmentDtoRulesConditionsTargetValue0(v SegmentDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentDtoRulesConditionsTargetValue0 performs a merge with any union data inside the SegmentDto_Rules_Conditions_TargetValue, using the provided SegmentDtoRulesConditionsTargetValue0
func (t *SegmentDto_Rules_Conditions_TargetValue) MergeSegmentDtoRulesConditionsTargetValue0(v SegmentDtoRulesConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentDtoRulesConditionsTargetValue1 returns the union data inside the SegmentDto_Rules_Conditions_TargetValue as a SegmentDtoRulesConditionsTargetValue1
func (t SegmentDto_Rules_Conditions_TargetValue) AsSegmentDtoRulesConditionsTargetValue1() (SegmentDtoRulesConditionsTargetValue1, error) {
	var body SegmentDtoRulesConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentDtoRulesConditionsTargetValue1 overwrites any union data inside the SegmentDto_Rules_Conditions_TargetValue as the provided SegmentDtoRulesConditionsTargetValue1
func (t *SegmentDto_Rules_Conditions_TargetValue) FromSegmentDtoRulesConditionsTargetValue1(v SegmentDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentDtoRulesConditionsTargetValue1 performs a merge with any union data inside the SegmentDto_Rules_Conditions_TargetValue, using the provided SegmentDtoRulesConditionsTargetValue1
func (t *SegmentDto_Rules_Conditions_TargetValue) MergeSegmentDtoRulesConditionsTargetValue1(v SegmentDtoRulesConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentDtoRulesConditionsTargetValue2 returns the union data inside the SegmentDto_Rules_Conditions_TargetValue as a SegmentDtoRulesConditionsTargetValue2
func (t SegmentDto_Rules_Conditions_TargetValue) AsSegmentDtoRulesConditionsTargetValue2() (SegmentDtoRulesConditionsTargetValue2, error) {
	var body SegmentDtoRulesConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentDtoRulesConditionsTargetValue2 overwrites any union data inside the SegmentDto_Rules_Conditions_TargetValue as the provided SegmentDtoRulesConditionsTargetValue2
func (t *SegmentDto_Rules_Conditions_TargetValue) FromSegmentDtoRulesConditionsTargetValue2(v SegmentDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentDtoRulesConditionsTargetValue2 performs a merge with any union data inside the SegmentDto_Rules_Conditions_TargetValue, using the provided SegmentDtoRulesConditionsTargetValue2
func (t *SegmentDto_Rules_Conditions_TargetValue) MergeSegmentDtoRulesConditionsTargetValue2(v SegmentDtoRulesConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentDtoRulesConditionsTargetValue3 returns the union data inside the SegmentDto_Rules_Conditions_TargetValue as a SegmentDtoRulesConditionsTargetValue3
func (t SegmentDto_Rules_Conditions_TargetValue) AsSegmentDtoRulesConditionsTargetValue3() (SegmentDtoRulesConditionsTargetValue3, error) {
	var body SegmentDtoRulesConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentDtoRulesConditionsTargetValue3 overwrites any union data inside the SegmentDto_Rules_Conditions_TargetValue as the provided SegmentDtoRulesConditionsTargetValue3
func (t *SegmentDto_Rules_Conditions_TargetValue) FromSegmentDtoRulesConditionsTargetValue3(v SegmentDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentDtoRulesConditionsTargetValue3 performs a merge with any union data inside the SegmentDto_Rules_Conditions_TargetValue, using the provided SegmentDtoRulesConditionsTargetValue3
func (t *SegmentDto_Rules_Conditions_TargetValue) MergeSegmentDtoRulesConditionsTargetValue3(v SegmentDtoRulesConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SegmentDto_Rules_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SegmentDto_Rules_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSegmentRulesDtoConditionsTargetValue0 returns the union data inside the SegmentRulesDto_Conditions_TargetValue as a SegmentRulesDtoConditionsTargetValue0
func (t SegmentRulesDto_Conditions_TargetValue) AsSegmentRulesDtoConditionsTargetValue0() (SegmentRulesDtoConditionsTargetValue0, error) {
	var body SegmentRulesDtoConditionsTargetValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentRulesDtoConditionsTargetValue0 overwrites any union data inside the SegmentRulesDto_Conditions_TargetValue as the provided SegmentRulesDtoConditionsTargetValue0
func (t *SegmentRulesDto_Conditions_TargetValue) FromSegmentRulesDtoConditionsTargetValue0(v SegmentRulesDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentRulesDtoConditionsTargetValue0 performs a merge with any union data inside the SegmentRulesDto_Conditions_TargetValue, using the provided SegmentRulesDtoConditionsTargetValue0
func (t *SegmentRulesDto_Conditions_TargetValue) MergeSegmentRulesDtoConditionsTargetValue0(v SegmentRulesDtoConditionsTargetValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentRulesDtoConditionsTargetValue1 returns the union data inside the SegmentRulesDto_Conditions_TargetValue as a SegmentRulesDtoConditionsTargetValue1
func (t SegmentRulesDto_Conditions_TargetValue) AsSegmentRulesDtoConditionsTargetValue1() (SegmentRulesDtoConditionsTargetValue1, error) {
	var body SegmentRulesDtoConditionsTargetValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentRulesDtoConditionsTargetValue1 overwrites any union data inside the SegmentRulesDto_Conditions_TargetValue as the provided SegmentRulesDtoConditionsTargetValue1
func (t *SegmentRulesDto_Conditions_TargetValue) FromSegmentRulesDtoConditionsTargetValue1(v SegmentRulesDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentRulesDtoConditionsTargetValue1 performs a merge with any union data inside the SegmentRulesDto_Conditions_TargetValue, using the provided SegmentRulesDtoConditionsTargetValue1
func (t *SegmentRulesDto_Conditions_TargetValue) MergeSegmentRulesDtoConditionsTargetValue1(v SegmentRulesDtoConditionsTargetValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentRulesDtoConditionsTargetValue2 returns the union data inside the SegmentRulesDto_Conditions_TargetValue as a SegmentRulesDtoConditionsTargetValue2
func (t SegmentRulesDto_Conditions_TargetValue) AsSegmentRulesDtoConditionsTargetValue2() (SegmentRulesDtoConditionsTargetValue2, error) {
	var body SegmentRulesDtoConditionsTargetValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentRulesDtoConditionsTargetValue2 overwrites any union data inside the SegmentRulesDto_Conditions_TargetValue as the provided SegmentRulesDtoConditionsTargetValue2
func (t *SegmentRulesDto_Conditions_TargetValue) FromSegmentRulesDtoConditionsTargetValue2(v SegmentRulesDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentRulesDtoConditionsTargetValue2 performs a merge with any union data inside the SegmentRulesDto_Conditions_TargetValue, using the provided SegmentRulesDtoConditionsTargetValue2
func (t *SegmentRulesDto_Conditions_TargetValue) MergeSegmentRulesDtoConditionsTargetValue2(v SegmentRulesDtoConditionsTargetValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentRulesDtoConditionsTargetValue3 returns the union data inside the SegmentRulesDto_Conditions_TargetValue as a SegmentRulesDtoConditionsTargetValue3
func (t SegmentRulesDto_Conditions_TargetValue) AsSegmentRulesDtoConditionsTargetValue3() (SegmentRulesDtoConditionsTargetValue3, error) {
	var body SegmentRulesDtoConditionsTargetValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentRulesDtoConditionsTargetValue3 overwrites any union data inside the SegmentRulesDto_Conditions_TargetValue as the provided SegmentRulesDtoConditionsTargetValue3
func (t *SegmentRulesDto_Conditions_TargetValue) FromSegmentRulesDtoConditionsTargetValue3(v SegmentRulesDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentRulesDtoConditionsTargetValue3 performs a merge with any union data inside the SegmentRulesDto_Conditions_TargetValue, using the provided SegmentRulesDtoConditionsTargetValue3
func (t *SegmentRulesDto_Conditions_TargetValue) MergeSegmentRulesDtoConditionsTargetValue3(v SegmentRulesDtoConditionsTargetValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SegmentRulesDto_Conditions_TargetValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SegmentRulesDto_Conditions_TargetValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateOverridesContractDto0 returns the union data inside the UpdateOverridesContractDto as a UpdateOverridesContractDto0
func (t UpdateOverridesContractDto) AsUpdateOverridesContractDto0() (UpdateOverridesContractDto0, error) {
	var body UpdateOverridesContractDto0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOverridesContractDto0 overwrites any union data inside the UpdateOverridesContractDto as the provided UpdateOverridesContractDto0
func (t *UpdateOverridesContractDto) FromUpdateOverridesContractDto0(v UpdateOverridesContractDto0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOverridesContractDto0 performs a merge with any union data inside the UpdateOverridesContractDto, using the provided UpdateOverridesContractDto0
func (t *UpdateOverridesContractDto) MergeUpdateOverridesContractDto0(v UpdateOverridesContractDto0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateOverridesContractDto1 returns the union data inside the UpdateOverridesContractDto as a UpdateOverridesContractDto1
func (t UpdateOverridesContractDto) AsUpdateOverridesContractDto1() (UpdateOverridesContractDto1, error) {
	var body UpdateOverridesContractDto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateOverridesContractDto1 overwrites any union data inside the UpdateOverridesContractDto as the provided UpdateOverridesContractDto1
func (t *UpdateOverridesContractDto) FromUpdateOverridesContractDto1(v UpdateOverridesContractDto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateOverridesContractDto1 performs a merge with any union data inside the UpdateOverridesContractDto, using the provided UpdateOverridesContractDto1
func (t *UpdateOverridesContractDto) MergeUpdateOverridesContractDto1(v UpdateOverridesContractDto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateOverridesContractDto) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateOverridesContractDto) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConsoleV1Alerts request
	GetConsoleV1Alerts(ctx context.Context, params *GetConsoleV1AlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1AuditLogs request
	GetConsoleV1AuditLogs(ctx context.Context, params *GetConsoleV1AuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Autotunes request
	GetConsoleV1Autotunes(ctx context.Context, params *GetConsoleV1AutotunesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1AutotunesWithBody request with any body
	PostConsoleV1AutotunesWithBody(ctx context.Context, params *PostConsoleV1AutotunesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Autotunes(ctx context.Context, params *PostConsoleV1AutotunesParams, body PostConsoleV1AutotunesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1AutotunesId request
	DeleteConsoleV1AutotunesId(ctx context.Context, id string, params *DeleteConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1AutotunesId request
	GetConsoleV1AutotunesId(ctx context.Context, id string, params *GetConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1AutotunesIdWithBody request with any body
	PatchConsoleV1AutotunesIdWithBody(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1AutotunesId(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, body PatchConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1AutotunesIdWithBody request with any body
	PostConsoleV1AutotunesIdWithBody(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1AutotunesId(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, body PostConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1AutotunesIdMakeDecisionWithBody request with any body
	PutConsoleV1AutotunesIdMakeDecisionWithBody(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConsoleV1AutotunesIdMakeDecision(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, body PutConsoleV1AutotunesIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1AutotunesIdReset request
	PutConsoleV1AutotunesIdReset(ctx context.Context, id string, params *PutConsoleV1AutotunesIdResetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1AutotunesIdStart request
	PutConsoleV1AutotunesIdStart(ctx context.Context, id string, params *PutConsoleV1AutotunesIdStartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Company request
	GetConsoleV1Company(ctx context.Context, params *GetConsoleV1CompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1DynamicConfigs request
	GetConsoleV1DynamicConfigs(ctx context.Context, params *GetConsoleV1DynamicConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1DynamicConfigsWithBody request with any body
	PostConsoleV1DynamicConfigsWithBody(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1DynamicConfigs(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, body PostConsoleV1DynamicConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1DynamicConfigsId request
	DeleteConsoleV1DynamicConfigsId(ctx context.Context, id string, params *DeleteConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1DynamicConfigsId request
	GetConsoleV1DynamicConfigsId(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1DynamicConfigsIdWithBody request with any body
	PatchConsoleV1DynamicConfigsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1DynamicConfigsId(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, body PatchConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1DynamicConfigsIdWithBody request with any body
	PostConsoleV1DynamicConfigsIdWithBody(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1DynamicConfigsId(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, body PostConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1DynamicConfigsIdDisable request
	PutConsoleV1DynamicConfigsIdDisable(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1DynamicConfigsIdEnable request
	PutConsoleV1DynamicConfigsIdEnable(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1DynamicConfigsIdRuleWithBody request with any body
	PostConsoleV1DynamicConfigsIdRuleWithBody(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1DynamicConfigsIdRule(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, body PostConsoleV1DynamicConfigsIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1DynamicConfigsIdRuleNameRuleName request
	DeleteConsoleV1DynamicConfigsIdRuleNameRuleName(ctx context.Context, id string, ruleName string, params *DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBody request with any body
	PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBody(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1DynamicConfigsIdRuleNameRuleName(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, body PatchConsoleV1DynamicConfigsIdRuleNameRuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1DynamicConfigsIdRuleRuleId request
	DeleteConsoleV1DynamicConfigsIdRuleRuleId(ctx context.Context, id string, ruleId string, params *DeleteConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1DynamicConfigsIdRuleRuleId request
	GetConsoleV1DynamicConfigsIdRuleRuleId(ctx context.Context, id string, ruleId string, params *GetConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBody request with any body
	PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBody(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1DynamicConfigsIdRuleRuleId(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, body PatchConsoleV1DynamicConfigsIdRuleRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1DynamicConfigsIdRules request
	GetConsoleV1DynamicConfigsIdRules(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1DynamicConfigsIdRulesWithBody request with any body
	PatchConsoleV1DynamicConfigsIdRulesWithBody(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1DynamicConfigsIdRules(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, body PatchConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1DynamicConfigsIdRulesWithBody request with any body
	PostConsoleV1DynamicConfigsIdRulesWithBody(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1DynamicConfigsIdRules(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, body PostConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1DynamicConfigsIdVersions request
	GetConsoleV1DynamicConfigsIdVersions(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Events request
	GetConsoleV1Events(ctx context.Context, params *GetConsoleV1EventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1EventsEventName request
	GetConsoleV1EventsEventName(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1EventsEventNameMetrics request
	GetConsoleV1EventsEventNameMetrics(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Experiments request
	GetConsoleV1Experiments(ctx context.Context, params *GetConsoleV1ExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsWithBody request with any body
	PostConsoleV1ExperimentsWithBody(ctx context.Context, params *PostConsoleV1ExperimentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Experiments(ctx context.Context, params *PostConsoleV1ExperimentsParams, body PostConsoleV1ExperimentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1ExperimentsAssignmentSourceName request
	DeleteConsoleV1ExperimentsAssignmentSourceName(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsAssignmentSourceNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1ExperimentsAssignmentSourceNameWithBody request with any body
	PatchConsoleV1ExperimentsAssignmentSourceNameWithBody(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1ExperimentsAssignmentSourceName(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, body PatchConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsAssignmentSourceNameWithBody request with any body
	PostConsoleV1ExperimentsAssignmentSourceNameWithBody(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsAssignmentSourceName(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, body PostConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsAssignmentSources request
	GetConsoleV1ExperimentsAssignmentSources(ctx context.Context, params *GetConsoleV1ExperimentsAssignmentSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsAssignmentSourcesWithBody request with any body
	PostConsoleV1ExperimentsAssignmentSourcesWithBody(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsAssignmentSources(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, body PostConsoleV1ExperimentsAssignmentSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsEntityProperties request
	GetConsoleV1ExperimentsEntityProperties(ctx context.Context, params *GetConsoleV1ExperimentsEntityPropertiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsEntityPropertiesWithBody request with any body
	PostConsoleV1ExperimentsEntityPropertiesWithBody(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsEntityProperties(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, body PostConsoleV1ExperimentsEntityPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1ExperimentsEntityPropertyName request
	DeleteConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsEntityPropertyName request
	GetConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *GetConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1ExperimentsEntityPropertyNameWithBody request with any body
	PatchConsoleV1ExperimentsEntityPropertyNameWithBody(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, body PatchConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsEntityPropertyNameWithBody request with any body
	PostConsoleV1ExperimentsEntityPropertyNameWithBody(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, body PostConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1ExperimentsId request
	DeleteConsoleV1ExperimentsId(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsId request
	GetConsoleV1ExperimentsId(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1ExperimentsIdWithBody request with any body
	PatchConsoleV1ExperimentsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1ExperimentsId(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, body PatchConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsIdWithBody request with any body
	PostConsoleV1ExperimentsIdWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsId(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, body PostConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1ExperimentsIdAbandonWithBody request with any body
	PutConsoleV1ExperimentsIdAbandonWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConsoleV1ExperimentsIdAbandon(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, body PutConsoleV1ExperimentsIdAbandonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1ExperimentsIdArchiveWithBody request with any body
	PutConsoleV1ExperimentsIdArchiveWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConsoleV1ExperimentsIdArchive(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, body PutConsoleV1ExperimentsIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsIdCumulativeExposures request
	GetConsoleV1ExperimentsIdCumulativeExposures(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdCumulativeExposuresParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsIdDisableGroupsWithBody request with any body
	PostConsoleV1ExperimentsIdDisableGroupsWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsIdDisableGroups(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, body PostConsoleV1ExperimentsIdDisableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsIdEnableGroupsWithBody request with any body
	PostConsoleV1ExperimentsIdEnableGroupsWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsIdEnableGroups(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, body PostConsoleV1ExperimentsIdEnableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsIdLoadPulseWithBody request with any body
	PostConsoleV1ExperimentsIdLoadPulseWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsIdLoadPulse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, body PostConsoleV1ExperimentsIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1ExperimentsIdMakeDecisionWithBody request with any body
	PutConsoleV1ExperimentsIdMakeDecisionWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConsoleV1ExperimentsIdMakeDecision(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, body PutConsoleV1ExperimentsIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1ExperimentsIdOverrides request
	DeleteConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsIdOverrides request
	GetConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1ExperimentsIdOverridesWithBody request with any body
	PatchConsoleV1ExperimentsIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, body PatchConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1ExperimentsIdOverridesWithBody request with any body
	PostConsoleV1ExperimentsIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, body PostConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsIdPulseLoadHistory request
	GetConsoleV1ExperimentsIdPulseLoadHistory(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExperimentsIdPulseResults request
	GetConsoleV1ExperimentsIdPulseResults(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1ExperimentsIdReset request
	PutConsoleV1ExperimentsIdReset(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdResetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1ExperimentsIdStartWithBody request with any body
	PutConsoleV1ExperimentsIdStartWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConsoleV1ExperimentsIdStart(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, body PutConsoleV1ExperimentsIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1ExperimentsIdUnarchive request
	PutConsoleV1ExperimentsIdUnarchive(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ExposureCount request
	GetConsoleV1ExposureCount(ctx context.Context, params *GetConsoleV1ExposureCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Gates request
	GetConsoleV1Gates(ctx context.Context, params *GetConsoleV1GatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1GatesWithBody request with any body
	PostConsoleV1GatesWithBody(ctx context.Context, params *PostConsoleV1GatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Gates(ctx context.Context, params *PostConsoleV1GatesParams, body PostConsoleV1GatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1GatesId request
	DeleteConsoleV1GatesId(ctx context.Context, id string, params *DeleteConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1GatesId request
	GetConsoleV1GatesId(ctx context.Context, id string, params *GetConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1GatesIdWithBody request with any body
	PatchConsoleV1GatesIdWithBody(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1GatesId(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, body PatchConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1GatesIdWithBody request with any body
	PostConsoleV1GatesIdWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1GatesId(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, body PostConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1GatesIdArchiveWithBody request with any body
	PutConsoleV1GatesIdArchiveWithBody(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConsoleV1GatesIdArchive(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, body PutConsoleV1GatesIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1GatesIdDisable request
	PutConsoleV1GatesIdDisable(ctx context.Context, id string, params *PutConsoleV1GatesIdDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1GatesIdEnable request
	PutConsoleV1GatesIdEnable(ctx context.Context, id string, params *PutConsoleV1GatesIdEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1GatesIdLaunch request
	PutConsoleV1GatesIdLaunch(ctx context.Context, id string, params *PutConsoleV1GatesIdLaunchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1GatesIdLoadPulseWithBody request with any body
	PostConsoleV1GatesIdLoadPulseWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1GatesIdLoadPulse(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, body PostConsoleV1GatesIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1GatesIdOverrides request
	DeleteConsoleV1GatesIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1GatesIdOverrides request
	GetConsoleV1GatesIdOverrides(ctx context.Context, id string, params *GetConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1GatesIdOverridesWithBody request with any body
	PatchConsoleV1GatesIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1GatesIdOverrides(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, body PatchConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1GatesIdOverridesWithBody request with any body
	PostConsoleV1GatesIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1GatesIdOverrides(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, body PostConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1GatesIdRuleWithBody request with any body
	PostConsoleV1GatesIdRuleWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1GatesIdRule(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, body PostConsoleV1GatesIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1GatesIdRules request
	GetConsoleV1GatesIdRules(ctx context.Context, id string, params *GetConsoleV1GatesIdRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1GatesIdRulesWithBody request with any body
	PatchConsoleV1GatesIdRulesWithBody(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1GatesIdRules(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, body PatchConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1GatesIdRulesWithBody request with any body
	PostConsoleV1GatesIdRulesWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1GatesIdRules(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, body PostConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1GatesIdRulesRuleID request
	DeleteConsoleV1GatesIdRulesRuleID(ctx context.Context, id string, ruleID string, params *DeleteConsoleV1GatesIdRulesRuleIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1GatesIdRulesRuleIDWithBody request with any body
	PatchConsoleV1GatesIdRulesRuleIDWithBody(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1GatesIdRulesRuleID(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, body PatchConsoleV1GatesIdRulesRuleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1GatesIdRulesRuleIDPulseLoadHistory request
	GetConsoleV1GatesIdRulesRuleIDPulseLoadHistory(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1GatesIdRulesRuleIDPulseResults request
	GetConsoleV1GatesIdRulesRuleIDPulseResults(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1GatesIdVersions request
	GetConsoleV1GatesIdVersions(ctx context.Context, id string, params *GetConsoleV1GatesIdVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Holdouts request
	GetConsoleV1Holdouts(ctx context.Context, params *GetConsoleV1HoldoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1HoldoutsWithBody request with any body
	PostConsoleV1HoldoutsWithBody(ctx context.Context, params *PostConsoleV1HoldoutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Holdouts(ctx context.Context, params *PostConsoleV1HoldoutsParams, body PostConsoleV1HoldoutsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1HoldoutsId request
	DeleteConsoleV1HoldoutsId(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1HoldoutsId request
	GetConsoleV1HoldoutsId(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1HoldoutsIdWithBody request with any body
	PatchConsoleV1HoldoutsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1HoldoutsId(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, body PatchConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1HoldoutsIdWithBody request with any body
	PostConsoleV1HoldoutsIdWithBody(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1HoldoutsId(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, body PostConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1HoldoutsIdOverrides request
	DeleteConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1HoldoutsIdOverrides request
	GetConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1HoldoutsIdOverridesWithBody request with any body
	PatchConsoleV1HoldoutsIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, body PatchConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1HoldoutsIdOverridesWithBody request with any body
	PostConsoleV1HoldoutsIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, body PostConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1Ingestion request
	DeleteConsoleV1Ingestion(ctx context.Context, params *DeleteConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Ingestion request
	GetConsoleV1Ingestion(ctx context.Context, params *GetConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1IngestionWithBody request with any body
	PatchConsoleV1IngestionWithBody(ctx context.Context, params *PatchConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1Ingestion(ctx context.Context, params *PatchConsoleV1IngestionParams, body PatchConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1IngestionWithBody request with any body
	PostConsoleV1IngestionWithBody(ctx context.Context, params *PostConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Ingestion(ctx context.Context, params *PostConsoleV1IngestionParams, body PostConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1IngestionBackfillWithBody request with any body
	PostConsoleV1IngestionBackfillWithBody(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1IngestionBackfill(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, body PostConsoleV1IngestionBackfillJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1IngestionConnectionDatabricksWithBody request with any body
	PostConsoleV1IngestionConnectionDatabricksWithBody(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1IngestionConnectionDatabricks(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, body PostConsoleV1IngestionConnectionDatabricksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1IngestionEventsCount request
	GetConsoleV1IngestionEventsCount(ctx context.Context, params *GetConsoleV1IngestionEventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1IngestionEventsDelta request
	GetConsoleV1IngestionEventsDelta(ctx context.Context, params *GetConsoleV1IngestionEventsDeltaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1IngestionRuns request
	GetConsoleV1IngestionRuns(ctx context.Context, params *GetConsoleV1IngestionRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1IngestionRunsId request
	GetConsoleV1IngestionRunsId(ctx context.Context, id string, params *GetConsoleV1IngestionRunsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1IngestionSchedule request
	GetConsoleV1IngestionSchedule(ctx context.Context, params *GetConsoleV1IngestionScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1IngestionScheduleWithBody request with any body
	PostConsoleV1IngestionScheduleWithBody(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1IngestionSchedule(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, body PostConsoleV1IngestionScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1IngestionStatus request
	GetConsoleV1IngestionStatus(ctx context.Context, params *GetConsoleV1IngestionStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Keys request
	GetConsoleV1Keys(ctx context.Context, params *GetConsoleV1KeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1KeysWithBody request with any body
	PostConsoleV1KeysWithBody(ctx context.Context, params *PostConsoleV1KeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Keys(ctx context.Context, params *PostConsoleV1KeysParams, body PostConsoleV1KeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1KeysId request
	DeleteConsoleV1KeysId(ctx context.Context, id string, params *DeleteConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1KeysId request
	GetConsoleV1KeysId(ctx context.Context, id string, params *GetConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1KeysIdWithBody request with any body
	PatchConsoleV1KeysIdWithBody(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1KeysId(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, body PatchConsoleV1KeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1KeysIdDeactivate request
	PatchConsoleV1KeysIdDeactivate(ctx context.Context, id string, params *PatchConsoleV1KeysIdDeactivateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1KeysIdRotate request
	PatchConsoleV1KeysIdRotate(ctx context.Context, id string, params *PatchConsoleV1KeysIdRotateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Layers request
	GetConsoleV1Layers(ctx context.Context, params *GetConsoleV1LayersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1LayersWithBody request with any body
	PostConsoleV1LayersWithBody(ctx context.Context, params *PostConsoleV1LayersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Layers(ctx context.Context, params *PostConsoleV1LayersParams, body PostConsoleV1LayersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1LayersId request
	DeleteConsoleV1LayersId(ctx context.Context, id string, params *DeleteConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1LayersId request
	GetConsoleV1LayersId(ctx context.Context, id string, params *GetConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1LayersIdWithBody request with any body
	PatchConsoleV1LayersIdWithBody(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1LayersId(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, body PatchConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1LayersIdWithBody request with any body
	PostConsoleV1LayersIdWithBody(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1LayersId(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, body PostConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1LayersIdExperiments request
	GetConsoleV1LayersIdExperiments(ctx context.Context, id string, params *GetConsoleV1LayersIdExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1LayersIdOverrides request
	DeleteConsoleV1LayersIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1LayersIdOverrides request
	GetConsoleV1LayersIdOverrides(ctx context.Context, id string, params *GetConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1LayersIdOverridesWithBody request with any body
	PatchConsoleV1LayersIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1LayersIdOverrides(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, body PatchConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1LayersIdOverridesWithBody request with any body
	PostConsoleV1LayersIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1LayersIdOverrides(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, body PostConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Metrics request
	GetConsoleV1Metrics(ctx context.Context, params *GetConsoleV1MetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1MetricsWithBody request with any body
	PostConsoleV1MetricsWithBody(ctx context.Context, params *PostConsoleV1MetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Metrics(ctx context.Context, params *PostConsoleV1MetricsParams, body PostConsoleV1MetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1MetricsList request
	GetConsoleV1MetricsList(ctx context.Context, params *GetConsoleV1MetricsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1MetricsMetricSourceWithBody request with any body
	PostConsoleV1MetricsMetricSourceWithBody(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1MetricsMetricSource(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, body PostConsoleV1MetricsMetricSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1MetricsMetricSourceList request
	GetConsoleV1MetricsMetricSourceList(ctx context.Context, params *GetConsoleV1MetricsMetricSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1MetricsMetricSourceName request
	DeleteConsoleV1MetricsMetricSourceName(ctx context.Context, name string, params *DeleteConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1MetricsMetricSourceName request
	GetConsoleV1MetricsMetricSourceName(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1MetricsMetricSourceNameWithBody request with any body
	PostConsoleV1MetricsMetricSourceNameWithBody(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1MetricsMetricSourceName(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, body PostConsoleV1MetricsMetricSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1MetricsMetricSourceNameMetrics request
	GetConsoleV1MetricsMetricSourceNameMetrics(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1MetricsValues request
	GetConsoleV1MetricsValues(ctx context.Context, params *GetConsoleV1MetricsValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1MetricsId request
	DeleteConsoleV1MetricsId(ctx context.Context, id string, params *DeleteConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1MetricsId request
	GetConsoleV1MetricsId(ctx context.Context, id string, params *GetConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1MetricsIdWithBody request with any body
	PostConsoleV1MetricsIdWithBody(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1MetricsId(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, body PostConsoleV1MetricsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1MetricsIdCancelArchive request
	PutConsoleV1MetricsIdCancelArchive(ctx context.Context, id string, params *PutConsoleV1MetricsIdCancelArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1MetricsIdExperiments request
	GetConsoleV1MetricsIdExperiments(ctx context.Context, id string, params *GetConsoleV1MetricsIdExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1MetricsIdReload request
	PostConsoleV1MetricsIdReload(ctx context.Context, id string, params *PostConsoleV1MetricsIdReloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1MetricsIdScheduleArchive request
	PutConsoleV1MetricsIdScheduleArchive(ctx context.Context, id string, params *PutConsoleV1MetricsIdScheduleArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1MetricsIdUnarchive request
	PutConsoleV1MetricsIdUnarchive(ctx context.Context, id string, params *PutConsoleV1MetricsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Project request
	GetConsoleV1Project(ctx context.Context, params *GetConsoleV1ProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ProjectUsageBillingReport request
	GetConsoleV1ProjectUsageBillingReport(ctx context.Context, params *GetConsoleV1ProjectUsageBillingReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ReleasePipelineTriggers request
	GetConsoleV1ReleasePipelineTriggers(ctx context.Context, params *GetConsoleV1ReleasePipelineTriggersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ReleasePipelineTriggersId request
	GetConsoleV1ReleasePipelineTriggersId(ctx context.Context, id string, params *GetConsoleV1ReleasePipelineTriggersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ReleasePipelines request
	GetConsoleV1ReleasePipelines(ctx context.Context, params *GetConsoleV1ReleasePipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1ReleasePipelinesId request
	GetConsoleV1ReleasePipelinesId(ctx context.Context, id string, params *GetConsoleV1ReleasePipelinesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Reports request
	GetConsoleV1Reports(ctx context.Context, params *GetConsoleV1ReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Segments request
	GetConsoleV1Segments(ctx context.Context, params *GetConsoleV1SegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1SegmentsWithBody request with any body
	PostConsoleV1SegmentsWithBody(ctx context.Context, params *PostConsoleV1SegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Segments(ctx context.Context, params *PostConsoleV1SegmentsParams, body PostConsoleV1SegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1SegmentsId request
	DeleteConsoleV1SegmentsId(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1SegmentsId request
	GetConsoleV1SegmentsId(ctx context.Context, id string, params *GetConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConsoleV1SegmentsIdArchive request
	PutConsoleV1SegmentsIdArchive(ctx context.Context, id string, params *PutConsoleV1SegmentsIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1SegmentsIdConditionalWithBody request with any body
	PostConsoleV1SegmentsIdConditionalWithBody(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1SegmentsIdConditional(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, body PostConsoleV1SegmentsIdConditionalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1SegmentsIdIdList request
	DeleteConsoleV1SegmentsIdIdList(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1SegmentsIdIdList request
	GetConsoleV1SegmentsIdIdList(ctx context.Context, id string, params *GetConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1SegmentsIdIdListWithBody request with any body
	PatchConsoleV1SegmentsIdIdListWithBody(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1SegmentsIdIdList(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, body PatchConsoleV1SegmentsIdIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1SegmentsIdIdListResetWithBody request with any body
	PostConsoleV1SegmentsIdIdListResetWithBody(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1SegmentsIdIdListReset(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, body PostConsoleV1SegmentsIdIdListResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Tags request
	GetConsoleV1Tags(ctx context.Context, params *GetConsoleV1TagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1TagsWithBody request with any body
	PostConsoleV1TagsWithBody(ctx context.Context, params *PostConsoleV1TagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1Tags(ctx context.Context, params *PostConsoleV1TagsParams, body PostConsoleV1TagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1TagsId request
	DeleteConsoleV1TagsId(ctx context.Context, id string, params *DeleteConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1TagsId request
	GetConsoleV1TagsId(ctx context.Context, id string, params *GetConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1TagsIdWithBody request with any body
	PatchConsoleV1TagsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1TagsId(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, body PatchConsoleV1TagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1TargetApp request
	GetConsoleV1TargetApp(ctx context.Context, params *GetConsoleV1TargetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1TargetAppWithBody request with any body
	PatchConsoleV1TargetAppWithBody(ctx context.Context, params *PatchConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1TargetApp(ctx context.Context, params *PatchConsoleV1TargetAppParams, body PatchConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1TargetAppWithBody request with any body
	PostConsoleV1TargetAppWithBody(ctx context.Context, params *PostConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1TargetApp(ctx context.Context, params *PostConsoleV1TargetAppParams, body PostConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1TargetAppId request
	DeleteConsoleV1TargetAppId(ctx context.Context, id string, params *DeleteConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1TargetAppId request
	GetConsoleV1TargetAppId(ctx context.Context, id string, params *GetConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1TargetAppIdWithBody request with any body
	PatchConsoleV1TargetAppIdWithBody(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1TargetAppId(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, body PatchConsoleV1TargetAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1Users request
	GetConsoleV1Users(ctx context.Context, params *GetConsoleV1UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1UsersInviteWithBody request with any body
	PostConsoleV1UsersInviteWithBody(ctx context.Context, params *PostConsoleV1UsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1UsersInvite(ctx context.Context, params *PostConsoleV1UsersInviteParams, body PostConsoleV1UsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1UsersTeams request
	GetConsoleV1UsersTeams(ctx context.Context, params *GetConsoleV1UsersTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1UsersTeamsWithBody request with any body
	PostConsoleV1UsersTeamsWithBody(ctx context.Context, params *PostConsoleV1UsersTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1UsersTeams(ctx context.Context, params *PostConsoleV1UsersTeamsParams, body PostConsoleV1UsersTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConsoleV1UsersTeamsId request
	DeleteConsoleV1UsersTeamsId(ctx context.Context, id string, params *DeleteConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1UsersTeamsId request
	GetConsoleV1UsersTeamsId(ctx context.Context, id string, params *GetConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConsoleV1UsersTeamsIdWithBody request with any body
	PatchConsoleV1UsersTeamsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConsoleV1UsersTeamsId(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, body PatchConsoleV1UsersTeamsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConsoleV1UsersEmail request
	GetConsoleV1UsersEmail(ctx context.Context, email string, params *GetConsoleV1UsersEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConsoleV1UsersEmailWithBody request with any body
	PostConsoleV1UsersEmailWithBody(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConsoleV1UsersEmail(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, body PostConsoleV1UsersEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConsoleV1Alerts(ctx context.Context, params *GetConsoleV1AlertsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1AlertsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1AuditLogs(ctx context.Context, params *GetConsoleV1AuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1AuditLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Autotunes(ctx context.Context, params *GetConsoleV1AutotunesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1AutotunesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1AutotunesWithBody(ctx context.Context, params *PostConsoleV1AutotunesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1AutotunesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Autotunes(ctx context.Context, params *PostConsoleV1AutotunesParams, body PostConsoleV1AutotunesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1AutotunesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1AutotunesId(ctx context.Context, id string, params *DeleteConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1AutotunesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1AutotunesId(ctx context.Context, id string, params *GetConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1AutotunesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1AutotunesIdWithBody(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1AutotunesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1AutotunesId(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, body PatchConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1AutotunesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1AutotunesIdWithBody(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1AutotunesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1AutotunesId(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, body PostConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1AutotunesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1AutotunesIdMakeDecisionWithBody(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1AutotunesIdMakeDecisionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1AutotunesIdMakeDecision(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, body PutConsoleV1AutotunesIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1AutotunesIdMakeDecisionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1AutotunesIdReset(ctx context.Context, id string, params *PutConsoleV1AutotunesIdResetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1AutotunesIdResetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1AutotunesIdStart(ctx context.Context, id string, params *PutConsoleV1AutotunesIdStartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1AutotunesIdStartRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Company(ctx context.Context, params *GetConsoleV1CompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1CompanyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1DynamicConfigs(ctx context.Context, params *GetConsoleV1DynamicConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1DynamicConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigsWithBody(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigs(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, body PostConsoleV1DynamicConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1DynamicConfigsId(ctx context.Context, id string, params *DeleteConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1DynamicConfigsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1DynamicConfigsId(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1DynamicConfigsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsId(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, body PatchConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigsIdWithBody(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigsId(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, body PostConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1DynamicConfigsIdDisable(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1DynamicConfigsIdDisableRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1DynamicConfigsIdEnable(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1DynamicConfigsIdEnableRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigsIdRuleWithBody(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsIdRuleRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigsIdRule(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, body PostConsoleV1DynamicConfigsIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsIdRuleRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1DynamicConfigsIdRuleNameRuleName(ctx context.Context, id string, ruleName string, params *DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1DynamicConfigsIdRuleNameRuleNameRequest(c.Server, id, ruleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBody(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRuleNameRuleNameRequestWithBody(c.Server, id, ruleName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsIdRuleNameRuleName(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, body PatchConsoleV1DynamicConfigsIdRuleNameRuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRuleNameRuleNameRequest(c.Server, id, ruleName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1DynamicConfigsIdRuleRuleId(ctx context.Context, id string, ruleId string, params *DeleteConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1DynamicConfigsIdRuleRuleIdRequest(c.Server, id, ruleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1DynamicConfigsIdRuleRuleId(ctx context.Context, id string, ruleId string, params *GetConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1DynamicConfigsIdRuleRuleIdRequest(c.Server, id, ruleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBody(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRuleRuleIdRequestWithBody(c.Server, id, ruleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsIdRuleRuleId(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, body PatchConsoleV1DynamicConfigsIdRuleRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRuleRuleIdRequest(c.Server, id, ruleId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1DynamicConfigsIdRules(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1DynamicConfigsIdRulesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsIdRulesWithBody(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRulesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1DynamicConfigsIdRules(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, body PatchConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1DynamicConfigsIdRulesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigsIdRulesWithBody(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsIdRulesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1DynamicConfigsIdRules(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, body PostConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1DynamicConfigsIdRulesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1DynamicConfigsIdVersions(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1DynamicConfigsIdVersionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Events(ctx context.Context, params *GetConsoleV1EventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1EventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1EventsEventName(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1EventsEventNameRequest(c.Server, eventName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1EventsEventNameMetrics(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1EventsEventNameMetricsRequest(c.Server, eventName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Experiments(ctx context.Context, params *GetConsoleV1ExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsWithBody(ctx context.Context, params *PostConsoleV1ExperimentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Experiments(ctx context.Context, params *PostConsoleV1ExperimentsParams, body PostConsoleV1ExperimentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1ExperimentsAssignmentSourceName(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsAssignmentSourceNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1ExperimentsAssignmentSourceNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsAssignmentSourceNameWithBody(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsAssignmentSourceNameRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsAssignmentSourceName(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, body PatchConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsAssignmentSourceNameRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsAssignmentSourceNameWithBody(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsAssignmentSourceNameRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsAssignmentSourceName(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, body PostConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsAssignmentSourceNameRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsAssignmentSources(ctx context.Context, params *GetConsoleV1ExperimentsAssignmentSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsAssignmentSourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsAssignmentSourcesWithBody(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsAssignmentSourcesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsAssignmentSources(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, body PostConsoleV1ExperimentsAssignmentSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsAssignmentSourcesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsEntityProperties(ctx context.Context, params *GetConsoleV1ExperimentsEntityPropertiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsEntityPropertiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsEntityPropertiesWithBody(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsEntityPropertiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsEntityProperties(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, body PostConsoleV1ExperimentsEntityPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsEntityPropertiesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1ExperimentsEntityPropertyNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *GetConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsEntityPropertyNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsEntityPropertyNameWithBody(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsEntityPropertyNameRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, body PatchConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsEntityPropertyNameRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsEntityPropertyNameWithBody(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsEntityPropertyNameRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsEntityPropertyName(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, body PostConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsEntityPropertyNameRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1ExperimentsId(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1ExperimentsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsId(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsId(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, body PatchConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsId(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, body PostConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdAbandonWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdAbandonRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdAbandon(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, body PutConsoleV1ExperimentsIdAbandonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdAbandonRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdArchiveWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdArchiveRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdArchive(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, body PutConsoleV1ExperimentsIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdArchiveRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsIdCumulativeExposures(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdCumulativeExposuresParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsIdCumulativeExposuresRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdDisableGroupsWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdDisableGroupsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdDisableGroups(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, body PostConsoleV1ExperimentsIdDisableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdDisableGroupsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdEnableGroupsWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdEnableGroupsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdEnableGroups(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, body PostConsoleV1ExperimentsIdEnableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdEnableGroupsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdLoadPulseWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdLoadPulseRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdLoadPulse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, body PostConsoleV1ExperimentsIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdLoadPulseRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdMakeDecisionWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdMakeDecisionRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdMakeDecision(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, body PutConsoleV1ExperimentsIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdMakeDecisionRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1ExperimentsIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, body PatchConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1ExperimentsIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1ExperimentsIdOverrides(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, body PostConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1ExperimentsIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsIdPulseLoadHistory(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsIdPulseLoadHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExperimentsIdPulseResults(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExperimentsIdPulseResultsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdReset(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdResetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdResetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdStartWithBody(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdStartRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdStart(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, body PutConsoleV1ExperimentsIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdStartRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1ExperimentsIdUnarchive(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1ExperimentsIdUnarchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ExposureCount(ctx context.Context, params *GetConsoleV1ExposureCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ExposureCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Gates(ctx context.Context, params *GetConsoleV1GatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1GatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesWithBody(ctx context.Context, params *PostConsoleV1GatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Gates(ctx context.Context, params *PostConsoleV1GatesParams, body PostConsoleV1GatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1GatesId(ctx context.Context, id string, params *DeleteConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1GatesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1GatesId(ctx context.Context, id string, params *GetConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1GatesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesIdWithBody(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesId(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, body PatchConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesId(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, body PostConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1GatesIdArchiveWithBody(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1GatesIdArchiveRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1GatesIdArchive(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, body PutConsoleV1GatesIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1GatesIdArchiveRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1GatesIdDisable(ctx context.Context, id string, params *PutConsoleV1GatesIdDisableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1GatesIdDisableRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1GatesIdEnable(ctx context.Context, id string, params *PutConsoleV1GatesIdEnableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1GatesIdEnableRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1GatesIdLaunch(ctx context.Context, id string, params *PutConsoleV1GatesIdLaunchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1GatesIdLaunchRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdLoadPulseWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdLoadPulseRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdLoadPulse(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, body PostConsoleV1GatesIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdLoadPulseRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1GatesIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1GatesIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1GatesIdOverrides(ctx context.Context, id string, params *GetConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1GatesIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesIdOverrides(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, body PatchConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdOverrides(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, body PostConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdRuleWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdRuleRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdRule(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, body PostConsoleV1GatesIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdRuleRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1GatesIdRules(ctx context.Context, id string, params *GetConsoleV1GatesIdRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1GatesIdRulesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesIdRulesWithBody(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdRulesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesIdRules(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, body PatchConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdRulesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdRulesWithBody(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdRulesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1GatesIdRules(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, body PostConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1GatesIdRulesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1GatesIdRulesRuleID(ctx context.Context, id string, ruleID string, params *DeleteConsoleV1GatesIdRulesRuleIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1GatesIdRulesRuleIDRequest(c.Server, id, ruleID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesIdRulesRuleIDWithBody(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdRulesRuleIDRequestWithBody(c.Server, id, ruleID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1GatesIdRulesRuleID(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, body PatchConsoleV1GatesIdRulesRuleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1GatesIdRulesRuleIDRequest(c.Server, id, ruleID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1GatesIdRulesRuleIDPulseLoadHistory(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryRequest(c.Server, id, ruleID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1GatesIdRulesRuleIDPulseResults(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseResultsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1GatesIdRulesRuleIDPulseResultsRequest(c.Server, id, ruleID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1GatesIdVersions(ctx context.Context, id string, params *GetConsoleV1GatesIdVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1GatesIdVersionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Holdouts(ctx context.Context, params *GetConsoleV1HoldoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1HoldoutsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1HoldoutsWithBody(ctx context.Context, params *PostConsoleV1HoldoutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1HoldoutsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Holdouts(ctx context.Context, params *PostConsoleV1HoldoutsParams, body PostConsoleV1HoldoutsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1HoldoutsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1HoldoutsId(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1HoldoutsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1HoldoutsId(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1HoldoutsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1HoldoutsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1HoldoutsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1HoldoutsId(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, body PatchConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1HoldoutsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1HoldoutsIdWithBody(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1HoldoutsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1HoldoutsId(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, body PostConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1HoldoutsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1HoldoutsIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1HoldoutsIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1HoldoutsIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1HoldoutsIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, body PatchConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1HoldoutsIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1HoldoutsIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1HoldoutsIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1HoldoutsIdOverrides(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, body PostConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1HoldoutsIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1Ingestion(ctx context.Context, params *DeleteConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1IngestionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Ingestion(ctx context.Context, params *GetConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1IngestionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1IngestionWithBody(ctx context.Context, params *PatchConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1IngestionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1Ingestion(ctx context.Context, params *PatchConsoleV1IngestionParams, body PatchConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1IngestionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1IngestionWithBody(ctx context.Context, params *PostConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Ingestion(ctx context.Context, params *PostConsoleV1IngestionParams, body PostConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1IngestionBackfillWithBody(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionBackfillRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1IngestionBackfill(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, body PostConsoleV1IngestionBackfillJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionBackfillRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1IngestionConnectionDatabricksWithBody(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionConnectionDatabricksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1IngestionConnectionDatabricks(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, body PostConsoleV1IngestionConnectionDatabricksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionConnectionDatabricksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1IngestionEventsCount(ctx context.Context, params *GetConsoleV1IngestionEventsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1IngestionEventsCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1IngestionEventsDelta(ctx context.Context, params *GetConsoleV1IngestionEventsDeltaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1IngestionEventsDeltaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1IngestionRuns(ctx context.Context, params *GetConsoleV1IngestionRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1IngestionRunsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1IngestionRunsId(ctx context.Context, id string, params *GetConsoleV1IngestionRunsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1IngestionRunsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1IngestionSchedule(ctx context.Context, params *GetConsoleV1IngestionScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1IngestionScheduleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1IngestionScheduleWithBody(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionScheduleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1IngestionSchedule(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, body PostConsoleV1IngestionScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1IngestionScheduleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1IngestionStatus(ctx context.Context, params *GetConsoleV1IngestionStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1IngestionStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Keys(ctx context.Context, params *GetConsoleV1KeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1KeysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1KeysWithBody(ctx context.Context, params *PostConsoleV1KeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1KeysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Keys(ctx context.Context, params *PostConsoleV1KeysParams, body PostConsoleV1KeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1KeysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1KeysId(ctx context.Context, id string, params *DeleteConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1KeysIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1KeysId(ctx context.Context, id string, params *GetConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1KeysIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1KeysIdWithBody(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1KeysIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1KeysId(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, body PatchConsoleV1KeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1KeysIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1KeysIdDeactivate(ctx context.Context, id string, params *PatchConsoleV1KeysIdDeactivateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1KeysIdDeactivateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1KeysIdRotate(ctx context.Context, id string, params *PatchConsoleV1KeysIdRotateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1KeysIdRotateRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Layers(ctx context.Context, params *GetConsoleV1LayersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1LayersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1LayersWithBody(ctx context.Context, params *PostConsoleV1LayersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1LayersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Layers(ctx context.Context, params *PostConsoleV1LayersParams, body PostConsoleV1LayersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1LayersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1LayersId(ctx context.Context, id string, params *DeleteConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1LayersIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1LayersId(ctx context.Context, id string, params *GetConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1LayersIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1LayersIdWithBody(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1LayersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1LayersId(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, body PatchConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1LayersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1LayersIdWithBody(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1LayersIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1LayersId(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, body PostConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1LayersIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1LayersIdExperiments(ctx context.Context, id string, params *GetConsoleV1LayersIdExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1LayersIdExperimentsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1LayersIdOverrides(ctx context.Context, id string, params *DeleteConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1LayersIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1LayersIdOverrides(ctx context.Context, id string, params *GetConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1LayersIdOverridesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1LayersIdOverridesWithBody(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1LayersIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1LayersIdOverrides(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, body PatchConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1LayersIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1LayersIdOverridesWithBody(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1LayersIdOverridesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1LayersIdOverrides(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, body PostConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1LayersIdOverridesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Metrics(ctx context.Context, params *GetConsoleV1MetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsWithBody(ctx context.Context, params *PostConsoleV1MetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Metrics(ctx context.Context, params *PostConsoleV1MetricsParams, body PostConsoleV1MetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1MetricsList(ctx context.Context, params *GetConsoleV1MetricsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsMetricSourceWithBody(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsMetricSourceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsMetricSource(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, body PostConsoleV1MetricsMetricSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsMetricSourceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1MetricsMetricSourceList(ctx context.Context, params *GetConsoleV1MetricsMetricSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsMetricSourceListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1MetricsMetricSourceName(ctx context.Context, name string, params *DeleteConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1MetricsMetricSourceNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1MetricsMetricSourceName(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsMetricSourceNameRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsMetricSourceNameWithBody(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsMetricSourceNameRequestWithBody(c.Server, name, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsMetricSourceName(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, body PostConsoleV1MetricsMetricSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsMetricSourceNameRequest(c.Server, name, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1MetricsMetricSourceNameMetrics(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsMetricSourceNameMetricsRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1MetricsValues(ctx context.Context, params *GetConsoleV1MetricsValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1MetricsId(ctx context.Context, id string, params *DeleteConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1MetricsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1MetricsId(ctx context.Context, id string, params *GetConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsIdWithBody(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsId(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, body PostConsoleV1MetricsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1MetricsIdCancelArchive(ctx context.Context, id string, params *PutConsoleV1MetricsIdCancelArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1MetricsIdCancelArchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1MetricsIdExperiments(ctx context.Context, id string, params *GetConsoleV1MetricsIdExperimentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1MetricsIdExperimentsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1MetricsIdReload(ctx context.Context, id string, params *PostConsoleV1MetricsIdReloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1MetricsIdReloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1MetricsIdScheduleArchive(ctx context.Context, id string, params *PutConsoleV1MetricsIdScheduleArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1MetricsIdScheduleArchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1MetricsIdUnarchive(ctx context.Context, id string, params *PutConsoleV1MetricsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1MetricsIdUnarchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Project(ctx context.Context, params *GetConsoleV1ProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ProjectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ProjectUsageBillingReport(ctx context.Context, params *GetConsoleV1ProjectUsageBillingReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ProjectUsageBillingReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ReleasePipelineTriggers(ctx context.Context, params *GetConsoleV1ReleasePipelineTriggersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ReleasePipelineTriggersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ReleasePipelineTriggersId(ctx context.Context, id string, params *GetConsoleV1ReleasePipelineTriggersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ReleasePipelineTriggersIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ReleasePipelines(ctx context.Context, params *GetConsoleV1ReleasePipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ReleasePipelinesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1ReleasePipelinesId(ctx context.Context, id string, params *GetConsoleV1ReleasePipelinesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ReleasePipelinesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Reports(ctx context.Context, params *GetConsoleV1ReportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1ReportsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Segments(ctx context.Context, params *GetConsoleV1SegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1SegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1SegmentsWithBody(ctx context.Context, params *PostConsoleV1SegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1SegmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Segments(ctx context.Context, params *PostConsoleV1SegmentsParams, body PostConsoleV1SegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1SegmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1SegmentsId(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1SegmentsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1SegmentsId(ctx context.Context, id string, params *GetConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1SegmentsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConsoleV1SegmentsIdArchive(ctx context.Context, id string, params *PutConsoleV1SegmentsIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConsoleV1SegmentsIdArchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1SegmentsIdConditionalWithBody(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1SegmentsIdConditionalRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1SegmentsIdConditional(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, body PostConsoleV1SegmentsIdConditionalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1SegmentsIdConditionalRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1SegmentsIdIdList(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1SegmentsIdIdListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1SegmentsIdIdList(ctx context.Context, id string, params *GetConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1SegmentsIdIdListRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1SegmentsIdIdListWithBody(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1SegmentsIdIdListRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1SegmentsIdIdList(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, body PatchConsoleV1SegmentsIdIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1SegmentsIdIdListRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1SegmentsIdIdListResetWithBody(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1SegmentsIdIdListResetRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1SegmentsIdIdListReset(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, body PostConsoleV1SegmentsIdIdListResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1SegmentsIdIdListResetRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Tags(ctx context.Context, params *GetConsoleV1TagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1TagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1TagsWithBody(ctx context.Context, params *PostConsoleV1TagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1TagsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1Tags(ctx context.Context, params *PostConsoleV1TagsParams, body PostConsoleV1TagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1TagsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1TagsId(ctx context.Context, id string, params *DeleteConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1TagsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1TagsId(ctx context.Context, id string, params *GetConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1TagsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1TagsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1TagsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1TagsId(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, body PatchConsoleV1TagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1TagsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1TargetApp(ctx context.Context, params *GetConsoleV1TargetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1TargetAppRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1TargetAppWithBody(ctx context.Context, params *PatchConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1TargetAppRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1TargetApp(ctx context.Context, params *PatchConsoleV1TargetAppParams, body PatchConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1TargetAppRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1TargetAppWithBody(ctx context.Context, params *PostConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1TargetAppRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1TargetApp(ctx context.Context, params *PostConsoleV1TargetAppParams, body PostConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1TargetAppRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1TargetAppId(ctx context.Context, id string, params *DeleteConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1TargetAppIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1TargetAppId(ctx context.Context, id string, params *GetConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1TargetAppIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1TargetAppIdWithBody(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1TargetAppIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1TargetAppId(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, body PatchConsoleV1TargetAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1TargetAppIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1Users(ctx context.Context, params *GetConsoleV1UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1UsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1UsersInviteWithBody(ctx context.Context, params *PostConsoleV1UsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1UsersInviteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1UsersInvite(ctx context.Context, params *PostConsoleV1UsersInviteParams, body PostConsoleV1UsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1UsersInviteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1UsersTeams(ctx context.Context, params *GetConsoleV1UsersTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1UsersTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1UsersTeamsWithBody(ctx context.Context, params *PostConsoleV1UsersTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1UsersTeamsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1UsersTeams(ctx context.Context, params *PostConsoleV1UsersTeamsParams, body PostConsoleV1UsersTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1UsersTeamsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConsoleV1UsersTeamsId(ctx context.Context, id string, params *DeleteConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConsoleV1UsersTeamsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1UsersTeamsId(ctx context.Context, id string, params *GetConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1UsersTeamsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1UsersTeamsIdWithBody(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1UsersTeamsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConsoleV1UsersTeamsId(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, body PatchConsoleV1UsersTeamsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConsoleV1UsersTeamsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConsoleV1UsersEmail(ctx context.Context, email string, params *GetConsoleV1UsersEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConsoleV1UsersEmailRequest(c.Server, email, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1UsersEmailWithBody(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1UsersEmailRequestWithBody(c.Server, email, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConsoleV1UsersEmail(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, body PostConsoleV1UsersEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConsoleV1UsersEmailRequest(c.Server, email, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConsoleV1AlertsRequest generates requests for GetConsoleV1Alerts
func NewGetConsoleV1AlertsRequest(server string, params *GetConsoleV1AlertsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorName", runtime.ParamLocationQuery, *params.CreatorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorID", runtime.ParamLocationQuery, *params.CreatorID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1AuditLogsRequest generates requests for GetConsoleV1AuditLogs
func NewGetConsoleV1AuditLogsRequest(server string, params *GetConsoleV1AuditLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/audit_logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LatestID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latestID", runtime.ParamLocationQuery, *params.LatestID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActionType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionType", runtime.ParamLocationQuery, *params.ActionType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActionTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionTypes", runtime.ParamLocationQuery, *params.ActionTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1AutotunesRequest generates requests for GetConsoleV1Autotunes
func NewGetConsoleV1AutotunesRequest(server string, params *GetConsoleV1AutotunesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1AutotunesRequest calls the generic PostConsoleV1Autotunes builder with application/json body
func NewPostConsoleV1AutotunesRequest(server string, params *PostConsoleV1AutotunesParams, body PostConsoleV1AutotunesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1AutotunesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1AutotunesRequestWithBody generates requests for PostConsoleV1Autotunes with any type of body
func NewPostConsoleV1AutotunesRequestWithBody(server string, params *PostConsoleV1AutotunesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1AutotunesIdRequest generates requests for DeleteConsoleV1AutotunesId
func NewDeleteConsoleV1AutotunesIdRequest(server string, id string, params *DeleteConsoleV1AutotunesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1AutotunesIdRequest generates requests for GetConsoleV1AutotunesId
func NewGetConsoleV1AutotunesIdRequest(server string, id string, params *GetConsoleV1AutotunesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1AutotunesIdRequest calls the generic PatchConsoleV1AutotunesId builder with application/json body
func NewPatchConsoleV1AutotunesIdRequest(server string, id string, params *PatchConsoleV1AutotunesIdParams, body PatchConsoleV1AutotunesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1AutotunesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1AutotunesIdRequestWithBody generates requests for PatchConsoleV1AutotunesId with any type of body
func NewPatchConsoleV1AutotunesIdRequestWithBody(server string, id string, params *PatchConsoleV1AutotunesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1AutotunesIdRequest calls the generic PostConsoleV1AutotunesId builder with application/json body
func NewPostConsoleV1AutotunesIdRequest(server string, id string, params *PostConsoleV1AutotunesIdParams, body PostConsoleV1AutotunesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1AutotunesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1AutotunesIdRequestWithBody generates requests for PostConsoleV1AutotunesId with any type of body
func NewPostConsoleV1AutotunesIdRequestWithBody(server string, id string, params *PostConsoleV1AutotunesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1AutotunesIdMakeDecisionRequest calls the generic PutConsoleV1AutotunesIdMakeDecision builder with application/json body
func NewPutConsoleV1AutotunesIdMakeDecisionRequest(server string, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, body PutConsoleV1AutotunesIdMakeDecisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConsoleV1AutotunesIdMakeDecisionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutConsoleV1AutotunesIdMakeDecisionRequestWithBody generates requests for PutConsoleV1AutotunesIdMakeDecision with any type of body
func NewPutConsoleV1AutotunesIdMakeDecisionRequestWithBody(server string, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes/%s/make_decision", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1AutotunesIdResetRequest generates requests for PutConsoleV1AutotunesIdReset
func NewPutConsoleV1AutotunesIdResetRequest(server string, id string, params *PutConsoleV1AutotunesIdResetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1AutotunesIdStartRequest generates requests for PutConsoleV1AutotunesIdStart
func NewPutConsoleV1AutotunesIdStartRequest(server string, id string, params *PutConsoleV1AutotunesIdStartParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/autotunes/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1CompanyRequest generates requests for GetConsoleV1Company
func NewGetConsoleV1CompanyRequest(server string, params *GetConsoleV1CompanyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1DynamicConfigsRequest generates requests for GetConsoleV1DynamicConfigs
func NewGetConsoleV1DynamicConfigsRequest(server string, params *GetConsoleV1DynamicConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReleasePipelineID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "releasePipelineID", runtime.ParamLocationQuery, *params.ReleasePipelineID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorName", runtime.ParamLocationQuery, *params.CreatorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorID", runtime.ParamLocationQuery, *params.CreatorID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1DynamicConfigsRequest calls the generic PostConsoleV1DynamicConfigs builder with application/json body
func NewPostConsoleV1DynamicConfigsRequest(server string, params *PostConsoleV1DynamicConfigsParams, body PostConsoleV1DynamicConfigsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1DynamicConfigsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1DynamicConfigsRequestWithBody generates requests for PostConsoleV1DynamicConfigs with any type of body
func NewPostConsoleV1DynamicConfigsRequestWithBody(server string, params *PostConsoleV1DynamicConfigsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1DynamicConfigsIdRequest generates requests for DeleteConsoleV1DynamicConfigsId
func NewDeleteConsoleV1DynamicConfigsIdRequest(server string, id string, params *DeleteConsoleV1DynamicConfigsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1DynamicConfigsIdRequest generates requests for GetConsoleV1DynamicConfigsId
func NewGetConsoleV1DynamicConfigsIdRequest(server string, id string, params *GetConsoleV1DynamicConfigsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1DynamicConfigsIdRequest calls the generic PatchConsoleV1DynamicConfigsId builder with application/json body
func NewPatchConsoleV1DynamicConfigsIdRequest(server string, id string, params *PatchConsoleV1DynamicConfigsIdParams, body PatchConsoleV1DynamicConfigsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1DynamicConfigsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1DynamicConfigsIdRequestWithBody generates requests for PatchConsoleV1DynamicConfigsId with any type of body
func NewPatchConsoleV1DynamicConfigsIdRequestWithBody(server string, id string, params *PatchConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1DynamicConfigsIdRequest calls the generic PostConsoleV1DynamicConfigsId builder with application/json body
func NewPostConsoleV1DynamicConfigsIdRequest(server string, id string, params *PostConsoleV1DynamicConfigsIdParams, body PostConsoleV1DynamicConfigsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1DynamicConfigsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1DynamicConfigsIdRequestWithBody generates requests for PostConsoleV1DynamicConfigsId with any type of body
func NewPostConsoleV1DynamicConfigsIdRequestWithBody(server string, id string, params *PostConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1DynamicConfigsIdDisableRequest generates requests for PutConsoleV1DynamicConfigsIdDisable
func NewPutConsoleV1DynamicConfigsIdDisableRequest(server string, id string, params *PutConsoleV1DynamicConfigsIdDisableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1DynamicConfigsIdEnableRequest generates requests for PutConsoleV1DynamicConfigsIdEnable
func NewPutConsoleV1DynamicConfigsIdEnableRequest(server string, id string, params *PutConsoleV1DynamicConfigsIdEnableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1DynamicConfigsIdRuleRequest calls the generic PostConsoleV1DynamicConfigsIdRule builder with application/json body
func NewPostConsoleV1DynamicConfigsIdRuleRequest(server string, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, body PostConsoleV1DynamicConfigsIdRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1DynamicConfigsIdRuleRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1DynamicConfigsIdRuleRequestWithBody generates requests for PostConsoleV1DynamicConfigsIdRule with any type of body
func NewPostConsoleV1DynamicConfigsIdRuleRequestWithBody(server string, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1DynamicConfigsIdRuleNameRuleNameRequest generates requests for DeleteConsoleV1DynamicConfigsIdRuleNameRuleName
func NewDeleteConsoleV1DynamicConfigsIdRuleNameRuleNameRequest(server string, id string, ruleName string, params *DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleName", runtime.ParamLocationPath, ruleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rule/name/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1DynamicConfigsIdRuleNameRuleNameRequest calls the generic PatchConsoleV1DynamicConfigsIdRuleNameRuleName builder with application/json body
func NewPatchConsoleV1DynamicConfigsIdRuleNameRuleNameRequest(server string, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, body PatchConsoleV1DynamicConfigsIdRuleNameRuleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1DynamicConfigsIdRuleNameRuleNameRequestWithBody(server, id, ruleName, params, "application/json", bodyReader)
}

// NewPatchConsoleV1DynamicConfigsIdRuleNameRuleNameRequestWithBody generates requests for PatchConsoleV1DynamicConfigsIdRuleNameRuleName with any type of body
func NewPatchConsoleV1DynamicConfigsIdRuleNameRuleNameRequestWithBody(server string, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleName", runtime.ParamLocationPath, ruleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rule/name/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1DynamicConfigsIdRuleRuleIdRequest generates requests for DeleteConsoleV1DynamicConfigsIdRuleRuleId
func NewDeleteConsoleV1DynamicConfigsIdRuleRuleIdRequest(server string, id string, ruleId string, params *DeleteConsoleV1DynamicConfigsIdRuleRuleIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rule/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1DynamicConfigsIdRuleRuleIdRequest generates requests for GetConsoleV1DynamicConfigsIdRuleRuleId
func NewGetConsoleV1DynamicConfigsIdRuleRuleIdRequest(server string, id string, ruleId string, params *GetConsoleV1DynamicConfigsIdRuleRuleIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rule/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1DynamicConfigsIdRuleRuleIdRequest calls the generic PatchConsoleV1DynamicConfigsIdRuleRuleId builder with application/json body
func NewPatchConsoleV1DynamicConfigsIdRuleRuleIdRequest(server string, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, body PatchConsoleV1DynamicConfigsIdRuleRuleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1DynamicConfigsIdRuleRuleIdRequestWithBody(server, id, ruleId, params, "application/json", bodyReader)
}

// NewPatchConsoleV1DynamicConfigsIdRuleRuleIdRequestWithBody generates requests for PatchConsoleV1DynamicConfigsIdRuleRuleId with any type of body
func NewPatchConsoleV1DynamicConfigsIdRuleRuleIdRequestWithBody(server string, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rule/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1DynamicConfigsIdRulesRequest generates requests for GetConsoleV1DynamicConfigsIdRules
func NewGetConsoleV1DynamicConfigsIdRulesRequest(server string, id string, params *GetConsoleV1DynamicConfigsIdRulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1DynamicConfigsIdRulesRequest calls the generic PatchConsoleV1DynamicConfigsIdRules builder with application/json body
func NewPatchConsoleV1DynamicConfigsIdRulesRequest(server string, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, body PatchConsoleV1DynamicConfigsIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1DynamicConfigsIdRulesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1DynamicConfigsIdRulesRequestWithBody generates requests for PatchConsoleV1DynamicConfigsIdRules with any type of body
func NewPatchConsoleV1DynamicConfigsIdRulesRequestWithBody(server string, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1DynamicConfigsIdRulesRequest calls the generic PostConsoleV1DynamicConfigsIdRules builder with application/json body
func NewPostConsoleV1DynamicConfigsIdRulesRequest(server string, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, body PostConsoleV1DynamicConfigsIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1DynamicConfigsIdRulesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1DynamicConfigsIdRulesRequestWithBody generates requests for PostConsoleV1DynamicConfigsIdRules with any type of body
func NewPostConsoleV1DynamicConfigsIdRulesRequestWithBody(server string, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1DynamicConfigsIdVersionsRequest generates requests for GetConsoleV1DynamicConfigsIdVersions
func NewGetConsoleV1DynamicConfigsIdVersionsRequest(server string, id string, params *GetConsoleV1DynamicConfigsIdVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/dynamic_configs/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1EventsRequest generates requests for GetConsoleV1Events
func NewGetConsoleV1EventsRequest(server string, params *GetConsoleV1EventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1EventsEventNameRequest generates requests for GetConsoleV1EventsEventName
func NewGetConsoleV1EventsEventNameRequest(server string, eventName string, params *GetConsoleV1EventsEventNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventName", runtime.ParamLocationPath, eventName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1EventsEventNameMetricsRequest generates requests for GetConsoleV1EventsEventNameMetrics
func NewGetConsoleV1EventsEventNameMetricsRequest(server string, eventName string, params *GetConsoleV1EventsEventNameMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventName", runtime.ParamLocationPath, eventName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/events/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsRequest generates requests for GetConsoleV1Experiments
func NewGetConsoleV1ExperimentsRequest(server string, params *GetConsoleV1ExperimentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LayerID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "layerID", runtime.ParamLocationQuery, *params.LayerID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idType", runtime.ParamLocationQuery, *params.IdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorName", runtime.ParamLocationQuery, *params.CreatorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorID", runtime.ParamLocationQuery, *params.CreatorID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsRequest calls the generic PostConsoleV1Experiments builder with application/json body
func NewPostConsoleV1ExperimentsRequest(server string, params *PostConsoleV1ExperimentsParams, body PostConsoleV1ExperimentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsRequestWithBody generates requests for PostConsoleV1Experiments with any type of body
func NewPostConsoleV1ExperimentsRequestWithBody(server string, params *PostConsoleV1ExperimentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1ExperimentsAssignmentSourceNameRequest generates requests for DeleteConsoleV1ExperimentsAssignmentSourceName
func NewDeleteConsoleV1ExperimentsAssignmentSourceNameRequest(server string, name string, params *DeleteConsoleV1ExperimentsAssignmentSourceNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/assignment_source/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1ExperimentsAssignmentSourceNameRequest calls the generic PatchConsoleV1ExperimentsAssignmentSourceName builder with application/json body
func NewPatchConsoleV1ExperimentsAssignmentSourceNameRequest(server string, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, body PatchConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1ExperimentsAssignmentSourceNameRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPatchConsoleV1ExperimentsAssignmentSourceNameRequestWithBody generates requests for PatchConsoleV1ExperimentsAssignmentSourceName with any type of body
func NewPatchConsoleV1ExperimentsAssignmentSourceNameRequestWithBody(server string, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/assignment_source/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsAssignmentSourceNameRequest calls the generic PostConsoleV1ExperimentsAssignmentSourceName builder with application/json body
func NewPostConsoleV1ExperimentsAssignmentSourceNameRequest(server string, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, body PostConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsAssignmentSourceNameRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsAssignmentSourceNameRequestWithBody generates requests for PostConsoleV1ExperimentsAssignmentSourceName with any type of body
func NewPostConsoleV1ExperimentsAssignmentSourceNameRequestWithBody(server string, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/assignment_source/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsAssignmentSourcesRequest generates requests for GetConsoleV1ExperimentsAssignmentSources
func NewGetConsoleV1ExperimentsAssignmentSourcesRequest(server string, params *GetConsoleV1ExperimentsAssignmentSourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/assignment_sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsAssignmentSourcesRequest calls the generic PostConsoleV1ExperimentsAssignmentSources builder with application/json body
func NewPostConsoleV1ExperimentsAssignmentSourcesRequest(server string, params *PostConsoleV1ExperimentsAssignmentSourcesParams, body PostConsoleV1ExperimentsAssignmentSourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsAssignmentSourcesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsAssignmentSourcesRequestWithBody generates requests for PostConsoleV1ExperimentsAssignmentSources with any type of body
func NewPostConsoleV1ExperimentsAssignmentSourcesRequestWithBody(server string, params *PostConsoleV1ExperimentsAssignmentSourcesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/assignment_sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsEntityPropertiesRequest generates requests for GetConsoleV1ExperimentsEntityProperties
func NewGetConsoleV1ExperimentsEntityPropertiesRequest(server string, params *GetConsoleV1ExperimentsEntityPropertiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/entity_properties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsEntityPropertiesRequest calls the generic PostConsoleV1ExperimentsEntityProperties builder with application/json body
func NewPostConsoleV1ExperimentsEntityPropertiesRequest(server string, params *PostConsoleV1ExperimentsEntityPropertiesParams, body PostConsoleV1ExperimentsEntityPropertiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsEntityPropertiesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsEntityPropertiesRequestWithBody generates requests for PostConsoleV1ExperimentsEntityProperties with any type of body
func NewPostConsoleV1ExperimentsEntityPropertiesRequestWithBody(server string, params *PostConsoleV1ExperimentsEntityPropertiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/entity_properties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1ExperimentsEntityPropertyNameRequest generates requests for DeleteConsoleV1ExperimentsEntityPropertyName
func NewDeleteConsoleV1ExperimentsEntityPropertyNameRequest(server string, name string, params *DeleteConsoleV1ExperimentsEntityPropertyNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/entity_property/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsEntityPropertyNameRequest generates requests for GetConsoleV1ExperimentsEntityPropertyName
func NewGetConsoleV1ExperimentsEntityPropertyNameRequest(server string, name string, params *GetConsoleV1ExperimentsEntityPropertyNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/entity_property/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1ExperimentsEntityPropertyNameRequest calls the generic PatchConsoleV1ExperimentsEntityPropertyName builder with application/json body
func NewPatchConsoleV1ExperimentsEntityPropertyNameRequest(server string, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, body PatchConsoleV1ExperimentsEntityPropertyNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1ExperimentsEntityPropertyNameRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPatchConsoleV1ExperimentsEntityPropertyNameRequestWithBody generates requests for PatchConsoleV1ExperimentsEntityPropertyName with any type of body
func NewPatchConsoleV1ExperimentsEntityPropertyNameRequestWithBody(server string, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/entity_property/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsEntityPropertyNameRequest calls the generic PostConsoleV1ExperimentsEntityPropertyName builder with application/json body
func NewPostConsoleV1ExperimentsEntityPropertyNameRequest(server string, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, body PostConsoleV1ExperimentsEntityPropertyNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsEntityPropertyNameRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsEntityPropertyNameRequestWithBody generates requests for PostConsoleV1ExperimentsEntityPropertyName with any type of body
func NewPostConsoleV1ExperimentsEntityPropertyNameRequestWithBody(server string, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/entity_property/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1ExperimentsIdRequest generates requests for DeleteConsoleV1ExperimentsId
func NewDeleteConsoleV1ExperimentsIdRequest(server string, id string, params *DeleteConsoleV1ExperimentsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsIdRequest generates requests for GetConsoleV1ExperimentsId
func NewGetConsoleV1ExperimentsIdRequest(server string, id string, params *GetConsoleV1ExperimentsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1ExperimentsIdRequest calls the generic PatchConsoleV1ExperimentsId builder with application/json body
func NewPatchConsoleV1ExperimentsIdRequest(server string, id string, params *PatchConsoleV1ExperimentsIdParams, body PatchConsoleV1ExperimentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1ExperimentsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1ExperimentsIdRequestWithBody generates requests for PatchConsoleV1ExperimentsId with any type of body
func NewPatchConsoleV1ExperimentsIdRequestWithBody(server string, id string, params *PatchConsoleV1ExperimentsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsIdRequest calls the generic PostConsoleV1ExperimentsId builder with application/json body
func NewPostConsoleV1ExperimentsIdRequest(server string, id string, params *PostConsoleV1ExperimentsIdParams, body PostConsoleV1ExperimentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsIdRequestWithBody generates requests for PostConsoleV1ExperimentsId with any type of body
func NewPostConsoleV1ExperimentsIdRequestWithBody(server string, id string, params *PostConsoleV1ExperimentsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1ExperimentsIdAbandonRequest calls the generic PutConsoleV1ExperimentsIdAbandon builder with application/json body
func NewPutConsoleV1ExperimentsIdAbandonRequest(server string, id string, params *PutConsoleV1ExperimentsIdAbandonParams, body PutConsoleV1ExperimentsIdAbandonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConsoleV1ExperimentsIdAbandonRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutConsoleV1ExperimentsIdAbandonRequestWithBody generates requests for PutConsoleV1ExperimentsIdAbandon with any type of body
func NewPutConsoleV1ExperimentsIdAbandonRequestWithBody(server string, id string, params *PutConsoleV1ExperimentsIdAbandonParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/abandon", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1ExperimentsIdArchiveRequest calls the generic PutConsoleV1ExperimentsIdArchive builder with application/json body
func NewPutConsoleV1ExperimentsIdArchiveRequest(server string, id string, params *PutConsoleV1ExperimentsIdArchiveParams, body PutConsoleV1ExperimentsIdArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConsoleV1ExperimentsIdArchiveRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutConsoleV1ExperimentsIdArchiveRequestWithBody generates requests for PutConsoleV1ExperimentsIdArchive with any type of body
func NewPutConsoleV1ExperimentsIdArchiveRequestWithBody(server string, id string, params *PutConsoleV1ExperimentsIdArchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsIdCumulativeExposuresRequest generates requests for GetConsoleV1ExperimentsIdCumulativeExposures
func NewGetConsoleV1ExperimentsIdCumulativeExposuresRequest(server string, id string, params *GetConsoleV1ExperimentsIdCumulativeExposuresParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/cumulative_exposures", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsIdDisableGroupsRequest calls the generic PostConsoleV1ExperimentsIdDisableGroups builder with application/json body
func NewPostConsoleV1ExperimentsIdDisableGroupsRequest(server string, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, body PostConsoleV1ExperimentsIdDisableGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsIdDisableGroupsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsIdDisableGroupsRequestWithBody generates requests for PostConsoleV1ExperimentsIdDisableGroups with any type of body
func NewPostConsoleV1ExperimentsIdDisableGroupsRequestWithBody(server string, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/disable_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsIdEnableGroupsRequest calls the generic PostConsoleV1ExperimentsIdEnableGroups builder with application/json body
func NewPostConsoleV1ExperimentsIdEnableGroupsRequest(server string, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, body PostConsoleV1ExperimentsIdEnableGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsIdEnableGroupsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsIdEnableGroupsRequestWithBody generates requests for PostConsoleV1ExperimentsIdEnableGroups with any type of body
func NewPostConsoleV1ExperimentsIdEnableGroupsRequestWithBody(server string, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/enable_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsIdLoadPulseRequest calls the generic PostConsoleV1ExperimentsIdLoadPulse builder with application/json body
func NewPostConsoleV1ExperimentsIdLoadPulseRequest(server string, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, body PostConsoleV1ExperimentsIdLoadPulseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsIdLoadPulseRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsIdLoadPulseRequestWithBody generates requests for PostConsoleV1ExperimentsIdLoadPulse with any type of body
func NewPostConsoleV1ExperimentsIdLoadPulseRequestWithBody(server string, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/load_pulse", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Refresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricIDs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricIDs", runtime.ParamLocationQuery, *params.MetricIDs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RuleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruleId", runtime.ParamLocationQuery, *params.RuleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TurboMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "turboMode", runtime.ParamLocationQuery, *params.TurboMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1ExperimentsIdMakeDecisionRequest calls the generic PutConsoleV1ExperimentsIdMakeDecision builder with application/json body
func NewPutConsoleV1ExperimentsIdMakeDecisionRequest(server string, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, body PutConsoleV1ExperimentsIdMakeDecisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConsoleV1ExperimentsIdMakeDecisionRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutConsoleV1ExperimentsIdMakeDecisionRequestWithBody generates requests for PutConsoleV1ExperimentsIdMakeDecision with any type of body
func NewPutConsoleV1ExperimentsIdMakeDecisionRequestWithBody(server string, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/make_decision", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1ExperimentsIdOverridesRequest generates requests for DeleteConsoleV1ExperimentsIdOverrides
func NewDeleteConsoleV1ExperimentsIdOverridesRequest(server string, id string, params *DeleteConsoleV1ExperimentsIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsIdOverridesRequest generates requests for GetConsoleV1ExperimentsIdOverrides
func NewGetConsoleV1ExperimentsIdOverridesRequest(server string, id string, params *GetConsoleV1ExperimentsIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1ExperimentsIdOverridesRequest calls the generic PatchConsoleV1ExperimentsIdOverrides builder with application/json body
func NewPatchConsoleV1ExperimentsIdOverridesRequest(server string, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, body PatchConsoleV1ExperimentsIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1ExperimentsIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1ExperimentsIdOverridesRequestWithBody generates requests for PatchConsoleV1ExperimentsIdOverrides with any type of body
func NewPatchConsoleV1ExperimentsIdOverridesRequestWithBody(server string, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1ExperimentsIdOverridesRequest calls the generic PostConsoleV1ExperimentsIdOverrides builder with application/json body
func NewPostConsoleV1ExperimentsIdOverridesRequest(server string, id string, params *PostConsoleV1ExperimentsIdOverridesParams, body PostConsoleV1ExperimentsIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1ExperimentsIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1ExperimentsIdOverridesRequestWithBody generates requests for PostConsoleV1ExperimentsIdOverrides with any type of body
func NewPostConsoleV1ExperimentsIdOverridesRequestWithBody(server string, id string, params *PostConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsIdPulseLoadHistoryRequest generates requests for GetConsoleV1ExperimentsIdPulseLoadHistory
func NewGetConsoleV1ExperimentsIdPulseLoadHistoryRequest(server string, id string, params *GetConsoleV1ExperimentsIdPulseLoadHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/pulse_load_history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExperimentsIdPulseResultsRequest generates requests for GetConsoleV1ExperimentsIdPulseResults
func NewGetConsoleV1ExperimentsIdPulseResultsRequest(server string, id string, params *GetConsoleV1ExperimentsIdPulseResultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/pulse_results", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "control", runtime.ParamLocationQuery, params.Control); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, params.Test); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Cuped != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cuped", runtime.ParamLocationQuery, *params.Cuped); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Confidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confidence", runtime.ParamLocationQuery, *params.Confidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyBonferroniPerVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applyBonferroniPerVariant", runtime.ParamLocationQuery, *params.ApplyBonferroniPerVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyBonferroniPerMetric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applyBonferroniPerMetric", runtime.ParamLocationQuery, *params.ApplyBonferroniPerMetric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BonferroniPrimaryMetricWeight != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bonferroniPrimaryMetricWeight", runtime.ParamLocationQuery, *params.BonferroniPrimaryMetricWeight); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyBenjaminiHochbergPerMetric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applyBenjaminiHochbergPerMetric", runtime.ParamLocationQuery, *params.ApplyBenjaminiHochbergPerMetric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApplyBenjaminiHochbergPerVariant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "applyBenjaminiHochbergPerVariant", runtime.ParamLocationQuery, *params.ApplyBenjaminiHochbergPerVariant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1ExperimentsIdResetRequest generates requests for PutConsoleV1ExperimentsIdReset
func NewPutConsoleV1ExperimentsIdResetRequest(server string, id string, params *PutConsoleV1ExperimentsIdResetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1ExperimentsIdStartRequest calls the generic PutConsoleV1ExperimentsIdStart builder with application/json body
func NewPutConsoleV1ExperimentsIdStartRequest(server string, id string, params *PutConsoleV1ExperimentsIdStartParams, body PutConsoleV1ExperimentsIdStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConsoleV1ExperimentsIdStartRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutConsoleV1ExperimentsIdStartRequestWithBody generates requests for PutConsoleV1ExperimentsIdStart with any type of body
func NewPutConsoleV1ExperimentsIdStartRequestWithBody(server string, id string, params *PutConsoleV1ExperimentsIdStartParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1ExperimentsIdUnarchiveRequest generates requests for PutConsoleV1ExperimentsIdUnarchive
func NewPutConsoleV1ExperimentsIdUnarchiveRequest(server string, id string, params *PutConsoleV1ExperimentsIdUnarchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/experiments/%s/unarchive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ExposureCountRequest generates requests for GetConsoleV1ExposureCount
func NewGetConsoleV1ExposureCountRequest(server string, params *GetConsoleV1ExposureCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/exposure_count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Experiments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "experiments", runtime.ParamLocationQuery, *params.Experiments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Gates != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gates", runtime.ParamLocationQuery, *params.Gates); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DynamicConfigs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamicConfigs", runtime.ParamLocationQuery, *params.DynamicConfigs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1GatesRequest generates requests for GetConsoleV1Gates
func NewGetConsoleV1GatesRequest(server string, params *GetConsoleV1GatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idType", runtime.ParamLocationQuery, *params.IdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeReason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeReason", runtime.ParamLocationQuery, *params.TypeReason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PassRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "passRate", runtime.ParamLocationQuery, *params.PassRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RolloutRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rolloutRate", runtime.ParamLocationQuery, *params.RolloutRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReleasePipelineID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "releasePipelineID", runtime.ParamLocationQuery, *params.ReleasePipelineID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorName", runtime.ParamLocationQuery, *params.CreatorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorID", runtime.ParamLocationQuery, *params.CreatorID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1GatesRequest calls the generic PostConsoleV1Gates builder with application/json body
func NewPostConsoleV1GatesRequest(server string, params *PostConsoleV1GatesParams, body PostConsoleV1GatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1GatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1GatesRequestWithBody generates requests for PostConsoleV1Gates with any type of body
func NewPostConsoleV1GatesRequestWithBody(server string, params *PostConsoleV1GatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1GatesIdRequest generates requests for DeleteConsoleV1GatesId
func NewDeleteConsoleV1GatesIdRequest(server string, id string, params *DeleteConsoleV1GatesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1GatesIdRequest generates requests for GetConsoleV1GatesId
func NewGetConsoleV1GatesIdRequest(server string, id string, params *GetConsoleV1GatesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1GatesIdRequest calls the generic PatchConsoleV1GatesId builder with application/json body
func NewPatchConsoleV1GatesIdRequest(server string, id string, params *PatchConsoleV1GatesIdParams, body PatchConsoleV1GatesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1GatesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1GatesIdRequestWithBody generates requests for PatchConsoleV1GatesId with any type of body
func NewPatchConsoleV1GatesIdRequestWithBody(server string, id string, params *PatchConsoleV1GatesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1GatesIdRequest calls the generic PostConsoleV1GatesId builder with application/json body
func NewPostConsoleV1GatesIdRequest(server string, id string, params *PostConsoleV1GatesIdParams, body PostConsoleV1GatesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1GatesIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1GatesIdRequestWithBody generates requests for PostConsoleV1GatesId with any type of body
func NewPostConsoleV1GatesIdRequestWithBody(server string, id string, params *PostConsoleV1GatesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1GatesIdArchiveRequest calls the generic PutConsoleV1GatesIdArchive builder with application/json body
func NewPutConsoleV1GatesIdArchiveRequest(server string, id string, params *PutConsoleV1GatesIdArchiveParams, body PutConsoleV1GatesIdArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConsoleV1GatesIdArchiveRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutConsoleV1GatesIdArchiveRequestWithBody generates requests for PutConsoleV1GatesIdArchive with any type of body
func NewPutConsoleV1GatesIdArchiveRequestWithBody(server string, id string, params *PutConsoleV1GatesIdArchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1GatesIdDisableRequest generates requests for PutConsoleV1GatesIdDisable
func NewPutConsoleV1GatesIdDisableRequest(server string, id string, params *PutConsoleV1GatesIdDisableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1GatesIdEnableRequest generates requests for PutConsoleV1GatesIdEnable
func NewPutConsoleV1GatesIdEnableRequest(server string, id string, params *PutConsoleV1GatesIdEnableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1GatesIdLaunchRequest generates requests for PutConsoleV1GatesIdLaunch
func NewPutConsoleV1GatesIdLaunchRequest(server string, id string, params *PutConsoleV1GatesIdLaunchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/launch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1GatesIdLoadPulseRequest calls the generic PostConsoleV1GatesIdLoadPulse builder with application/json body
func NewPostConsoleV1GatesIdLoadPulseRequest(server string, id string, params *PostConsoleV1GatesIdLoadPulseParams, body PostConsoleV1GatesIdLoadPulseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1GatesIdLoadPulseRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1GatesIdLoadPulseRequestWithBody generates requests for PostConsoleV1GatesIdLoadPulse with any type of body
func NewPostConsoleV1GatesIdLoadPulseRequestWithBody(server string, id string, params *PostConsoleV1GatesIdLoadPulseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/load_pulse", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1GatesIdOverridesRequest generates requests for DeleteConsoleV1GatesIdOverrides
func NewDeleteConsoleV1GatesIdOverridesRequest(server string, id string, params *DeleteConsoleV1GatesIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1GatesIdOverridesRequest generates requests for GetConsoleV1GatesIdOverrides
func NewGetConsoleV1GatesIdOverridesRequest(server string, id string, params *GetConsoleV1GatesIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1GatesIdOverridesRequest calls the generic PatchConsoleV1GatesIdOverrides builder with application/json body
func NewPatchConsoleV1GatesIdOverridesRequest(server string, id string, params *PatchConsoleV1GatesIdOverridesParams, body PatchConsoleV1GatesIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1GatesIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1GatesIdOverridesRequestWithBody generates requests for PatchConsoleV1GatesIdOverrides with any type of body
func NewPatchConsoleV1GatesIdOverridesRequestWithBody(server string, id string, params *PatchConsoleV1GatesIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1GatesIdOverridesRequest calls the generic PostConsoleV1GatesIdOverrides builder with application/json body
func NewPostConsoleV1GatesIdOverridesRequest(server string, id string, params *PostConsoleV1GatesIdOverridesParams, body PostConsoleV1GatesIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1GatesIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1GatesIdOverridesRequestWithBody generates requests for PostConsoleV1GatesIdOverrides with any type of body
func NewPostConsoleV1GatesIdOverridesRequestWithBody(server string, id string, params *PostConsoleV1GatesIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1GatesIdRuleRequest calls the generic PostConsoleV1GatesIdRule builder with application/json body
func NewPostConsoleV1GatesIdRuleRequest(server string, id string, params *PostConsoleV1GatesIdRuleParams, body PostConsoleV1GatesIdRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1GatesIdRuleRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1GatesIdRuleRequestWithBody generates requests for PostConsoleV1GatesIdRule with any type of body
func NewPostConsoleV1GatesIdRuleRequestWithBody(server string, id string, params *PostConsoleV1GatesIdRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1GatesIdRulesRequest generates requests for GetConsoleV1GatesIdRules
func NewGetConsoleV1GatesIdRulesRequest(server string, id string, params *GetConsoleV1GatesIdRulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1GatesIdRulesRequest calls the generic PatchConsoleV1GatesIdRules builder with application/json body
func NewPatchConsoleV1GatesIdRulesRequest(server string, id string, params *PatchConsoleV1GatesIdRulesParams, body PatchConsoleV1GatesIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1GatesIdRulesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1GatesIdRulesRequestWithBody generates requests for PatchConsoleV1GatesIdRules with any type of body
func NewPatchConsoleV1GatesIdRulesRequestWithBody(server string, id string, params *PatchConsoleV1GatesIdRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1GatesIdRulesRequest calls the generic PostConsoleV1GatesIdRules builder with application/json body
func NewPostConsoleV1GatesIdRulesRequest(server string, id string, params *PostConsoleV1GatesIdRulesParams, body PostConsoleV1GatesIdRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1GatesIdRulesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1GatesIdRulesRequestWithBody generates requests for PostConsoleV1GatesIdRules with any type of body
func NewPostConsoleV1GatesIdRulesRequestWithBody(server string, id string, params *PostConsoleV1GatesIdRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1GatesIdRulesRuleIDRequest generates requests for DeleteConsoleV1GatesIdRulesRuleID
func NewDeleteConsoleV1GatesIdRulesRuleIDRequest(server string, id string, ruleID string, params *DeleteConsoleV1GatesIdRulesRuleIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleID", runtime.ParamLocationPath, ruleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1GatesIdRulesRuleIDRequest calls the generic PatchConsoleV1GatesIdRulesRuleID builder with application/json body
func NewPatchConsoleV1GatesIdRulesRuleIDRequest(server string, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, body PatchConsoleV1GatesIdRulesRuleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1GatesIdRulesRuleIDRequestWithBody(server, id, ruleID, params, "application/json", bodyReader)
}

// NewPatchConsoleV1GatesIdRulesRuleIDRequestWithBody generates requests for PatchConsoleV1GatesIdRulesRuleID with any type of body
func NewPatchConsoleV1GatesIdRulesRuleIDRequestWithBody(server string, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleID", runtime.ParamLocationPath, ruleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryRequest generates requests for GetConsoleV1GatesIdRulesRuleIDPulseLoadHistory
func NewGetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryRequest(server string, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleID", runtime.ParamLocationPath, ruleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rules/%s/pulse_load_history", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1GatesIdRulesRuleIDPulseResultsRequest generates requests for GetConsoleV1GatesIdRulesRuleIDPulseResults
func NewGetConsoleV1GatesIdRulesRuleIDPulseResultsRequest(server string, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseResultsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleID", runtime.ParamLocationPath, ruleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/rules/%s/pulse_results", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cuped != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cuped", runtime.ParamLocationQuery, *params.Cuped); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Confidence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confidence", runtime.ParamLocationQuery, *params.Confidence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1GatesIdVersionsRequest generates requests for GetConsoleV1GatesIdVersions
func NewGetConsoleV1GatesIdVersionsRequest(server string, id string, params *GetConsoleV1GatesIdVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/gates/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1HoldoutsRequest generates requests for GetConsoleV1Holdouts
func NewGetConsoleV1HoldoutsRequest(server string, params *GetConsoleV1HoldoutsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorName", runtime.ParamLocationQuery, *params.CreatorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorID", runtime.ParamLocationQuery, *params.CreatorID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1HoldoutsRequest calls the generic PostConsoleV1Holdouts builder with application/json body
func NewPostConsoleV1HoldoutsRequest(server string, params *PostConsoleV1HoldoutsParams, body PostConsoleV1HoldoutsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1HoldoutsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1HoldoutsRequestWithBody generates requests for PostConsoleV1Holdouts with any type of body
func NewPostConsoleV1HoldoutsRequestWithBody(server string, params *PostConsoleV1HoldoutsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1HoldoutsIdRequest generates requests for DeleteConsoleV1HoldoutsId
func NewDeleteConsoleV1HoldoutsIdRequest(server string, id string, params *DeleteConsoleV1HoldoutsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1HoldoutsIdRequest generates requests for GetConsoleV1HoldoutsId
func NewGetConsoleV1HoldoutsIdRequest(server string, id string, params *GetConsoleV1HoldoutsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1HoldoutsIdRequest calls the generic PatchConsoleV1HoldoutsId builder with application/json body
func NewPatchConsoleV1HoldoutsIdRequest(server string, id string, params *PatchConsoleV1HoldoutsIdParams, body PatchConsoleV1HoldoutsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1HoldoutsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1HoldoutsIdRequestWithBody generates requests for PatchConsoleV1HoldoutsId with any type of body
func NewPatchConsoleV1HoldoutsIdRequestWithBody(server string, id string, params *PatchConsoleV1HoldoutsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1HoldoutsIdRequest calls the generic PostConsoleV1HoldoutsId builder with application/json body
func NewPostConsoleV1HoldoutsIdRequest(server string, id string, params *PostConsoleV1HoldoutsIdParams, body PostConsoleV1HoldoutsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1HoldoutsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1HoldoutsIdRequestWithBody generates requests for PostConsoleV1HoldoutsId with any type of body
func NewPostConsoleV1HoldoutsIdRequestWithBody(server string, id string, params *PostConsoleV1HoldoutsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1HoldoutsIdOverridesRequest generates requests for DeleteConsoleV1HoldoutsIdOverrides
func NewDeleteConsoleV1HoldoutsIdOverridesRequest(server string, id string, params *DeleteConsoleV1HoldoutsIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1HoldoutsIdOverridesRequest generates requests for GetConsoleV1HoldoutsIdOverrides
func NewGetConsoleV1HoldoutsIdOverridesRequest(server string, id string, params *GetConsoleV1HoldoutsIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1HoldoutsIdOverridesRequest calls the generic PatchConsoleV1HoldoutsIdOverrides builder with application/json body
func NewPatchConsoleV1HoldoutsIdOverridesRequest(server string, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, body PatchConsoleV1HoldoutsIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1HoldoutsIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1HoldoutsIdOverridesRequestWithBody generates requests for PatchConsoleV1HoldoutsIdOverrides with any type of body
func NewPatchConsoleV1HoldoutsIdOverridesRequestWithBody(server string, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1HoldoutsIdOverridesRequest calls the generic PostConsoleV1HoldoutsIdOverrides builder with application/json body
func NewPostConsoleV1HoldoutsIdOverridesRequest(server string, id string, params *PostConsoleV1HoldoutsIdOverridesParams, body PostConsoleV1HoldoutsIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1HoldoutsIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1HoldoutsIdOverridesRequestWithBody generates requests for PostConsoleV1HoldoutsIdOverrides with any type of body
func NewPostConsoleV1HoldoutsIdOverridesRequestWithBody(server string, id string, params *PostConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/holdouts/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1IngestionRequest generates requests for DeleteConsoleV1Ingestion
func NewDeleteConsoleV1IngestionRequest(server string, params *DeleteConsoleV1IngestionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataset", runtime.ParamLocationQuery, params.Dataset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1IngestionRequest generates requests for GetConsoleV1Ingestion
func NewGetConsoleV1IngestionRequest(server string, params *GetConsoleV1IngestionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataset", runtime.ParamLocationQuery, params.Dataset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1IngestionRequest calls the generic PatchConsoleV1Ingestion builder with application/json body
func NewPatchConsoleV1IngestionRequest(server string, params *PatchConsoleV1IngestionParams, body PatchConsoleV1IngestionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1IngestionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchConsoleV1IngestionRequestWithBody generates requests for PatchConsoleV1Ingestion with any type of body
func NewPatchConsoleV1IngestionRequestWithBody(server string, params *PatchConsoleV1IngestionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1IngestionRequest calls the generic PostConsoleV1Ingestion builder with application/json body
func NewPostConsoleV1IngestionRequest(server string, params *PostConsoleV1IngestionParams, body PostConsoleV1IngestionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1IngestionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1IngestionRequestWithBody generates requests for PostConsoleV1Ingestion with any type of body
func NewPostConsoleV1IngestionRequestWithBody(server string, params *PostConsoleV1IngestionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1IngestionBackfillRequest calls the generic PostConsoleV1IngestionBackfill builder with application/json body
func NewPostConsoleV1IngestionBackfillRequest(server string, params *PostConsoleV1IngestionBackfillParams, body PostConsoleV1IngestionBackfillJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1IngestionBackfillRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1IngestionBackfillRequestWithBody generates requests for PostConsoleV1IngestionBackfill with any type of body
func NewPostConsoleV1IngestionBackfillRequestWithBody(server string, params *PostConsoleV1IngestionBackfillParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/backfill")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1IngestionConnectionDatabricksRequest calls the generic PostConsoleV1IngestionConnectionDatabricks builder with application/json body
func NewPostConsoleV1IngestionConnectionDatabricksRequest(server string, params *PostConsoleV1IngestionConnectionDatabricksParams, body PostConsoleV1IngestionConnectionDatabricksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1IngestionConnectionDatabricksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1IngestionConnectionDatabricksRequestWithBody generates requests for PostConsoleV1IngestionConnectionDatabricks with any type of body
func NewPostConsoleV1IngestionConnectionDatabricksRequestWithBody(server string, params *PostConsoleV1IngestionConnectionDatabricksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/connection/databricks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1IngestionEventsCountRequest generates requests for GetConsoleV1IngestionEventsCount
func NewGetConsoleV1IngestionEventsCountRequest(server string, params *GetConsoleV1IngestionEventsCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/events/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event_name", runtime.ParamLocationQuery, *params.EventName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1IngestionEventsDeltaRequest generates requests for GetConsoleV1IngestionEventsDelta
func NewGetConsoleV1IngestionEventsDeltaRequest(server string, params *GetConsoleV1IngestionEventsDeltaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/events/delta")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event_name", runtime.ParamLocationQuery, *params.EventName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1IngestionRunsRequest generates requests for GetConsoleV1IngestionRuns
func NewGetConsoleV1IngestionRunsRequest(server string, params *GetConsoleV1IngestionRunsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/runs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1IngestionRunsIdRequest generates requests for GetConsoleV1IngestionRunsId
func NewGetConsoleV1IngestionRunsIdRequest(server string, id string, params *GetConsoleV1IngestionRunsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/runs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1IngestionScheduleRequest generates requests for GetConsoleV1IngestionSchedule
func NewGetConsoleV1IngestionScheduleRequest(server string, params *GetConsoleV1IngestionScheduleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataset", runtime.ParamLocationQuery, params.Dataset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1IngestionScheduleRequest calls the generic PostConsoleV1IngestionSchedule builder with application/json body
func NewPostConsoleV1IngestionScheduleRequest(server string, params *PostConsoleV1IngestionScheduleParams, body PostConsoleV1IngestionScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1IngestionScheduleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1IngestionScheduleRequestWithBody generates requests for PostConsoleV1IngestionSchedule with any type of body
func NewPostConsoleV1IngestionScheduleRequestWithBody(server string, params *PostConsoleV1IngestionScheduleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1IngestionStatusRequest generates requests for GetConsoleV1IngestionStatus
func NewGetConsoleV1IngestionStatusRequest(server string, params *GetConsoleV1IngestionStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/ingestion/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dataset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataset", runtime.ParamLocationQuery, *params.Dataset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1KeysRequest generates requests for GetConsoleV1Keys
func NewGetConsoleV1KeysRequest(server string, params *GetConsoleV1KeysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PrimaryTargetApp != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "primaryTargetApp", runtime.ParamLocationQuery, *params.PrimaryTargetApp); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1KeysRequest calls the generic PostConsoleV1Keys builder with application/json body
func NewPostConsoleV1KeysRequest(server string, params *PostConsoleV1KeysParams, body PostConsoleV1KeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1KeysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1KeysRequestWithBody generates requests for PostConsoleV1Keys with any type of body
func NewPostConsoleV1KeysRequestWithBody(server string, params *PostConsoleV1KeysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1KeysIdRequest generates requests for DeleteConsoleV1KeysId
func NewDeleteConsoleV1KeysIdRequest(server string, id string, params *DeleteConsoleV1KeysIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1KeysIdRequest generates requests for GetConsoleV1KeysId
func NewGetConsoleV1KeysIdRequest(server string, id string, params *GetConsoleV1KeysIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1KeysIdRequest calls the generic PatchConsoleV1KeysId builder with application/json body
func NewPatchConsoleV1KeysIdRequest(server string, id string, params *PatchConsoleV1KeysIdParams, body PatchConsoleV1KeysIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1KeysIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1KeysIdRequestWithBody generates requests for PatchConsoleV1KeysId with any type of body
func NewPatchConsoleV1KeysIdRequestWithBody(server string, id string, params *PatchConsoleV1KeysIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1KeysIdDeactivateRequest generates requests for PatchConsoleV1KeysIdDeactivate
func NewPatchConsoleV1KeysIdDeactivateRequest(server string, id string, params *PatchConsoleV1KeysIdDeactivateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/keys/%s/deactivate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1KeysIdRotateRequest generates requests for PatchConsoleV1KeysIdRotate
func NewPatchConsoleV1KeysIdRotateRequest(server string, id string, params *PatchConsoleV1KeysIdRotateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/keys/%s/rotate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1LayersRequest generates requests for GetConsoleV1Layers
func NewGetConsoleV1LayersRequest(server string, params *GetConsoleV1LayersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorName", runtime.ParamLocationQuery, *params.CreatorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorID", runtime.ParamLocationQuery, *params.CreatorID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1LayersRequest calls the generic PostConsoleV1Layers builder with application/json body
func NewPostConsoleV1LayersRequest(server string, params *PostConsoleV1LayersParams, body PostConsoleV1LayersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1LayersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1LayersRequestWithBody generates requests for PostConsoleV1Layers with any type of body
func NewPostConsoleV1LayersRequestWithBody(server string, params *PostConsoleV1LayersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1LayersIdRequest generates requests for DeleteConsoleV1LayersId
func NewDeleteConsoleV1LayersIdRequest(server string, id string, params *DeleteConsoleV1LayersIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1LayersIdRequest generates requests for GetConsoleV1LayersId
func NewGetConsoleV1LayersIdRequest(server string, id string, params *GetConsoleV1LayersIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1LayersIdRequest calls the generic PatchConsoleV1LayersId builder with application/json body
func NewPatchConsoleV1LayersIdRequest(server string, id string, params *PatchConsoleV1LayersIdParams, body PatchConsoleV1LayersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1LayersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1LayersIdRequestWithBody generates requests for PatchConsoleV1LayersId with any type of body
func NewPatchConsoleV1LayersIdRequestWithBody(server string, id string, params *PatchConsoleV1LayersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1LayersIdRequest calls the generic PostConsoleV1LayersId builder with application/json body
func NewPostConsoleV1LayersIdRequest(server string, id string, params *PostConsoleV1LayersIdParams, body PostConsoleV1LayersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1LayersIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1LayersIdRequestWithBody generates requests for PostConsoleV1LayersId with any type of body
func NewPostConsoleV1LayersIdRequestWithBody(server string, id string, params *PostConsoleV1LayersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1LayersIdExperimentsRequest generates requests for GetConsoleV1LayersIdExperiments
func NewGetConsoleV1LayersIdExperimentsRequest(server string, id string, params *GetConsoleV1LayersIdExperimentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s/experiments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1LayersIdOverridesRequest generates requests for DeleteConsoleV1LayersIdOverrides
func NewDeleteConsoleV1LayersIdOverridesRequest(server string, id string, params *DeleteConsoleV1LayersIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1LayersIdOverridesRequest generates requests for GetConsoleV1LayersIdOverrides
func NewGetConsoleV1LayersIdOverridesRequest(server string, id string, params *GetConsoleV1LayersIdOverridesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1LayersIdOverridesRequest calls the generic PatchConsoleV1LayersIdOverrides builder with application/json body
func NewPatchConsoleV1LayersIdOverridesRequest(server string, id string, params *PatchConsoleV1LayersIdOverridesParams, body PatchConsoleV1LayersIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1LayersIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1LayersIdOverridesRequestWithBody generates requests for PatchConsoleV1LayersIdOverrides with any type of body
func NewPatchConsoleV1LayersIdOverridesRequestWithBody(server string, id string, params *PatchConsoleV1LayersIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1LayersIdOverridesRequest calls the generic PostConsoleV1LayersIdOverrides builder with application/json body
func NewPostConsoleV1LayersIdOverridesRequest(server string, id string, params *PostConsoleV1LayersIdOverridesParams, body PostConsoleV1LayersIdOverridesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1LayersIdOverridesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1LayersIdOverridesRequestWithBody generates requests for PostConsoleV1LayersIdOverrides with any type of body
func NewPostConsoleV1LayersIdOverridesRequestWithBody(server string, id string, params *PostConsoleV1LayersIdOverridesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/layers/%s/overrides", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsRequest generates requests for GetConsoleV1Metrics
func NewGetConsoleV1MetricsRequest(server string, params *GetConsoleV1MetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1MetricsRequest calls the generic PostConsoleV1Metrics builder with application/json body
func NewPostConsoleV1MetricsRequest(server string, params *PostConsoleV1MetricsParams, body PostConsoleV1MetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1MetricsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1MetricsRequestWithBody generates requests for PostConsoleV1Metrics with any type of body
func NewPostConsoleV1MetricsRequestWithBody(server string, params *PostConsoleV1MetricsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsListRequest generates requests for GetConsoleV1MetricsList
func NewGetConsoleV1MetricsListRequest(server string, params *GetConsoleV1MetricsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ShowHiddenMetrics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showHiddenMetrics", runtime.ParamLocationQuery, *params.ShowHiddenMetrics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1MetricsMetricSourceRequest calls the generic PostConsoleV1MetricsMetricSource builder with application/json body
func NewPostConsoleV1MetricsMetricSourceRequest(server string, params *PostConsoleV1MetricsMetricSourceParams, body PostConsoleV1MetricsMetricSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1MetricsMetricSourceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1MetricsMetricSourceRequestWithBody generates requests for PostConsoleV1MetricsMetricSource with any type of body
func NewPostConsoleV1MetricsMetricSourceRequestWithBody(server string, params *PostConsoleV1MetricsMetricSourceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/metric_source")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsMetricSourceListRequest generates requests for GetConsoleV1MetricsMetricSourceList
func NewGetConsoleV1MetricsMetricSourceListRequest(server string, params *GetConsoleV1MetricsMetricSourceListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/metric_source/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1MetricsMetricSourceNameRequest generates requests for DeleteConsoleV1MetricsMetricSourceName
func NewDeleteConsoleV1MetricsMetricSourceNameRequest(server string, name string, params *DeleteConsoleV1MetricsMetricSourceNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/metric_source/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsMetricSourceNameRequest generates requests for GetConsoleV1MetricsMetricSourceName
func NewGetConsoleV1MetricsMetricSourceNameRequest(server string, name string, params *GetConsoleV1MetricsMetricSourceNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/metric_source/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1MetricsMetricSourceNameRequest calls the generic PostConsoleV1MetricsMetricSourceName builder with application/json body
func NewPostConsoleV1MetricsMetricSourceNameRequest(server string, name string, params *PostConsoleV1MetricsMetricSourceNameParams, body PostConsoleV1MetricsMetricSourceNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1MetricsMetricSourceNameRequestWithBody(server, name, params, "application/json", bodyReader)
}

// NewPostConsoleV1MetricsMetricSourceNameRequestWithBody generates requests for PostConsoleV1MetricsMetricSourceName with any type of body
func NewPostConsoleV1MetricsMetricSourceNameRequestWithBody(server string, name string, params *PostConsoleV1MetricsMetricSourceNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/metric_source/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsMetricSourceNameMetricsRequest generates requests for GetConsoleV1MetricsMetricSourceNameMetrics
func NewGetConsoleV1MetricsMetricSourceNameMetricsRequest(server string, name string, params *GetConsoleV1MetricsMetricSourceNameMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/metric_source/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsValuesRequest generates requests for GetConsoleV1MetricsValues
func NewGetConsoleV1MetricsValuesRequest(server string, params *GetConsoleV1MetricsValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MetricName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricName", runtime.ParamLocationQuery, *params.MetricName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MetricType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metricType", runtime.ParamLocationQuery, *params.MetricType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1MetricsIdRequest generates requests for DeleteConsoleV1MetricsId
func NewDeleteConsoleV1MetricsIdRequest(server string, id string, params *DeleteConsoleV1MetricsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsIdRequest generates requests for GetConsoleV1MetricsId
func NewGetConsoleV1MetricsIdRequest(server string, id string, params *GetConsoleV1MetricsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1MetricsIdRequest calls the generic PostConsoleV1MetricsId builder with application/json body
func NewPostConsoleV1MetricsIdRequest(server string, id string, params *PostConsoleV1MetricsIdParams, body PostConsoleV1MetricsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1MetricsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1MetricsIdRequestWithBody generates requests for PostConsoleV1MetricsId with any type of body
func NewPostConsoleV1MetricsIdRequestWithBody(server string, id string, params *PostConsoleV1MetricsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1MetricsIdCancelArchiveRequest generates requests for PutConsoleV1MetricsIdCancelArchive
func NewPutConsoleV1MetricsIdCancelArchiveRequest(server string, id string, params *PutConsoleV1MetricsIdCancelArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s/cancel_archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1MetricsIdExperimentsRequest generates requests for GetConsoleV1MetricsIdExperiments
func NewGetConsoleV1MetricsIdExperimentsRequest(server string, id string, params *GetConsoleV1MetricsIdExperimentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s/experiments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LayerID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "layerID", runtime.ParamLocationQuery, *params.LayerID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idType", runtime.ParamLocationQuery, *params.IdType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorName", runtime.ParamLocationQuery, *params.CreatorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creatorID", runtime.ParamLocationQuery, *params.CreatorID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1MetricsIdReloadRequest generates requests for PostConsoleV1MetricsIdReload
func NewPostConsoleV1MetricsIdReloadRequest(server string, id string, params *PostConsoleV1MetricsIdReloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s/reload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1MetricsIdScheduleArchiveRequest generates requests for PutConsoleV1MetricsIdScheduleArchive
func NewPutConsoleV1MetricsIdScheduleArchiveRequest(server string, id string, params *PutConsoleV1MetricsIdScheduleArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s/schedule_archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1MetricsIdUnarchiveRequest generates requests for PutConsoleV1MetricsIdUnarchive
func NewPutConsoleV1MetricsIdUnarchiveRequest(server string, id string, params *PutConsoleV1MetricsIdUnarchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/metrics/%s/unarchive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ProjectRequest generates requests for GetConsoleV1Project
func NewGetConsoleV1ProjectRequest(server string, params *GetConsoleV1ProjectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ProjectUsageBillingReportRequest generates requests for GetConsoleV1ProjectUsageBillingReport
func NewGetConsoleV1ProjectUsageBillingReportRequest(server string, params *GetConsoleV1ProjectUsageBillingReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/project/usage_billing/report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ReleasePipelineTriggersRequest generates requests for GetConsoleV1ReleasePipelineTriggers
func NewGetConsoleV1ReleasePipelineTriggersRequest(server string, params *GetConsoleV1ReleasePipelineTriggersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/release_pipeline_triggers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReleasePipelineID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "releasePipelineID", runtime.ParamLocationQuery, *params.ReleasePipelineID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GateID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gateID", runtime.ParamLocationQuery, *params.GateID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DynamicConfigID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamicConfigID", runtime.ParamLocationQuery, *params.DynamicConfigID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ReleasePipelineTriggersIdRequest generates requests for GetConsoleV1ReleasePipelineTriggersId
func NewGetConsoleV1ReleasePipelineTriggersIdRequest(server string, id string, params *GetConsoleV1ReleasePipelineTriggersIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/release_pipeline_triggers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ReleasePipelinesRequest generates requests for GetConsoleV1ReleasePipelines
func NewGetConsoleV1ReleasePipelinesRequest(server string, params *GetConsoleV1ReleasePipelinesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/release_pipelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ReleasePipelinesIdRequest generates requests for GetConsoleV1ReleasePipelinesId
func NewGetConsoleV1ReleasePipelinesIdRequest(server string, id string, params *GetConsoleV1ReleasePipelinesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/release_pipelines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1ReportsRequest generates requests for GetConsoleV1Reports
func NewGetConsoleV1ReportsRequest(server string, params *GetConsoleV1ReportsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1SegmentsRequest generates requests for GetConsoleV1Segments
func NewGetConsoleV1SegmentsRequest(server string, params *GetConsoleV1SegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1SegmentsRequest calls the generic PostConsoleV1Segments builder with application/json body
func NewPostConsoleV1SegmentsRequest(server string, params *PostConsoleV1SegmentsParams, body PostConsoleV1SegmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1SegmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1SegmentsRequestWithBody generates requests for PostConsoleV1Segments with any type of body
func NewPostConsoleV1SegmentsRequestWithBody(server string, params *PostConsoleV1SegmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1SegmentsIdRequest generates requests for DeleteConsoleV1SegmentsId
func NewDeleteConsoleV1SegmentsIdRequest(server string, id string, params *DeleteConsoleV1SegmentsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1SegmentsIdRequest generates requests for GetConsoleV1SegmentsId
func NewGetConsoleV1SegmentsIdRequest(server string, id string, params *GetConsoleV1SegmentsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPutConsoleV1SegmentsIdArchiveRequest generates requests for PutConsoleV1SegmentsIdArchive
func NewPutConsoleV1SegmentsIdArchiveRequest(server string, id string, params *PutConsoleV1SegmentsIdArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1SegmentsIdConditionalRequest calls the generic PostConsoleV1SegmentsIdConditional builder with application/json body
func NewPostConsoleV1SegmentsIdConditionalRequest(server string, id string, params *PostConsoleV1SegmentsIdConditionalParams, body PostConsoleV1SegmentsIdConditionalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1SegmentsIdConditionalRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1SegmentsIdConditionalRequestWithBody generates requests for PostConsoleV1SegmentsIdConditional with any type of body
func NewPostConsoleV1SegmentsIdConditionalRequestWithBody(server string, id string, params *PostConsoleV1SegmentsIdConditionalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s/conditional", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1SegmentsIdIdListRequest generates requests for DeleteConsoleV1SegmentsIdIdList
func NewDeleteConsoleV1SegmentsIdIdListRequest(server string, id string, params *DeleteConsoleV1SegmentsIdIdListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s/id_list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1SegmentsIdIdListRequest generates requests for GetConsoleV1SegmentsIdIdList
func NewGetConsoleV1SegmentsIdIdListRequest(server string, id string, params *GetConsoleV1SegmentsIdIdListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s/id_list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1SegmentsIdIdListRequest calls the generic PatchConsoleV1SegmentsIdIdList builder with application/json body
func NewPatchConsoleV1SegmentsIdIdListRequest(server string, id string, params *PatchConsoleV1SegmentsIdIdListParams, body PatchConsoleV1SegmentsIdIdListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1SegmentsIdIdListRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1SegmentsIdIdListRequestWithBody generates requests for PatchConsoleV1SegmentsIdIdList with any type of body
func NewPatchConsoleV1SegmentsIdIdListRequestWithBody(server string, id string, params *PatchConsoleV1SegmentsIdIdListParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s/id_list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1SegmentsIdIdListResetRequest calls the generic PostConsoleV1SegmentsIdIdListReset builder with application/json body
func NewPostConsoleV1SegmentsIdIdListResetRequest(server string, id string, params *PostConsoleV1SegmentsIdIdListResetParams, body PostConsoleV1SegmentsIdIdListResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1SegmentsIdIdListResetRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostConsoleV1SegmentsIdIdListResetRequestWithBody generates requests for PostConsoleV1SegmentsIdIdListReset with any type of body
func NewPostConsoleV1SegmentsIdIdListResetRequestWithBody(server string, id string, params *PostConsoleV1SegmentsIdIdListResetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/segments/%s/id_list/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1TagsRequest generates requests for GetConsoleV1Tags
func NewGetConsoleV1TagsRequest(server string, params *GetConsoleV1TagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1TagsRequest calls the generic PostConsoleV1Tags builder with application/json body
func NewPostConsoleV1TagsRequest(server string, params *PostConsoleV1TagsParams, body PostConsoleV1TagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1TagsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1TagsRequestWithBody generates requests for PostConsoleV1Tags with any type of body
func NewPostConsoleV1TagsRequestWithBody(server string, params *PostConsoleV1TagsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1TagsIdRequest generates requests for DeleteConsoleV1TagsId
func NewDeleteConsoleV1TagsIdRequest(server string, id string, params *DeleteConsoleV1TagsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1TagsIdRequest generates requests for GetConsoleV1TagsId
func NewGetConsoleV1TagsIdRequest(server string, id string, params *GetConsoleV1TagsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1TagsIdRequest calls the generic PatchConsoleV1TagsId builder with application/json body
func NewPatchConsoleV1TagsIdRequest(server string, id string, params *PatchConsoleV1TagsIdParams, body PatchConsoleV1TagsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1TagsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1TagsIdRequestWithBody generates requests for PatchConsoleV1TagsId with any type of body
func NewPatchConsoleV1TagsIdRequestWithBody(server string, id string, params *PatchConsoleV1TagsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1TargetAppRequest generates requests for GetConsoleV1TargetApp
func NewGetConsoleV1TargetAppRequest(server string, params *GetConsoleV1TargetAppParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/target_app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1TargetAppRequest calls the generic PatchConsoleV1TargetApp builder with application/json body
func NewPatchConsoleV1TargetAppRequest(server string, params *PatchConsoleV1TargetAppParams, body PatchConsoleV1TargetAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1TargetAppRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchConsoleV1TargetAppRequestWithBody generates requests for PatchConsoleV1TargetApp with any type of body
func NewPatchConsoleV1TargetAppRequestWithBody(server string, params *PatchConsoleV1TargetAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/target_app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1TargetAppRequest calls the generic PostConsoleV1TargetApp builder with application/json body
func NewPostConsoleV1TargetAppRequest(server string, params *PostConsoleV1TargetAppParams, body PostConsoleV1TargetAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1TargetAppRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1TargetAppRequestWithBody generates requests for PostConsoleV1TargetApp with any type of body
func NewPostConsoleV1TargetAppRequestWithBody(server string, params *PostConsoleV1TargetAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/target_app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1TargetAppIdRequest generates requests for DeleteConsoleV1TargetAppId
func NewDeleteConsoleV1TargetAppIdRequest(server string, id string, params *DeleteConsoleV1TargetAppIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/target_app/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1TargetAppIdRequest generates requests for GetConsoleV1TargetAppId
func NewGetConsoleV1TargetAppIdRequest(server string, id string, params *GetConsoleV1TargetAppIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/target_app/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1TargetAppIdRequest calls the generic PatchConsoleV1TargetAppId builder with application/json body
func NewPatchConsoleV1TargetAppIdRequest(server string, id string, params *PatchConsoleV1TargetAppIdParams, body PatchConsoleV1TargetAppIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1TargetAppIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1TargetAppIdRequestWithBody generates requests for PatchConsoleV1TargetAppId with any type of body
func NewPatchConsoleV1TargetAppIdRequestWithBody(server string, id string, params *PatchConsoleV1TargetAppIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/target_app/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1UsersRequest generates requests for GetConsoleV1Users
func NewGetConsoleV1UsersRequest(server string, params *GetConsoleV1UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1UsersInviteRequest calls the generic PostConsoleV1UsersInvite builder with application/json body
func NewPostConsoleV1UsersInviteRequest(server string, params *PostConsoleV1UsersInviteParams, body PostConsoleV1UsersInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1UsersInviteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1UsersInviteRequestWithBody generates requests for PostConsoleV1UsersInvite with any type of body
func NewPostConsoleV1UsersInviteRequestWithBody(server string, params *PostConsoleV1UsersInviteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1UsersTeamsRequest generates requests for GetConsoleV1UsersTeams
func NewGetConsoleV1UsersTeamsRequest(server string, params *GetConsoleV1UsersTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1UsersTeamsRequest calls the generic PostConsoleV1UsersTeams builder with application/json body
func NewPostConsoleV1UsersTeamsRequest(server string, params *PostConsoleV1UsersTeamsParams, body PostConsoleV1UsersTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1UsersTeamsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostConsoleV1UsersTeamsRequestWithBody generates requests for PostConsoleV1UsersTeams with any type of body
func NewPostConsoleV1UsersTeamsRequestWithBody(server string, params *PostConsoleV1UsersTeamsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteConsoleV1UsersTeamsIdRequest generates requests for DeleteConsoleV1UsersTeamsId
func NewDeleteConsoleV1UsersTeamsIdRequest(server string, id string, params *DeleteConsoleV1UsersTeamsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1UsersTeamsIdRequest generates requests for GetConsoleV1UsersTeamsId
func NewGetConsoleV1UsersTeamsIdRequest(server string, id string, params *GetConsoleV1UsersTeamsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPatchConsoleV1UsersTeamsIdRequest calls the generic PatchConsoleV1UsersTeamsId builder with application/json body
func NewPatchConsoleV1UsersTeamsIdRequest(server string, id string, params *PatchConsoleV1UsersTeamsIdParams, body PatchConsoleV1UsersTeamsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConsoleV1UsersTeamsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchConsoleV1UsersTeamsIdRequestWithBody generates requests for PatchConsoleV1UsersTeamsId with any type of body
func NewPatchConsoleV1UsersTeamsIdRequestWithBody(server string, id string, params *PatchConsoleV1UsersTeamsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewGetConsoleV1UsersEmailRequest generates requests for GetConsoleV1UsersEmail
func NewGetConsoleV1UsersEmailRequest(server string, email string, params *GetConsoleV1UsersEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

// NewPostConsoleV1UsersEmailRequest calls the generic PostConsoleV1UsersEmail builder with application/json body
func NewPostConsoleV1UsersEmailRequest(server string, email string, params *PostConsoleV1UsersEmailParams, body PostConsoleV1UsersEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConsoleV1UsersEmailRequestWithBody(server, email, params, "application/json", bodyReader)
}

// NewPostConsoleV1UsersEmailRequestWithBody generates requests for PostConsoleV1UsersEmail with any type of body
func NewPostConsoleV1UsersEmailRequestWithBody(server string, email string, params *PostConsoleV1UsersEmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/console/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRespectReviewSettings != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-respect-review-settings", runtime.ParamLocationHeader, *params.XRespectReviewSettings)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-respect-review-settings", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConsoleV1AlertsWithResponse request
	GetConsoleV1AlertsWithResponse(ctx context.Context, params *GetConsoleV1AlertsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AlertsResponse, error)

	// GetConsoleV1AuditLogsWithResponse request
	GetConsoleV1AuditLogsWithResponse(ctx context.Context, params *GetConsoleV1AuditLogsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AuditLogsResponse, error)

	// GetConsoleV1AutotunesWithResponse request
	GetConsoleV1AutotunesWithResponse(ctx context.Context, params *GetConsoleV1AutotunesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AutotunesResponse, error)

	// PostConsoleV1AutotunesWithBodyWithResponse request with any body
	PostConsoleV1AutotunesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1AutotunesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesResponse, error)

	PostConsoleV1AutotunesWithResponse(ctx context.Context, params *PostConsoleV1AutotunesParams, body PostConsoleV1AutotunesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesResponse, error)

	// DeleteConsoleV1AutotunesIdWithResponse request
	DeleteConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1AutotunesIdResponse, error)

	// GetConsoleV1AutotunesIdWithResponse request
	GetConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *GetConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AutotunesIdResponse, error)

	// PatchConsoleV1AutotunesIdWithBodyWithResponse request with any body
	PatchConsoleV1AutotunesIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1AutotunesIdResponse, error)

	PatchConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, body PatchConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1AutotunesIdResponse, error)

	// PostConsoleV1AutotunesIdWithBodyWithResponse request with any body
	PostConsoleV1AutotunesIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesIdResponse, error)

	PostConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, body PostConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesIdResponse, error)

	// PutConsoleV1AutotunesIdMakeDecisionWithBodyWithResponse request with any body
	PutConsoleV1AutotunesIdMakeDecisionWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdMakeDecisionResponse, error)

	PutConsoleV1AutotunesIdMakeDecisionWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, body PutConsoleV1AutotunesIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdMakeDecisionResponse, error)

	// PutConsoleV1AutotunesIdResetWithResponse request
	PutConsoleV1AutotunesIdResetWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdResetParams, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdResetResponse, error)

	// PutConsoleV1AutotunesIdStartWithResponse request
	PutConsoleV1AutotunesIdStartWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdStartParams, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdStartResponse, error)

	// GetConsoleV1CompanyWithResponse request
	GetConsoleV1CompanyWithResponse(ctx context.Context, params *GetConsoleV1CompanyParams, reqEditors ...RequestEditorFn) (*GetConsoleV1CompanyResponse, error)

	// GetConsoleV1DynamicConfigsWithResponse request
	GetConsoleV1DynamicConfigsWithResponse(ctx context.Context, params *GetConsoleV1DynamicConfigsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsResponse, error)

	// PostConsoleV1DynamicConfigsWithBodyWithResponse request with any body
	PostConsoleV1DynamicConfigsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsResponse, error)

	PostConsoleV1DynamicConfigsWithResponse(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, body PostConsoleV1DynamicConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsResponse, error)

	// DeleteConsoleV1DynamicConfigsIdWithResponse request
	DeleteConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1DynamicConfigsIdResponse, error)

	// GetConsoleV1DynamicConfigsIdWithResponse request
	GetConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdResponse, error)

	// PatchConsoleV1DynamicConfigsIdWithBodyWithResponse request with any body
	PatchConsoleV1DynamicConfigsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdResponse, error)

	PatchConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, body PatchConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdResponse, error)

	// PostConsoleV1DynamicConfigsIdWithBodyWithResponse request with any body
	PostConsoleV1DynamicConfigsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdResponse, error)

	PostConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, body PostConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdResponse, error)

	// PutConsoleV1DynamicConfigsIdDisableWithResponse request
	PutConsoleV1DynamicConfigsIdDisableWithResponse(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdDisableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1DynamicConfigsIdDisableResponse, error)

	// PutConsoleV1DynamicConfigsIdEnableWithResponse request
	PutConsoleV1DynamicConfigsIdEnableWithResponse(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdEnableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1DynamicConfigsIdEnableResponse, error)

	// PostConsoleV1DynamicConfigsIdRuleWithBodyWithResponse request with any body
	PostConsoleV1DynamicConfigsIdRuleWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRuleResponse, error)

	PostConsoleV1DynamicConfigsIdRuleWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, body PostConsoleV1DynamicConfigsIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRuleResponse, error)

	// DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse request
	DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse(ctx context.Context, id string, ruleName string, params *DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error)

	// PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBodyWithResponse request with any body
	PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBodyWithResponse(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error)

	PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, body PatchConsoleV1DynamicConfigsIdRuleNameRuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error)

	// DeleteConsoleV1DynamicConfigsIdRuleRuleIdWithResponse request
	DeleteConsoleV1DynamicConfigsIdRuleRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *DeleteConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse, error)

	// GetConsoleV1DynamicConfigsIdRuleRuleIdWithResponse request
	GetConsoleV1DynamicConfigsIdRuleRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *GetConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdRuleRuleIdResponse, error)

	// PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBodyWithResponse request with any body
	PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBodyWithResponse(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse, error)

	PatchConsoleV1DynamicConfigsIdRuleRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, body PatchConsoleV1DynamicConfigsIdRuleRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse, error)

	// GetConsoleV1DynamicConfigsIdRulesWithResponse request
	GetConsoleV1DynamicConfigsIdRulesWithResponse(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdRulesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdRulesResponse, error)

	// PatchConsoleV1DynamicConfigsIdRulesWithBodyWithResponse request with any body
	PatchConsoleV1DynamicConfigsIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRulesResponse, error)

	PatchConsoleV1DynamicConfigsIdRulesWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, body PatchConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRulesResponse, error)

	// PostConsoleV1DynamicConfigsIdRulesWithBodyWithResponse request with any body
	PostConsoleV1DynamicConfigsIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRulesResponse, error)

	PostConsoleV1DynamicConfigsIdRulesWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, body PostConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRulesResponse, error)

	// GetConsoleV1DynamicConfigsIdVersionsWithResponse request
	GetConsoleV1DynamicConfigsIdVersionsWithResponse(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdVersionsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdVersionsResponse, error)

	// GetConsoleV1EventsWithResponse request
	GetConsoleV1EventsWithResponse(ctx context.Context, params *GetConsoleV1EventsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1EventsResponse, error)

	// GetConsoleV1EventsEventNameWithResponse request
	GetConsoleV1EventsEventNameWithResponse(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameParams, reqEditors ...RequestEditorFn) (*GetConsoleV1EventsEventNameResponse, error)

	// GetConsoleV1EventsEventNameMetricsWithResponse request
	GetConsoleV1EventsEventNameMetricsWithResponse(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameMetricsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1EventsEventNameMetricsResponse, error)

	// GetConsoleV1ExperimentsWithResponse request
	GetConsoleV1ExperimentsWithResponse(ctx context.Context, params *GetConsoleV1ExperimentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsResponse, error)

	// PostConsoleV1ExperimentsWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsResponse, error)

	PostConsoleV1ExperimentsWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsParams, body PostConsoleV1ExperimentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsResponse, error)

	// DeleteConsoleV1ExperimentsAssignmentSourceNameWithResponse request
	DeleteConsoleV1ExperimentsAssignmentSourceNameWithResponse(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsAssignmentSourceNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsAssignmentSourceNameResponse, error)

	// PatchConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse request with any body
	PatchConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsAssignmentSourceNameResponse, error)

	PatchConsoleV1ExperimentsAssignmentSourceNameWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, body PatchConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsAssignmentSourceNameResponse, error)

	// PostConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourceNameResponse, error)

	PostConsoleV1ExperimentsAssignmentSourceNameWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, body PostConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourceNameResponse, error)

	// GetConsoleV1ExperimentsAssignmentSourcesWithResponse request
	GetConsoleV1ExperimentsAssignmentSourcesWithResponse(ctx context.Context, params *GetConsoleV1ExperimentsAssignmentSourcesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsAssignmentSourcesResponse, error)

	// PostConsoleV1ExperimentsAssignmentSourcesWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsAssignmentSourcesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourcesResponse, error)

	PostConsoleV1ExperimentsAssignmentSourcesWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, body PostConsoleV1ExperimentsAssignmentSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourcesResponse, error)

	// GetConsoleV1ExperimentsEntityPropertiesWithResponse request
	GetConsoleV1ExperimentsEntityPropertiesWithResponse(ctx context.Context, params *GetConsoleV1ExperimentsEntityPropertiesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsEntityPropertiesResponse, error)

	// PostConsoleV1ExperimentsEntityPropertiesWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsEntityPropertiesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertiesResponse, error)

	PostConsoleV1ExperimentsEntityPropertiesWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, body PostConsoleV1ExperimentsEntityPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertiesResponse, error)

	// DeleteConsoleV1ExperimentsEntityPropertyNameWithResponse request
	DeleteConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsEntityPropertyNameResponse, error)

	// GetConsoleV1ExperimentsEntityPropertyNameWithResponse request
	GetConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *GetConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsEntityPropertyNameResponse, error)

	// PatchConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse request with any body
	PatchConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsEntityPropertyNameResponse, error)

	PatchConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, body PatchConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsEntityPropertyNameResponse, error)

	// PostConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertyNameResponse, error)

	PostConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, body PostConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertyNameResponse, error)

	// DeleteConsoleV1ExperimentsIdWithResponse request
	DeleteConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsIdResponse, error)

	// GetConsoleV1ExperimentsIdWithResponse request
	GetConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdResponse, error)

	// PatchConsoleV1ExperimentsIdWithBodyWithResponse request with any body
	PatchConsoleV1ExperimentsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdResponse, error)

	PatchConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, body PatchConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdResponse, error)

	// PostConsoleV1ExperimentsIdWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdResponse, error)

	PostConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, body PostConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdResponse, error)

	// PutConsoleV1ExperimentsIdAbandonWithBodyWithResponse request with any body
	PutConsoleV1ExperimentsIdAbandonWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdAbandonResponse, error)

	PutConsoleV1ExperimentsIdAbandonWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, body PutConsoleV1ExperimentsIdAbandonJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdAbandonResponse, error)

	// PutConsoleV1ExperimentsIdArchiveWithBodyWithResponse request with any body
	PutConsoleV1ExperimentsIdArchiveWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdArchiveResponse, error)

	PutConsoleV1ExperimentsIdArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, body PutConsoleV1ExperimentsIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdArchiveResponse, error)

	// GetConsoleV1ExperimentsIdCumulativeExposuresWithResponse request
	GetConsoleV1ExperimentsIdCumulativeExposuresWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdCumulativeExposuresParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdCumulativeExposuresResponse, error)

	// PostConsoleV1ExperimentsIdDisableGroupsWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsIdDisableGroupsWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdDisableGroupsResponse, error)

	PostConsoleV1ExperimentsIdDisableGroupsWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, body PostConsoleV1ExperimentsIdDisableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdDisableGroupsResponse, error)

	// PostConsoleV1ExperimentsIdEnableGroupsWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsIdEnableGroupsWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdEnableGroupsResponse, error)

	PostConsoleV1ExperimentsIdEnableGroupsWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, body PostConsoleV1ExperimentsIdEnableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdEnableGroupsResponse, error)

	// PostConsoleV1ExperimentsIdLoadPulseWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsIdLoadPulseWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdLoadPulseResponse, error)

	PostConsoleV1ExperimentsIdLoadPulseWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, body PostConsoleV1ExperimentsIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdLoadPulseResponse, error)

	// PutConsoleV1ExperimentsIdMakeDecisionWithBodyWithResponse request with any body
	PutConsoleV1ExperimentsIdMakeDecisionWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdMakeDecisionResponse, error)

	PutConsoleV1ExperimentsIdMakeDecisionWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, body PutConsoleV1ExperimentsIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdMakeDecisionResponse, error)

	// DeleteConsoleV1ExperimentsIdOverridesWithResponse request
	DeleteConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsIdOverridesResponse, error)

	// GetConsoleV1ExperimentsIdOverridesWithResponse request
	GetConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdOverridesResponse, error)

	// PatchConsoleV1ExperimentsIdOverridesWithBodyWithResponse request with any body
	PatchConsoleV1ExperimentsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdOverridesResponse, error)

	PatchConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, body PatchConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdOverridesResponse, error)

	// PostConsoleV1ExperimentsIdOverridesWithBodyWithResponse request with any body
	PostConsoleV1ExperimentsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdOverridesResponse, error)

	PostConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, body PostConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdOverridesResponse, error)

	// GetConsoleV1ExperimentsIdPulseLoadHistoryWithResponse request
	GetConsoleV1ExperimentsIdPulseLoadHistoryWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdPulseLoadHistoryResponse, error)

	// GetConsoleV1ExperimentsIdPulseResultsWithResponse request
	GetConsoleV1ExperimentsIdPulseResultsWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseResultsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdPulseResultsResponse, error)

	// PutConsoleV1ExperimentsIdResetWithResponse request
	PutConsoleV1ExperimentsIdResetWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdResetParams, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdResetResponse, error)

	// PutConsoleV1ExperimentsIdStartWithBodyWithResponse request with any body
	PutConsoleV1ExperimentsIdStartWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdStartResponse, error)

	PutConsoleV1ExperimentsIdStartWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, body PutConsoleV1ExperimentsIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdStartResponse, error)

	// PutConsoleV1ExperimentsIdUnarchiveWithResponse request
	PutConsoleV1ExperimentsIdUnarchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdUnarchiveResponse, error)

	// GetConsoleV1ExposureCountWithResponse request
	GetConsoleV1ExposureCountWithResponse(ctx context.Context, params *GetConsoleV1ExposureCountParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExposureCountResponse, error)

	// GetConsoleV1GatesWithResponse request
	GetConsoleV1GatesWithResponse(ctx context.Context, params *GetConsoleV1GatesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesResponse, error)

	// PostConsoleV1GatesWithBodyWithResponse request with any body
	PostConsoleV1GatesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1GatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesResponse, error)

	PostConsoleV1GatesWithResponse(ctx context.Context, params *PostConsoleV1GatesParams, body PostConsoleV1GatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesResponse, error)

	// DeleteConsoleV1GatesIdWithResponse request
	DeleteConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1GatesIdResponse, error)

	// GetConsoleV1GatesIdWithResponse request
	GetConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdResponse, error)

	// PatchConsoleV1GatesIdWithBodyWithResponse request with any body
	PatchConsoleV1GatesIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdResponse, error)

	PatchConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, body PatchConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdResponse, error)

	// PostConsoleV1GatesIdWithBodyWithResponse request with any body
	PostConsoleV1GatesIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdResponse, error)

	PostConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, body PostConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdResponse, error)

	// PutConsoleV1GatesIdArchiveWithBodyWithResponse request with any body
	PutConsoleV1GatesIdArchiveWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdArchiveResponse, error)

	PutConsoleV1GatesIdArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, body PutConsoleV1GatesIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdArchiveResponse, error)

	// PutConsoleV1GatesIdDisableWithResponse request
	PutConsoleV1GatesIdDisableWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdDisableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdDisableResponse, error)

	// PutConsoleV1GatesIdEnableWithResponse request
	PutConsoleV1GatesIdEnableWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdEnableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdEnableResponse, error)

	// PutConsoleV1GatesIdLaunchWithResponse request
	PutConsoleV1GatesIdLaunchWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdLaunchParams, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdLaunchResponse, error)

	// PostConsoleV1GatesIdLoadPulseWithBodyWithResponse request with any body
	PostConsoleV1GatesIdLoadPulseWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdLoadPulseResponse, error)

	PostConsoleV1GatesIdLoadPulseWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, body PostConsoleV1GatesIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdLoadPulseResponse, error)

	// DeleteConsoleV1GatesIdOverridesWithResponse request
	DeleteConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1GatesIdOverridesResponse, error)

	// GetConsoleV1GatesIdOverridesWithResponse request
	GetConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdOverridesResponse, error)

	// PatchConsoleV1GatesIdOverridesWithBodyWithResponse request with any body
	PatchConsoleV1GatesIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdOverridesResponse, error)

	PatchConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, body PatchConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdOverridesResponse, error)

	// PostConsoleV1GatesIdOverridesWithBodyWithResponse request with any body
	PostConsoleV1GatesIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdOverridesResponse, error)

	PostConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, body PostConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdOverridesResponse, error)

	// PostConsoleV1GatesIdRuleWithBodyWithResponse request with any body
	PostConsoleV1GatesIdRuleWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRuleResponse, error)

	PostConsoleV1GatesIdRuleWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, body PostConsoleV1GatesIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRuleResponse, error)

	// GetConsoleV1GatesIdRulesWithResponse request
	GetConsoleV1GatesIdRulesWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdRulesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdRulesResponse, error)

	// PatchConsoleV1GatesIdRulesWithBodyWithResponse request with any body
	PatchConsoleV1GatesIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesResponse, error)

	PatchConsoleV1GatesIdRulesWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, body PatchConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesResponse, error)

	// PostConsoleV1GatesIdRulesWithBodyWithResponse request with any body
	PostConsoleV1GatesIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRulesResponse, error)

	PostConsoleV1GatesIdRulesWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, body PostConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRulesResponse, error)

	// DeleteConsoleV1GatesIdRulesRuleIDWithResponse request
	DeleteConsoleV1GatesIdRulesRuleIDWithResponse(ctx context.Context, id string, ruleID string, params *DeleteConsoleV1GatesIdRulesRuleIDParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1GatesIdRulesRuleIDResponse, error)

	// PatchConsoleV1GatesIdRulesRuleIDWithBodyWithResponse request with any body
	PatchConsoleV1GatesIdRulesRuleIDWithBodyWithResponse(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesRuleIDResponse, error)

	PatchConsoleV1GatesIdRulesRuleIDWithResponse(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, body PatchConsoleV1GatesIdRulesRuleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesRuleIDResponse, error)

	// GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryWithResponse request
	GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryWithResponse(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse, error)

	// GetConsoleV1GatesIdRulesRuleIDPulseResultsWithResponse request
	GetConsoleV1GatesIdRulesRuleIDPulseResultsWithResponse(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseResultsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse, error)

	// GetConsoleV1GatesIdVersionsWithResponse request
	GetConsoleV1GatesIdVersionsWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdVersionsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdVersionsResponse, error)

	// GetConsoleV1HoldoutsWithResponse request
	GetConsoleV1HoldoutsWithResponse(ctx context.Context, params *GetConsoleV1HoldoutsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1HoldoutsResponse, error)

	// PostConsoleV1HoldoutsWithBodyWithResponse request with any body
	PostConsoleV1HoldoutsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1HoldoutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsResponse, error)

	PostConsoleV1HoldoutsWithResponse(ctx context.Context, params *PostConsoleV1HoldoutsParams, body PostConsoleV1HoldoutsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsResponse, error)

	// DeleteConsoleV1HoldoutsIdWithResponse request
	DeleteConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1HoldoutsIdResponse, error)

	// GetConsoleV1HoldoutsIdWithResponse request
	GetConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1HoldoutsIdResponse, error)

	// PatchConsoleV1HoldoutsIdWithBodyWithResponse request with any body
	PatchConsoleV1HoldoutsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdResponse, error)

	PatchConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, body PatchConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdResponse, error)

	// PostConsoleV1HoldoutsIdWithBodyWithResponse request with any body
	PostConsoleV1HoldoutsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdResponse, error)

	PostConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, body PostConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdResponse, error)

	// DeleteConsoleV1HoldoutsIdOverridesWithResponse request
	DeleteConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1HoldoutsIdOverridesResponse, error)

	// GetConsoleV1HoldoutsIdOverridesWithResponse request
	GetConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1HoldoutsIdOverridesResponse, error)

	// PatchConsoleV1HoldoutsIdOverridesWithBodyWithResponse request with any body
	PatchConsoleV1HoldoutsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdOverridesResponse, error)

	PatchConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, body PatchConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdOverridesResponse, error)

	// PostConsoleV1HoldoutsIdOverridesWithBodyWithResponse request with any body
	PostConsoleV1HoldoutsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdOverridesResponse, error)

	PostConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, body PostConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdOverridesResponse, error)

	// DeleteConsoleV1IngestionWithResponse request
	DeleteConsoleV1IngestionWithResponse(ctx context.Context, params *DeleteConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1IngestionResponse, error)

	// GetConsoleV1IngestionWithResponse request
	GetConsoleV1IngestionWithResponse(ctx context.Context, params *GetConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionResponse, error)

	// PatchConsoleV1IngestionWithBodyWithResponse request with any body
	PatchConsoleV1IngestionWithBodyWithResponse(ctx context.Context, params *PatchConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1IngestionResponse, error)

	PatchConsoleV1IngestionWithResponse(ctx context.Context, params *PatchConsoleV1IngestionParams, body PatchConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1IngestionResponse, error)

	// PostConsoleV1IngestionWithBodyWithResponse request with any body
	PostConsoleV1IngestionWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionResponse, error)

	PostConsoleV1IngestionWithResponse(ctx context.Context, params *PostConsoleV1IngestionParams, body PostConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionResponse, error)

	// PostConsoleV1IngestionBackfillWithBodyWithResponse request with any body
	PostConsoleV1IngestionBackfillWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionBackfillResponse, error)

	PostConsoleV1IngestionBackfillWithResponse(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, body PostConsoleV1IngestionBackfillJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionBackfillResponse, error)

	// PostConsoleV1IngestionConnectionDatabricksWithBodyWithResponse request with any body
	PostConsoleV1IngestionConnectionDatabricksWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionConnectionDatabricksResponse, error)

	PostConsoleV1IngestionConnectionDatabricksWithResponse(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, body PostConsoleV1IngestionConnectionDatabricksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionConnectionDatabricksResponse, error)

	// GetConsoleV1IngestionEventsCountWithResponse request
	GetConsoleV1IngestionEventsCountWithResponse(ctx context.Context, params *GetConsoleV1IngestionEventsCountParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionEventsCountResponse, error)

	// GetConsoleV1IngestionEventsDeltaWithResponse request
	GetConsoleV1IngestionEventsDeltaWithResponse(ctx context.Context, params *GetConsoleV1IngestionEventsDeltaParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionEventsDeltaResponse, error)

	// GetConsoleV1IngestionRunsWithResponse request
	GetConsoleV1IngestionRunsWithResponse(ctx context.Context, params *GetConsoleV1IngestionRunsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionRunsResponse, error)

	// GetConsoleV1IngestionRunsIdWithResponse request
	GetConsoleV1IngestionRunsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1IngestionRunsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionRunsIdResponse, error)

	// GetConsoleV1IngestionScheduleWithResponse request
	GetConsoleV1IngestionScheduleWithResponse(ctx context.Context, params *GetConsoleV1IngestionScheduleParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionScheduleResponse, error)

	// PostConsoleV1IngestionScheduleWithBodyWithResponse request with any body
	PostConsoleV1IngestionScheduleWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionScheduleResponse, error)

	PostConsoleV1IngestionScheduleWithResponse(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, body PostConsoleV1IngestionScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionScheduleResponse, error)

	// GetConsoleV1IngestionStatusWithResponse request
	GetConsoleV1IngestionStatusWithResponse(ctx context.Context, params *GetConsoleV1IngestionStatusParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionStatusResponse, error)

	// GetConsoleV1KeysWithResponse request
	GetConsoleV1KeysWithResponse(ctx context.Context, params *GetConsoleV1KeysParams, reqEditors ...RequestEditorFn) (*GetConsoleV1KeysResponse, error)

	// PostConsoleV1KeysWithBodyWithResponse request with any body
	PostConsoleV1KeysWithBodyWithResponse(ctx context.Context, params *PostConsoleV1KeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1KeysResponse, error)

	PostConsoleV1KeysWithResponse(ctx context.Context, params *PostConsoleV1KeysParams, body PostConsoleV1KeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1KeysResponse, error)

	// DeleteConsoleV1KeysIdWithResponse request
	DeleteConsoleV1KeysIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1KeysIdResponse, error)

	// GetConsoleV1KeysIdWithResponse request
	GetConsoleV1KeysIdWithResponse(ctx context.Context, id string, params *GetConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1KeysIdResponse, error)

	// PatchConsoleV1KeysIdWithBodyWithResponse request with any body
	PatchConsoleV1KeysIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdResponse, error)

	PatchConsoleV1KeysIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, body PatchConsoleV1KeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdResponse, error)

	// PatchConsoleV1KeysIdDeactivateWithResponse request
	PatchConsoleV1KeysIdDeactivateWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdDeactivateParams, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdDeactivateResponse, error)

	// PatchConsoleV1KeysIdRotateWithResponse request
	PatchConsoleV1KeysIdRotateWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdRotateParams, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdRotateResponse, error)

	// GetConsoleV1LayersWithResponse request
	GetConsoleV1LayersWithResponse(ctx context.Context, params *GetConsoleV1LayersParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersResponse, error)

	// PostConsoleV1LayersWithBodyWithResponse request with any body
	PostConsoleV1LayersWithBodyWithResponse(ctx context.Context, params *PostConsoleV1LayersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersResponse, error)

	PostConsoleV1LayersWithResponse(ctx context.Context, params *PostConsoleV1LayersParams, body PostConsoleV1LayersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersResponse, error)

	// DeleteConsoleV1LayersIdWithResponse request
	DeleteConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1LayersIdResponse, error)

	// GetConsoleV1LayersIdWithResponse request
	GetConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *GetConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersIdResponse, error)

	// PatchConsoleV1LayersIdWithBodyWithResponse request with any body
	PatchConsoleV1LayersIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdResponse, error)

	PatchConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, body PatchConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdResponse, error)

	// PostConsoleV1LayersIdWithBodyWithResponse request with any body
	PostConsoleV1LayersIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdResponse, error)

	PostConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, body PostConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdResponse, error)

	// GetConsoleV1LayersIdExperimentsWithResponse request
	GetConsoleV1LayersIdExperimentsWithResponse(ctx context.Context, id string, params *GetConsoleV1LayersIdExperimentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersIdExperimentsResponse, error)

	// DeleteConsoleV1LayersIdOverridesWithResponse request
	DeleteConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1LayersIdOverridesResponse, error)

	// GetConsoleV1LayersIdOverridesWithResponse request
	GetConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersIdOverridesResponse, error)

	// PatchConsoleV1LayersIdOverridesWithBodyWithResponse request with any body
	PatchConsoleV1LayersIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdOverridesResponse, error)

	PatchConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, body PatchConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdOverridesResponse, error)

	// PostConsoleV1LayersIdOverridesWithBodyWithResponse request with any body
	PostConsoleV1LayersIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdOverridesResponse, error)

	PostConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, body PostConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdOverridesResponse, error)

	// GetConsoleV1MetricsWithResponse request
	GetConsoleV1MetricsWithResponse(ctx context.Context, params *GetConsoleV1MetricsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsResponse, error)

	// PostConsoleV1MetricsWithBodyWithResponse request with any body
	PostConsoleV1MetricsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1MetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsResponse, error)

	PostConsoleV1MetricsWithResponse(ctx context.Context, params *PostConsoleV1MetricsParams, body PostConsoleV1MetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsResponse, error)

	// GetConsoleV1MetricsListWithResponse request
	GetConsoleV1MetricsListWithResponse(ctx context.Context, params *GetConsoleV1MetricsListParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsListResponse, error)

	// PostConsoleV1MetricsMetricSourceWithBodyWithResponse request with any body
	PostConsoleV1MetricsMetricSourceWithBodyWithResponse(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceResponse, error)

	PostConsoleV1MetricsMetricSourceWithResponse(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, body PostConsoleV1MetricsMetricSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceResponse, error)

	// GetConsoleV1MetricsMetricSourceListWithResponse request
	GetConsoleV1MetricsMetricSourceListWithResponse(ctx context.Context, params *GetConsoleV1MetricsMetricSourceListParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsMetricSourceListResponse, error)

	// DeleteConsoleV1MetricsMetricSourceNameWithResponse request
	DeleteConsoleV1MetricsMetricSourceNameWithResponse(ctx context.Context, name string, params *DeleteConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1MetricsMetricSourceNameResponse, error)

	// GetConsoleV1MetricsMetricSourceNameWithResponse request
	GetConsoleV1MetricsMetricSourceNameWithResponse(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsMetricSourceNameResponse, error)

	// PostConsoleV1MetricsMetricSourceNameWithBodyWithResponse request with any body
	PostConsoleV1MetricsMetricSourceNameWithBodyWithResponse(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceNameResponse, error)

	PostConsoleV1MetricsMetricSourceNameWithResponse(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, body PostConsoleV1MetricsMetricSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceNameResponse, error)

	// GetConsoleV1MetricsMetricSourceNameMetricsWithResponse request
	GetConsoleV1MetricsMetricSourceNameMetricsWithResponse(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameMetricsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsMetricSourceNameMetricsResponse, error)

	// GetConsoleV1MetricsValuesWithResponse request
	GetConsoleV1MetricsValuesWithResponse(ctx context.Context, params *GetConsoleV1MetricsValuesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsValuesResponse, error)

	// DeleteConsoleV1MetricsIdWithResponse request
	DeleteConsoleV1MetricsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1MetricsIdResponse, error)

	// GetConsoleV1MetricsIdWithResponse request
	GetConsoleV1MetricsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsIdResponse, error)

	// PostConsoleV1MetricsIdWithBodyWithResponse request with any body
	PostConsoleV1MetricsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsIdResponse, error)

	PostConsoleV1MetricsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, body PostConsoleV1MetricsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsIdResponse, error)

	// PutConsoleV1MetricsIdCancelArchiveWithResponse request
	PutConsoleV1MetricsIdCancelArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1MetricsIdCancelArchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1MetricsIdCancelArchiveResponse, error)

	// GetConsoleV1MetricsIdExperimentsWithResponse request
	GetConsoleV1MetricsIdExperimentsWithResponse(ctx context.Context, id string, params *GetConsoleV1MetricsIdExperimentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsIdExperimentsResponse, error)

	// PostConsoleV1MetricsIdReloadWithResponse request
	PostConsoleV1MetricsIdReloadWithResponse(ctx context.Context, id string, params *PostConsoleV1MetricsIdReloadParams, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsIdReloadResponse, error)

	// PutConsoleV1MetricsIdScheduleArchiveWithResponse request
	PutConsoleV1MetricsIdScheduleArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1MetricsIdScheduleArchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1MetricsIdScheduleArchiveResponse, error)

	// PutConsoleV1MetricsIdUnarchiveWithResponse request
	PutConsoleV1MetricsIdUnarchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1MetricsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1MetricsIdUnarchiveResponse, error)

	// GetConsoleV1ProjectWithResponse request
	GetConsoleV1ProjectWithResponse(ctx context.Context, params *GetConsoleV1ProjectParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ProjectResponse, error)

	// GetConsoleV1ProjectUsageBillingReportWithResponse request
	GetConsoleV1ProjectUsageBillingReportWithResponse(ctx context.Context, params *GetConsoleV1ProjectUsageBillingReportParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ProjectUsageBillingReportResponse, error)

	// GetConsoleV1ReleasePipelineTriggersWithResponse request
	GetConsoleV1ReleasePipelineTriggersWithResponse(ctx context.Context, params *GetConsoleV1ReleasePipelineTriggersParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelineTriggersResponse, error)

	// GetConsoleV1ReleasePipelineTriggersIdWithResponse request
	GetConsoleV1ReleasePipelineTriggersIdWithResponse(ctx context.Context, id string, params *GetConsoleV1ReleasePipelineTriggersIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelineTriggersIdResponse, error)

	// GetConsoleV1ReleasePipelinesWithResponse request
	GetConsoleV1ReleasePipelinesWithResponse(ctx context.Context, params *GetConsoleV1ReleasePipelinesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelinesResponse, error)

	// GetConsoleV1ReleasePipelinesIdWithResponse request
	GetConsoleV1ReleasePipelinesIdWithResponse(ctx context.Context, id string, params *GetConsoleV1ReleasePipelinesIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelinesIdResponse, error)

	// GetConsoleV1ReportsWithResponse request
	GetConsoleV1ReportsWithResponse(ctx context.Context, params *GetConsoleV1ReportsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReportsResponse, error)

	// GetConsoleV1SegmentsWithResponse request
	GetConsoleV1SegmentsWithResponse(ctx context.Context, params *GetConsoleV1SegmentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1SegmentsResponse, error)

	// PostConsoleV1SegmentsWithBodyWithResponse request with any body
	PostConsoleV1SegmentsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1SegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsResponse, error)

	PostConsoleV1SegmentsWithResponse(ctx context.Context, params *PostConsoleV1SegmentsParams, body PostConsoleV1SegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsResponse, error)

	// DeleteConsoleV1SegmentsIdWithResponse request
	DeleteConsoleV1SegmentsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1SegmentsIdResponse, error)

	// GetConsoleV1SegmentsIdWithResponse request
	GetConsoleV1SegmentsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1SegmentsIdResponse, error)

	// PutConsoleV1SegmentsIdArchiveWithResponse request
	PutConsoleV1SegmentsIdArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1SegmentsIdArchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1SegmentsIdArchiveResponse, error)

	// PostConsoleV1SegmentsIdConditionalWithBodyWithResponse request with any body
	PostConsoleV1SegmentsIdConditionalWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdConditionalResponse, error)

	PostConsoleV1SegmentsIdConditionalWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, body PostConsoleV1SegmentsIdConditionalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdConditionalResponse, error)

	// DeleteConsoleV1SegmentsIdIdListWithResponse request
	DeleteConsoleV1SegmentsIdIdListWithResponse(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1SegmentsIdIdListResponse, error)

	// GetConsoleV1SegmentsIdIdListWithResponse request
	GetConsoleV1SegmentsIdIdListWithResponse(ctx context.Context, id string, params *GetConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*GetConsoleV1SegmentsIdIdListResponse, error)

	// PatchConsoleV1SegmentsIdIdListWithBodyWithResponse request with any body
	PatchConsoleV1SegmentsIdIdListWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1SegmentsIdIdListResponse, error)

	PatchConsoleV1SegmentsIdIdListWithResponse(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, body PatchConsoleV1SegmentsIdIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1SegmentsIdIdListResponse, error)

	// PostConsoleV1SegmentsIdIdListResetWithBodyWithResponse request with any body
	PostConsoleV1SegmentsIdIdListResetWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdIdListResetResponse, error)

	PostConsoleV1SegmentsIdIdListResetWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, body PostConsoleV1SegmentsIdIdListResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdIdListResetResponse, error)

	// GetConsoleV1TagsWithResponse request
	GetConsoleV1TagsWithResponse(ctx context.Context, params *GetConsoleV1TagsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TagsResponse, error)

	// PostConsoleV1TagsWithBodyWithResponse request with any body
	PostConsoleV1TagsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1TagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1TagsResponse, error)

	PostConsoleV1TagsWithResponse(ctx context.Context, params *PostConsoleV1TagsParams, body PostConsoleV1TagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1TagsResponse, error)

	// DeleteConsoleV1TagsIdWithResponse request
	DeleteConsoleV1TagsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1TagsIdResponse, error)

	// GetConsoleV1TagsIdWithResponse request
	GetConsoleV1TagsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TagsIdResponse, error)

	// PatchConsoleV1TagsIdWithBodyWithResponse request with any body
	PatchConsoleV1TagsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1TagsIdResponse, error)

	PatchConsoleV1TagsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, body PatchConsoleV1TagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1TagsIdResponse, error)

	// GetConsoleV1TargetAppWithResponse request
	GetConsoleV1TargetAppWithResponse(ctx context.Context, params *GetConsoleV1TargetAppParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TargetAppResponse, error)

	// PatchConsoleV1TargetAppWithBodyWithResponse request with any body
	PatchConsoleV1TargetAppWithBodyWithResponse(ctx context.Context, params *PatchConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppResponse, error)

	PatchConsoleV1TargetAppWithResponse(ctx context.Context, params *PatchConsoleV1TargetAppParams, body PatchConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppResponse, error)

	// PostConsoleV1TargetAppWithBodyWithResponse request with any body
	PostConsoleV1TargetAppWithBodyWithResponse(ctx context.Context, params *PostConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1TargetAppResponse, error)

	PostConsoleV1TargetAppWithResponse(ctx context.Context, params *PostConsoleV1TargetAppParams, body PostConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1TargetAppResponse, error)

	// DeleteConsoleV1TargetAppIdWithResponse request
	DeleteConsoleV1TargetAppIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1TargetAppIdResponse, error)

	// GetConsoleV1TargetAppIdWithResponse request
	GetConsoleV1TargetAppIdWithResponse(ctx context.Context, id string, params *GetConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TargetAppIdResponse, error)

	// PatchConsoleV1TargetAppIdWithBodyWithResponse request with any body
	PatchConsoleV1TargetAppIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppIdResponse, error)

	PatchConsoleV1TargetAppIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, body PatchConsoleV1TargetAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppIdResponse, error)

	// GetConsoleV1UsersWithResponse request
	GetConsoleV1UsersWithResponse(ctx context.Context, params *GetConsoleV1UsersParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersResponse, error)

	// PostConsoleV1UsersInviteWithBodyWithResponse request with any body
	PostConsoleV1UsersInviteWithBodyWithResponse(ctx context.Context, params *PostConsoleV1UsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersInviteResponse, error)

	PostConsoleV1UsersInviteWithResponse(ctx context.Context, params *PostConsoleV1UsersInviteParams, body PostConsoleV1UsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersInviteResponse, error)

	// GetConsoleV1UsersTeamsWithResponse request
	GetConsoleV1UsersTeamsWithResponse(ctx context.Context, params *GetConsoleV1UsersTeamsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersTeamsResponse, error)

	// PostConsoleV1UsersTeamsWithBodyWithResponse request with any body
	PostConsoleV1UsersTeamsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1UsersTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersTeamsResponse, error)

	PostConsoleV1UsersTeamsWithResponse(ctx context.Context, params *PostConsoleV1UsersTeamsParams, body PostConsoleV1UsersTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersTeamsResponse, error)

	// DeleteConsoleV1UsersTeamsIdWithResponse request
	DeleteConsoleV1UsersTeamsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1UsersTeamsIdResponse, error)

	// GetConsoleV1UsersTeamsIdWithResponse request
	GetConsoleV1UsersTeamsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersTeamsIdResponse, error)

	// PatchConsoleV1UsersTeamsIdWithBodyWithResponse request with any body
	PatchConsoleV1UsersTeamsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1UsersTeamsIdResponse, error)

	PatchConsoleV1UsersTeamsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, body PatchConsoleV1UsersTeamsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1UsersTeamsIdResponse, error)

	// GetConsoleV1UsersEmailWithResponse request
	GetConsoleV1UsersEmailWithResponse(ctx context.Context, email string, params *GetConsoleV1UsersEmailParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersEmailResponse, error)

	// PostConsoleV1UsersEmailWithBodyWithResponse request with any body
	PostConsoleV1UsersEmailWithBodyWithResponse(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersEmailResponse, error)

	PostConsoleV1UsersEmailWithResponse(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, body PostConsoleV1UsersEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersEmailResponse, error)
}

type GetConsoleV1AlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []AlertSchemaDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON403 *struct {
		Message GetConsoleV1Alerts403Message `json:"message"`
		Status  GetConsoleV1Alerts403Status  `json:"status"`
	}
}
type GetConsoleV1Alerts403Message string
type GetConsoleV1Alerts403Status float32

// Status returns HTTPResponse.Status
func (r GetConsoleV1AlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1AlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1AuditLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []AuditLogDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1AuditLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1AuditLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1AutotunesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []AutotuneExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1AutotunesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1AutotunesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1AutotunesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data AutotuneExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                          `json:"message"`
		Status  PostConsoleV1Autotunes400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                          `json:"message"`
		Status  PostConsoleV1Autotunes401Status `json:"status"`
	}
}
type PostConsoleV1Autotunes400Status int
type PostConsoleV1Autotunes401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1AutotunesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1AutotunesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1AutotunesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                              `json:"message"`
		Status  DeleteConsoleV1AutotunesId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                              `json:"message"`
		Status  DeleteConsoleV1AutotunesId404Status `json:"status"`
	}
}
type DeleteConsoleV1AutotunesId401Status int
type DeleteConsoleV1AutotunesId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1AutotunesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1AutotunesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1AutotunesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data AutotuneExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  GetConsoleV1AutotunesId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                           `json:"message"`
		Status  GetConsoleV1AutotunesId404Status `json:"status"`
	}
}
type GetConsoleV1AutotunesId401Status int
type GetConsoleV1AutotunesId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1AutotunesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1AutotunesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1AutotunesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data AutotuneExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                             `json:"message"`
		Status  PatchConsoleV1AutotunesId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                             `json:"message"`
		Status  PatchConsoleV1AutotunesId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                             `json:"message"`
		Status  PatchConsoleV1AutotunesId404Status `json:"status"`
	}
}
type PatchConsoleV1AutotunesId400Status int
type PatchConsoleV1AutotunesId401Status int
type PatchConsoleV1AutotunesId404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1AutotunesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1AutotunesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1AutotunesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data AutotuneExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                            `json:"message"`
		Status  PostConsoleV1AutotunesId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                            `json:"message"`
		Status  PostConsoleV1AutotunesId404Status `json:"status"`
	}
}
type PostConsoleV1AutotunesId401Status int
type PostConsoleV1AutotunesId404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1AutotunesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1AutotunesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1AutotunesIdMakeDecisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                       `json:"message"`
		Status  PutConsoleV1AutotunesIdMakeDecision400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                       `json:"message"`
		Status  PutConsoleV1AutotunesIdMakeDecision401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                       `json:"message"`
		Status  PutConsoleV1AutotunesIdMakeDecision404Status `json:"status"`
	}
}
type PutConsoleV1AutotunesIdMakeDecision400Status int
type PutConsoleV1AutotunesIdMakeDecision401Status int
type PutConsoleV1AutotunesIdMakeDecision404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1AutotunesIdMakeDecisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1AutotunesIdMakeDecisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1AutotunesIdResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                `json:"message"`
		Status  PutConsoleV1AutotunesIdReset400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                `json:"message"`
		Status  PutConsoleV1AutotunesIdReset401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                `json:"message"`
		Status  PutConsoleV1AutotunesIdReset404Status `json:"status"`
	}
}
type PutConsoleV1AutotunesIdReset400Status int
type PutConsoleV1AutotunesIdReset401Status int
type PutConsoleV1AutotunesIdReset404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1AutotunesIdResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1AutotunesIdResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1AutotunesIdStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutConsoleV1AutotunesIdStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1AutotunesIdStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1CompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data CompanyInfoResponseDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON403 *struct {
		Message GetConsoleV1Company403Message `json:"message"`
		Status  GetConsoleV1Company403Status  `json:"status"`
	}
}
type GetConsoleV1Company403Message string
type GetConsoleV1Company403Status float32

// Status returns HTTPResponse.Status
func (r GetConsoleV1CompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1CompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1DynamicConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON404 *struct {
		Message string                              `json:"message"`
		Status  GetConsoleV1DynamicConfigs404Status `json:"status"`
	}
}
type GetConsoleV1DynamicConfigs404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1DynamicConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1DynamicConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1DynamicConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                               `json:"message"`
		Status  PostConsoleV1DynamicConfigs400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                               `json:"message"`
		Status  PostConsoleV1DynamicConfigs401Status `json:"status"`
	}
	JSON403 *struct {
		Message string                               `json:"message"`
		Status  PostConsoleV1DynamicConfigs403Status `json:"status"`
	}
}
type PostConsoleV1DynamicConfigs400Status int
type PostConsoleV1DynamicConfigs401Status int
type PostConsoleV1DynamicConfigs403Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1DynamicConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1DynamicConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1DynamicConfigsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                                   `json:"message"`
		Status  DeleteConsoleV1DynamicConfigsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                   `json:"message"`
		Status  DeleteConsoleV1DynamicConfigsId404Status `json:"status"`
	}
}
type DeleteConsoleV1DynamicConfigsId401Status int
type DeleteConsoleV1DynamicConfigsId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1DynamicConfigsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1DynamicConfigsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1DynamicConfigsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                `json:"message"`
		Status  GetConsoleV1DynamicConfigsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                `json:"message"`
		Status  GetConsoleV1DynamicConfigsId404Status `json:"status"`
	}
}
type GetConsoleV1DynamicConfigsId401Status int
type GetConsoleV1DynamicConfigsId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1DynamicConfigsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1DynamicConfigsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1DynamicConfigsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                  `json:"message"`
		Status  PatchConsoleV1DynamicConfigsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                  `json:"message"`
		Status  PatchConsoleV1DynamicConfigsId404Status `json:"status"`
	}
}
type PatchConsoleV1DynamicConfigsId401Status int
type PatchConsoleV1DynamicConfigsId404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1DynamicConfigsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1DynamicConfigsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1DynamicConfigsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                 `json:"message"`
		Status  PostConsoleV1DynamicConfigsId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                 `json:"message"`
		Status  PostConsoleV1DynamicConfigsId401Status `json:"status"`
	}
	JSON403 *struct {
		Message string                                 `json:"message"`
		Status  PostConsoleV1DynamicConfigsId403Status `json:"status"`
	}
}
type PostConsoleV1DynamicConfigsId400Status int
type PostConsoleV1DynamicConfigsId401Status int
type PostConsoleV1DynamicConfigsId403Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1DynamicConfigsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1DynamicConfigsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1DynamicConfigsIdDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutConsoleV1DynamicConfigsIdDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1DynamicConfigsIdDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1DynamicConfigsIdEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutConsoleV1DynamicConfigsIdEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1DynamicConfigsIdEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1DynamicConfigsIdRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1DynamicConfigsIdRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1DynamicConfigsIdRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1DynamicConfigsIdRuleRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigRuleDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1DynamicConfigsIdRuleRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1DynamicConfigsIdRuleRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1DynamicConfigsIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []DynamicConfigRulesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1DynamicConfigsIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1DynamicConfigsIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1DynamicConfigsIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1DynamicConfigsIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1DynamicConfigsIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1DynamicConfigsIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1DynamicConfigsIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1DynamicConfigsIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1DynamicConfigsIdVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []DynamicConfigDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON404 *struct {
		Message string                                        `json:"message"`
		Status  GetConsoleV1DynamicConfigsIdVersions404Status `json:"status"`
	}
}
type GetConsoleV1DynamicConfigsIdVersions404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1DynamicConfigsIdVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1DynamicConfigsIdVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1EventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []LoggedEventDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                      `json:"message"`
		Status  GetConsoleV1Events400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                      `json:"message"`
		Status  GetConsoleV1Events401Status `json:"status"`
	}
}
type GetConsoleV1Events400Status int
type GetConsoleV1Events401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1EventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1EventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1EventsEventNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []LoggedEventDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                               `json:"message"`
		Status  GetConsoleV1EventsEventName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                               `json:"message"`
		Status  GetConsoleV1EventsEventName401Status `json:"status"`
	}
}
type GetConsoleV1EventsEventName400Status int
type GetConsoleV1EventsEventName401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1EventsEventNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1EventsEventNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1EventsEventNameMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalMetricDefinitionContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                                      `json:"message"`
		Status  GetConsoleV1EventsEventNameMetrics400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                      `json:"message"`
		Status  GetConsoleV1EventsEventNameMetrics401Status `json:"status"`
	}
}
type GetConsoleV1EventsEventNameMetrics400Status int
type GetConsoleV1EventsEventNameMetrics401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1EventsEventNameMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1EventsEventNameMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  GetConsoleV1Experiments401Status `json:"status"`
	}
}
type GetConsoleV1Experiments401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                            `json:"message"`
		Status  PostConsoleV1Experiments400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                            `json:"message"`
		Status  PostConsoleV1Experiments401Status `json:"status"`
	}
}
type PostConsoleV1Experiments400Status int
type PostConsoleV1Experiments401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1ExperimentsAssignmentSourceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1ExperimentsAssignmentSourceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1ExperimentsAssignmentSourceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1ExperimentsAssignmentSourceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data AssignmentSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                                 `json:"message"`
		Status  PatchConsoleV1ExperimentsAssignmentSourceName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                                 `json:"message"`
		Status  PatchConsoleV1ExperimentsAssignmentSourceName401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                                 `json:"message"`
		Status  PatchConsoleV1ExperimentsAssignmentSourceName404Status `json:"status"`
	}
}
type PatchConsoleV1ExperimentsAssignmentSourceName400Status int
type PatchConsoleV1ExperimentsAssignmentSourceName401Status int
type PatchConsoleV1ExperimentsAssignmentSourceName404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1ExperimentsAssignmentSourceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1ExperimentsAssignmentSourceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsAssignmentSourceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data AssignmentSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                                `json:"message"`
		Status  PostConsoleV1ExperimentsAssignmentSourceName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                                `json:"message"`
		Status  PostConsoleV1ExperimentsAssignmentSourceName401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                                `json:"message"`
		Status  PostConsoleV1ExperimentsAssignmentSourceName404Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsAssignmentSourceName400Status int
type PostConsoleV1ExperimentsAssignmentSourceName401Status int
type PostConsoleV1ExperimentsAssignmentSourceName404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsAssignmentSourceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsAssignmentSourceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsAssignmentSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []AssignmentSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                                            `json:"message"`
		Status  GetConsoleV1ExperimentsAssignmentSources400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                            `json:"message"`
		Status  GetConsoleV1ExperimentsAssignmentSources401Status `json:"status"`
	}
}
type GetConsoleV1ExperimentsAssignmentSources400Status int
type GetConsoleV1ExperimentsAssignmentSources401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsAssignmentSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsAssignmentSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsAssignmentSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data AssignmentSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                             `json:"message"`
		Status  PostConsoleV1ExperimentsAssignmentSources400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                             `json:"message"`
		Status  PostConsoleV1ExperimentsAssignmentSources401Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsAssignmentSources400Status int
type PostConsoleV1ExperimentsAssignmentSources401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsAssignmentSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsAssignmentSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsEntityPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []EntityPropertySourceDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                                           `json:"message"`
		Status  GetConsoleV1ExperimentsEntityProperties400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                           `json:"message"`
		Status  GetConsoleV1ExperimentsEntityProperties401Status `json:"status"`
	}
}
type GetConsoleV1ExperimentsEntityProperties400Status int
type GetConsoleV1ExperimentsEntityProperties401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsEntityPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsEntityPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsEntityPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data EntityPropertySourceDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                            `json:"message"`
		Status  PostConsoleV1ExperimentsEntityProperties400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                            `json:"message"`
		Status  PostConsoleV1ExperimentsEntityProperties401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                            `json:"message"`
		Status  PostConsoleV1ExperimentsEntityProperties404Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsEntityProperties400Status int
type PostConsoleV1ExperimentsEntityProperties401Status int
type PostConsoleV1ExperimentsEntityProperties404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsEntityPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsEntityPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1ExperimentsEntityPropertyNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                                `json:"message"`
		Status  DeleteConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                                `json:"message"`
		Status  DeleteConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                                `json:"message"`
		Status  DeleteConsoleV1ExperimentsEntityPropertyName404Status `json:"status"`
	}
}
type DeleteConsoleV1ExperimentsEntityPropertyName400Status int
type DeleteConsoleV1ExperimentsEntityPropertyName401Status int
type DeleteConsoleV1ExperimentsEntityPropertyName404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1ExperimentsEntityPropertyNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1ExperimentsEntityPropertyNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsEntityPropertyNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data EntityPropertySourceDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                             `json:"message"`
		Status  GetConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                             `json:"message"`
		Status  GetConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
	}
}
type GetConsoleV1ExperimentsEntityPropertyName400Status int
type GetConsoleV1ExperimentsEntityPropertyName401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsEntityPropertyNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsEntityPropertyNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1ExperimentsEntityPropertyNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data EntityPropertySourceDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                               `json:"message"`
		Status  PatchConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                               `json:"message"`
		Status  PatchConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                               `json:"message"`
		Status  PatchConsoleV1ExperimentsEntityPropertyName404Status `json:"status"`
	}
}
type PatchConsoleV1ExperimentsEntityPropertyName400Status int
type PatchConsoleV1ExperimentsEntityPropertyName401Status int
type PatchConsoleV1ExperimentsEntityPropertyName404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1ExperimentsEntityPropertyNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1ExperimentsEntityPropertyNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsEntityPropertyNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data EntityPropertySourceDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                              `json:"message"`
		Status  PostConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                              `json:"message"`
		Status  PostConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                              `json:"message"`
		Status  PostConsoleV1ExperimentsEntityPropertyName404Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsEntityPropertyName400Status int
type PostConsoleV1ExperimentsEntityPropertyName401Status int
type PostConsoleV1ExperimentsEntityPropertyName404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsEntityPropertyNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsEntityPropertyNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1ExperimentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                `json:"message"`
		Status  DeleteConsoleV1ExperimentsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                `json:"message"`
		Status  DeleteConsoleV1ExperimentsId404Status `json:"status"`
	}
}
type DeleteConsoleV1ExperimentsId401Status int
type DeleteConsoleV1ExperimentsId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1ExperimentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1ExperimentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                             `json:"message"`
		Status  GetConsoleV1ExperimentsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                             `json:"message"`
		Status  GetConsoleV1ExperimentsId404Status `json:"status"`
	}
}
type GetConsoleV1ExperimentsId401Status int
type GetConsoleV1ExperimentsId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1ExperimentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                               `json:"message"`
		Status  PatchConsoleV1ExperimentsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                               `json:"message"`
		Status  PatchConsoleV1ExperimentsId404Status `json:"status"`
	}
}
type PatchConsoleV1ExperimentsId401Status int
type PatchConsoleV1ExperimentsId404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1ExperimentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1ExperimentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                              `json:"message"`
		Status  PostConsoleV1ExperimentsId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                              `json:"message"`
		Status  PostConsoleV1ExperimentsId401Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsId400Status int
type PostConsoleV1ExperimentsId401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1ExperimentsIdAbandonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                    `json:"message"`
		Status  PutConsoleV1ExperimentsIdAbandon400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                    `json:"message"`
		Status  PutConsoleV1ExperimentsIdAbandon401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                    `json:"message"`
		Status  PutConsoleV1ExperimentsIdAbandon404Status `json:"status"`
	}
}
type PutConsoleV1ExperimentsIdAbandon400Status int
type PutConsoleV1ExperimentsIdAbandon401Status int
type PutConsoleV1ExperimentsIdAbandon404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1ExperimentsIdAbandonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1ExperimentsIdAbandonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1ExperimentsIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                                    `json:"message"`
		Status  PutConsoleV1ExperimentsIdArchive401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                    `json:"message"`
		Status  PutConsoleV1ExperimentsIdArchive404Status `json:"status"`
	}
}
type PutConsoleV1ExperimentsIdArchive401Status int
type PutConsoleV1ExperimentsIdArchive404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1ExperimentsIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1ExperimentsIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsIdCumulativeExposuresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data CumulativeExposureResponseDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsIdCumulativeExposuresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsIdCumulativeExposuresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsIdDisableGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                           `json:"message"`
		Status  PostConsoleV1ExperimentsIdDisableGroups400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                           `json:"message"`
		Status  PostConsoleV1ExperimentsIdDisableGroups401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                           `json:"message"`
		Status  PostConsoleV1ExperimentsIdDisableGroups404Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsIdDisableGroups400Status int
type PostConsoleV1ExperimentsIdDisableGroups401Status int
type PostConsoleV1ExperimentsIdDisableGroups404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsIdDisableGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsIdDisableGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsIdEnableGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                          `json:"message"`
		Status  PostConsoleV1ExperimentsIdEnableGroups400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                          `json:"message"`
		Status  PostConsoleV1ExperimentsIdEnableGroups401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                          `json:"message"`
		Status  PostConsoleV1ExperimentsIdEnableGroups404Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsIdEnableGroups400Status int
type PostConsoleV1ExperimentsIdEnableGroups401Status int
type PostConsoleV1ExperimentsIdEnableGroups404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsIdEnableGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsIdEnableGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsIdLoadPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                       `json:"message"`
		Status  PostConsoleV1ExperimentsIdLoadPulse400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                       `json:"message"`
		Status  PostConsoleV1ExperimentsIdLoadPulse401Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsIdLoadPulse400Status int
type PostConsoleV1ExperimentsIdLoadPulse401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsIdLoadPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsIdLoadPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1ExperimentsIdMakeDecisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                         `json:"message"`
		Status  PutConsoleV1ExperimentsIdMakeDecision400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                         `json:"message"`
		Status  PutConsoleV1ExperimentsIdMakeDecision401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                         `json:"message"`
		Status  PutConsoleV1ExperimentsIdMakeDecision404Status `json:"status"`
	}
}
type PutConsoleV1ExperimentsIdMakeDecision400Status int
type PutConsoleV1ExperimentsIdMakeDecision401Status int
type PutConsoleV1ExperimentsIdMakeDecision404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1ExperimentsIdMakeDecisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1ExperimentsIdMakeDecisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1ExperimentsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExperimentOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                         `json:"message"`
		Status  DeleteConsoleV1ExperimentsIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                         `json:"message"`
		Status  DeleteConsoleV1ExperimentsIdOverrides404Status `json:"status"`
	}
}
type DeleteConsoleV1ExperimentsIdOverrides401Status int
type DeleteConsoleV1ExperimentsIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1ExperimentsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1ExperimentsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExperimentOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                      `json:"message"`
		Status  GetConsoleV1ExperimentsIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                      `json:"message"`
		Status  GetConsoleV1ExperimentsIdOverrides404Status `json:"status"`
	}
}
type GetConsoleV1ExperimentsIdOverrides401Status int
type GetConsoleV1ExperimentsIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1ExperimentsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExperimentOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                        `json:"message"`
		Status  PatchConsoleV1ExperimentsIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                        `json:"message"`
		Status  PatchConsoleV1ExperimentsIdOverrides404Status `json:"status"`
	}
}
type PatchConsoleV1ExperimentsIdOverrides401Status int
type PatchConsoleV1ExperimentsIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1ExperimentsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1ExperimentsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1ExperimentsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExperimentOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                       `json:"message"`
		Status  PostConsoleV1ExperimentsIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                       `json:"message"`
		Status  PostConsoleV1ExperimentsIdOverrides404Status `json:"status"`
	}
}
type PostConsoleV1ExperimentsIdOverrides401Status int
type PostConsoleV1ExperimentsIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1ExperimentsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1ExperimentsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsIdPulseLoadHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []PulseLoadHistoryDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                                             `json:"message"`
		Status  GetConsoleV1ExperimentsIdPulseLoadHistory400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                             `json:"message"`
		Status  GetConsoleV1ExperimentsIdPulseLoadHistory401Status `json:"status"`
	}
}
type GetConsoleV1ExperimentsIdPulseLoadHistory400Status int
type GetConsoleV1ExperimentsIdPulseLoadHistory401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsIdPulseLoadHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsIdPulseLoadHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExperimentsIdPulseResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExperimentPulseResultsDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExperimentsIdPulseResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExperimentsIdPulseResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1ExperimentsIdResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1ExperimentsIdReset400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1ExperimentsIdReset401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1ExperimentsIdReset404Status `json:"status"`
	}
}
type PutConsoleV1ExperimentsIdReset400Status int
type PutConsoleV1ExperimentsIdReset401Status int
type PutConsoleV1ExperimentsIdReset404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1ExperimentsIdResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1ExperimentsIdResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1ExperimentsIdStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1ExperimentsIdStart400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1ExperimentsIdStart401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1ExperimentsIdStart404Status `json:"status"`
	}
}
type PutConsoleV1ExperimentsIdStart400Status int
type PutConsoleV1ExperimentsIdStart401Status int
type PutConsoleV1ExperimentsIdStart404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1ExperimentsIdStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1ExperimentsIdStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1ExperimentsIdUnarchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                                      `json:"message"`
		Status  PutConsoleV1ExperimentsIdUnarchive401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                      `json:"message"`
		Status  PutConsoleV1ExperimentsIdUnarchive404Status `json:"status"`
	}
}
type PutConsoleV1ExperimentsIdUnarchive401Status int
type PutConsoleV1ExperimentsIdUnarchive404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1ExperimentsIdUnarchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1ExperimentsIdUnarchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ExposureCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExposureCountDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                             `json:"message"`
		Status  GetConsoleV1ExposureCount400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                             `json:"message"`
		Status  GetConsoleV1ExposureCount401Status `json:"status"`
	}
}
type GetConsoleV1ExposureCount400Status int
type GetConsoleV1ExposureCount401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ExposureCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ExposureCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1GatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON403 *struct {
		Message GetConsoleV1Gates403Message `json:"message"`
		Status  GetConsoleV1Gates403Status  `json:"status"`
	}
}
type GetConsoleV1Gates403Message string
type GetConsoleV1Gates403Status float32

// Status returns HTTPResponse.Status
func (r GetConsoleV1GatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1GatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1GatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1GatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1GatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1GatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1GatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1GatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1GatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1GatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1GatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1GatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1GatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1GatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1GatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1GatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1GatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1GatesIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutConsoleV1GatesIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1GatesIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1GatesIdDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutConsoleV1GatesIdDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1GatesIdDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1GatesIdEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutConsoleV1GatesIdEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1GatesIdEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1GatesIdLaunchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutConsoleV1GatesIdLaunchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1GatesIdLaunchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1GatesIdLoadPulseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1GatesIdLoadPulseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1GatesIdLoadPulseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1GatesIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1GatesIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1GatesIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1GatesIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1GatesIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1GatesIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1GatesIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1GatesIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1GatesIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1GatesIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1GatesIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1GatesIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1GatesIdRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1GatesIdRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1GatesIdRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1GatesIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []GateRulesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1GatesIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1GatesIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1GatesIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1GatesIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1GatesIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1GatesIdRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1GatesIdRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1GatesIdRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1GatesIdRulesRuleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1GatesIdRulesRuleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1GatesIdRulesRuleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1GatesIdRulesRuleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1GatesIdRulesRuleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1GatesIdRulesRuleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []PulseLoadHistoryDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data GatePulseResultsDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1GatesIdVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalGateDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON404 *struct {
		Message string                               `json:"message"`
		Status  GetConsoleV1GatesIdVersions404Status `json:"status"`
	}
}
type GetConsoleV1GatesIdVersions404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1GatesIdVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1GatesIdVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1HoldoutsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []HoldoutDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                        `json:"message"`
		Status  GetConsoleV1Holdouts401Status `json:"status"`
	}
}
type GetConsoleV1Holdouts401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1HoldoutsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1HoldoutsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1HoldoutsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data HoldoutDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                         `json:"message"`
		Status  PostConsoleV1Holdouts400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                         `json:"message"`
		Status  PostConsoleV1Holdouts401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                         `json:"message"`
		Status  PostConsoleV1Holdouts404Status `json:"status"`
	}
}
type PostConsoleV1Holdouts400Status int
type PostConsoleV1Holdouts401Status int
type PostConsoleV1Holdouts404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1HoldoutsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1HoldoutsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1HoldoutsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data HoldoutDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                             `json:"message"`
		Status  DeleteConsoleV1HoldoutsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                             `json:"message"`
		Status  DeleteConsoleV1HoldoutsId404Status `json:"status"`
	}
}
type DeleteConsoleV1HoldoutsId401Status int
type DeleteConsoleV1HoldoutsId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1HoldoutsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1HoldoutsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1HoldoutsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data HoldoutDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1HoldoutsId401Status `json:"status"`
	}
}
type GetConsoleV1HoldoutsId401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1HoldoutsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1HoldoutsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1HoldoutsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data HoldoutDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                            `json:"message"`
		Status  PatchConsoleV1HoldoutsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                            `json:"message"`
		Status  PatchConsoleV1HoldoutsId404Status `json:"status"`
	}
}
type PatchConsoleV1HoldoutsId401Status int
type PatchConsoleV1HoldoutsId404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1HoldoutsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1HoldoutsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1HoldoutsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data HoldoutDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1HoldoutsId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1HoldoutsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1HoldoutsId404Status `json:"status"`
	}
}
type PostConsoleV1HoldoutsId400Status int
type PostConsoleV1HoldoutsId401Status int
type PostConsoleV1HoldoutsId404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1HoldoutsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1HoldoutsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1HoldoutsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                      `json:"message"`
		Status  DeleteConsoleV1HoldoutsIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                      `json:"message"`
		Status  DeleteConsoleV1HoldoutsIdOverrides404Status `json:"status"`
	}
}
type DeleteConsoleV1HoldoutsIdOverrides401Status int
type DeleteConsoleV1HoldoutsIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1HoldoutsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1HoldoutsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1HoldoutsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                   `json:"message"`
		Status  GetConsoleV1HoldoutsIdOverrides401Status `json:"status"`
	}
}
type GetConsoleV1HoldoutsIdOverrides401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1HoldoutsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1HoldoutsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1HoldoutsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1HoldoutsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1HoldoutsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1HoldoutsIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Contract for overrides
		Data OverrideDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                    `json:"message"`
		Status  PostConsoleV1HoldoutsIdOverrides401Status `json:"status"`
	}
}
type PostConsoleV1HoldoutsIdOverrides401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1HoldoutsIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1HoldoutsIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1IngestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1IngestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1IngestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1IngestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1IngestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1IngestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1IngestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1IngestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1IngestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1IngestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1IngestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1IngestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1IngestionBackfillResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionBackfillDataDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                  `json:"message"`
		Status  PostConsoleV1IngestionBackfill400Status `json:"status"`
	}
}
type PostConsoleV1IngestionBackfill400Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1IngestionBackfillResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1IngestionBackfillResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1IngestionConnectionDatabricksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1IngestionConnectionDatabricksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1IngestionConnectionDatabricksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1IngestionEventsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionEventCountResponseDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1IngestionEventsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1IngestionEventsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1IngestionEventsDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionEventDeltaResponseDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1IngestionEventsDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1IngestionEventsDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1IngestionRunsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []IngestionRunDataContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1IngestionRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1IngestionRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1IngestionRunsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionRunDataContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                               `json:"message"`
		Status  GetConsoleV1IngestionRunsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                               `json:"message"`
		Status  GetConsoleV1IngestionRunsId404Status `json:"status"`
	}
}
type GetConsoleV1IngestionRunsId401Status int
type GetConsoleV1IngestionRunsId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1IngestionRunsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1IngestionRunsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1IngestionScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionScheduleDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1IngestionScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1IngestionScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1IngestionScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data IngestionScheduleDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1IngestionScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1IngestionScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1IngestionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []IngestionStatusDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                               `json:"message"`
		Status  GetConsoleV1IngestionStatus401Status `json:"status"`
	}
}
type GetConsoleV1IngestionStatus401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1IngestionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1IngestionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1KeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []KeyDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON403 *struct {
		Message string                    `json:"message"`
		Status  GetConsoleV1Keys403Status `json:"status"`
	}
}
type GetConsoleV1Keys403Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1KeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1KeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1KeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data KeyDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON403 *struct {
		Message string                     `json:"message"`
		Status  PostConsoleV1Keys403Status `json:"status"`
	}
}
type PostConsoleV1Keys403Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1KeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1KeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1KeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message string                         `json:"message"`
		Status  DeleteConsoleV1KeysId403Status `json:"status"`
	}
	JSON404 *struct {
		Message string                         `json:"message"`
		Status  DeleteConsoleV1KeysId404Status `json:"status"`
	}
}
type DeleteConsoleV1KeysId403Status int
type DeleteConsoleV1KeysId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1KeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1KeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1KeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data KeyDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON403 *struct {
		Message string                      `json:"message"`
		Status  GetConsoleV1KeysId403Status `json:"status"`
	}
	JSON404 *struct {
		Message string                      `json:"message"`
		Status  GetConsoleV1KeysId404Status `json:"status"`
	}
}
type GetConsoleV1KeysId403Status int
type GetConsoleV1KeysId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1KeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1KeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1KeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data KeyDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON403 *struct {
		Message string                        `json:"message"`
		Status  PatchConsoleV1KeysId403Status `json:"status"`
	}
	JSON404 *struct {
		Message string                        `json:"message"`
		Status  PatchConsoleV1KeysId404Status `json:"status"`
	}
}
type PatchConsoleV1KeysId403Status int
type PatchConsoleV1KeysId404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1KeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1KeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1KeysIdDeactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message string                                  `json:"message"`
		Status  PatchConsoleV1KeysIdDeactivate403Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                  `json:"message"`
		Status  PatchConsoleV1KeysIdDeactivate404Status `json:"status"`
	}
}
type PatchConsoleV1KeysIdDeactivate403Status int
type PatchConsoleV1KeysIdDeactivate404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1KeysIdDeactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1KeysIdDeactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1KeysIdRotateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data KeyDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON403 *struct {
		Message string                              `json:"message"`
		Status  PatchConsoleV1KeysIdRotate403Status `json:"status"`
	}
	JSON404 *struct {
		Message string                              `json:"message"`
		Status  PatchConsoleV1KeysIdRotate404Status `json:"status"`
	}
}
type PatchConsoleV1KeysIdRotate403Status int
type PatchConsoleV1KeysIdRotate404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1KeysIdRotateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1KeysIdRotateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1LayersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []LayerContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                      `json:"message"`
		Status  GetConsoleV1Layers400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                      `json:"message"`
		Status  GetConsoleV1Layers401Status `json:"status"`
	}
}
type GetConsoleV1Layers400Status int
type GetConsoleV1Layers401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1LayersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1LayersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1LayersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data LayerContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                       `json:"message"`
		Status  PostConsoleV1Layers400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                       `json:"message"`
		Status  PostConsoleV1Layers401Status `json:"status"`
	}
}
type PostConsoleV1Layers400Status int
type PostConsoleV1Layers401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1LayersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1LayersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1LayersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                           `json:"message"`
		Status  DeleteConsoleV1LayersId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  DeleteConsoleV1LayersId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                           `json:"message"`
		Status  DeleteConsoleV1LayersId404Status `json:"status"`
	}
}
type DeleteConsoleV1LayersId400Status int
type DeleteConsoleV1LayersId401Status int
type DeleteConsoleV1LayersId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1LayersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1LayersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1LayersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data LayerContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                        `json:"message"`
		Status  GetConsoleV1LayersId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                        `json:"message"`
		Status  GetConsoleV1LayersId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                        `json:"message"`
		Status  GetConsoleV1LayersId404Status `json:"status"`
	}
}
type GetConsoleV1LayersId400Status int
type GetConsoleV1LayersId401Status int
type GetConsoleV1LayersId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1LayersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1LayersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1LayersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data LayerContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                          `json:"message"`
		Status  PatchConsoleV1LayersId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                          `json:"message"`
		Status  PatchConsoleV1LayersId401Status `json:"status"`
	}
}
type PatchConsoleV1LayersId400Status int
type PatchConsoleV1LayersId401Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1LayersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1LayersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1LayersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data LayerContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                         `json:"message"`
		Status  PostConsoleV1LayersId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                         `json:"message"`
		Status  PostConsoleV1LayersId401Status `json:"status"`
	}
}
type PostConsoleV1LayersId400Status int
type PostConsoleV1LayersId401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1LayersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1LayersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1LayersIdExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1LayersIdExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1LayersIdExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1LayersIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data LayerOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                    `json:"message"`
		Status  DeleteConsoleV1LayersIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                    `json:"message"`
		Status  DeleteConsoleV1LayersIdOverrides404Status `json:"status"`
	}
}
type DeleteConsoleV1LayersIdOverrides401Status int
type DeleteConsoleV1LayersIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1LayersIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1LayersIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1LayersIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data LayerOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                 `json:"message"`
		Status  GetConsoleV1LayersIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                 `json:"message"`
		Status  GetConsoleV1LayersIdOverrides404Status `json:"status"`
	}
}
type GetConsoleV1LayersIdOverrides401Status int
type GetConsoleV1LayersIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1LayersIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1LayersIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1LayersIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data LayerOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                   `json:"message"`
		Status  PatchConsoleV1LayersIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                   `json:"message"`
		Status  PatchConsoleV1LayersIdOverrides404Status `json:"status"`
	}
}
type PatchConsoleV1LayersIdOverrides401Status int
type PatchConsoleV1LayersIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1LayersIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1LayersIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1LayersIdOverridesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data LayerOverridesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                  `json:"message"`
		Status  PostConsoleV1LayersIdOverrides401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                  `json:"message"`
		Status  PostConsoleV1LayersIdOverrides404Status `json:"status"`
	}
}
type PostConsoleV1LayersIdOverrides401Status int
type PostConsoleV1LayersIdOverrides404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1LayersIdOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1LayersIdOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []MetricValuesDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                       `json:"message"`
		Status  GetConsoleV1Metrics401Status `json:"status"`
	}
}
type GetConsoleV1Metrics401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1MetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data ExternalMetricDefinitionContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                        `json:"message"`
		Status  PostConsoleV1Metrics401Status `json:"status"`
	}
}
type PostConsoleV1Metrics401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1MetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1MetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalMetricDefinitionContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  GetConsoleV1MetricsList401Status `json:"status"`
	}
}
type GetConsoleV1MetricsList401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1MetricsMetricSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data MetricSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                    `json:"message"`
		Status  PostConsoleV1MetricsMetricSource400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                    `json:"message"`
		Status  PostConsoleV1MetricsMetricSource401Status `json:"status"`
	}
}
type PostConsoleV1MetricsMetricSource400Status int
type PostConsoleV1MetricsMetricSource401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1MetricsMetricSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1MetricsMetricSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsMetricSourceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []MetricSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                                       `json:"message"`
		Status  GetConsoleV1MetricsMetricSourceList400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                       `json:"message"`
		Status  GetConsoleV1MetricsMetricSourceList401Status `json:"status"`
	}
}
type GetConsoleV1MetricsMetricSourceList400Status int
type GetConsoleV1MetricsMetricSourceList401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsMetricSourceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsMetricSourceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1MetricsMetricSourceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                          `json:"message"`
		Status  DeleteConsoleV1MetricsMetricSourceName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                          `json:"message"`
		Status  DeleteConsoleV1MetricsMetricSourceName401Status `json:"status"`
	}
}
type DeleteConsoleV1MetricsMetricSourceName400Status int
type DeleteConsoleV1MetricsMetricSourceName401Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1MetricsMetricSourceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1MetricsMetricSourceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsMetricSourceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data MetricSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                       `json:"message"`
		Status  GetConsoleV1MetricsMetricSourceName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                       `json:"message"`
		Status  GetConsoleV1MetricsMetricSourceName401Status `json:"status"`
	}
}
type GetConsoleV1MetricsMetricSourceName400Status int
type GetConsoleV1MetricsMetricSourceName401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsMetricSourceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsMetricSourceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1MetricsMetricSourceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data MetricSourceContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                        `json:"message"`
		Status  PostConsoleV1MetricsMetricSourceName400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                        `json:"message"`
		Status  PostConsoleV1MetricsMetricSourceName401Status `json:"status"`
	}
}
type PostConsoleV1MetricsMetricSourceName400Status int
type PostConsoleV1MetricsMetricSourceName401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1MetricsMetricSourceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1MetricsMetricSourceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsMetricSourceNameMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalMetricDefinitionContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                                              `json:"message"`
		Status  GetConsoleV1MetricsMetricSourceNameMetrics400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                              `json:"message"`
		Status  GetConsoleV1MetricsMetricSourceNameMetrics401Status `json:"status"`
	}
}
type GetConsoleV1MetricsMetricSourceNameMetrics400Status int
type GetConsoleV1MetricsMetricSourceNameMetrics401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsMetricSourceNameMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsMetricSourceNameMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []MetricValueDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                             `json:"message"`
		Status  GetConsoleV1MetricsValues401Status `json:"status"`
	}
}
type GetConsoleV1MetricsValues401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1MetricsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                            `json:"message"`
		Status  DeleteConsoleV1MetricsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                            `json:"message"`
		Status  DeleteConsoleV1MetricsId404Status `json:"status"`
	}
}
type DeleteConsoleV1MetricsId401Status int
type DeleteConsoleV1MetricsId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1MetricsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1MetricsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalMetricDefinitionContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON404 *struct {
		Message string                         `json:"message"`
		Status  GetConsoleV1MetricsId404Status `json:"status"`
	}
}
type GetConsoleV1MetricsId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1MetricsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ExternalMetricDefinitionContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                          `json:"message"`
		Status  PostConsoleV1MetricsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                          `json:"message"`
		Status  PostConsoleV1MetricsId404Status `json:"status"`
	}
}
type PostConsoleV1MetricsId401Status int
type PostConsoleV1MetricsId404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1MetricsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1MetricsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1MetricsIdCancelArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                                      `json:"message"`
		Status  PutConsoleV1MetricsIdCancelArchive401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                      `json:"message"`
		Status  PutConsoleV1MetricsIdCancelArchive404Status `json:"status"`
	}
}
type PutConsoleV1MetricsIdCancelArchive401Status int
type PutConsoleV1MetricsIdCancelArchive404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1MetricsIdCancelArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1MetricsIdCancelArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1MetricsIdExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ExternalExperimentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                                    `json:"message"`
		Status  GetConsoleV1MetricsIdExperiments401Status `json:"status"`
	}
}
type GetConsoleV1MetricsIdExperiments401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1MetricsIdExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1MetricsIdExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1MetricsIdReloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                                `json:"message"`
		Status  PostConsoleV1MetricsIdReload401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                `json:"message"`
		Status  PostConsoleV1MetricsIdReload404Status `json:"status"`
	}
}
type PostConsoleV1MetricsIdReload401Status int
type PostConsoleV1MetricsIdReload404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1MetricsIdReloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1MetricsIdReloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1MetricsIdScheduleArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                                        `json:"message"`
		Status  PutConsoleV1MetricsIdScheduleArchive401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                        `json:"message"`
		Status  PutConsoleV1MetricsIdScheduleArchive404Status `json:"status"`
	}
}
type PutConsoleV1MetricsIdScheduleArchive401Status int
type PutConsoleV1MetricsIdScheduleArchive404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1MetricsIdScheduleArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1MetricsIdScheduleArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1MetricsIdUnarchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1MetricsIdUnarchive401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                  `json:"message"`
		Status  PutConsoleV1MetricsIdUnarchive404Status `json:"status"`
	}
}
type PutConsoleV1MetricsIdUnarchive401Status int
type PutConsoleV1MetricsIdUnarchive404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1MetricsIdUnarchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1MetricsIdUnarchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ProjectDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1ProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ProjectUsageBillingReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message string                                         `json:"message"`
		Status  GetConsoleV1ProjectUsageBillingReport400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                         `json:"message"`
		Status  GetConsoleV1ProjectUsageBillingReport401Status `json:"status"`
	}
}
type GetConsoleV1ProjectUsageBillingReport400Status int
type GetConsoleV1ProjectUsageBillingReport401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ProjectUsageBillingReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ProjectUsageBillingReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ReleasePipelineTriggersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ReleasePipelineTriggerResponseDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1ReleasePipelineTriggersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ReleasePipelineTriggersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ReleasePipelineTriggersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ReleasePipelineTriggerResponseDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1ReleasePipelineTriggersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ReleasePipelineTriggersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ReleasePipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []ReleasePipelineDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1ReleasePipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ReleasePipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ReleasePipelinesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ReleasePipelineDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1ReleasePipelinesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ReleasePipelinesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1ReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data ReportDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                       `json:"message"`
		Status  GetConsoleV1Reports400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                       `json:"message"`
		Status  GetConsoleV1Reports401Status `json:"status"`
	}
}
type GetConsoleV1Reports400Status int
type GetConsoleV1Reports401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1ReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1ReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1SegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []SegmentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                        `json:"message"`
		Status  GetConsoleV1Segments401Status `json:"status"`
	}
}
type GetConsoleV1Segments401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1SegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1SegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1SegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data SegmentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                         `json:"message"`
		Status  PostConsoleV1Segments401Status `json:"status"`
	}
}
type PostConsoleV1Segments401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1SegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1SegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1SegmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                             `json:"message"`
		Status  DeleteConsoleV1SegmentsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                             `json:"message"`
		Status  DeleteConsoleV1SegmentsId404Status `json:"status"`
	}
}
type DeleteConsoleV1SegmentsId401Status int
type DeleteConsoleV1SegmentsId404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1SegmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1SegmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1SegmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data SegmentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1SegmentsId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1SegmentsId404Status `json:"status"`
	}
}
type GetConsoleV1SegmentsId401Status int
type GetConsoleV1SegmentsId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1SegmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1SegmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConsoleV1SegmentsIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data SegmentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                                 `json:"message"`
		Status  PutConsoleV1SegmentsIdArchive401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                 `json:"message"`
		Status  PutConsoleV1SegmentsIdArchive404Status `json:"status"`
	}
}
type PutConsoleV1SegmentsIdArchive401Status int
type PutConsoleV1SegmentsIdArchive404Status int

// Status returns HTTPResponse.Status
func (r PutConsoleV1SegmentsIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConsoleV1SegmentsIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1SegmentsIdConditionalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data SegmentDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                                      `json:"message"`
		Status  PostConsoleV1SegmentsIdConditional400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                      `json:"message"`
		Status  PostConsoleV1SegmentsIdConditional401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                      `json:"message"`
		Status  PostConsoleV1SegmentsIdConditional404Status `json:"status"`
	}
}
type PostConsoleV1SegmentsIdConditional400Status int
type PostConsoleV1SegmentsIdConditional401Status int
type PostConsoleV1SegmentsIdConditional404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1SegmentsIdConditionalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1SegmentsIdConditionalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1SegmentsIdIdListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                   `json:"message"`
		Status  DeleteConsoleV1SegmentsIdIdList400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                   `json:"message"`
		Status  DeleteConsoleV1SegmentsIdIdList401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                   `json:"message"`
		Status  DeleteConsoleV1SegmentsIdIdList404Status `json:"status"`
	}
}
type DeleteConsoleV1SegmentsIdIdList400Status int
type DeleteConsoleV1SegmentsIdIdList401Status int
type DeleteConsoleV1SegmentsIdIdList404Status int

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1SegmentsIdIdListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1SegmentsIdIdListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1SegmentsIdIdListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Schema for a list of IDs with a name and count
		Data IDListDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
}

// Status returns HTTPResponse.Status
func (r GetConsoleV1SegmentsIdIdListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1SegmentsIdIdListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1SegmentsIdIdListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                                  `json:"message"`
		Status  PatchConsoleV1SegmentsIdIdList400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                                  `json:"message"`
		Status  PatchConsoleV1SegmentsIdIdList401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                                  `json:"message"`
		Status  PatchConsoleV1SegmentsIdIdList404Status `json:"status"`
	}
}
type PatchConsoleV1SegmentsIdIdList400Status int
type PatchConsoleV1SegmentsIdIdList401Status int
type PatchConsoleV1SegmentsIdIdList404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1SegmentsIdIdListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1SegmentsIdIdListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1SegmentsIdIdListResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1SegmentsIdIdListResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1SegmentsIdIdListResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1TagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []TagDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON404 *struct {
		Message string                    `json:"message"`
		Status  GetConsoleV1Tags404Status `json:"status"`
	}
}
type GetConsoleV1Tags404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1TagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1TagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1TagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TagDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1TagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1TagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1TagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1TagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1TagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1TagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TagDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON404 *struct {
		Message string                      `json:"message"`
		Status  GetConsoleV1TagsId404Status `json:"status"`
	}
}
type GetConsoleV1TagsId404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1TagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1TagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1TagsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TagDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchConsoleV1TagsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1TagsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1TargetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []TargetAppDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON401 *struct {
		Message string                         `json:"message"`
		Status  GetConsoleV1TargetApp401Status `json:"status"`
	}
}
type GetConsoleV1TargetApp401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1TargetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1TargetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1TargetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  PatchConsoleV1TargetApp401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                           `json:"message"`
		Status  PatchConsoleV1TargetApp404Status `json:"status"`
	}
}
type PatchConsoleV1TargetApp401Status int
type PatchConsoleV1TargetApp404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1TargetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1TargetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1TargetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TargetAppDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostConsoleV1TargetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1TargetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1TargetAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1TargetAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1TargetAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1TargetAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TargetAppDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  GetConsoleV1TargetAppId401Status `json:"status"`
	}
}
type GetConsoleV1TargetAppId401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1TargetAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1TargetAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1TargetAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *struct {
		Message string                             `json:"message"`
		Status  PatchConsoleV1TargetAppId401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                             `json:"message"`
		Status  PatchConsoleV1TargetAppId404Status `json:"status"`
	}
}
type PatchConsoleV1TargetAppId401Status int
type PatchConsoleV1TargetAppId404Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1TargetAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1TargetAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []UserContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                     `json:"message"`
		Status  GetConsoleV1Users400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                     `json:"message"`
		Status  GetConsoleV1Users401Status `json:"status"`
	}
}
type GetConsoleV1Users400Status int
type GetConsoleV1Users401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1UsersInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message string                            `json:"message"`
		Status  PostConsoleV1UsersInvite400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                            `json:"message"`
		Status  PostConsoleV1UsersInvite401Status `json:"status"`
	}
}
type PostConsoleV1UsersInvite400Status int
type PostConsoleV1UsersInvite401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1UsersInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1UsersInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1UsersTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []TeamDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`

		// Pagination Pagination metadata for checking if there is next page for example.
		Pagination PaginationResponseMetadataDto `json:"pagination"`
	}
	JSON400 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1UsersTeams400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1UsersTeams401Status `json:"status"`
	}
}
type GetConsoleV1UsersTeams400Status int
type GetConsoleV1UsersTeams401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1UsersTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1UsersTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1UsersTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TeamDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1UsersTeams400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1UsersTeams401Status `json:"status"`
	}
}
type PostConsoleV1UsersTeams400Status int
type PostConsoleV1UsersTeams401Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1UsersTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1UsersTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConsoleV1UsersTeamsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteConsoleV1UsersTeamsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConsoleV1UsersTeamsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1UsersTeamsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TeamDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                            `json:"message"`
		Status  GetConsoleV1UsersTeamsId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                            `json:"message"`
		Status  GetConsoleV1UsersTeamsId401Status `json:"status"`
	}
}
type GetConsoleV1UsersTeamsId400Status int
type GetConsoleV1UsersTeamsId401Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1UsersTeamsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1UsersTeamsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConsoleV1UsersTeamsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data TeamDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                              `json:"message"`
		Status  PatchConsoleV1UsersTeamsId400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                              `json:"message"`
		Status  PatchConsoleV1UsersTeamsId401Status `json:"status"`
	}
}
type PatchConsoleV1UsersTeamsId400Status int
type PatchConsoleV1UsersTeamsId401Status int

// Status returns HTTPResponse.Status
func (r PatchConsoleV1UsersTeamsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConsoleV1UsersTeamsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConsoleV1UsersEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data UserContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1UsersEmail400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1UsersEmail401Status `json:"status"`
	}
	JSON404 *struct {
		Message string                          `json:"message"`
		Status  GetConsoleV1UsersEmail404Status `json:"status"`
	}
}
type GetConsoleV1UsersEmail400Status int
type GetConsoleV1UsersEmail401Status int
type GetConsoleV1UsersEmail404Status int

// Status returns HTTPResponse.Status
func (r GetConsoleV1UsersEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConsoleV1UsersEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConsoleV1UsersEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data UserContractDto `json:"data"`

		// Message A simple string explaining the result of the operation.
		Message string `json:"message"`
	}
	JSON400 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1UsersEmail400Status `json:"status"`
	}
	JSON401 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1UsersEmail401Status `json:"status"`
	}
	JSON403 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1UsersEmail403Status `json:"status"`
	}
	JSON404 *struct {
		Message string                           `json:"message"`
		Status  PostConsoleV1UsersEmail404Status `json:"status"`
	}
}
type PostConsoleV1UsersEmail400Status int
type PostConsoleV1UsersEmail401Status int
type PostConsoleV1UsersEmail403Status int
type PostConsoleV1UsersEmail404Status int

// Status returns HTTPResponse.Status
func (r PostConsoleV1UsersEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConsoleV1UsersEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConsoleV1AlertsWithResponse request returning *GetConsoleV1AlertsResponse
func (c *ClientWithResponses) GetConsoleV1AlertsWithResponse(ctx context.Context, params *GetConsoleV1AlertsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AlertsResponse, error) {
	rsp, err := c.GetConsoleV1Alerts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1AlertsResponse(rsp)
}

// GetConsoleV1AuditLogsWithResponse request returning *GetConsoleV1AuditLogsResponse
func (c *ClientWithResponses) GetConsoleV1AuditLogsWithResponse(ctx context.Context, params *GetConsoleV1AuditLogsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AuditLogsResponse, error) {
	rsp, err := c.GetConsoleV1AuditLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1AuditLogsResponse(rsp)
}

// GetConsoleV1AutotunesWithResponse request returning *GetConsoleV1AutotunesResponse
func (c *ClientWithResponses) GetConsoleV1AutotunesWithResponse(ctx context.Context, params *GetConsoleV1AutotunesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AutotunesResponse, error) {
	rsp, err := c.GetConsoleV1Autotunes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1AutotunesResponse(rsp)
}

// PostConsoleV1AutotunesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1AutotunesResponse
func (c *ClientWithResponses) PostConsoleV1AutotunesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1AutotunesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesResponse, error) {
	rsp, err := c.PostConsoleV1AutotunesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1AutotunesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1AutotunesWithResponse(ctx context.Context, params *PostConsoleV1AutotunesParams, body PostConsoleV1AutotunesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesResponse, error) {
	rsp, err := c.PostConsoleV1Autotunes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1AutotunesResponse(rsp)
}

// DeleteConsoleV1AutotunesIdWithResponse request returning *DeleteConsoleV1AutotunesIdResponse
func (c *ClientWithResponses) DeleteConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1AutotunesIdResponse, error) {
	rsp, err := c.DeleteConsoleV1AutotunesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1AutotunesIdResponse(rsp)
}

// GetConsoleV1AutotunesIdWithResponse request returning *GetConsoleV1AutotunesIdResponse
func (c *ClientWithResponses) GetConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *GetConsoleV1AutotunesIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1AutotunesIdResponse, error) {
	rsp, err := c.GetConsoleV1AutotunesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1AutotunesIdResponse(rsp)
}

// PatchConsoleV1AutotunesIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1AutotunesIdResponse
func (c *ClientWithResponses) PatchConsoleV1AutotunesIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1AutotunesIdResponse, error) {
	rsp, err := c.PatchConsoleV1AutotunesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1AutotunesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1AutotunesIdParams, body PatchConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1AutotunesIdResponse, error) {
	rsp, err := c.PatchConsoleV1AutotunesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1AutotunesIdResponse(rsp)
}

// PostConsoleV1AutotunesIdWithBodyWithResponse request with arbitrary body returning *PostConsoleV1AutotunesIdResponse
func (c *ClientWithResponses) PostConsoleV1AutotunesIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesIdResponse, error) {
	rsp, err := c.PostConsoleV1AutotunesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1AutotunesIdResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1AutotunesIdWithResponse(ctx context.Context, id string, params *PostConsoleV1AutotunesIdParams, body PostConsoleV1AutotunesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1AutotunesIdResponse, error) {
	rsp, err := c.PostConsoleV1AutotunesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1AutotunesIdResponse(rsp)
}

// PutConsoleV1AutotunesIdMakeDecisionWithBodyWithResponse request with arbitrary body returning *PutConsoleV1AutotunesIdMakeDecisionResponse
func (c *ClientWithResponses) PutConsoleV1AutotunesIdMakeDecisionWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdMakeDecisionResponse, error) {
	rsp, err := c.PutConsoleV1AutotunesIdMakeDecisionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1AutotunesIdMakeDecisionResponse(rsp)
}

func (c *ClientWithResponses) PutConsoleV1AutotunesIdMakeDecisionWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdMakeDecisionParams, body PutConsoleV1AutotunesIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdMakeDecisionResponse, error) {
	rsp, err := c.PutConsoleV1AutotunesIdMakeDecision(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1AutotunesIdMakeDecisionResponse(rsp)
}

// PutConsoleV1AutotunesIdResetWithResponse request returning *PutConsoleV1AutotunesIdResetResponse
func (c *ClientWithResponses) PutConsoleV1AutotunesIdResetWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdResetParams, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdResetResponse, error) {
	rsp, err := c.PutConsoleV1AutotunesIdReset(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1AutotunesIdResetResponse(rsp)
}

// PutConsoleV1AutotunesIdStartWithResponse request returning *PutConsoleV1AutotunesIdStartResponse
func (c *ClientWithResponses) PutConsoleV1AutotunesIdStartWithResponse(ctx context.Context, id string, params *PutConsoleV1AutotunesIdStartParams, reqEditors ...RequestEditorFn) (*PutConsoleV1AutotunesIdStartResponse, error) {
	rsp, err := c.PutConsoleV1AutotunesIdStart(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1AutotunesIdStartResponse(rsp)
}

// GetConsoleV1CompanyWithResponse request returning *GetConsoleV1CompanyResponse
func (c *ClientWithResponses) GetConsoleV1CompanyWithResponse(ctx context.Context, params *GetConsoleV1CompanyParams, reqEditors ...RequestEditorFn) (*GetConsoleV1CompanyResponse, error) {
	rsp, err := c.GetConsoleV1Company(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1CompanyResponse(rsp)
}

// GetConsoleV1DynamicConfigsWithResponse request returning *GetConsoleV1DynamicConfigsResponse
func (c *ClientWithResponses) GetConsoleV1DynamicConfigsWithResponse(ctx context.Context, params *GetConsoleV1DynamicConfigsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsResponse, error) {
	rsp, err := c.GetConsoleV1DynamicConfigs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1DynamicConfigsResponse(rsp)
}

// PostConsoleV1DynamicConfigsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1DynamicConfigsResponse
func (c *ClientWithResponses) PostConsoleV1DynamicConfigsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1DynamicConfigsWithResponse(ctx context.Context, params *PostConsoleV1DynamicConfigsParams, body PostConsoleV1DynamicConfigsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsResponse(rsp)
}

// DeleteConsoleV1DynamicConfigsIdWithResponse request returning *DeleteConsoleV1DynamicConfigsIdResponse
func (c *ClientWithResponses) DeleteConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1DynamicConfigsIdResponse, error) {
	rsp, err := c.DeleteConsoleV1DynamicConfigsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1DynamicConfigsIdResponse(rsp)
}

// GetConsoleV1DynamicConfigsIdWithResponse request returning *GetConsoleV1DynamicConfigsIdResponse
func (c *ClientWithResponses) GetConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdResponse, error) {
	rsp, err := c.GetConsoleV1DynamicConfigsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1DynamicConfigsIdResponse(rsp)
}

// PatchConsoleV1DynamicConfigsIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1DynamicConfigsIdResponse
func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdParams, body PatchConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdResponse(rsp)
}

// PostConsoleV1DynamicConfigsIdWithBodyWithResponse request with arbitrary body returning *PostConsoleV1DynamicConfigsIdResponse
func (c *ClientWithResponses) PostConsoleV1DynamicConfigsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsIdResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1DynamicConfigsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdParams, body PostConsoleV1DynamicConfigsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsIdResponse(rsp)
}

// PutConsoleV1DynamicConfigsIdDisableWithResponse request returning *PutConsoleV1DynamicConfigsIdDisableResponse
func (c *ClientWithResponses) PutConsoleV1DynamicConfigsIdDisableWithResponse(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdDisableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1DynamicConfigsIdDisableResponse, error) {
	rsp, err := c.PutConsoleV1DynamicConfigsIdDisable(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1DynamicConfigsIdDisableResponse(rsp)
}

// PutConsoleV1DynamicConfigsIdEnableWithResponse request returning *PutConsoleV1DynamicConfigsIdEnableResponse
func (c *ClientWithResponses) PutConsoleV1DynamicConfigsIdEnableWithResponse(ctx context.Context, id string, params *PutConsoleV1DynamicConfigsIdEnableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1DynamicConfigsIdEnableResponse, error) {
	rsp, err := c.PutConsoleV1DynamicConfigsIdEnable(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1DynamicConfigsIdEnableResponse(rsp)
}

// PostConsoleV1DynamicConfigsIdRuleWithBodyWithResponse request with arbitrary body returning *PostConsoleV1DynamicConfigsIdRuleResponse
func (c *ClientWithResponses) PostConsoleV1DynamicConfigsIdRuleWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRuleResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigsIdRuleWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsIdRuleResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1DynamicConfigsIdRuleWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRuleParams, body PostConsoleV1DynamicConfigsIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRuleResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigsIdRule(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsIdRuleResponse(rsp)
}

// DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse request returning *DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse
func (c *ClientWithResponses) DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse(ctx context.Context, id string, ruleName string, params *DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error) {
	rsp, err := c.DeleteConsoleV1DynamicConfigsIdRuleNameRuleName(ctx, id, ruleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse(rsp)
}

// PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse
func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBodyWithResponse(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithBody(ctx, id, ruleName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse(ctx context.Context, id string, ruleName string, params *PatchConsoleV1DynamicConfigsIdRuleNameRuleNameParams, body PatchConsoleV1DynamicConfigsIdRuleNameRuleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsIdRuleNameRuleName(ctx, id, ruleName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse(rsp)
}

// DeleteConsoleV1DynamicConfigsIdRuleRuleIdWithResponse request returning *DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse
func (c *ClientWithResponses) DeleteConsoleV1DynamicConfigsIdRuleRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *DeleteConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse, error) {
	rsp, err := c.DeleteConsoleV1DynamicConfigsIdRuleRuleId(ctx, id, ruleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse(rsp)
}

// GetConsoleV1DynamicConfigsIdRuleRuleIdWithResponse request returning *GetConsoleV1DynamicConfigsIdRuleRuleIdResponse
func (c *ClientWithResponses) GetConsoleV1DynamicConfigsIdRuleRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *GetConsoleV1DynamicConfigsIdRuleRuleIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdRuleRuleIdResponse, error) {
	rsp, err := c.GetConsoleV1DynamicConfigsIdRuleRuleId(ctx, id, ruleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1DynamicConfigsIdRuleRuleIdResponse(rsp)
}

// PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse
func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBodyWithResponse(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsIdRuleRuleIdWithBody(ctx, id, ruleId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdRuleRuleIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdRuleRuleIdWithResponse(ctx context.Context, id string, ruleId string, params *PatchConsoleV1DynamicConfigsIdRuleRuleIdParams, body PatchConsoleV1DynamicConfigsIdRuleRuleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsIdRuleRuleId(ctx, id, ruleId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdRuleRuleIdResponse(rsp)
}

// GetConsoleV1DynamicConfigsIdRulesWithResponse request returning *GetConsoleV1DynamicConfigsIdRulesResponse
func (c *ClientWithResponses) GetConsoleV1DynamicConfigsIdRulesWithResponse(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdRulesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdRulesResponse, error) {
	rsp, err := c.GetConsoleV1DynamicConfigsIdRules(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1DynamicConfigsIdRulesResponse(rsp)
}

// PatchConsoleV1DynamicConfigsIdRulesWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1DynamicConfigsIdRulesResponse
func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRulesResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsIdRulesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1DynamicConfigsIdRulesWithResponse(ctx context.Context, id string, params *PatchConsoleV1DynamicConfigsIdRulesParams, body PatchConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1DynamicConfigsIdRulesResponse, error) {
	rsp, err := c.PatchConsoleV1DynamicConfigsIdRules(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1DynamicConfigsIdRulesResponse(rsp)
}

// PostConsoleV1DynamicConfigsIdRulesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1DynamicConfigsIdRulesResponse
func (c *ClientWithResponses) PostConsoleV1DynamicConfigsIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRulesResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigsIdRulesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1DynamicConfigsIdRulesWithResponse(ctx context.Context, id string, params *PostConsoleV1DynamicConfigsIdRulesParams, body PostConsoleV1DynamicConfigsIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1DynamicConfigsIdRulesResponse, error) {
	rsp, err := c.PostConsoleV1DynamicConfigsIdRules(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1DynamicConfigsIdRulesResponse(rsp)
}

// GetConsoleV1DynamicConfigsIdVersionsWithResponse request returning *GetConsoleV1DynamicConfigsIdVersionsResponse
func (c *ClientWithResponses) GetConsoleV1DynamicConfigsIdVersionsWithResponse(ctx context.Context, id string, params *GetConsoleV1DynamicConfigsIdVersionsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1DynamicConfigsIdVersionsResponse, error) {
	rsp, err := c.GetConsoleV1DynamicConfigsIdVersions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1DynamicConfigsIdVersionsResponse(rsp)
}

// GetConsoleV1EventsWithResponse request returning *GetConsoleV1EventsResponse
func (c *ClientWithResponses) GetConsoleV1EventsWithResponse(ctx context.Context, params *GetConsoleV1EventsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1EventsResponse, error) {
	rsp, err := c.GetConsoleV1Events(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1EventsResponse(rsp)
}

// GetConsoleV1EventsEventNameWithResponse request returning *GetConsoleV1EventsEventNameResponse
func (c *ClientWithResponses) GetConsoleV1EventsEventNameWithResponse(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameParams, reqEditors ...RequestEditorFn) (*GetConsoleV1EventsEventNameResponse, error) {
	rsp, err := c.GetConsoleV1EventsEventName(ctx, eventName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1EventsEventNameResponse(rsp)
}

// GetConsoleV1EventsEventNameMetricsWithResponse request returning *GetConsoleV1EventsEventNameMetricsResponse
func (c *ClientWithResponses) GetConsoleV1EventsEventNameMetricsWithResponse(ctx context.Context, eventName string, params *GetConsoleV1EventsEventNameMetricsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1EventsEventNameMetricsResponse, error) {
	rsp, err := c.GetConsoleV1EventsEventNameMetrics(ctx, eventName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1EventsEventNameMetricsResponse(rsp)
}

// GetConsoleV1ExperimentsWithResponse request returning *GetConsoleV1ExperimentsResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsWithResponse(ctx context.Context, params *GetConsoleV1ExperimentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsResponse, error) {
	rsp, err := c.GetConsoleV1Experiments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsResponse(rsp)
}

// PostConsoleV1ExperimentsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsParams, body PostConsoleV1ExperimentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsResponse, error) {
	rsp, err := c.PostConsoleV1Experiments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsResponse(rsp)
}

// DeleteConsoleV1ExperimentsAssignmentSourceNameWithResponse request returning *DeleteConsoleV1ExperimentsAssignmentSourceNameResponse
func (c *ClientWithResponses) DeleteConsoleV1ExperimentsAssignmentSourceNameWithResponse(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsAssignmentSourceNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	rsp, err := c.DeleteConsoleV1ExperimentsAssignmentSourceName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1ExperimentsAssignmentSourceNameResponse(rsp)
}

// PatchConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1ExperimentsAssignmentSourceNameResponse
func (c *ClientWithResponses) PatchConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsAssignmentSourceNameWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsAssignmentSourceNameResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1ExperimentsAssignmentSourceNameWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsAssignmentSourceNameParams, body PatchConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsAssignmentSourceName(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsAssignmentSourceNameResponse(rsp)
}

// PostConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsAssignmentSourceNameResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsAssignmentSourceNameWithBodyWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsAssignmentSourceNameWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsAssignmentSourceNameResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsAssignmentSourceNameWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsAssignmentSourceNameParams, body PostConsoleV1ExperimentsAssignmentSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsAssignmentSourceName(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsAssignmentSourceNameResponse(rsp)
}

// GetConsoleV1ExperimentsAssignmentSourcesWithResponse request returning *GetConsoleV1ExperimentsAssignmentSourcesResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsAssignmentSourcesWithResponse(ctx context.Context, params *GetConsoleV1ExperimentsAssignmentSourcesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsAssignmentSourcesResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsAssignmentSources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsAssignmentSourcesResponse(rsp)
}

// PostConsoleV1ExperimentsAssignmentSourcesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsAssignmentSourcesResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsAssignmentSourcesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourcesResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsAssignmentSourcesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsAssignmentSourcesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsAssignmentSourcesWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsAssignmentSourcesParams, body PostConsoleV1ExperimentsAssignmentSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsAssignmentSourcesResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsAssignmentSources(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsAssignmentSourcesResponse(rsp)
}

// GetConsoleV1ExperimentsEntityPropertiesWithResponse request returning *GetConsoleV1ExperimentsEntityPropertiesResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsEntityPropertiesWithResponse(ctx context.Context, params *GetConsoleV1ExperimentsEntityPropertiesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsEntityPropertiesResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsEntityProperties(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsEntityPropertiesResponse(rsp)
}

// PostConsoleV1ExperimentsEntityPropertiesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsEntityPropertiesResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsEntityPropertiesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertiesResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsEntityPropertiesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsEntityPropertiesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsEntityPropertiesWithResponse(ctx context.Context, params *PostConsoleV1ExperimentsEntityPropertiesParams, body PostConsoleV1ExperimentsEntityPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertiesResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsEntityProperties(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsEntityPropertiesResponse(rsp)
}

// DeleteConsoleV1ExperimentsEntityPropertyNameWithResponse request returning *DeleteConsoleV1ExperimentsEntityPropertyNameResponse
func (c *ClientWithResponses) DeleteConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *DeleteConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	rsp, err := c.DeleteConsoleV1ExperimentsEntityPropertyName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1ExperimentsEntityPropertyNameResponse(rsp)
}

// GetConsoleV1ExperimentsEntityPropertyNameWithResponse request returning *GetConsoleV1ExperimentsEntityPropertyNameResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *GetConsoleV1ExperimentsEntityPropertyNameParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsEntityPropertyName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsEntityPropertyNameResponse(rsp)
}

// PatchConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1ExperimentsEntityPropertyNameResponse
func (c *ClientWithResponses) PatchConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsEntityPropertyNameWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsEntityPropertyNameResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *PatchConsoleV1ExperimentsEntityPropertyNameParams, body PatchConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsEntityPropertyName(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsEntityPropertyNameResponse(rsp)
}

// PostConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsEntityPropertyNameResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsEntityPropertyNameWithBodyWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsEntityPropertyNameWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsEntityPropertyNameResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsEntityPropertyNameWithResponse(ctx context.Context, name string, params *PostConsoleV1ExperimentsEntityPropertyNameParams, body PostConsoleV1ExperimentsEntityPropertyNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsEntityPropertyName(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsEntityPropertyNameResponse(rsp)
}

// DeleteConsoleV1ExperimentsIdWithResponse request returning *DeleteConsoleV1ExperimentsIdResponse
func (c *ClientWithResponses) DeleteConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsIdResponse, error) {
	rsp, err := c.DeleteConsoleV1ExperimentsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1ExperimentsIdResponse(rsp)
}

// GetConsoleV1ExperimentsIdWithResponse request returning *GetConsoleV1ExperimentsIdResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsIdResponse(rsp)
}

// PatchConsoleV1ExperimentsIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1ExperimentsIdResponse
func (c *ClientWithResponses) PatchConsoleV1ExperimentsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdParams, body PatchConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsIdResponse(rsp)
}

// PostConsoleV1ExperimentsIdWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsIdResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdParams, body PostConsoleV1ExperimentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdResponse(rsp)
}

// PutConsoleV1ExperimentsIdAbandonWithBodyWithResponse request with arbitrary body returning *PutConsoleV1ExperimentsIdAbandonResponse
func (c *ClientWithResponses) PutConsoleV1ExperimentsIdAbandonWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdAbandonResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdAbandonWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdAbandonResponse(rsp)
}

func (c *ClientWithResponses) PutConsoleV1ExperimentsIdAbandonWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdAbandonParams, body PutConsoleV1ExperimentsIdAbandonJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdAbandonResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdAbandon(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdAbandonResponse(rsp)
}

// PutConsoleV1ExperimentsIdArchiveWithBodyWithResponse request with arbitrary body returning *PutConsoleV1ExperimentsIdArchiveResponse
func (c *ClientWithResponses) PutConsoleV1ExperimentsIdArchiveWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdArchiveResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdArchiveWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdArchiveResponse(rsp)
}

func (c *ClientWithResponses) PutConsoleV1ExperimentsIdArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdArchiveParams, body PutConsoleV1ExperimentsIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdArchiveResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdArchive(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdArchiveResponse(rsp)
}

// GetConsoleV1ExperimentsIdCumulativeExposuresWithResponse request returning *GetConsoleV1ExperimentsIdCumulativeExposuresResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsIdCumulativeExposuresWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdCumulativeExposuresParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdCumulativeExposuresResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsIdCumulativeExposures(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsIdCumulativeExposuresResponse(rsp)
}

// PostConsoleV1ExperimentsIdDisableGroupsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsIdDisableGroupsResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsIdDisableGroupsWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdDisableGroupsResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdDisableGroupsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdDisableGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsIdDisableGroupsWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdDisableGroupsParams, body PostConsoleV1ExperimentsIdDisableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdDisableGroupsResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdDisableGroups(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdDisableGroupsResponse(rsp)
}

// PostConsoleV1ExperimentsIdEnableGroupsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsIdEnableGroupsResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsIdEnableGroupsWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdEnableGroupsResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdEnableGroupsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdEnableGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsIdEnableGroupsWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdEnableGroupsParams, body PostConsoleV1ExperimentsIdEnableGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdEnableGroupsResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdEnableGroups(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdEnableGroupsResponse(rsp)
}

// PostConsoleV1ExperimentsIdLoadPulseWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsIdLoadPulseResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsIdLoadPulseWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdLoadPulseResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdLoadPulseWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdLoadPulseResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsIdLoadPulseWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdLoadPulseParams, body PostConsoleV1ExperimentsIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdLoadPulseResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdLoadPulse(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdLoadPulseResponse(rsp)
}

// PutConsoleV1ExperimentsIdMakeDecisionWithBodyWithResponse request with arbitrary body returning *PutConsoleV1ExperimentsIdMakeDecisionResponse
func (c *ClientWithResponses) PutConsoleV1ExperimentsIdMakeDecisionWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdMakeDecisionResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdMakeDecisionWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdMakeDecisionResponse(rsp)
}

func (c *ClientWithResponses) PutConsoleV1ExperimentsIdMakeDecisionWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdMakeDecisionParams, body PutConsoleV1ExperimentsIdMakeDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdMakeDecisionResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdMakeDecision(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdMakeDecisionResponse(rsp)
}

// DeleteConsoleV1ExperimentsIdOverridesWithResponse request returning *DeleteConsoleV1ExperimentsIdOverridesResponse
func (c *ClientWithResponses) DeleteConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1ExperimentsIdOverridesResponse, error) {
	rsp, err := c.DeleteConsoleV1ExperimentsIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1ExperimentsIdOverridesResponse(rsp)
}

// GetConsoleV1ExperimentsIdOverridesWithResponse request returning *GetConsoleV1ExperimentsIdOverridesResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdOverridesResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsIdOverridesResponse(rsp)
}

// PatchConsoleV1ExperimentsIdOverridesWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1ExperimentsIdOverridesResponse
func (c *ClientWithResponses) PatchConsoleV1ExperimentsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1ExperimentsIdOverridesParams, body PatchConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1ExperimentsIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1ExperimentsIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1ExperimentsIdOverridesResponse(rsp)
}

// PostConsoleV1ExperimentsIdOverridesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1ExperimentsIdOverridesResponse
func (c *ClientWithResponses) PostConsoleV1ExperimentsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1ExperimentsIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1ExperimentsIdOverridesParams, body PostConsoleV1ExperimentsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1ExperimentsIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1ExperimentsIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1ExperimentsIdOverridesResponse(rsp)
}

// GetConsoleV1ExperimentsIdPulseLoadHistoryWithResponse request returning *GetConsoleV1ExperimentsIdPulseLoadHistoryResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsIdPulseLoadHistoryWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdPulseLoadHistoryResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsIdPulseLoadHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsIdPulseLoadHistoryResponse(rsp)
}

// GetConsoleV1ExperimentsIdPulseResultsWithResponse request returning *GetConsoleV1ExperimentsIdPulseResultsResponse
func (c *ClientWithResponses) GetConsoleV1ExperimentsIdPulseResultsWithResponse(ctx context.Context, id string, params *GetConsoleV1ExperimentsIdPulseResultsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExperimentsIdPulseResultsResponse, error) {
	rsp, err := c.GetConsoleV1ExperimentsIdPulseResults(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExperimentsIdPulseResultsResponse(rsp)
}

// PutConsoleV1ExperimentsIdResetWithResponse request returning *PutConsoleV1ExperimentsIdResetResponse
func (c *ClientWithResponses) PutConsoleV1ExperimentsIdResetWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdResetParams, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdResetResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdReset(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdResetResponse(rsp)
}

// PutConsoleV1ExperimentsIdStartWithBodyWithResponse request with arbitrary body returning *PutConsoleV1ExperimentsIdStartResponse
func (c *ClientWithResponses) PutConsoleV1ExperimentsIdStartWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdStartResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdStartWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdStartResponse(rsp)
}

func (c *ClientWithResponses) PutConsoleV1ExperimentsIdStartWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdStartParams, body PutConsoleV1ExperimentsIdStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdStartResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdStart(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdStartResponse(rsp)
}

// PutConsoleV1ExperimentsIdUnarchiveWithResponse request returning *PutConsoleV1ExperimentsIdUnarchiveResponse
func (c *ClientWithResponses) PutConsoleV1ExperimentsIdUnarchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1ExperimentsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1ExperimentsIdUnarchiveResponse, error) {
	rsp, err := c.PutConsoleV1ExperimentsIdUnarchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1ExperimentsIdUnarchiveResponse(rsp)
}

// GetConsoleV1ExposureCountWithResponse request returning *GetConsoleV1ExposureCountResponse
func (c *ClientWithResponses) GetConsoleV1ExposureCountWithResponse(ctx context.Context, params *GetConsoleV1ExposureCountParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ExposureCountResponse, error) {
	rsp, err := c.GetConsoleV1ExposureCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ExposureCountResponse(rsp)
}

// GetConsoleV1GatesWithResponse request returning *GetConsoleV1GatesResponse
func (c *ClientWithResponses) GetConsoleV1GatesWithResponse(ctx context.Context, params *GetConsoleV1GatesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesResponse, error) {
	rsp, err := c.GetConsoleV1Gates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1GatesResponse(rsp)
}

// PostConsoleV1GatesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1GatesResponse
func (c *ClientWithResponses) PostConsoleV1GatesWithBodyWithResponse(ctx context.Context, params *PostConsoleV1GatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesResponse, error) {
	rsp, err := c.PostConsoleV1GatesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1GatesWithResponse(ctx context.Context, params *PostConsoleV1GatesParams, body PostConsoleV1GatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesResponse, error) {
	rsp, err := c.PostConsoleV1Gates(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesResponse(rsp)
}

// DeleteConsoleV1GatesIdWithResponse request returning *DeleteConsoleV1GatesIdResponse
func (c *ClientWithResponses) DeleteConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1GatesIdResponse, error) {
	rsp, err := c.DeleteConsoleV1GatesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1GatesIdResponse(rsp)
}

// GetConsoleV1GatesIdWithResponse request returning *GetConsoleV1GatesIdResponse
func (c *ClientWithResponses) GetConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdResponse, error) {
	rsp, err := c.GetConsoleV1GatesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1GatesIdResponse(rsp)
}

// PatchConsoleV1GatesIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1GatesIdResponse
func (c *ClientWithResponses) PatchConsoleV1GatesIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdResponse, error) {
	rsp, err := c.PatchConsoleV1GatesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdParams, body PatchConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdResponse, error) {
	rsp, err := c.PatchConsoleV1GatesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdResponse(rsp)
}

// PostConsoleV1GatesIdWithBodyWithResponse request with arbitrary body returning *PostConsoleV1GatesIdResponse
func (c *ClientWithResponses) PostConsoleV1GatesIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1GatesIdWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdParams, body PostConsoleV1GatesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdResponse, error) {
	rsp, err := c.PostConsoleV1GatesId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdResponse(rsp)
}

// PutConsoleV1GatesIdArchiveWithBodyWithResponse request with arbitrary body returning *PutConsoleV1GatesIdArchiveResponse
func (c *ClientWithResponses) PutConsoleV1GatesIdArchiveWithBodyWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdArchiveResponse, error) {
	rsp, err := c.PutConsoleV1GatesIdArchiveWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1GatesIdArchiveResponse(rsp)
}

func (c *ClientWithResponses) PutConsoleV1GatesIdArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdArchiveParams, body PutConsoleV1GatesIdArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdArchiveResponse, error) {
	rsp, err := c.PutConsoleV1GatesIdArchive(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1GatesIdArchiveResponse(rsp)
}

// PutConsoleV1GatesIdDisableWithResponse request returning *PutConsoleV1GatesIdDisableResponse
func (c *ClientWithResponses) PutConsoleV1GatesIdDisableWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdDisableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdDisableResponse, error) {
	rsp, err := c.PutConsoleV1GatesIdDisable(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1GatesIdDisableResponse(rsp)
}

// PutConsoleV1GatesIdEnableWithResponse request returning *PutConsoleV1GatesIdEnableResponse
func (c *ClientWithResponses) PutConsoleV1GatesIdEnableWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdEnableParams, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdEnableResponse, error) {
	rsp, err := c.PutConsoleV1GatesIdEnable(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1GatesIdEnableResponse(rsp)
}

// PutConsoleV1GatesIdLaunchWithResponse request returning *PutConsoleV1GatesIdLaunchResponse
func (c *ClientWithResponses) PutConsoleV1GatesIdLaunchWithResponse(ctx context.Context, id string, params *PutConsoleV1GatesIdLaunchParams, reqEditors ...RequestEditorFn) (*PutConsoleV1GatesIdLaunchResponse, error) {
	rsp, err := c.PutConsoleV1GatesIdLaunch(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1GatesIdLaunchResponse(rsp)
}

// PostConsoleV1GatesIdLoadPulseWithBodyWithResponse request with arbitrary body returning *PostConsoleV1GatesIdLoadPulseResponse
func (c *ClientWithResponses) PostConsoleV1GatesIdLoadPulseWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdLoadPulseResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdLoadPulseWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdLoadPulseResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1GatesIdLoadPulseWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdLoadPulseParams, body PostConsoleV1GatesIdLoadPulseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdLoadPulseResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdLoadPulse(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdLoadPulseResponse(rsp)
}

// DeleteConsoleV1GatesIdOverridesWithResponse request returning *DeleteConsoleV1GatesIdOverridesResponse
func (c *ClientWithResponses) DeleteConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1GatesIdOverridesResponse, error) {
	rsp, err := c.DeleteConsoleV1GatesIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1GatesIdOverridesResponse(rsp)
}

// GetConsoleV1GatesIdOverridesWithResponse request returning *GetConsoleV1GatesIdOverridesResponse
func (c *ClientWithResponses) GetConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdOverridesResponse, error) {
	rsp, err := c.GetConsoleV1GatesIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1GatesIdOverridesResponse(rsp)
}

// PatchConsoleV1GatesIdOverridesWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1GatesIdOverridesResponse
func (c *ClientWithResponses) PatchConsoleV1GatesIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1GatesIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdOverridesParams, body PatchConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1GatesIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdOverridesResponse(rsp)
}

// PostConsoleV1GatesIdOverridesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1GatesIdOverridesResponse
func (c *ClientWithResponses) PostConsoleV1GatesIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1GatesIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdOverridesParams, body PostConsoleV1GatesIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdOverridesResponse(rsp)
}

// PostConsoleV1GatesIdRuleWithBodyWithResponse request with arbitrary body returning *PostConsoleV1GatesIdRuleResponse
func (c *ClientWithResponses) PostConsoleV1GatesIdRuleWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRuleResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdRuleWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdRuleResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1GatesIdRuleWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRuleParams, body PostConsoleV1GatesIdRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRuleResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdRule(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdRuleResponse(rsp)
}

// GetConsoleV1GatesIdRulesWithResponse request returning *GetConsoleV1GatesIdRulesResponse
func (c *ClientWithResponses) GetConsoleV1GatesIdRulesWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdRulesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdRulesResponse, error) {
	rsp, err := c.GetConsoleV1GatesIdRules(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1GatesIdRulesResponse(rsp)
}

// PatchConsoleV1GatesIdRulesWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1GatesIdRulesResponse
func (c *ClientWithResponses) PatchConsoleV1GatesIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesResponse, error) {
	rsp, err := c.PatchConsoleV1GatesIdRulesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1GatesIdRulesWithResponse(ctx context.Context, id string, params *PatchConsoleV1GatesIdRulesParams, body PatchConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesResponse, error) {
	rsp, err := c.PatchConsoleV1GatesIdRules(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdRulesResponse(rsp)
}

// PostConsoleV1GatesIdRulesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1GatesIdRulesResponse
func (c *ClientWithResponses) PostConsoleV1GatesIdRulesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRulesResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdRulesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdRulesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1GatesIdRulesWithResponse(ctx context.Context, id string, params *PostConsoleV1GatesIdRulesParams, body PostConsoleV1GatesIdRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1GatesIdRulesResponse, error) {
	rsp, err := c.PostConsoleV1GatesIdRules(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1GatesIdRulesResponse(rsp)
}

// DeleteConsoleV1GatesIdRulesRuleIDWithResponse request returning *DeleteConsoleV1GatesIdRulesRuleIDResponse
func (c *ClientWithResponses) DeleteConsoleV1GatesIdRulesRuleIDWithResponse(ctx context.Context, id string, ruleID string, params *DeleteConsoleV1GatesIdRulesRuleIDParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1GatesIdRulesRuleIDResponse, error) {
	rsp, err := c.DeleteConsoleV1GatesIdRulesRuleID(ctx, id, ruleID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1GatesIdRulesRuleIDResponse(rsp)
}

// PatchConsoleV1GatesIdRulesRuleIDWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1GatesIdRulesRuleIDResponse
func (c *ClientWithResponses) PatchConsoleV1GatesIdRulesRuleIDWithBodyWithResponse(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesRuleIDResponse, error) {
	rsp, err := c.PatchConsoleV1GatesIdRulesRuleIDWithBody(ctx, id, ruleID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdRulesRuleIDResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1GatesIdRulesRuleIDWithResponse(ctx context.Context, id string, ruleID string, params *PatchConsoleV1GatesIdRulesRuleIDParams, body PatchConsoleV1GatesIdRulesRuleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1GatesIdRulesRuleIDResponse, error) {
	rsp, err := c.PatchConsoleV1GatesIdRulesRuleID(ctx, id, ruleID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1GatesIdRulesRuleIDResponse(rsp)
}

// GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryWithResponse request returning *GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse
func (c *ClientWithResponses) GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryWithResponse(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse, error) {
	rsp, err := c.GetConsoleV1GatesIdRulesRuleIDPulseLoadHistory(ctx, id, ruleID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse(rsp)
}

// GetConsoleV1GatesIdRulesRuleIDPulseResultsWithResponse request returning *GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse
func (c *ClientWithResponses) GetConsoleV1GatesIdRulesRuleIDPulseResultsWithResponse(ctx context.Context, id string, ruleID string, params *GetConsoleV1GatesIdRulesRuleIDPulseResultsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse, error) {
	rsp, err := c.GetConsoleV1GatesIdRulesRuleIDPulseResults(ctx, id, ruleID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1GatesIdRulesRuleIDPulseResultsResponse(rsp)
}

// GetConsoleV1GatesIdVersionsWithResponse request returning *GetConsoleV1GatesIdVersionsResponse
func (c *ClientWithResponses) GetConsoleV1GatesIdVersionsWithResponse(ctx context.Context, id string, params *GetConsoleV1GatesIdVersionsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1GatesIdVersionsResponse, error) {
	rsp, err := c.GetConsoleV1GatesIdVersions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1GatesIdVersionsResponse(rsp)
}

// GetConsoleV1HoldoutsWithResponse request returning *GetConsoleV1HoldoutsResponse
func (c *ClientWithResponses) GetConsoleV1HoldoutsWithResponse(ctx context.Context, params *GetConsoleV1HoldoutsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1HoldoutsResponse, error) {
	rsp, err := c.GetConsoleV1Holdouts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1HoldoutsResponse(rsp)
}

// PostConsoleV1HoldoutsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1HoldoutsResponse
func (c *ClientWithResponses) PostConsoleV1HoldoutsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1HoldoutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsResponse, error) {
	rsp, err := c.PostConsoleV1HoldoutsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1HoldoutsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1HoldoutsWithResponse(ctx context.Context, params *PostConsoleV1HoldoutsParams, body PostConsoleV1HoldoutsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsResponse, error) {
	rsp, err := c.PostConsoleV1Holdouts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1HoldoutsResponse(rsp)
}

// DeleteConsoleV1HoldoutsIdWithResponse request returning *DeleteConsoleV1HoldoutsIdResponse
func (c *ClientWithResponses) DeleteConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1HoldoutsIdResponse, error) {
	rsp, err := c.DeleteConsoleV1HoldoutsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1HoldoutsIdResponse(rsp)
}

// GetConsoleV1HoldoutsIdWithResponse request returning *GetConsoleV1HoldoutsIdResponse
func (c *ClientWithResponses) GetConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1HoldoutsIdResponse, error) {
	rsp, err := c.GetConsoleV1HoldoutsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1HoldoutsIdResponse(rsp)
}

// PatchConsoleV1HoldoutsIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1HoldoutsIdResponse
func (c *ClientWithResponses) PatchConsoleV1HoldoutsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdResponse, error) {
	rsp, err := c.PatchConsoleV1HoldoutsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1HoldoutsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdParams, body PatchConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdResponse, error) {
	rsp, err := c.PatchConsoleV1HoldoutsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1HoldoutsIdResponse(rsp)
}

// PostConsoleV1HoldoutsIdWithBodyWithResponse request with arbitrary body returning *PostConsoleV1HoldoutsIdResponse
func (c *ClientWithResponses) PostConsoleV1HoldoutsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdResponse, error) {
	rsp, err := c.PostConsoleV1HoldoutsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1HoldoutsIdResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1HoldoutsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdParams, body PostConsoleV1HoldoutsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdResponse, error) {
	rsp, err := c.PostConsoleV1HoldoutsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1HoldoutsIdResponse(rsp)
}

// DeleteConsoleV1HoldoutsIdOverridesWithResponse request returning *DeleteConsoleV1HoldoutsIdOverridesResponse
func (c *ClientWithResponses) DeleteConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1HoldoutsIdOverridesResponse, error) {
	rsp, err := c.DeleteConsoleV1HoldoutsIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1HoldoutsIdOverridesResponse(rsp)
}

// GetConsoleV1HoldoutsIdOverridesWithResponse request returning *GetConsoleV1HoldoutsIdOverridesResponse
func (c *ClientWithResponses) GetConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1HoldoutsIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1HoldoutsIdOverridesResponse, error) {
	rsp, err := c.GetConsoleV1HoldoutsIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1HoldoutsIdOverridesResponse(rsp)
}

// PatchConsoleV1HoldoutsIdOverridesWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1HoldoutsIdOverridesResponse
func (c *ClientWithResponses) PatchConsoleV1HoldoutsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1HoldoutsIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1HoldoutsIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1HoldoutsIdOverridesParams, body PatchConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1HoldoutsIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1HoldoutsIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1HoldoutsIdOverridesResponse(rsp)
}

// PostConsoleV1HoldoutsIdOverridesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1HoldoutsIdOverridesResponse
func (c *ClientWithResponses) PostConsoleV1HoldoutsIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1HoldoutsIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1HoldoutsIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1HoldoutsIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1HoldoutsIdOverridesParams, body PostConsoleV1HoldoutsIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1HoldoutsIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1HoldoutsIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1HoldoutsIdOverridesResponse(rsp)
}

// DeleteConsoleV1IngestionWithResponse request returning *DeleteConsoleV1IngestionResponse
func (c *ClientWithResponses) DeleteConsoleV1IngestionWithResponse(ctx context.Context, params *DeleteConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1IngestionResponse, error) {
	rsp, err := c.DeleteConsoleV1Ingestion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1IngestionResponse(rsp)
}

// GetConsoleV1IngestionWithResponse request returning *GetConsoleV1IngestionResponse
func (c *ClientWithResponses) GetConsoleV1IngestionWithResponse(ctx context.Context, params *GetConsoleV1IngestionParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionResponse, error) {
	rsp, err := c.GetConsoleV1Ingestion(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1IngestionResponse(rsp)
}

// PatchConsoleV1IngestionWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1IngestionResponse
func (c *ClientWithResponses) PatchConsoleV1IngestionWithBodyWithResponse(ctx context.Context, params *PatchConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1IngestionResponse, error) {
	rsp, err := c.PatchConsoleV1IngestionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1IngestionResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1IngestionWithResponse(ctx context.Context, params *PatchConsoleV1IngestionParams, body PatchConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1IngestionResponse, error) {
	rsp, err := c.PatchConsoleV1Ingestion(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1IngestionResponse(rsp)
}

// PostConsoleV1IngestionWithBodyWithResponse request with arbitrary body returning *PostConsoleV1IngestionResponse
func (c *ClientWithResponses) PostConsoleV1IngestionWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionResponse, error) {
	rsp, err := c.PostConsoleV1IngestionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1IngestionWithResponse(ctx context.Context, params *PostConsoleV1IngestionParams, body PostConsoleV1IngestionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionResponse, error) {
	rsp, err := c.PostConsoleV1Ingestion(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionResponse(rsp)
}

// PostConsoleV1IngestionBackfillWithBodyWithResponse request with arbitrary body returning *PostConsoleV1IngestionBackfillResponse
func (c *ClientWithResponses) PostConsoleV1IngestionBackfillWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionBackfillResponse, error) {
	rsp, err := c.PostConsoleV1IngestionBackfillWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionBackfillResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1IngestionBackfillWithResponse(ctx context.Context, params *PostConsoleV1IngestionBackfillParams, body PostConsoleV1IngestionBackfillJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionBackfillResponse, error) {
	rsp, err := c.PostConsoleV1IngestionBackfill(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionBackfillResponse(rsp)
}

// PostConsoleV1IngestionConnectionDatabricksWithBodyWithResponse request with arbitrary body returning *PostConsoleV1IngestionConnectionDatabricksResponse
func (c *ClientWithResponses) PostConsoleV1IngestionConnectionDatabricksWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionConnectionDatabricksResponse, error) {
	rsp, err := c.PostConsoleV1IngestionConnectionDatabricksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionConnectionDatabricksResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1IngestionConnectionDatabricksWithResponse(ctx context.Context, params *PostConsoleV1IngestionConnectionDatabricksParams, body PostConsoleV1IngestionConnectionDatabricksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionConnectionDatabricksResponse, error) {
	rsp, err := c.PostConsoleV1IngestionConnectionDatabricks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionConnectionDatabricksResponse(rsp)
}

// GetConsoleV1IngestionEventsCountWithResponse request returning *GetConsoleV1IngestionEventsCountResponse
func (c *ClientWithResponses) GetConsoleV1IngestionEventsCountWithResponse(ctx context.Context, params *GetConsoleV1IngestionEventsCountParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionEventsCountResponse, error) {
	rsp, err := c.GetConsoleV1IngestionEventsCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1IngestionEventsCountResponse(rsp)
}

// GetConsoleV1IngestionEventsDeltaWithResponse request returning *GetConsoleV1IngestionEventsDeltaResponse
func (c *ClientWithResponses) GetConsoleV1IngestionEventsDeltaWithResponse(ctx context.Context, params *GetConsoleV1IngestionEventsDeltaParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionEventsDeltaResponse, error) {
	rsp, err := c.GetConsoleV1IngestionEventsDelta(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1IngestionEventsDeltaResponse(rsp)
}

// GetConsoleV1IngestionRunsWithResponse request returning *GetConsoleV1IngestionRunsResponse
func (c *ClientWithResponses) GetConsoleV1IngestionRunsWithResponse(ctx context.Context, params *GetConsoleV1IngestionRunsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionRunsResponse, error) {
	rsp, err := c.GetConsoleV1IngestionRuns(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1IngestionRunsResponse(rsp)
}

// GetConsoleV1IngestionRunsIdWithResponse request returning *GetConsoleV1IngestionRunsIdResponse
func (c *ClientWithResponses) GetConsoleV1IngestionRunsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1IngestionRunsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionRunsIdResponse, error) {
	rsp, err := c.GetConsoleV1IngestionRunsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1IngestionRunsIdResponse(rsp)
}

// GetConsoleV1IngestionScheduleWithResponse request returning *GetConsoleV1IngestionScheduleResponse
func (c *ClientWithResponses) GetConsoleV1IngestionScheduleWithResponse(ctx context.Context, params *GetConsoleV1IngestionScheduleParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionScheduleResponse, error) {
	rsp, err := c.GetConsoleV1IngestionSchedule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1IngestionScheduleResponse(rsp)
}

// PostConsoleV1IngestionScheduleWithBodyWithResponse request with arbitrary body returning *PostConsoleV1IngestionScheduleResponse
func (c *ClientWithResponses) PostConsoleV1IngestionScheduleWithBodyWithResponse(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionScheduleResponse, error) {
	rsp, err := c.PostConsoleV1IngestionScheduleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionScheduleResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1IngestionScheduleWithResponse(ctx context.Context, params *PostConsoleV1IngestionScheduleParams, body PostConsoleV1IngestionScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1IngestionScheduleResponse, error) {
	rsp, err := c.PostConsoleV1IngestionSchedule(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1IngestionScheduleResponse(rsp)
}

// GetConsoleV1IngestionStatusWithResponse request returning *GetConsoleV1IngestionStatusResponse
func (c *ClientWithResponses) GetConsoleV1IngestionStatusWithResponse(ctx context.Context, params *GetConsoleV1IngestionStatusParams, reqEditors ...RequestEditorFn) (*GetConsoleV1IngestionStatusResponse, error) {
	rsp, err := c.GetConsoleV1IngestionStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1IngestionStatusResponse(rsp)
}

// GetConsoleV1KeysWithResponse request returning *GetConsoleV1KeysResponse
func (c *ClientWithResponses) GetConsoleV1KeysWithResponse(ctx context.Context, params *GetConsoleV1KeysParams, reqEditors ...RequestEditorFn) (*GetConsoleV1KeysResponse, error) {
	rsp, err := c.GetConsoleV1Keys(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1KeysResponse(rsp)
}

// PostConsoleV1KeysWithBodyWithResponse request with arbitrary body returning *PostConsoleV1KeysResponse
func (c *ClientWithResponses) PostConsoleV1KeysWithBodyWithResponse(ctx context.Context, params *PostConsoleV1KeysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1KeysResponse, error) {
	rsp, err := c.PostConsoleV1KeysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1KeysResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1KeysWithResponse(ctx context.Context, params *PostConsoleV1KeysParams, body PostConsoleV1KeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1KeysResponse, error) {
	rsp, err := c.PostConsoleV1Keys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1KeysResponse(rsp)
}

// DeleteConsoleV1KeysIdWithResponse request returning *DeleteConsoleV1KeysIdResponse
func (c *ClientWithResponses) DeleteConsoleV1KeysIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1KeysIdResponse, error) {
	rsp, err := c.DeleteConsoleV1KeysId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1KeysIdResponse(rsp)
}

// GetConsoleV1KeysIdWithResponse request returning *GetConsoleV1KeysIdResponse
func (c *ClientWithResponses) GetConsoleV1KeysIdWithResponse(ctx context.Context, id string, params *GetConsoleV1KeysIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1KeysIdResponse, error) {
	rsp, err := c.GetConsoleV1KeysId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1KeysIdResponse(rsp)
}

// PatchConsoleV1KeysIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1KeysIdResponse
func (c *ClientWithResponses) PatchConsoleV1KeysIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdResponse, error) {
	rsp, err := c.PatchConsoleV1KeysIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1KeysIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1KeysIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdParams, body PatchConsoleV1KeysIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdResponse, error) {
	rsp, err := c.PatchConsoleV1KeysId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1KeysIdResponse(rsp)
}

// PatchConsoleV1KeysIdDeactivateWithResponse request returning *PatchConsoleV1KeysIdDeactivateResponse
func (c *ClientWithResponses) PatchConsoleV1KeysIdDeactivateWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdDeactivateParams, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdDeactivateResponse, error) {
	rsp, err := c.PatchConsoleV1KeysIdDeactivate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1KeysIdDeactivateResponse(rsp)
}

// PatchConsoleV1KeysIdRotateWithResponse request returning *PatchConsoleV1KeysIdRotateResponse
func (c *ClientWithResponses) PatchConsoleV1KeysIdRotateWithResponse(ctx context.Context, id string, params *PatchConsoleV1KeysIdRotateParams, reqEditors ...RequestEditorFn) (*PatchConsoleV1KeysIdRotateResponse, error) {
	rsp, err := c.PatchConsoleV1KeysIdRotate(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1KeysIdRotateResponse(rsp)
}

// GetConsoleV1LayersWithResponse request returning *GetConsoleV1LayersResponse
func (c *ClientWithResponses) GetConsoleV1LayersWithResponse(ctx context.Context, params *GetConsoleV1LayersParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersResponse, error) {
	rsp, err := c.GetConsoleV1Layers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1LayersResponse(rsp)
}

// PostConsoleV1LayersWithBodyWithResponse request with arbitrary body returning *PostConsoleV1LayersResponse
func (c *ClientWithResponses) PostConsoleV1LayersWithBodyWithResponse(ctx context.Context, params *PostConsoleV1LayersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersResponse, error) {
	rsp, err := c.PostConsoleV1LayersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1LayersResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1LayersWithResponse(ctx context.Context, params *PostConsoleV1LayersParams, body PostConsoleV1LayersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersResponse, error) {
	rsp, err := c.PostConsoleV1Layers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1LayersResponse(rsp)
}

// DeleteConsoleV1LayersIdWithResponse request returning *DeleteConsoleV1LayersIdResponse
func (c *ClientWithResponses) DeleteConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1LayersIdResponse, error) {
	rsp, err := c.DeleteConsoleV1LayersId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1LayersIdResponse(rsp)
}

// GetConsoleV1LayersIdWithResponse request returning *GetConsoleV1LayersIdResponse
func (c *ClientWithResponses) GetConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *GetConsoleV1LayersIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersIdResponse, error) {
	rsp, err := c.GetConsoleV1LayersId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1LayersIdResponse(rsp)
}

// PatchConsoleV1LayersIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1LayersIdResponse
func (c *ClientWithResponses) PatchConsoleV1LayersIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdResponse, error) {
	rsp, err := c.PatchConsoleV1LayersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1LayersIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdParams, body PatchConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdResponse, error) {
	rsp, err := c.PatchConsoleV1LayersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1LayersIdResponse(rsp)
}

// PostConsoleV1LayersIdWithBodyWithResponse request with arbitrary body returning *PostConsoleV1LayersIdResponse
func (c *ClientWithResponses) PostConsoleV1LayersIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdResponse, error) {
	rsp, err := c.PostConsoleV1LayersIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1LayersIdResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1LayersIdWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdParams, body PostConsoleV1LayersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdResponse, error) {
	rsp, err := c.PostConsoleV1LayersId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1LayersIdResponse(rsp)
}

// GetConsoleV1LayersIdExperimentsWithResponse request returning *GetConsoleV1LayersIdExperimentsResponse
func (c *ClientWithResponses) GetConsoleV1LayersIdExperimentsWithResponse(ctx context.Context, id string, params *GetConsoleV1LayersIdExperimentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersIdExperimentsResponse, error) {
	rsp, err := c.GetConsoleV1LayersIdExperiments(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1LayersIdExperimentsResponse(rsp)
}

// DeleteConsoleV1LayersIdOverridesWithResponse request returning *DeleteConsoleV1LayersIdOverridesResponse
func (c *ClientWithResponses) DeleteConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *DeleteConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1LayersIdOverridesResponse, error) {
	rsp, err := c.DeleteConsoleV1LayersIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1LayersIdOverridesResponse(rsp)
}

// GetConsoleV1LayersIdOverridesWithResponse request returning *GetConsoleV1LayersIdOverridesResponse
func (c *ClientWithResponses) GetConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *GetConsoleV1LayersIdOverridesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1LayersIdOverridesResponse, error) {
	rsp, err := c.GetConsoleV1LayersIdOverrides(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1LayersIdOverridesResponse(rsp)
}

// PatchConsoleV1LayersIdOverridesWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1LayersIdOverridesResponse
func (c *ClientWithResponses) PatchConsoleV1LayersIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1LayersIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1LayersIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *PatchConsoleV1LayersIdOverridesParams, body PatchConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1LayersIdOverridesResponse, error) {
	rsp, err := c.PatchConsoleV1LayersIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1LayersIdOverridesResponse(rsp)
}

// PostConsoleV1LayersIdOverridesWithBodyWithResponse request with arbitrary body returning *PostConsoleV1LayersIdOverridesResponse
func (c *ClientWithResponses) PostConsoleV1LayersIdOverridesWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1LayersIdOverridesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1LayersIdOverridesResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1LayersIdOverridesWithResponse(ctx context.Context, id string, params *PostConsoleV1LayersIdOverridesParams, body PostConsoleV1LayersIdOverridesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1LayersIdOverridesResponse, error) {
	rsp, err := c.PostConsoleV1LayersIdOverrides(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1LayersIdOverridesResponse(rsp)
}

// GetConsoleV1MetricsWithResponse request returning *GetConsoleV1MetricsResponse
func (c *ClientWithResponses) GetConsoleV1MetricsWithResponse(ctx context.Context, params *GetConsoleV1MetricsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsResponse, error) {
	rsp, err := c.GetConsoleV1Metrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsResponse(rsp)
}

// PostConsoleV1MetricsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1MetricsResponse
func (c *ClientWithResponses) PostConsoleV1MetricsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1MetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsResponse, error) {
	rsp, err := c.PostConsoleV1MetricsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1MetricsWithResponse(ctx context.Context, params *PostConsoleV1MetricsParams, body PostConsoleV1MetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsResponse, error) {
	rsp, err := c.PostConsoleV1Metrics(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsResponse(rsp)
}

// GetConsoleV1MetricsListWithResponse request returning *GetConsoleV1MetricsListResponse
func (c *ClientWithResponses) GetConsoleV1MetricsListWithResponse(ctx context.Context, params *GetConsoleV1MetricsListParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsListResponse, error) {
	rsp, err := c.GetConsoleV1MetricsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsListResponse(rsp)
}

// PostConsoleV1MetricsMetricSourceWithBodyWithResponse request with arbitrary body returning *PostConsoleV1MetricsMetricSourceResponse
func (c *ClientWithResponses) PostConsoleV1MetricsMetricSourceWithBodyWithResponse(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceResponse, error) {
	rsp, err := c.PostConsoleV1MetricsMetricSourceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsMetricSourceResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1MetricsMetricSourceWithResponse(ctx context.Context, params *PostConsoleV1MetricsMetricSourceParams, body PostConsoleV1MetricsMetricSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceResponse, error) {
	rsp, err := c.PostConsoleV1MetricsMetricSource(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsMetricSourceResponse(rsp)
}

// GetConsoleV1MetricsMetricSourceListWithResponse request returning *GetConsoleV1MetricsMetricSourceListResponse
func (c *ClientWithResponses) GetConsoleV1MetricsMetricSourceListWithResponse(ctx context.Context, params *GetConsoleV1MetricsMetricSourceListParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsMetricSourceListResponse, error) {
	rsp, err := c.GetConsoleV1MetricsMetricSourceList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsMetricSourceListResponse(rsp)
}

// DeleteConsoleV1MetricsMetricSourceNameWithResponse request returning *DeleteConsoleV1MetricsMetricSourceNameResponse
func (c *ClientWithResponses) DeleteConsoleV1MetricsMetricSourceNameWithResponse(ctx context.Context, name string, params *DeleteConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1MetricsMetricSourceNameResponse, error) {
	rsp, err := c.DeleteConsoleV1MetricsMetricSourceName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1MetricsMetricSourceNameResponse(rsp)
}

// GetConsoleV1MetricsMetricSourceNameWithResponse request returning *GetConsoleV1MetricsMetricSourceNameResponse
func (c *ClientWithResponses) GetConsoleV1MetricsMetricSourceNameWithResponse(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsMetricSourceNameResponse, error) {
	rsp, err := c.GetConsoleV1MetricsMetricSourceName(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsMetricSourceNameResponse(rsp)
}

// PostConsoleV1MetricsMetricSourceNameWithBodyWithResponse request with arbitrary body returning *PostConsoleV1MetricsMetricSourceNameResponse
func (c *ClientWithResponses) PostConsoleV1MetricsMetricSourceNameWithBodyWithResponse(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceNameResponse, error) {
	rsp, err := c.PostConsoleV1MetricsMetricSourceNameWithBody(ctx, name, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsMetricSourceNameResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1MetricsMetricSourceNameWithResponse(ctx context.Context, name string, params *PostConsoleV1MetricsMetricSourceNameParams, body PostConsoleV1MetricsMetricSourceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsMetricSourceNameResponse, error) {
	rsp, err := c.PostConsoleV1MetricsMetricSourceName(ctx, name, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsMetricSourceNameResponse(rsp)
}

// GetConsoleV1MetricsMetricSourceNameMetricsWithResponse request returning *GetConsoleV1MetricsMetricSourceNameMetricsResponse
func (c *ClientWithResponses) GetConsoleV1MetricsMetricSourceNameMetricsWithResponse(ctx context.Context, name string, params *GetConsoleV1MetricsMetricSourceNameMetricsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsMetricSourceNameMetricsResponse, error) {
	rsp, err := c.GetConsoleV1MetricsMetricSourceNameMetrics(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsMetricSourceNameMetricsResponse(rsp)
}

// GetConsoleV1MetricsValuesWithResponse request returning *GetConsoleV1MetricsValuesResponse
func (c *ClientWithResponses) GetConsoleV1MetricsValuesWithResponse(ctx context.Context, params *GetConsoleV1MetricsValuesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsValuesResponse, error) {
	rsp, err := c.GetConsoleV1MetricsValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsValuesResponse(rsp)
}

// DeleteConsoleV1MetricsIdWithResponse request returning *DeleteConsoleV1MetricsIdResponse
func (c *ClientWithResponses) DeleteConsoleV1MetricsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1MetricsIdResponse, error) {
	rsp, err := c.DeleteConsoleV1MetricsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1MetricsIdResponse(rsp)
}

// GetConsoleV1MetricsIdWithResponse request returning *GetConsoleV1MetricsIdResponse
func (c *ClientWithResponses) GetConsoleV1MetricsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1MetricsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsIdResponse, error) {
	rsp, err := c.GetConsoleV1MetricsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsIdResponse(rsp)
}

// PostConsoleV1MetricsIdWithBodyWithResponse request with arbitrary body returning *PostConsoleV1MetricsIdResponse
func (c *ClientWithResponses) PostConsoleV1MetricsIdWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsIdResponse, error) {
	rsp, err := c.PostConsoleV1MetricsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsIdResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1MetricsIdWithResponse(ctx context.Context, id string, params *PostConsoleV1MetricsIdParams, body PostConsoleV1MetricsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsIdResponse, error) {
	rsp, err := c.PostConsoleV1MetricsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsIdResponse(rsp)
}

// PutConsoleV1MetricsIdCancelArchiveWithResponse request returning *PutConsoleV1MetricsIdCancelArchiveResponse
func (c *ClientWithResponses) PutConsoleV1MetricsIdCancelArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1MetricsIdCancelArchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1MetricsIdCancelArchiveResponse, error) {
	rsp, err := c.PutConsoleV1MetricsIdCancelArchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1MetricsIdCancelArchiveResponse(rsp)
}

// GetConsoleV1MetricsIdExperimentsWithResponse request returning *GetConsoleV1MetricsIdExperimentsResponse
func (c *ClientWithResponses) GetConsoleV1MetricsIdExperimentsWithResponse(ctx context.Context, id string, params *GetConsoleV1MetricsIdExperimentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1MetricsIdExperimentsResponse, error) {
	rsp, err := c.GetConsoleV1MetricsIdExperiments(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1MetricsIdExperimentsResponse(rsp)
}

// PostConsoleV1MetricsIdReloadWithResponse request returning *PostConsoleV1MetricsIdReloadResponse
func (c *ClientWithResponses) PostConsoleV1MetricsIdReloadWithResponse(ctx context.Context, id string, params *PostConsoleV1MetricsIdReloadParams, reqEditors ...RequestEditorFn) (*PostConsoleV1MetricsIdReloadResponse, error) {
	rsp, err := c.PostConsoleV1MetricsIdReload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1MetricsIdReloadResponse(rsp)
}

// PutConsoleV1MetricsIdScheduleArchiveWithResponse request returning *PutConsoleV1MetricsIdScheduleArchiveResponse
func (c *ClientWithResponses) PutConsoleV1MetricsIdScheduleArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1MetricsIdScheduleArchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1MetricsIdScheduleArchiveResponse, error) {
	rsp, err := c.PutConsoleV1MetricsIdScheduleArchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1MetricsIdScheduleArchiveResponse(rsp)
}

// PutConsoleV1MetricsIdUnarchiveWithResponse request returning *PutConsoleV1MetricsIdUnarchiveResponse
func (c *ClientWithResponses) PutConsoleV1MetricsIdUnarchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1MetricsIdUnarchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1MetricsIdUnarchiveResponse, error) {
	rsp, err := c.PutConsoleV1MetricsIdUnarchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1MetricsIdUnarchiveResponse(rsp)
}

// GetConsoleV1ProjectWithResponse request returning *GetConsoleV1ProjectResponse
func (c *ClientWithResponses) GetConsoleV1ProjectWithResponse(ctx context.Context, params *GetConsoleV1ProjectParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ProjectResponse, error) {
	rsp, err := c.GetConsoleV1Project(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ProjectResponse(rsp)
}

// GetConsoleV1ProjectUsageBillingReportWithResponse request returning *GetConsoleV1ProjectUsageBillingReportResponse
func (c *ClientWithResponses) GetConsoleV1ProjectUsageBillingReportWithResponse(ctx context.Context, params *GetConsoleV1ProjectUsageBillingReportParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ProjectUsageBillingReportResponse, error) {
	rsp, err := c.GetConsoleV1ProjectUsageBillingReport(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ProjectUsageBillingReportResponse(rsp)
}

// GetConsoleV1ReleasePipelineTriggersWithResponse request returning *GetConsoleV1ReleasePipelineTriggersResponse
func (c *ClientWithResponses) GetConsoleV1ReleasePipelineTriggersWithResponse(ctx context.Context, params *GetConsoleV1ReleasePipelineTriggersParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelineTriggersResponse, error) {
	rsp, err := c.GetConsoleV1ReleasePipelineTriggers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ReleasePipelineTriggersResponse(rsp)
}

// GetConsoleV1ReleasePipelineTriggersIdWithResponse request returning *GetConsoleV1ReleasePipelineTriggersIdResponse
func (c *ClientWithResponses) GetConsoleV1ReleasePipelineTriggersIdWithResponse(ctx context.Context, id string, params *GetConsoleV1ReleasePipelineTriggersIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelineTriggersIdResponse, error) {
	rsp, err := c.GetConsoleV1ReleasePipelineTriggersId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ReleasePipelineTriggersIdResponse(rsp)
}

// GetConsoleV1ReleasePipelinesWithResponse request returning *GetConsoleV1ReleasePipelinesResponse
func (c *ClientWithResponses) GetConsoleV1ReleasePipelinesWithResponse(ctx context.Context, params *GetConsoleV1ReleasePipelinesParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelinesResponse, error) {
	rsp, err := c.GetConsoleV1ReleasePipelines(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ReleasePipelinesResponse(rsp)
}

// GetConsoleV1ReleasePipelinesIdWithResponse request returning *GetConsoleV1ReleasePipelinesIdResponse
func (c *ClientWithResponses) GetConsoleV1ReleasePipelinesIdWithResponse(ctx context.Context, id string, params *GetConsoleV1ReleasePipelinesIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReleasePipelinesIdResponse, error) {
	rsp, err := c.GetConsoleV1ReleasePipelinesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ReleasePipelinesIdResponse(rsp)
}

// GetConsoleV1ReportsWithResponse request returning *GetConsoleV1ReportsResponse
func (c *ClientWithResponses) GetConsoleV1ReportsWithResponse(ctx context.Context, params *GetConsoleV1ReportsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1ReportsResponse, error) {
	rsp, err := c.GetConsoleV1Reports(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1ReportsResponse(rsp)
}

// GetConsoleV1SegmentsWithResponse request returning *GetConsoleV1SegmentsResponse
func (c *ClientWithResponses) GetConsoleV1SegmentsWithResponse(ctx context.Context, params *GetConsoleV1SegmentsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1SegmentsResponse, error) {
	rsp, err := c.GetConsoleV1Segments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1SegmentsResponse(rsp)
}

// PostConsoleV1SegmentsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1SegmentsResponse
func (c *ClientWithResponses) PostConsoleV1SegmentsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1SegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsResponse, error) {
	rsp, err := c.PostConsoleV1SegmentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1SegmentsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1SegmentsWithResponse(ctx context.Context, params *PostConsoleV1SegmentsParams, body PostConsoleV1SegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsResponse, error) {
	rsp, err := c.PostConsoleV1Segments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1SegmentsResponse(rsp)
}

// DeleteConsoleV1SegmentsIdWithResponse request returning *DeleteConsoleV1SegmentsIdResponse
func (c *ClientWithResponses) DeleteConsoleV1SegmentsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1SegmentsIdResponse, error) {
	rsp, err := c.DeleteConsoleV1SegmentsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1SegmentsIdResponse(rsp)
}

// GetConsoleV1SegmentsIdWithResponse request returning *GetConsoleV1SegmentsIdResponse
func (c *ClientWithResponses) GetConsoleV1SegmentsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1SegmentsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1SegmentsIdResponse, error) {
	rsp, err := c.GetConsoleV1SegmentsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1SegmentsIdResponse(rsp)
}

// PutConsoleV1SegmentsIdArchiveWithResponse request returning *PutConsoleV1SegmentsIdArchiveResponse
func (c *ClientWithResponses) PutConsoleV1SegmentsIdArchiveWithResponse(ctx context.Context, id string, params *PutConsoleV1SegmentsIdArchiveParams, reqEditors ...RequestEditorFn) (*PutConsoleV1SegmentsIdArchiveResponse, error) {
	rsp, err := c.PutConsoleV1SegmentsIdArchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConsoleV1SegmentsIdArchiveResponse(rsp)
}

// PostConsoleV1SegmentsIdConditionalWithBodyWithResponse request with arbitrary body returning *PostConsoleV1SegmentsIdConditionalResponse
func (c *ClientWithResponses) PostConsoleV1SegmentsIdConditionalWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdConditionalResponse, error) {
	rsp, err := c.PostConsoleV1SegmentsIdConditionalWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1SegmentsIdConditionalResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1SegmentsIdConditionalWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdConditionalParams, body PostConsoleV1SegmentsIdConditionalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdConditionalResponse, error) {
	rsp, err := c.PostConsoleV1SegmentsIdConditional(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1SegmentsIdConditionalResponse(rsp)
}

// DeleteConsoleV1SegmentsIdIdListWithResponse request returning *DeleteConsoleV1SegmentsIdIdListResponse
func (c *ClientWithResponses) DeleteConsoleV1SegmentsIdIdListWithResponse(ctx context.Context, id string, params *DeleteConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1SegmentsIdIdListResponse, error) {
	rsp, err := c.DeleteConsoleV1SegmentsIdIdList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1SegmentsIdIdListResponse(rsp)
}

// GetConsoleV1SegmentsIdIdListWithResponse request returning *GetConsoleV1SegmentsIdIdListResponse
func (c *ClientWithResponses) GetConsoleV1SegmentsIdIdListWithResponse(ctx context.Context, id string, params *GetConsoleV1SegmentsIdIdListParams, reqEditors ...RequestEditorFn) (*GetConsoleV1SegmentsIdIdListResponse, error) {
	rsp, err := c.GetConsoleV1SegmentsIdIdList(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1SegmentsIdIdListResponse(rsp)
}

// PatchConsoleV1SegmentsIdIdListWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1SegmentsIdIdListResponse
func (c *ClientWithResponses) PatchConsoleV1SegmentsIdIdListWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1SegmentsIdIdListResponse, error) {
	rsp, err := c.PatchConsoleV1SegmentsIdIdListWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1SegmentsIdIdListResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1SegmentsIdIdListWithResponse(ctx context.Context, id string, params *PatchConsoleV1SegmentsIdIdListParams, body PatchConsoleV1SegmentsIdIdListJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1SegmentsIdIdListResponse, error) {
	rsp, err := c.PatchConsoleV1SegmentsIdIdList(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1SegmentsIdIdListResponse(rsp)
}

// PostConsoleV1SegmentsIdIdListResetWithBodyWithResponse request with arbitrary body returning *PostConsoleV1SegmentsIdIdListResetResponse
func (c *ClientWithResponses) PostConsoleV1SegmentsIdIdListResetWithBodyWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdIdListResetResponse, error) {
	rsp, err := c.PostConsoleV1SegmentsIdIdListResetWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1SegmentsIdIdListResetResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1SegmentsIdIdListResetWithResponse(ctx context.Context, id string, params *PostConsoleV1SegmentsIdIdListResetParams, body PostConsoleV1SegmentsIdIdListResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1SegmentsIdIdListResetResponse, error) {
	rsp, err := c.PostConsoleV1SegmentsIdIdListReset(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1SegmentsIdIdListResetResponse(rsp)
}

// GetConsoleV1TagsWithResponse request returning *GetConsoleV1TagsResponse
func (c *ClientWithResponses) GetConsoleV1TagsWithResponse(ctx context.Context, params *GetConsoleV1TagsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TagsResponse, error) {
	rsp, err := c.GetConsoleV1Tags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1TagsResponse(rsp)
}

// PostConsoleV1TagsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1TagsResponse
func (c *ClientWithResponses) PostConsoleV1TagsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1TagsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1TagsResponse, error) {
	rsp, err := c.PostConsoleV1TagsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1TagsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1TagsWithResponse(ctx context.Context, params *PostConsoleV1TagsParams, body PostConsoleV1TagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1TagsResponse, error) {
	rsp, err := c.PostConsoleV1Tags(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1TagsResponse(rsp)
}

// DeleteConsoleV1TagsIdWithResponse request returning *DeleteConsoleV1TagsIdResponse
func (c *ClientWithResponses) DeleteConsoleV1TagsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1TagsIdResponse, error) {
	rsp, err := c.DeleteConsoleV1TagsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1TagsIdResponse(rsp)
}

// GetConsoleV1TagsIdWithResponse request returning *GetConsoleV1TagsIdResponse
func (c *ClientWithResponses) GetConsoleV1TagsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1TagsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TagsIdResponse, error) {
	rsp, err := c.GetConsoleV1TagsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1TagsIdResponse(rsp)
}

// PatchConsoleV1TagsIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1TagsIdResponse
func (c *ClientWithResponses) PatchConsoleV1TagsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1TagsIdResponse, error) {
	rsp, err := c.PatchConsoleV1TagsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1TagsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1TagsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1TagsIdParams, body PatchConsoleV1TagsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1TagsIdResponse, error) {
	rsp, err := c.PatchConsoleV1TagsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1TagsIdResponse(rsp)
}

// GetConsoleV1TargetAppWithResponse request returning *GetConsoleV1TargetAppResponse
func (c *ClientWithResponses) GetConsoleV1TargetAppWithResponse(ctx context.Context, params *GetConsoleV1TargetAppParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TargetAppResponse, error) {
	rsp, err := c.GetConsoleV1TargetApp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1TargetAppResponse(rsp)
}

// PatchConsoleV1TargetAppWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1TargetAppResponse
func (c *ClientWithResponses) PatchConsoleV1TargetAppWithBodyWithResponse(ctx context.Context, params *PatchConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppResponse, error) {
	rsp, err := c.PatchConsoleV1TargetAppWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1TargetAppResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1TargetAppWithResponse(ctx context.Context, params *PatchConsoleV1TargetAppParams, body PatchConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppResponse, error) {
	rsp, err := c.PatchConsoleV1TargetApp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1TargetAppResponse(rsp)
}

// PostConsoleV1TargetAppWithBodyWithResponse request with arbitrary body returning *PostConsoleV1TargetAppResponse
func (c *ClientWithResponses) PostConsoleV1TargetAppWithBodyWithResponse(ctx context.Context, params *PostConsoleV1TargetAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1TargetAppResponse, error) {
	rsp, err := c.PostConsoleV1TargetAppWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1TargetAppResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1TargetAppWithResponse(ctx context.Context, params *PostConsoleV1TargetAppParams, body PostConsoleV1TargetAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1TargetAppResponse, error) {
	rsp, err := c.PostConsoleV1TargetApp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1TargetAppResponse(rsp)
}

// DeleteConsoleV1TargetAppIdWithResponse request returning *DeleteConsoleV1TargetAppIdResponse
func (c *ClientWithResponses) DeleteConsoleV1TargetAppIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1TargetAppIdResponse, error) {
	rsp, err := c.DeleteConsoleV1TargetAppId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1TargetAppIdResponse(rsp)
}

// GetConsoleV1TargetAppIdWithResponse request returning *GetConsoleV1TargetAppIdResponse
func (c *ClientWithResponses) GetConsoleV1TargetAppIdWithResponse(ctx context.Context, id string, params *GetConsoleV1TargetAppIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1TargetAppIdResponse, error) {
	rsp, err := c.GetConsoleV1TargetAppId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1TargetAppIdResponse(rsp)
}

// PatchConsoleV1TargetAppIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1TargetAppIdResponse
func (c *ClientWithResponses) PatchConsoleV1TargetAppIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppIdResponse, error) {
	rsp, err := c.PatchConsoleV1TargetAppIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1TargetAppIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1TargetAppIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1TargetAppIdParams, body PatchConsoleV1TargetAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1TargetAppIdResponse, error) {
	rsp, err := c.PatchConsoleV1TargetAppId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1TargetAppIdResponse(rsp)
}

// GetConsoleV1UsersWithResponse request returning *GetConsoleV1UsersResponse
func (c *ClientWithResponses) GetConsoleV1UsersWithResponse(ctx context.Context, params *GetConsoleV1UsersParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersResponse, error) {
	rsp, err := c.GetConsoleV1Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1UsersResponse(rsp)
}

// PostConsoleV1UsersInviteWithBodyWithResponse request with arbitrary body returning *PostConsoleV1UsersInviteResponse
func (c *ClientWithResponses) PostConsoleV1UsersInviteWithBodyWithResponse(ctx context.Context, params *PostConsoleV1UsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersInviteResponse, error) {
	rsp, err := c.PostConsoleV1UsersInviteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1UsersInviteResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1UsersInviteWithResponse(ctx context.Context, params *PostConsoleV1UsersInviteParams, body PostConsoleV1UsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersInviteResponse, error) {
	rsp, err := c.PostConsoleV1UsersInvite(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1UsersInviteResponse(rsp)
}

// GetConsoleV1UsersTeamsWithResponse request returning *GetConsoleV1UsersTeamsResponse
func (c *ClientWithResponses) GetConsoleV1UsersTeamsWithResponse(ctx context.Context, params *GetConsoleV1UsersTeamsParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersTeamsResponse, error) {
	rsp, err := c.GetConsoleV1UsersTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1UsersTeamsResponse(rsp)
}

// PostConsoleV1UsersTeamsWithBodyWithResponse request with arbitrary body returning *PostConsoleV1UsersTeamsResponse
func (c *ClientWithResponses) PostConsoleV1UsersTeamsWithBodyWithResponse(ctx context.Context, params *PostConsoleV1UsersTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersTeamsResponse, error) {
	rsp, err := c.PostConsoleV1UsersTeamsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1UsersTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1UsersTeamsWithResponse(ctx context.Context, params *PostConsoleV1UsersTeamsParams, body PostConsoleV1UsersTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersTeamsResponse, error) {
	rsp, err := c.PostConsoleV1UsersTeams(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1UsersTeamsResponse(rsp)
}

// DeleteConsoleV1UsersTeamsIdWithResponse request returning *DeleteConsoleV1UsersTeamsIdResponse
func (c *ClientWithResponses) DeleteConsoleV1UsersTeamsIdWithResponse(ctx context.Context, id string, params *DeleteConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*DeleteConsoleV1UsersTeamsIdResponse, error) {
	rsp, err := c.DeleteConsoleV1UsersTeamsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConsoleV1UsersTeamsIdResponse(rsp)
}

// GetConsoleV1UsersTeamsIdWithResponse request returning *GetConsoleV1UsersTeamsIdResponse
func (c *ClientWithResponses) GetConsoleV1UsersTeamsIdWithResponse(ctx context.Context, id string, params *GetConsoleV1UsersTeamsIdParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersTeamsIdResponse, error) {
	rsp, err := c.GetConsoleV1UsersTeamsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1UsersTeamsIdResponse(rsp)
}

// PatchConsoleV1UsersTeamsIdWithBodyWithResponse request with arbitrary body returning *PatchConsoleV1UsersTeamsIdResponse
func (c *ClientWithResponses) PatchConsoleV1UsersTeamsIdWithBodyWithResponse(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConsoleV1UsersTeamsIdResponse, error) {
	rsp, err := c.PatchConsoleV1UsersTeamsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1UsersTeamsIdResponse(rsp)
}

func (c *ClientWithResponses) PatchConsoleV1UsersTeamsIdWithResponse(ctx context.Context, id string, params *PatchConsoleV1UsersTeamsIdParams, body PatchConsoleV1UsersTeamsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConsoleV1UsersTeamsIdResponse, error) {
	rsp, err := c.PatchConsoleV1UsersTeamsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConsoleV1UsersTeamsIdResponse(rsp)
}

// GetConsoleV1UsersEmailWithResponse request returning *GetConsoleV1UsersEmailResponse
func (c *ClientWithResponses) GetConsoleV1UsersEmailWithResponse(ctx context.Context, email string, params *GetConsoleV1UsersEmailParams, reqEditors ...RequestEditorFn) (*GetConsoleV1UsersEmailResponse, error) {
	rsp, err := c.GetConsoleV1UsersEmail(ctx, email, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConsoleV1UsersEmailResponse(rsp)
}

// PostConsoleV1UsersEmailWithBodyWithResponse request with arbitrary body returning *PostConsoleV1UsersEmailResponse
func (c *ClientWithResponses) PostConsoleV1UsersEmailWithBodyWithResponse(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersEmailResponse, error) {
	rsp, err := c.PostConsoleV1UsersEmailWithBody(ctx, email, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1UsersEmailResponse(rsp)
}

func (c *ClientWithResponses) PostConsoleV1UsersEmailWithResponse(ctx context.Context, email string, params *PostConsoleV1UsersEmailParams, body PostConsoleV1UsersEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConsoleV1UsersEmailResponse, error) {
	rsp, err := c.PostConsoleV1UsersEmail(ctx, email, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConsoleV1UsersEmailResponse(rsp)
}

// ParseGetConsoleV1AlertsResponse parses an HTTP response from a GetConsoleV1AlertsWithResponse call
func ParseGetConsoleV1AlertsResponse(rsp *http.Response) (*GetConsoleV1AlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1AlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []AlertSchemaDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message GetConsoleV1Alerts403Message `json:"message"`
			Status  GetConsoleV1Alerts403Status  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1AuditLogsResponse parses an HTTP response from a GetConsoleV1AuditLogsWithResponse call
func ParseGetConsoleV1AuditLogsResponse(rsp *http.Response) (*GetConsoleV1AuditLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1AuditLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []AuditLogDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1AutotunesResponse parses an HTTP response from a GetConsoleV1AutotunesWithResponse call
func ParseGetConsoleV1AutotunesResponse(rsp *http.Response) (*GetConsoleV1AutotunesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1AutotunesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []AutotuneExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1AutotunesResponse parses an HTTP response from a PostConsoleV1AutotunesWithResponse call
func ParsePostConsoleV1AutotunesResponse(rsp *http.Response) (*PostConsoleV1AutotunesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1AutotunesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data AutotuneExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                          `json:"message"`
			Status  PostConsoleV1Autotunes400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                          `json:"message"`
			Status  PostConsoleV1Autotunes401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1AutotunesIdResponse parses an HTTP response from a DeleteConsoleV1AutotunesIdWithResponse call
func ParseDeleteConsoleV1AutotunesIdResponse(rsp *http.Response) (*DeleteConsoleV1AutotunesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1AutotunesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                              `json:"message"`
			Status  DeleteConsoleV1AutotunesId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                              `json:"message"`
			Status  DeleteConsoleV1AutotunesId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1AutotunesIdResponse parses an HTTP response from a GetConsoleV1AutotunesIdWithResponse call
func ParseGetConsoleV1AutotunesIdResponse(rsp *http.Response) (*GetConsoleV1AutotunesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1AutotunesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data AutotuneExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  GetConsoleV1AutotunesId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                           `json:"message"`
			Status  GetConsoleV1AutotunesId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1AutotunesIdResponse parses an HTTP response from a PatchConsoleV1AutotunesIdWithResponse call
func ParsePatchConsoleV1AutotunesIdResponse(rsp *http.Response) (*PatchConsoleV1AutotunesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1AutotunesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data AutotuneExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                             `json:"message"`
			Status  PatchConsoleV1AutotunesId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                             `json:"message"`
			Status  PatchConsoleV1AutotunesId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                             `json:"message"`
			Status  PatchConsoleV1AutotunesId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1AutotunesIdResponse parses an HTTP response from a PostConsoleV1AutotunesIdWithResponse call
func ParsePostConsoleV1AutotunesIdResponse(rsp *http.Response) (*PostConsoleV1AutotunesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1AutotunesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data AutotuneExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                            `json:"message"`
			Status  PostConsoleV1AutotunesId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                            `json:"message"`
			Status  PostConsoleV1AutotunesId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1AutotunesIdMakeDecisionResponse parses an HTTP response from a PutConsoleV1AutotunesIdMakeDecisionWithResponse call
func ParsePutConsoleV1AutotunesIdMakeDecisionResponse(rsp *http.Response) (*PutConsoleV1AutotunesIdMakeDecisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1AutotunesIdMakeDecisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                       `json:"message"`
			Status  PutConsoleV1AutotunesIdMakeDecision400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                       `json:"message"`
			Status  PutConsoleV1AutotunesIdMakeDecision401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                       `json:"message"`
			Status  PutConsoleV1AutotunesIdMakeDecision404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1AutotunesIdResetResponse parses an HTTP response from a PutConsoleV1AutotunesIdResetWithResponse call
func ParsePutConsoleV1AutotunesIdResetResponse(rsp *http.Response) (*PutConsoleV1AutotunesIdResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1AutotunesIdResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                `json:"message"`
			Status  PutConsoleV1AutotunesIdReset400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                `json:"message"`
			Status  PutConsoleV1AutotunesIdReset401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                `json:"message"`
			Status  PutConsoleV1AutotunesIdReset404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1AutotunesIdStartResponse parses an HTTP response from a PutConsoleV1AutotunesIdStartWithResponse call
func ParsePutConsoleV1AutotunesIdStartResponse(rsp *http.Response) (*PutConsoleV1AutotunesIdStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1AutotunesIdStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1CompanyResponse parses an HTTP response from a GetConsoleV1CompanyWithResponse call
func ParseGetConsoleV1CompanyResponse(rsp *http.Response) (*GetConsoleV1CompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1CompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data CompanyInfoResponseDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message GetConsoleV1Company403Message `json:"message"`
			Status  GetConsoleV1Company403Status  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1DynamicConfigsResponse parses an HTTP response from a GetConsoleV1DynamicConfigsWithResponse call
func ParseGetConsoleV1DynamicConfigsResponse(rsp *http.Response) (*GetConsoleV1DynamicConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1DynamicConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                              `json:"message"`
			Status  GetConsoleV1DynamicConfigs404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1DynamicConfigsResponse parses an HTTP response from a PostConsoleV1DynamicConfigsWithResponse call
func ParsePostConsoleV1DynamicConfigsResponse(rsp *http.Response) (*PostConsoleV1DynamicConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1DynamicConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                               `json:"message"`
			Status  PostConsoleV1DynamicConfigs400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                               `json:"message"`
			Status  PostConsoleV1DynamicConfigs401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                               `json:"message"`
			Status  PostConsoleV1DynamicConfigs403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1DynamicConfigsIdResponse parses an HTTP response from a DeleteConsoleV1DynamicConfigsIdWithResponse call
func ParseDeleteConsoleV1DynamicConfigsIdResponse(rsp *http.Response) (*DeleteConsoleV1DynamicConfigsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1DynamicConfigsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                   `json:"message"`
			Status  DeleteConsoleV1DynamicConfigsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                   `json:"message"`
			Status  DeleteConsoleV1DynamicConfigsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1DynamicConfigsIdResponse parses an HTTP response from a GetConsoleV1DynamicConfigsIdWithResponse call
func ParseGetConsoleV1DynamicConfigsIdResponse(rsp *http.Response) (*GetConsoleV1DynamicConfigsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1DynamicConfigsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                `json:"message"`
			Status  GetConsoleV1DynamicConfigsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                `json:"message"`
			Status  GetConsoleV1DynamicConfigsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1DynamicConfigsIdResponse parses an HTTP response from a PatchConsoleV1DynamicConfigsIdWithResponse call
func ParsePatchConsoleV1DynamicConfigsIdResponse(rsp *http.Response) (*PatchConsoleV1DynamicConfigsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1DynamicConfigsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PatchConsoleV1DynamicConfigsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PatchConsoleV1DynamicConfigsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1DynamicConfigsIdResponse parses an HTTP response from a PostConsoleV1DynamicConfigsIdWithResponse call
func ParsePostConsoleV1DynamicConfigsIdResponse(rsp *http.Response) (*PostConsoleV1DynamicConfigsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1DynamicConfigsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                 `json:"message"`
			Status  PostConsoleV1DynamicConfigsId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                 `json:"message"`
			Status  PostConsoleV1DynamicConfigsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                                 `json:"message"`
			Status  PostConsoleV1DynamicConfigsId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1DynamicConfigsIdDisableResponse parses an HTTP response from a PutConsoleV1DynamicConfigsIdDisableWithResponse call
func ParsePutConsoleV1DynamicConfigsIdDisableResponse(rsp *http.Response) (*PutConsoleV1DynamicConfigsIdDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1DynamicConfigsIdDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1DynamicConfigsIdEnableResponse parses an HTTP response from a PutConsoleV1DynamicConfigsIdEnableWithResponse call
func ParsePutConsoleV1DynamicConfigsIdEnableResponse(rsp *http.Response) (*PutConsoleV1DynamicConfigsIdEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1DynamicConfigsIdEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1DynamicConfigsIdRuleResponse parses an HTTP response from a PostConsoleV1DynamicConfigsIdRuleWithResponse call
func ParsePostConsoleV1DynamicConfigsIdRuleResponse(rsp *http.Response) (*PostConsoleV1DynamicConfigsIdRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1DynamicConfigsIdRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse parses an HTTP response from a DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse call
func ParseDeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse(rsp *http.Response) (*DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1DynamicConfigsIdRuleNameRuleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse parses an HTTP response from a PatchConsoleV1DynamicConfigsIdRuleNameRuleNameWithResponse call
func ParsePatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse(rsp *http.Response) (*PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1DynamicConfigsIdRuleNameRuleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse parses an HTTP response from a DeleteConsoleV1DynamicConfigsIdRuleRuleIdWithResponse call
func ParseDeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse(rsp *http.Response) (*DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1DynamicConfigsIdRuleRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1DynamicConfigsIdRuleRuleIdResponse parses an HTTP response from a GetConsoleV1DynamicConfigsIdRuleRuleIdWithResponse call
func ParseGetConsoleV1DynamicConfigsIdRuleRuleIdResponse(rsp *http.Response) (*GetConsoleV1DynamicConfigsIdRuleRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1DynamicConfigsIdRuleRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigRuleDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1DynamicConfigsIdRuleRuleIdResponse parses an HTTP response from a PatchConsoleV1DynamicConfigsIdRuleRuleIdWithResponse call
func ParsePatchConsoleV1DynamicConfigsIdRuleRuleIdResponse(rsp *http.Response) (*PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1DynamicConfigsIdRuleRuleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1DynamicConfigsIdRulesResponse parses an HTTP response from a GetConsoleV1DynamicConfigsIdRulesWithResponse call
func ParseGetConsoleV1DynamicConfigsIdRulesResponse(rsp *http.Response) (*GetConsoleV1DynamicConfigsIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1DynamicConfigsIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []DynamicConfigRulesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1DynamicConfigsIdRulesResponse parses an HTTP response from a PatchConsoleV1DynamicConfigsIdRulesWithResponse call
func ParsePatchConsoleV1DynamicConfigsIdRulesResponse(rsp *http.Response) (*PatchConsoleV1DynamicConfigsIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1DynamicConfigsIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1DynamicConfigsIdRulesResponse parses an HTTP response from a PostConsoleV1DynamicConfigsIdRulesWithResponse call
func ParsePostConsoleV1DynamicConfigsIdRulesResponse(rsp *http.Response) (*PostConsoleV1DynamicConfigsIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1DynamicConfigsIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1DynamicConfigsIdVersionsResponse parses an HTTP response from a GetConsoleV1DynamicConfigsIdVersionsWithResponse call
func ParseGetConsoleV1DynamicConfigsIdVersionsResponse(rsp *http.Response) (*GetConsoleV1DynamicConfigsIdVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1DynamicConfigsIdVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []DynamicConfigDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                        `json:"message"`
			Status  GetConsoleV1DynamicConfigsIdVersions404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1EventsResponse parses an HTTP response from a GetConsoleV1EventsWithResponse call
func ParseGetConsoleV1EventsResponse(rsp *http.Response) (*GetConsoleV1EventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1EventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []LoggedEventDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                      `json:"message"`
			Status  GetConsoleV1Events400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                      `json:"message"`
			Status  GetConsoleV1Events401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1EventsEventNameResponse parses an HTTP response from a GetConsoleV1EventsEventNameWithResponse call
func ParseGetConsoleV1EventsEventNameResponse(rsp *http.Response) (*GetConsoleV1EventsEventNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1EventsEventNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []LoggedEventDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                               `json:"message"`
			Status  GetConsoleV1EventsEventName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                               `json:"message"`
			Status  GetConsoleV1EventsEventName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1EventsEventNameMetricsResponse parses an HTTP response from a GetConsoleV1EventsEventNameMetricsWithResponse call
func ParseGetConsoleV1EventsEventNameMetricsResponse(rsp *http.Response) (*GetConsoleV1EventsEventNameMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1EventsEventNameMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalMetricDefinitionContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                      `json:"message"`
			Status  GetConsoleV1EventsEventNameMetrics400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                      `json:"message"`
			Status  GetConsoleV1EventsEventNameMetrics401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsResponse parses an HTTP response from a GetConsoleV1ExperimentsWithResponse call
func ParseGetConsoleV1ExperimentsResponse(rsp *http.Response) (*GetConsoleV1ExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  GetConsoleV1Experiments401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsResponse parses an HTTP response from a PostConsoleV1ExperimentsWithResponse call
func ParsePostConsoleV1ExperimentsResponse(rsp *http.Response) (*PostConsoleV1ExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                            `json:"message"`
			Status  PostConsoleV1Experiments400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                            `json:"message"`
			Status  PostConsoleV1Experiments401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1ExperimentsAssignmentSourceNameResponse parses an HTTP response from a DeleteConsoleV1ExperimentsAssignmentSourceNameWithResponse call
func ParseDeleteConsoleV1ExperimentsAssignmentSourceNameResponse(rsp *http.Response) (*DeleteConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1ExperimentsAssignmentSourceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1ExperimentsAssignmentSourceNameResponse parses an HTTP response from a PatchConsoleV1ExperimentsAssignmentSourceNameWithResponse call
func ParsePatchConsoleV1ExperimentsAssignmentSourceNameResponse(rsp *http.Response) (*PatchConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1ExperimentsAssignmentSourceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data AssignmentSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                                 `json:"message"`
			Status  PatchConsoleV1ExperimentsAssignmentSourceName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                                 `json:"message"`
			Status  PatchConsoleV1ExperimentsAssignmentSourceName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                                 `json:"message"`
			Status  PatchConsoleV1ExperimentsAssignmentSourceName404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsAssignmentSourceNameResponse parses an HTTP response from a PostConsoleV1ExperimentsAssignmentSourceNameWithResponse call
func ParsePostConsoleV1ExperimentsAssignmentSourceNameResponse(rsp *http.Response) (*PostConsoleV1ExperimentsAssignmentSourceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsAssignmentSourceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data AssignmentSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                                `json:"message"`
			Status  PostConsoleV1ExperimentsAssignmentSourceName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                                `json:"message"`
			Status  PostConsoleV1ExperimentsAssignmentSourceName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                                `json:"message"`
			Status  PostConsoleV1ExperimentsAssignmentSourceName404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsAssignmentSourcesResponse parses an HTTP response from a GetConsoleV1ExperimentsAssignmentSourcesWithResponse call
func ParseGetConsoleV1ExperimentsAssignmentSourcesResponse(rsp *http.Response) (*GetConsoleV1ExperimentsAssignmentSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsAssignmentSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []AssignmentSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                            `json:"message"`
			Status  GetConsoleV1ExperimentsAssignmentSources400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                            `json:"message"`
			Status  GetConsoleV1ExperimentsAssignmentSources401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsAssignmentSourcesResponse parses an HTTP response from a PostConsoleV1ExperimentsAssignmentSourcesWithResponse call
func ParsePostConsoleV1ExperimentsAssignmentSourcesResponse(rsp *http.Response) (*PostConsoleV1ExperimentsAssignmentSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsAssignmentSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data AssignmentSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                             `json:"message"`
			Status  PostConsoleV1ExperimentsAssignmentSources400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                             `json:"message"`
			Status  PostConsoleV1ExperimentsAssignmentSources401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsEntityPropertiesResponse parses an HTTP response from a GetConsoleV1ExperimentsEntityPropertiesWithResponse call
func ParseGetConsoleV1ExperimentsEntityPropertiesResponse(rsp *http.Response) (*GetConsoleV1ExperimentsEntityPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsEntityPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []EntityPropertySourceDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                           `json:"message"`
			Status  GetConsoleV1ExperimentsEntityProperties400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                           `json:"message"`
			Status  GetConsoleV1ExperimentsEntityProperties401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsEntityPropertiesResponse parses an HTTP response from a PostConsoleV1ExperimentsEntityPropertiesWithResponse call
func ParsePostConsoleV1ExperimentsEntityPropertiesResponse(rsp *http.Response) (*PostConsoleV1ExperimentsEntityPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsEntityPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data EntityPropertySourceDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                            `json:"message"`
			Status  PostConsoleV1ExperimentsEntityProperties400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                            `json:"message"`
			Status  PostConsoleV1ExperimentsEntityProperties401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                            `json:"message"`
			Status  PostConsoleV1ExperimentsEntityProperties404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1ExperimentsEntityPropertyNameResponse parses an HTTP response from a DeleteConsoleV1ExperimentsEntityPropertyNameWithResponse call
func ParseDeleteConsoleV1ExperimentsEntityPropertyNameResponse(rsp *http.Response) (*DeleteConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1ExperimentsEntityPropertyNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                                `json:"message"`
			Status  DeleteConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                                `json:"message"`
			Status  DeleteConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                                `json:"message"`
			Status  DeleteConsoleV1ExperimentsEntityPropertyName404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsEntityPropertyNameResponse parses an HTTP response from a GetConsoleV1ExperimentsEntityPropertyNameWithResponse call
func ParseGetConsoleV1ExperimentsEntityPropertyNameResponse(rsp *http.Response) (*GetConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsEntityPropertyNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data EntityPropertySourceDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                             `json:"message"`
			Status  GetConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                             `json:"message"`
			Status  GetConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1ExperimentsEntityPropertyNameResponse parses an HTTP response from a PatchConsoleV1ExperimentsEntityPropertyNameWithResponse call
func ParsePatchConsoleV1ExperimentsEntityPropertyNameResponse(rsp *http.Response) (*PatchConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1ExperimentsEntityPropertyNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data EntityPropertySourceDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                               `json:"message"`
			Status  PatchConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                               `json:"message"`
			Status  PatchConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                               `json:"message"`
			Status  PatchConsoleV1ExperimentsEntityPropertyName404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsEntityPropertyNameResponse parses an HTTP response from a PostConsoleV1ExperimentsEntityPropertyNameWithResponse call
func ParsePostConsoleV1ExperimentsEntityPropertyNameResponse(rsp *http.Response) (*PostConsoleV1ExperimentsEntityPropertyNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsEntityPropertyNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data EntityPropertySourceDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                              `json:"message"`
			Status  PostConsoleV1ExperimentsEntityPropertyName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                              `json:"message"`
			Status  PostConsoleV1ExperimentsEntityPropertyName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                              `json:"message"`
			Status  PostConsoleV1ExperimentsEntityPropertyName404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1ExperimentsIdResponse parses an HTTP response from a DeleteConsoleV1ExperimentsIdWithResponse call
func ParseDeleteConsoleV1ExperimentsIdResponse(rsp *http.Response) (*DeleteConsoleV1ExperimentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1ExperimentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                `json:"message"`
			Status  DeleteConsoleV1ExperimentsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                `json:"message"`
			Status  DeleteConsoleV1ExperimentsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsIdResponse parses an HTTP response from a GetConsoleV1ExperimentsIdWithResponse call
func ParseGetConsoleV1ExperimentsIdResponse(rsp *http.Response) (*GetConsoleV1ExperimentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                             `json:"message"`
			Status  GetConsoleV1ExperimentsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                             `json:"message"`
			Status  GetConsoleV1ExperimentsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1ExperimentsIdResponse parses an HTTP response from a PatchConsoleV1ExperimentsIdWithResponse call
func ParsePatchConsoleV1ExperimentsIdResponse(rsp *http.Response) (*PatchConsoleV1ExperimentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1ExperimentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                               `json:"message"`
			Status  PatchConsoleV1ExperimentsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                               `json:"message"`
			Status  PatchConsoleV1ExperimentsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsIdResponse parses an HTTP response from a PostConsoleV1ExperimentsIdWithResponse call
func ParsePostConsoleV1ExperimentsIdResponse(rsp *http.Response) (*PostConsoleV1ExperimentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                              `json:"message"`
			Status  PostConsoleV1ExperimentsId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                              `json:"message"`
			Status  PostConsoleV1ExperimentsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1ExperimentsIdAbandonResponse parses an HTTP response from a PutConsoleV1ExperimentsIdAbandonWithResponse call
func ParsePutConsoleV1ExperimentsIdAbandonResponse(rsp *http.Response) (*PutConsoleV1ExperimentsIdAbandonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1ExperimentsIdAbandonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PutConsoleV1ExperimentsIdAbandon400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PutConsoleV1ExperimentsIdAbandon401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PutConsoleV1ExperimentsIdAbandon404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1ExperimentsIdArchiveResponse parses an HTTP response from a PutConsoleV1ExperimentsIdArchiveWithResponse call
func ParsePutConsoleV1ExperimentsIdArchiveResponse(rsp *http.Response) (*PutConsoleV1ExperimentsIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1ExperimentsIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PutConsoleV1ExperimentsIdArchive401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PutConsoleV1ExperimentsIdArchive404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsIdCumulativeExposuresResponse parses an HTTP response from a GetConsoleV1ExperimentsIdCumulativeExposuresWithResponse call
func ParseGetConsoleV1ExperimentsIdCumulativeExposuresResponse(rsp *http.Response) (*GetConsoleV1ExperimentsIdCumulativeExposuresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsIdCumulativeExposuresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data CumulativeExposureResponseDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsIdDisableGroupsResponse parses an HTTP response from a PostConsoleV1ExperimentsIdDisableGroupsWithResponse call
func ParsePostConsoleV1ExperimentsIdDisableGroupsResponse(rsp *http.Response) (*PostConsoleV1ExperimentsIdDisableGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsIdDisableGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                           `json:"message"`
			Status  PostConsoleV1ExperimentsIdDisableGroups400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                           `json:"message"`
			Status  PostConsoleV1ExperimentsIdDisableGroups401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                           `json:"message"`
			Status  PostConsoleV1ExperimentsIdDisableGroups404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsIdEnableGroupsResponse parses an HTTP response from a PostConsoleV1ExperimentsIdEnableGroupsWithResponse call
func ParsePostConsoleV1ExperimentsIdEnableGroupsResponse(rsp *http.Response) (*PostConsoleV1ExperimentsIdEnableGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsIdEnableGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                          `json:"message"`
			Status  PostConsoleV1ExperimentsIdEnableGroups400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                          `json:"message"`
			Status  PostConsoleV1ExperimentsIdEnableGroups401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                          `json:"message"`
			Status  PostConsoleV1ExperimentsIdEnableGroups404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsIdLoadPulseResponse parses an HTTP response from a PostConsoleV1ExperimentsIdLoadPulseWithResponse call
func ParsePostConsoleV1ExperimentsIdLoadPulseResponse(rsp *http.Response) (*PostConsoleV1ExperimentsIdLoadPulseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsIdLoadPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                       `json:"message"`
			Status  PostConsoleV1ExperimentsIdLoadPulse400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                       `json:"message"`
			Status  PostConsoleV1ExperimentsIdLoadPulse401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1ExperimentsIdMakeDecisionResponse parses an HTTP response from a PutConsoleV1ExperimentsIdMakeDecisionWithResponse call
func ParsePutConsoleV1ExperimentsIdMakeDecisionResponse(rsp *http.Response) (*PutConsoleV1ExperimentsIdMakeDecisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1ExperimentsIdMakeDecisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                         `json:"message"`
			Status  PutConsoleV1ExperimentsIdMakeDecision400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                         `json:"message"`
			Status  PutConsoleV1ExperimentsIdMakeDecision401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                         `json:"message"`
			Status  PutConsoleV1ExperimentsIdMakeDecision404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1ExperimentsIdOverridesResponse parses an HTTP response from a DeleteConsoleV1ExperimentsIdOverridesWithResponse call
func ParseDeleteConsoleV1ExperimentsIdOverridesResponse(rsp *http.Response) (*DeleteConsoleV1ExperimentsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1ExperimentsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExperimentOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                         `json:"message"`
			Status  DeleteConsoleV1ExperimentsIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                         `json:"message"`
			Status  DeleteConsoleV1ExperimentsIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsIdOverridesResponse parses an HTTP response from a GetConsoleV1ExperimentsIdOverridesWithResponse call
func ParseGetConsoleV1ExperimentsIdOverridesResponse(rsp *http.Response) (*GetConsoleV1ExperimentsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExperimentOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                      `json:"message"`
			Status  GetConsoleV1ExperimentsIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                      `json:"message"`
			Status  GetConsoleV1ExperimentsIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1ExperimentsIdOverridesResponse parses an HTTP response from a PatchConsoleV1ExperimentsIdOverridesWithResponse call
func ParsePatchConsoleV1ExperimentsIdOverridesResponse(rsp *http.Response) (*PatchConsoleV1ExperimentsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1ExperimentsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExperimentOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                        `json:"message"`
			Status  PatchConsoleV1ExperimentsIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                        `json:"message"`
			Status  PatchConsoleV1ExperimentsIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1ExperimentsIdOverridesResponse parses an HTTP response from a PostConsoleV1ExperimentsIdOverridesWithResponse call
func ParsePostConsoleV1ExperimentsIdOverridesResponse(rsp *http.Response) (*PostConsoleV1ExperimentsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1ExperimentsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExperimentOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                       `json:"message"`
			Status  PostConsoleV1ExperimentsIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                       `json:"message"`
			Status  PostConsoleV1ExperimentsIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsIdPulseLoadHistoryResponse parses an HTTP response from a GetConsoleV1ExperimentsIdPulseLoadHistoryWithResponse call
func ParseGetConsoleV1ExperimentsIdPulseLoadHistoryResponse(rsp *http.Response) (*GetConsoleV1ExperimentsIdPulseLoadHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsIdPulseLoadHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []PulseLoadHistoryDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                             `json:"message"`
			Status  GetConsoleV1ExperimentsIdPulseLoadHistory400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                             `json:"message"`
			Status  GetConsoleV1ExperimentsIdPulseLoadHistory401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExperimentsIdPulseResultsResponse parses an HTTP response from a GetConsoleV1ExperimentsIdPulseResultsWithResponse call
func ParseGetConsoleV1ExperimentsIdPulseResultsResponse(rsp *http.Response) (*GetConsoleV1ExperimentsIdPulseResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExperimentsIdPulseResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExperimentPulseResultsDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1ExperimentsIdResetResponse parses an HTTP response from a PutConsoleV1ExperimentsIdResetWithResponse call
func ParsePutConsoleV1ExperimentsIdResetResponse(rsp *http.Response) (*PutConsoleV1ExperimentsIdResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1ExperimentsIdResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1ExperimentsIdReset400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1ExperimentsIdReset401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1ExperimentsIdReset404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1ExperimentsIdStartResponse parses an HTTP response from a PutConsoleV1ExperimentsIdStartWithResponse call
func ParsePutConsoleV1ExperimentsIdStartResponse(rsp *http.Response) (*PutConsoleV1ExperimentsIdStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1ExperimentsIdStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1ExperimentsIdStart400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1ExperimentsIdStart401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1ExperimentsIdStart404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1ExperimentsIdUnarchiveResponse parses an HTTP response from a PutConsoleV1ExperimentsIdUnarchiveWithResponse call
func ParsePutConsoleV1ExperimentsIdUnarchiveResponse(rsp *http.Response) (*PutConsoleV1ExperimentsIdUnarchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1ExperimentsIdUnarchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                      `json:"message"`
			Status  PutConsoleV1ExperimentsIdUnarchive401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                      `json:"message"`
			Status  PutConsoleV1ExperimentsIdUnarchive404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ExposureCountResponse parses an HTTP response from a GetConsoleV1ExposureCountWithResponse call
func ParseGetConsoleV1ExposureCountResponse(rsp *http.Response) (*GetConsoleV1ExposureCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ExposureCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExposureCountDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                             `json:"message"`
			Status  GetConsoleV1ExposureCount400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                             `json:"message"`
			Status  GetConsoleV1ExposureCount401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1GatesResponse parses an HTTP response from a GetConsoleV1GatesWithResponse call
func ParseGetConsoleV1GatesResponse(rsp *http.Response) (*GetConsoleV1GatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1GatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message GetConsoleV1Gates403Message `json:"message"`
			Status  GetConsoleV1Gates403Status  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1GatesResponse parses an HTTP response from a PostConsoleV1GatesWithResponse call
func ParsePostConsoleV1GatesResponse(rsp *http.Response) (*PostConsoleV1GatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1GatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1GatesIdResponse parses an HTTP response from a DeleteConsoleV1GatesIdWithResponse call
func ParseDeleteConsoleV1GatesIdResponse(rsp *http.Response) (*DeleteConsoleV1GatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1GatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1GatesIdResponse parses an HTTP response from a GetConsoleV1GatesIdWithResponse call
func ParseGetConsoleV1GatesIdResponse(rsp *http.Response) (*GetConsoleV1GatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1GatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1GatesIdResponse parses an HTTP response from a PatchConsoleV1GatesIdWithResponse call
func ParsePatchConsoleV1GatesIdResponse(rsp *http.Response) (*PatchConsoleV1GatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1GatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1GatesIdResponse parses an HTTP response from a PostConsoleV1GatesIdWithResponse call
func ParsePostConsoleV1GatesIdResponse(rsp *http.Response) (*PostConsoleV1GatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1GatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1GatesIdArchiveResponse parses an HTTP response from a PutConsoleV1GatesIdArchiveWithResponse call
func ParsePutConsoleV1GatesIdArchiveResponse(rsp *http.Response) (*PutConsoleV1GatesIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1GatesIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1GatesIdDisableResponse parses an HTTP response from a PutConsoleV1GatesIdDisableWithResponse call
func ParsePutConsoleV1GatesIdDisableResponse(rsp *http.Response) (*PutConsoleV1GatesIdDisableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1GatesIdDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1GatesIdEnableResponse parses an HTTP response from a PutConsoleV1GatesIdEnableWithResponse call
func ParsePutConsoleV1GatesIdEnableResponse(rsp *http.Response) (*PutConsoleV1GatesIdEnableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1GatesIdEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1GatesIdLaunchResponse parses an HTTP response from a PutConsoleV1GatesIdLaunchWithResponse call
func ParsePutConsoleV1GatesIdLaunchResponse(rsp *http.Response) (*PutConsoleV1GatesIdLaunchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1GatesIdLaunchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1GatesIdLoadPulseResponse parses an HTTP response from a PostConsoleV1GatesIdLoadPulseWithResponse call
func ParsePostConsoleV1GatesIdLoadPulseResponse(rsp *http.Response) (*PostConsoleV1GatesIdLoadPulseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1GatesIdLoadPulseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1GatesIdOverridesResponse parses an HTTP response from a DeleteConsoleV1GatesIdOverridesWithResponse call
func ParseDeleteConsoleV1GatesIdOverridesResponse(rsp *http.Response) (*DeleteConsoleV1GatesIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1GatesIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1GatesIdOverridesResponse parses an HTTP response from a GetConsoleV1GatesIdOverridesWithResponse call
func ParseGetConsoleV1GatesIdOverridesResponse(rsp *http.Response) (*GetConsoleV1GatesIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1GatesIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1GatesIdOverridesResponse parses an HTTP response from a PatchConsoleV1GatesIdOverridesWithResponse call
func ParsePatchConsoleV1GatesIdOverridesResponse(rsp *http.Response) (*PatchConsoleV1GatesIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1GatesIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1GatesIdOverridesResponse parses an HTTP response from a PostConsoleV1GatesIdOverridesWithResponse call
func ParsePostConsoleV1GatesIdOverridesResponse(rsp *http.Response) (*PostConsoleV1GatesIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1GatesIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1GatesIdRuleResponse parses an HTTP response from a PostConsoleV1GatesIdRuleWithResponse call
func ParsePostConsoleV1GatesIdRuleResponse(rsp *http.Response) (*PostConsoleV1GatesIdRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1GatesIdRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1GatesIdRulesResponse parses an HTTP response from a GetConsoleV1GatesIdRulesWithResponse call
func ParseGetConsoleV1GatesIdRulesResponse(rsp *http.Response) (*GetConsoleV1GatesIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1GatesIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []GateRulesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1GatesIdRulesResponse parses an HTTP response from a PatchConsoleV1GatesIdRulesWithResponse call
func ParsePatchConsoleV1GatesIdRulesResponse(rsp *http.Response) (*PatchConsoleV1GatesIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1GatesIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1GatesIdRulesResponse parses an HTTP response from a PostConsoleV1GatesIdRulesWithResponse call
func ParsePostConsoleV1GatesIdRulesResponse(rsp *http.Response) (*PostConsoleV1GatesIdRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1GatesIdRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1GatesIdRulesRuleIDResponse parses an HTTP response from a DeleteConsoleV1GatesIdRulesRuleIDWithResponse call
func ParseDeleteConsoleV1GatesIdRulesRuleIDResponse(rsp *http.Response) (*DeleteConsoleV1GatesIdRulesRuleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1GatesIdRulesRuleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1GatesIdRulesRuleIDResponse parses an HTTP response from a PatchConsoleV1GatesIdRulesRuleIDWithResponse call
func ParsePatchConsoleV1GatesIdRulesRuleIDResponse(rsp *http.Response) (*PatchConsoleV1GatesIdRulesRuleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1GatesIdRulesRuleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse parses an HTTP response from a GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryWithResponse call
func ParseGetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse(rsp *http.Response) (*GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1GatesIdRulesRuleIDPulseLoadHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []PulseLoadHistoryDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1GatesIdRulesRuleIDPulseResultsResponse parses an HTTP response from a GetConsoleV1GatesIdRulesRuleIDPulseResultsWithResponse call
func ParseGetConsoleV1GatesIdRulesRuleIDPulseResultsResponse(rsp *http.Response) (*GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1GatesIdRulesRuleIDPulseResultsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data GatePulseResultsDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1GatesIdVersionsResponse parses an HTTP response from a GetConsoleV1GatesIdVersionsWithResponse call
func ParseGetConsoleV1GatesIdVersionsResponse(rsp *http.Response) (*GetConsoleV1GatesIdVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1GatesIdVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalGateDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                               `json:"message"`
			Status  GetConsoleV1GatesIdVersions404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1HoldoutsResponse parses an HTTP response from a GetConsoleV1HoldoutsWithResponse call
func ParseGetConsoleV1HoldoutsResponse(rsp *http.Response) (*GetConsoleV1HoldoutsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1HoldoutsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []HoldoutDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                        `json:"message"`
			Status  GetConsoleV1Holdouts401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1HoldoutsResponse parses an HTTP response from a PostConsoleV1HoldoutsWithResponse call
func ParsePostConsoleV1HoldoutsResponse(rsp *http.Response) (*PostConsoleV1HoldoutsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1HoldoutsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data HoldoutDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                         `json:"message"`
			Status  PostConsoleV1Holdouts400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                         `json:"message"`
			Status  PostConsoleV1Holdouts401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                         `json:"message"`
			Status  PostConsoleV1Holdouts404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1HoldoutsIdResponse parses an HTTP response from a DeleteConsoleV1HoldoutsIdWithResponse call
func ParseDeleteConsoleV1HoldoutsIdResponse(rsp *http.Response) (*DeleteConsoleV1HoldoutsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1HoldoutsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data HoldoutDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                             `json:"message"`
			Status  DeleteConsoleV1HoldoutsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                             `json:"message"`
			Status  DeleteConsoleV1HoldoutsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1HoldoutsIdResponse parses an HTTP response from a GetConsoleV1HoldoutsIdWithResponse call
func ParseGetConsoleV1HoldoutsIdResponse(rsp *http.Response) (*GetConsoleV1HoldoutsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1HoldoutsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data HoldoutDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1HoldoutsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1HoldoutsIdResponse parses an HTTP response from a PatchConsoleV1HoldoutsIdWithResponse call
func ParsePatchConsoleV1HoldoutsIdResponse(rsp *http.Response) (*PatchConsoleV1HoldoutsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1HoldoutsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data HoldoutDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                            `json:"message"`
			Status  PatchConsoleV1HoldoutsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                            `json:"message"`
			Status  PatchConsoleV1HoldoutsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1HoldoutsIdResponse parses an HTTP response from a PostConsoleV1HoldoutsIdWithResponse call
func ParsePostConsoleV1HoldoutsIdResponse(rsp *http.Response) (*PostConsoleV1HoldoutsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1HoldoutsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data HoldoutDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1HoldoutsId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1HoldoutsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1HoldoutsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1HoldoutsIdOverridesResponse parses an HTTP response from a DeleteConsoleV1HoldoutsIdOverridesWithResponse call
func ParseDeleteConsoleV1HoldoutsIdOverridesResponse(rsp *http.Response) (*DeleteConsoleV1HoldoutsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1HoldoutsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                      `json:"message"`
			Status  DeleteConsoleV1HoldoutsIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                      `json:"message"`
			Status  DeleteConsoleV1HoldoutsIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1HoldoutsIdOverridesResponse parses an HTTP response from a GetConsoleV1HoldoutsIdOverridesWithResponse call
func ParseGetConsoleV1HoldoutsIdOverridesResponse(rsp *http.Response) (*GetConsoleV1HoldoutsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1HoldoutsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                   `json:"message"`
			Status  GetConsoleV1HoldoutsIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1HoldoutsIdOverridesResponse parses an HTTP response from a PatchConsoleV1HoldoutsIdOverridesWithResponse call
func ParsePatchConsoleV1HoldoutsIdOverridesResponse(rsp *http.Response) (*PatchConsoleV1HoldoutsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1HoldoutsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1HoldoutsIdOverridesResponse parses an HTTP response from a PostConsoleV1HoldoutsIdOverridesWithResponse call
func ParsePostConsoleV1HoldoutsIdOverridesResponse(rsp *http.Response) (*PostConsoleV1HoldoutsIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1HoldoutsIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Contract for overrides
			Data OverrideDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PostConsoleV1HoldoutsIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1IngestionResponse parses an HTTP response from a DeleteConsoleV1IngestionWithResponse call
func ParseDeleteConsoleV1IngestionResponse(rsp *http.Response) (*DeleteConsoleV1IngestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1IngestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1IngestionResponse parses an HTTP response from a GetConsoleV1IngestionWithResponse call
func ParseGetConsoleV1IngestionResponse(rsp *http.Response) (*GetConsoleV1IngestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1IngestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1IngestionResponse parses an HTTP response from a PatchConsoleV1IngestionWithResponse call
func ParsePatchConsoleV1IngestionResponse(rsp *http.Response) (*PatchConsoleV1IngestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1IngestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1IngestionResponse parses an HTTP response from a PostConsoleV1IngestionWithResponse call
func ParsePostConsoleV1IngestionResponse(rsp *http.Response) (*PostConsoleV1IngestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1IngestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1IngestionBackfillResponse parses an HTTP response from a PostConsoleV1IngestionBackfillWithResponse call
func ParsePostConsoleV1IngestionBackfillResponse(rsp *http.Response) (*PostConsoleV1IngestionBackfillResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1IngestionBackfillResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionBackfillDataDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PostConsoleV1IngestionBackfill400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1IngestionConnectionDatabricksResponse parses an HTTP response from a PostConsoleV1IngestionConnectionDatabricksWithResponse call
func ParsePostConsoleV1IngestionConnectionDatabricksResponse(rsp *http.Response) (*PostConsoleV1IngestionConnectionDatabricksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1IngestionConnectionDatabricksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1IngestionEventsCountResponse parses an HTTP response from a GetConsoleV1IngestionEventsCountWithResponse call
func ParseGetConsoleV1IngestionEventsCountResponse(rsp *http.Response) (*GetConsoleV1IngestionEventsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1IngestionEventsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionEventCountResponseDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1IngestionEventsDeltaResponse parses an HTTP response from a GetConsoleV1IngestionEventsDeltaWithResponse call
func ParseGetConsoleV1IngestionEventsDeltaResponse(rsp *http.Response) (*GetConsoleV1IngestionEventsDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1IngestionEventsDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionEventDeltaResponseDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1IngestionRunsResponse parses an HTTP response from a GetConsoleV1IngestionRunsWithResponse call
func ParseGetConsoleV1IngestionRunsResponse(rsp *http.Response) (*GetConsoleV1IngestionRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1IngestionRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []IngestionRunDataContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1IngestionRunsIdResponse parses an HTTP response from a GetConsoleV1IngestionRunsIdWithResponse call
func ParseGetConsoleV1IngestionRunsIdResponse(rsp *http.Response) (*GetConsoleV1IngestionRunsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1IngestionRunsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionRunDataContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                               `json:"message"`
			Status  GetConsoleV1IngestionRunsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                               `json:"message"`
			Status  GetConsoleV1IngestionRunsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1IngestionScheduleResponse parses an HTTP response from a GetConsoleV1IngestionScheduleWithResponse call
func ParseGetConsoleV1IngestionScheduleResponse(rsp *http.Response) (*GetConsoleV1IngestionScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1IngestionScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionScheduleDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1IngestionScheduleResponse parses an HTTP response from a PostConsoleV1IngestionScheduleWithResponse call
func ParsePostConsoleV1IngestionScheduleResponse(rsp *http.Response) (*PostConsoleV1IngestionScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1IngestionScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data IngestionScheduleDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1IngestionStatusResponse parses an HTTP response from a GetConsoleV1IngestionStatusWithResponse call
func ParseGetConsoleV1IngestionStatusResponse(rsp *http.Response) (*GetConsoleV1IngestionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1IngestionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []IngestionStatusDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                               `json:"message"`
			Status  GetConsoleV1IngestionStatus401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1KeysResponse parses an HTTP response from a GetConsoleV1KeysWithResponse call
func ParseGetConsoleV1KeysResponse(rsp *http.Response) (*GetConsoleV1KeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1KeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []KeyDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                    `json:"message"`
			Status  GetConsoleV1Keys403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1KeysResponse parses an HTTP response from a PostConsoleV1KeysWithResponse call
func ParsePostConsoleV1KeysResponse(rsp *http.Response) (*PostConsoleV1KeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1KeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data KeyDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                     `json:"message"`
			Status  PostConsoleV1Keys403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1KeysIdResponse parses an HTTP response from a DeleteConsoleV1KeysIdWithResponse call
func ParseDeleteConsoleV1KeysIdResponse(rsp *http.Response) (*DeleteConsoleV1KeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1KeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                         `json:"message"`
			Status  DeleteConsoleV1KeysId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                         `json:"message"`
			Status  DeleteConsoleV1KeysId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1KeysIdResponse parses an HTTP response from a GetConsoleV1KeysIdWithResponse call
func ParseGetConsoleV1KeysIdResponse(rsp *http.Response) (*GetConsoleV1KeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1KeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data KeyDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                      `json:"message"`
			Status  GetConsoleV1KeysId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                      `json:"message"`
			Status  GetConsoleV1KeysId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1KeysIdResponse parses an HTTP response from a PatchConsoleV1KeysIdWithResponse call
func ParsePatchConsoleV1KeysIdResponse(rsp *http.Response) (*PatchConsoleV1KeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1KeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data KeyDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                        `json:"message"`
			Status  PatchConsoleV1KeysId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                        `json:"message"`
			Status  PatchConsoleV1KeysId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1KeysIdDeactivateResponse parses an HTTP response from a PatchConsoleV1KeysIdDeactivateWithResponse call
func ParsePatchConsoleV1KeysIdDeactivateResponse(rsp *http.Response) (*PatchConsoleV1KeysIdDeactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1KeysIdDeactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PatchConsoleV1KeysIdDeactivate403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PatchConsoleV1KeysIdDeactivate404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1KeysIdRotateResponse parses an HTTP response from a PatchConsoleV1KeysIdRotateWithResponse call
func ParsePatchConsoleV1KeysIdRotateResponse(rsp *http.Response) (*PatchConsoleV1KeysIdRotateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1KeysIdRotateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data KeyDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                              `json:"message"`
			Status  PatchConsoleV1KeysIdRotate403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                              `json:"message"`
			Status  PatchConsoleV1KeysIdRotate404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1LayersResponse parses an HTTP response from a GetConsoleV1LayersWithResponse call
func ParseGetConsoleV1LayersResponse(rsp *http.Response) (*GetConsoleV1LayersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1LayersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []LayerContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                      `json:"message"`
			Status  GetConsoleV1Layers400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                      `json:"message"`
			Status  GetConsoleV1Layers401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1LayersResponse parses an HTTP response from a PostConsoleV1LayersWithResponse call
func ParsePostConsoleV1LayersResponse(rsp *http.Response) (*PostConsoleV1LayersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1LayersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data LayerContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                       `json:"message"`
			Status  PostConsoleV1Layers400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                       `json:"message"`
			Status  PostConsoleV1Layers401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1LayersIdResponse parses an HTTP response from a DeleteConsoleV1LayersIdWithResponse call
func ParseDeleteConsoleV1LayersIdResponse(rsp *http.Response) (*DeleteConsoleV1LayersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1LayersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                           `json:"message"`
			Status  DeleteConsoleV1LayersId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  DeleteConsoleV1LayersId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                           `json:"message"`
			Status  DeleteConsoleV1LayersId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1LayersIdResponse parses an HTTP response from a GetConsoleV1LayersIdWithResponse call
func ParseGetConsoleV1LayersIdResponse(rsp *http.Response) (*GetConsoleV1LayersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1LayersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data LayerContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                        `json:"message"`
			Status  GetConsoleV1LayersId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                        `json:"message"`
			Status  GetConsoleV1LayersId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                        `json:"message"`
			Status  GetConsoleV1LayersId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1LayersIdResponse parses an HTTP response from a PatchConsoleV1LayersIdWithResponse call
func ParsePatchConsoleV1LayersIdResponse(rsp *http.Response) (*PatchConsoleV1LayersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1LayersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data LayerContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                          `json:"message"`
			Status  PatchConsoleV1LayersId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                          `json:"message"`
			Status  PatchConsoleV1LayersId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1LayersIdResponse parses an HTTP response from a PostConsoleV1LayersIdWithResponse call
func ParsePostConsoleV1LayersIdResponse(rsp *http.Response) (*PostConsoleV1LayersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1LayersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data LayerContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                         `json:"message"`
			Status  PostConsoleV1LayersId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                         `json:"message"`
			Status  PostConsoleV1LayersId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1LayersIdExperimentsResponse parses an HTTP response from a GetConsoleV1LayersIdExperimentsWithResponse call
func ParseGetConsoleV1LayersIdExperimentsResponse(rsp *http.Response) (*GetConsoleV1LayersIdExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1LayersIdExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1LayersIdOverridesResponse parses an HTTP response from a DeleteConsoleV1LayersIdOverridesWithResponse call
func ParseDeleteConsoleV1LayersIdOverridesResponse(rsp *http.Response) (*DeleteConsoleV1LayersIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1LayersIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data LayerOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                    `json:"message"`
			Status  DeleteConsoleV1LayersIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                    `json:"message"`
			Status  DeleteConsoleV1LayersIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1LayersIdOverridesResponse parses an HTTP response from a GetConsoleV1LayersIdOverridesWithResponse call
func ParseGetConsoleV1LayersIdOverridesResponse(rsp *http.Response) (*GetConsoleV1LayersIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1LayersIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data LayerOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                 `json:"message"`
			Status  GetConsoleV1LayersIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                 `json:"message"`
			Status  GetConsoleV1LayersIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1LayersIdOverridesResponse parses an HTTP response from a PatchConsoleV1LayersIdOverridesWithResponse call
func ParsePatchConsoleV1LayersIdOverridesResponse(rsp *http.Response) (*PatchConsoleV1LayersIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1LayersIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data LayerOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                   `json:"message"`
			Status  PatchConsoleV1LayersIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                   `json:"message"`
			Status  PatchConsoleV1LayersIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1LayersIdOverridesResponse parses an HTTP response from a PostConsoleV1LayersIdOverridesWithResponse call
func ParsePostConsoleV1LayersIdOverridesResponse(rsp *http.Response) (*PostConsoleV1LayersIdOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1LayersIdOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data LayerOverridesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PostConsoleV1LayersIdOverrides401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PostConsoleV1LayersIdOverrides404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsResponse parses an HTTP response from a GetConsoleV1MetricsWithResponse call
func ParseGetConsoleV1MetricsResponse(rsp *http.Response) (*GetConsoleV1MetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []MetricValuesDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                       `json:"message"`
			Status  GetConsoleV1Metrics401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1MetricsResponse parses an HTTP response from a PostConsoleV1MetricsWithResponse call
func ParsePostConsoleV1MetricsResponse(rsp *http.Response) (*PostConsoleV1MetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1MetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data ExternalMetricDefinitionContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                        `json:"message"`
			Status  PostConsoleV1Metrics401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsListResponse parses an HTTP response from a GetConsoleV1MetricsListWithResponse call
func ParseGetConsoleV1MetricsListResponse(rsp *http.Response) (*GetConsoleV1MetricsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalMetricDefinitionContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  GetConsoleV1MetricsList401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1MetricsMetricSourceResponse parses an HTTP response from a PostConsoleV1MetricsMetricSourceWithResponse call
func ParsePostConsoleV1MetricsMetricSourceResponse(rsp *http.Response) (*PostConsoleV1MetricsMetricSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1MetricsMetricSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data MetricSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PostConsoleV1MetricsMetricSource400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                    `json:"message"`
			Status  PostConsoleV1MetricsMetricSource401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsMetricSourceListResponse parses an HTTP response from a GetConsoleV1MetricsMetricSourceListWithResponse call
func ParseGetConsoleV1MetricsMetricSourceListResponse(rsp *http.Response) (*GetConsoleV1MetricsMetricSourceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsMetricSourceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []MetricSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                       `json:"message"`
			Status  GetConsoleV1MetricsMetricSourceList400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                       `json:"message"`
			Status  GetConsoleV1MetricsMetricSourceList401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1MetricsMetricSourceNameResponse parses an HTTP response from a DeleteConsoleV1MetricsMetricSourceNameWithResponse call
func ParseDeleteConsoleV1MetricsMetricSourceNameResponse(rsp *http.Response) (*DeleteConsoleV1MetricsMetricSourceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1MetricsMetricSourceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                          `json:"message"`
			Status  DeleteConsoleV1MetricsMetricSourceName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                          `json:"message"`
			Status  DeleteConsoleV1MetricsMetricSourceName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsMetricSourceNameResponse parses an HTTP response from a GetConsoleV1MetricsMetricSourceNameWithResponse call
func ParseGetConsoleV1MetricsMetricSourceNameResponse(rsp *http.Response) (*GetConsoleV1MetricsMetricSourceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsMetricSourceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data MetricSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                       `json:"message"`
			Status  GetConsoleV1MetricsMetricSourceName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                       `json:"message"`
			Status  GetConsoleV1MetricsMetricSourceName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1MetricsMetricSourceNameResponse parses an HTTP response from a PostConsoleV1MetricsMetricSourceNameWithResponse call
func ParsePostConsoleV1MetricsMetricSourceNameResponse(rsp *http.Response) (*PostConsoleV1MetricsMetricSourceNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1MetricsMetricSourceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data MetricSourceContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                        `json:"message"`
			Status  PostConsoleV1MetricsMetricSourceName400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                        `json:"message"`
			Status  PostConsoleV1MetricsMetricSourceName401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsMetricSourceNameMetricsResponse parses an HTTP response from a GetConsoleV1MetricsMetricSourceNameMetricsWithResponse call
func ParseGetConsoleV1MetricsMetricSourceNameMetricsResponse(rsp *http.Response) (*GetConsoleV1MetricsMetricSourceNameMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsMetricSourceNameMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalMetricDefinitionContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                              `json:"message"`
			Status  GetConsoleV1MetricsMetricSourceNameMetrics400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                              `json:"message"`
			Status  GetConsoleV1MetricsMetricSourceNameMetrics401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsValuesResponse parses an HTTP response from a GetConsoleV1MetricsValuesWithResponse call
func ParseGetConsoleV1MetricsValuesResponse(rsp *http.Response) (*GetConsoleV1MetricsValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []MetricValueDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                             `json:"message"`
			Status  GetConsoleV1MetricsValues401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1MetricsIdResponse parses an HTTP response from a DeleteConsoleV1MetricsIdWithResponse call
func ParseDeleteConsoleV1MetricsIdResponse(rsp *http.Response) (*DeleteConsoleV1MetricsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1MetricsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                            `json:"message"`
			Status  DeleteConsoleV1MetricsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                            `json:"message"`
			Status  DeleteConsoleV1MetricsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsIdResponse parses an HTTP response from a GetConsoleV1MetricsIdWithResponse call
func ParseGetConsoleV1MetricsIdResponse(rsp *http.Response) (*GetConsoleV1MetricsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalMetricDefinitionContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                         `json:"message"`
			Status  GetConsoleV1MetricsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1MetricsIdResponse parses an HTTP response from a PostConsoleV1MetricsIdWithResponse call
func ParsePostConsoleV1MetricsIdResponse(rsp *http.Response) (*PostConsoleV1MetricsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1MetricsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ExternalMetricDefinitionContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                          `json:"message"`
			Status  PostConsoleV1MetricsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                          `json:"message"`
			Status  PostConsoleV1MetricsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1MetricsIdCancelArchiveResponse parses an HTTP response from a PutConsoleV1MetricsIdCancelArchiveWithResponse call
func ParsePutConsoleV1MetricsIdCancelArchiveResponse(rsp *http.Response) (*PutConsoleV1MetricsIdCancelArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1MetricsIdCancelArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                      `json:"message"`
			Status  PutConsoleV1MetricsIdCancelArchive401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                      `json:"message"`
			Status  PutConsoleV1MetricsIdCancelArchive404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1MetricsIdExperimentsResponse parses an HTTP response from a GetConsoleV1MetricsIdExperimentsWithResponse call
func ParseGetConsoleV1MetricsIdExperimentsResponse(rsp *http.Response) (*GetConsoleV1MetricsIdExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1MetricsIdExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ExternalExperimentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                    `json:"message"`
			Status  GetConsoleV1MetricsIdExperiments401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1MetricsIdReloadResponse parses an HTTP response from a PostConsoleV1MetricsIdReloadWithResponse call
func ParsePostConsoleV1MetricsIdReloadResponse(rsp *http.Response) (*PostConsoleV1MetricsIdReloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1MetricsIdReloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                `json:"message"`
			Status  PostConsoleV1MetricsIdReload401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                `json:"message"`
			Status  PostConsoleV1MetricsIdReload404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1MetricsIdScheduleArchiveResponse parses an HTTP response from a PutConsoleV1MetricsIdScheduleArchiveWithResponse call
func ParsePutConsoleV1MetricsIdScheduleArchiveResponse(rsp *http.Response) (*PutConsoleV1MetricsIdScheduleArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1MetricsIdScheduleArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                        `json:"message"`
			Status  PutConsoleV1MetricsIdScheduleArchive401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                        `json:"message"`
			Status  PutConsoleV1MetricsIdScheduleArchive404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1MetricsIdUnarchiveResponse parses an HTTP response from a PutConsoleV1MetricsIdUnarchiveWithResponse call
func ParsePutConsoleV1MetricsIdUnarchiveResponse(rsp *http.Response) (*PutConsoleV1MetricsIdUnarchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1MetricsIdUnarchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1MetricsIdUnarchive401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PutConsoleV1MetricsIdUnarchive404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ProjectResponse parses an HTTP response from a GetConsoleV1ProjectWithResponse call
func ParseGetConsoleV1ProjectResponse(rsp *http.Response) (*GetConsoleV1ProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ProjectDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ProjectUsageBillingReportResponse parses an HTTP response from a GetConsoleV1ProjectUsageBillingReportWithResponse call
func ParseGetConsoleV1ProjectUsageBillingReportResponse(rsp *http.Response) (*GetConsoleV1ProjectUsageBillingReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ProjectUsageBillingReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                         `json:"message"`
			Status  GetConsoleV1ProjectUsageBillingReport400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                         `json:"message"`
			Status  GetConsoleV1ProjectUsageBillingReport401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ReleasePipelineTriggersResponse parses an HTTP response from a GetConsoleV1ReleasePipelineTriggersWithResponse call
func ParseGetConsoleV1ReleasePipelineTriggersResponse(rsp *http.Response) (*GetConsoleV1ReleasePipelineTriggersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ReleasePipelineTriggersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ReleasePipelineTriggerResponseDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ReleasePipelineTriggersIdResponse parses an HTTP response from a GetConsoleV1ReleasePipelineTriggersIdWithResponse call
func ParseGetConsoleV1ReleasePipelineTriggersIdResponse(rsp *http.Response) (*GetConsoleV1ReleasePipelineTriggersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ReleasePipelineTriggersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ReleasePipelineTriggerResponseDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ReleasePipelinesResponse parses an HTTP response from a GetConsoleV1ReleasePipelinesWithResponse call
func ParseGetConsoleV1ReleasePipelinesResponse(rsp *http.Response) (*GetConsoleV1ReleasePipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ReleasePipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []ReleasePipelineDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ReleasePipelinesIdResponse parses an HTTP response from a GetConsoleV1ReleasePipelinesIdWithResponse call
func ParseGetConsoleV1ReleasePipelinesIdResponse(rsp *http.Response) (*GetConsoleV1ReleasePipelinesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ReleasePipelinesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ReleasePipelineDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1ReportsResponse parses an HTTP response from a GetConsoleV1ReportsWithResponse call
func ParseGetConsoleV1ReportsResponse(rsp *http.Response) (*GetConsoleV1ReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1ReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data ReportDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                       `json:"message"`
			Status  GetConsoleV1Reports400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                       `json:"message"`
			Status  GetConsoleV1Reports401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1SegmentsResponse parses an HTTP response from a GetConsoleV1SegmentsWithResponse call
func ParseGetConsoleV1SegmentsResponse(rsp *http.Response) (*GetConsoleV1SegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1SegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []SegmentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                        `json:"message"`
			Status  GetConsoleV1Segments401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1SegmentsResponse parses an HTTP response from a PostConsoleV1SegmentsWithResponse call
func ParsePostConsoleV1SegmentsResponse(rsp *http.Response) (*PostConsoleV1SegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1SegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data SegmentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                         `json:"message"`
			Status  PostConsoleV1Segments401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1SegmentsIdResponse parses an HTTP response from a DeleteConsoleV1SegmentsIdWithResponse call
func ParseDeleteConsoleV1SegmentsIdResponse(rsp *http.Response) (*DeleteConsoleV1SegmentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1SegmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                             `json:"message"`
			Status  DeleteConsoleV1SegmentsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                             `json:"message"`
			Status  DeleteConsoleV1SegmentsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1SegmentsIdResponse parses an HTTP response from a GetConsoleV1SegmentsIdWithResponse call
func ParseGetConsoleV1SegmentsIdResponse(rsp *http.Response) (*GetConsoleV1SegmentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1SegmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data SegmentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1SegmentsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1SegmentsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutConsoleV1SegmentsIdArchiveResponse parses an HTTP response from a PutConsoleV1SegmentsIdArchiveWithResponse call
func ParsePutConsoleV1SegmentsIdArchiveResponse(rsp *http.Response) (*PutConsoleV1SegmentsIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConsoleV1SegmentsIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data SegmentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                 `json:"message"`
			Status  PutConsoleV1SegmentsIdArchive401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                 `json:"message"`
			Status  PutConsoleV1SegmentsIdArchive404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1SegmentsIdConditionalResponse parses an HTTP response from a PostConsoleV1SegmentsIdConditionalWithResponse call
func ParsePostConsoleV1SegmentsIdConditionalResponse(rsp *http.Response) (*PostConsoleV1SegmentsIdConditionalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1SegmentsIdConditionalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data SegmentDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                      `json:"message"`
			Status  PostConsoleV1SegmentsIdConditional400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                      `json:"message"`
			Status  PostConsoleV1SegmentsIdConditional401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                      `json:"message"`
			Status  PostConsoleV1SegmentsIdConditional404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1SegmentsIdIdListResponse parses an HTTP response from a DeleteConsoleV1SegmentsIdIdListWithResponse call
func ParseDeleteConsoleV1SegmentsIdIdListResponse(rsp *http.Response) (*DeleteConsoleV1SegmentsIdIdListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1SegmentsIdIdListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                   `json:"message"`
			Status  DeleteConsoleV1SegmentsIdIdList400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                   `json:"message"`
			Status  DeleteConsoleV1SegmentsIdIdList401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                   `json:"message"`
			Status  DeleteConsoleV1SegmentsIdIdList404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1SegmentsIdIdListResponse parses an HTTP response from a GetConsoleV1SegmentsIdIdListWithResponse call
func ParseGetConsoleV1SegmentsIdIdListResponse(rsp *http.Response) (*GetConsoleV1SegmentsIdIdListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1SegmentsIdIdListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Schema for a list of IDs with a name and count
			Data IDListDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1SegmentsIdIdListResponse parses an HTTP response from a PatchConsoleV1SegmentsIdIdListWithResponse call
func ParsePatchConsoleV1SegmentsIdIdListResponse(rsp *http.Response) (*PatchConsoleV1SegmentsIdIdListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1SegmentsIdIdListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PatchConsoleV1SegmentsIdIdList400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PatchConsoleV1SegmentsIdIdList401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                                  `json:"message"`
			Status  PatchConsoleV1SegmentsIdIdList404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1SegmentsIdIdListResetResponse parses an HTTP response from a PostConsoleV1SegmentsIdIdListResetWithResponse call
func ParsePostConsoleV1SegmentsIdIdListResetResponse(rsp *http.Response) (*PostConsoleV1SegmentsIdIdListResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1SegmentsIdIdListResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1TagsResponse parses an HTTP response from a GetConsoleV1TagsWithResponse call
func ParseGetConsoleV1TagsResponse(rsp *http.Response) (*GetConsoleV1TagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1TagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []TagDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                    `json:"message"`
			Status  GetConsoleV1Tags404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1TagsResponse parses an HTTP response from a PostConsoleV1TagsWithResponse call
func ParsePostConsoleV1TagsResponse(rsp *http.Response) (*PostConsoleV1TagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1TagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TagDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1TagsIdResponse parses an HTTP response from a DeleteConsoleV1TagsIdWithResponse call
func ParseDeleteConsoleV1TagsIdResponse(rsp *http.Response) (*DeleteConsoleV1TagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1TagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1TagsIdResponse parses an HTTP response from a GetConsoleV1TagsIdWithResponse call
func ParseGetConsoleV1TagsIdResponse(rsp *http.Response) (*GetConsoleV1TagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1TagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TagDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                      `json:"message"`
			Status  GetConsoleV1TagsId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1TagsIdResponse parses an HTTP response from a PatchConsoleV1TagsIdWithResponse call
func ParsePatchConsoleV1TagsIdResponse(rsp *http.Response) (*PatchConsoleV1TagsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1TagsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TagDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1TargetAppResponse parses an HTTP response from a GetConsoleV1TargetAppWithResponse call
func ParseGetConsoleV1TargetAppResponse(rsp *http.Response) (*GetConsoleV1TargetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1TargetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []TargetAppDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                         `json:"message"`
			Status  GetConsoleV1TargetApp401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1TargetAppResponse parses an HTTP response from a PatchConsoleV1TargetAppWithResponse call
func ParsePatchConsoleV1TargetAppResponse(rsp *http.Response) (*PatchConsoleV1TargetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1TargetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  PatchConsoleV1TargetApp401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                           `json:"message"`
			Status  PatchConsoleV1TargetApp404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1TargetAppResponse parses an HTTP response from a PostConsoleV1TargetAppWithResponse call
func ParsePostConsoleV1TargetAppResponse(rsp *http.Response) (*PostConsoleV1TargetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1TargetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TargetAppDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1TargetAppIdResponse parses an HTTP response from a DeleteConsoleV1TargetAppIdWithResponse call
func ParseDeleteConsoleV1TargetAppIdResponse(rsp *http.Response) (*DeleteConsoleV1TargetAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1TargetAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1TargetAppIdResponse parses an HTTP response from a GetConsoleV1TargetAppIdWithResponse call
func ParseGetConsoleV1TargetAppIdResponse(rsp *http.Response) (*GetConsoleV1TargetAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1TargetAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TargetAppDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  GetConsoleV1TargetAppId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1TargetAppIdResponse parses an HTTP response from a PatchConsoleV1TargetAppIdWithResponse call
func ParsePatchConsoleV1TargetAppIdResponse(rsp *http.Response) (*PatchConsoleV1TargetAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1TargetAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                             `json:"message"`
			Status  PatchConsoleV1TargetAppId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                             `json:"message"`
			Status  PatchConsoleV1TargetAppId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1UsersResponse parses an HTTP response from a GetConsoleV1UsersWithResponse call
func ParseGetConsoleV1UsersResponse(rsp *http.Response) (*GetConsoleV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []UserContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                     `json:"message"`
			Status  GetConsoleV1Users400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                     `json:"message"`
			Status  GetConsoleV1Users401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1UsersInviteResponse parses an HTTP response from a PostConsoleV1UsersInviteWithResponse call
func ParsePostConsoleV1UsersInviteResponse(rsp *http.Response) (*PostConsoleV1UsersInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1UsersInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                            `json:"message"`
			Status  PostConsoleV1UsersInvite400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                            `json:"message"`
			Status  PostConsoleV1UsersInvite401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1UsersTeamsResponse parses an HTTP response from a GetConsoleV1UsersTeamsWithResponse call
func ParseGetConsoleV1UsersTeamsResponse(rsp *http.Response) (*GetConsoleV1UsersTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1UsersTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []TeamDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`

			// Pagination Pagination metadata for checking if there is next page for example.
			Pagination PaginationResponseMetadataDto `json:"pagination"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1UsersTeams400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1UsersTeams401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1UsersTeamsResponse parses an HTTP response from a PostConsoleV1UsersTeamsWithResponse call
func ParsePostConsoleV1UsersTeamsResponse(rsp *http.Response) (*PostConsoleV1UsersTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1UsersTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TeamDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1UsersTeams400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1UsersTeams401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteConsoleV1UsersTeamsIdResponse parses an HTTP response from a DeleteConsoleV1UsersTeamsIdWithResponse call
func ParseDeleteConsoleV1UsersTeamsIdResponse(rsp *http.Response) (*DeleteConsoleV1UsersTeamsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConsoleV1UsersTeamsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1UsersTeamsIdResponse parses an HTTP response from a GetConsoleV1UsersTeamsIdWithResponse call
func ParseGetConsoleV1UsersTeamsIdResponse(rsp *http.Response) (*GetConsoleV1UsersTeamsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1UsersTeamsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TeamDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                            `json:"message"`
			Status  GetConsoleV1UsersTeamsId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                            `json:"message"`
			Status  GetConsoleV1UsersTeamsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePatchConsoleV1UsersTeamsIdResponse parses an HTTP response from a PatchConsoleV1UsersTeamsIdWithResponse call
func ParsePatchConsoleV1UsersTeamsIdResponse(rsp *http.Response) (*PatchConsoleV1UsersTeamsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConsoleV1UsersTeamsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data TeamDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                              `json:"message"`
			Status  PatchConsoleV1UsersTeamsId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                              `json:"message"`
			Status  PatchConsoleV1UsersTeamsId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetConsoleV1UsersEmailResponse parses an HTTP response from a GetConsoleV1UsersEmailWithResponse call
func ParseGetConsoleV1UsersEmailResponse(rsp *http.Response) (*GetConsoleV1UsersEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConsoleV1UsersEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data UserContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1UsersEmail400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1UsersEmail401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                          `json:"message"`
			Status  GetConsoleV1UsersEmail404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostConsoleV1UsersEmailResponse parses an HTTP response from a PostConsoleV1UsersEmailWithResponse call
func ParsePostConsoleV1UsersEmailResponse(rsp *http.Response) (*PostConsoleV1UsersEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConsoleV1UsersEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data UserContractDto `json:"data"`

			// Message A simple string explaining the result of the operation.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1UsersEmail400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1UsersEmail401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1UsersEmail403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string                           `json:"message"`
			Status  PostConsoleV1UsersEmail404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
