/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// AuditLogsAPIService AuditLogsAPI service
type AuditLogsAPIService service

type ApiConsoleV1AuditLogsControllerGenListRequest struct {
	ctx context.Context
	ApiService *AuditLogsAPIService
	id *string
	sortKey *string
	sortOrder *string
	latestID *string
	tags *[]string
	actionType *string
	actionTypes *[]string
	startDate *string
	endDate *string
	limit *int32
	page *int32
	xRespectReviewSettings *string
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) Id(id string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.id = &id
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) SortKey(sortKey string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.sortKey = &sortKey
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) SortOrder(sortOrder string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) LatestID(latestID string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.latestID = &latestID
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) Tags(tags []string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.tags = &tags
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) ActionType(actionType string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.actionType = &actionType
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) ActionTypes(actionTypes []string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.actionTypes = &actionTypes
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) StartDate(startDate string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.startDate = &startDate
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) EndDate(endDate string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.endDate = &endDate
	return r
}

// Results per page
func (r ApiConsoleV1AuditLogsControllerGenListRequest) Limit(limit int32) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.limit = &limit
	return r
}

// Page number
func (r ApiConsoleV1AuditLogsControllerGenListRequest) Page(page int32) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.page = &page
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1AuditLogsControllerGenListRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1AuditLogsControllerGenListRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1AuditLogsControllerGenListRequest) Execute() (*ConsoleV1AuditLogsControllerGenList200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1AuditLogsControllerGenListExecute(r)
}

/*
ConsoleV1AuditLogsControllerGenList List Audit Logs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1AuditLogsControllerGenListRequest
*/
func (a *AuditLogsAPIService) ConsoleV1AuditLogsControllerGenList(ctx context.Context) ApiConsoleV1AuditLogsControllerGenListRequest {
	return ApiConsoleV1AuditLogsControllerGenListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1AuditLogsControllerGenList200Response
func (a *AuditLogsAPIService) ConsoleV1AuditLogsControllerGenListExecute(r ApiConsoleV1AuditLogsControllerGenListRequest) (*ConsoleV1AuditLogsControllerGenList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1AuditLogsControllerGenList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogsAPIService.ConsoleV1AuditLogsControllerGenList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/audit_logs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.sortKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortKey", r.sortKey, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.latestID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latestID", r.latestID, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.actionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actionType", r.actionType, "form", "")
	}
	if r.actionTypes != nil {
		t := *r.actionTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "actionTypes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "actionTypes", t, "form", "multi")
		}
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
