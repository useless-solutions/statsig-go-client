/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ExperimentsWarehouseNativeAPIService ExperimentsWarehouseNativeAPI service
type ExperimentsWarehouseNativeAPIService service

type ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	assignmentSourceCreationDto *AssignmentSourceCreationDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest) AssignmentSourceCreationDto(assignmentSourceCreationDto AssignmentSourceCreationDto) ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest {
	r.assignmentSourceCreationDto = &assignmentSourceCreationDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest) Execute() (*ConsoleV1ExperimentsControllerGenCreateAssignmentSource201Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenCreateAssignmentSourceExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenCreateAssignmentSource Create Assignment Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenCreateAssignmentSource(ctx context.Context) ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest {
	return ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenCreateAssignmentSource201Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenCreateAssignmentSourceExecute(r ApiConsoleV1ExperimentsControllerGenCreateAssignmentSourceRequest) (*ConsoleV1ExperimentsControllerGenCreateAssignmentSource201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenCreateAssignmentSource201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenCreateAssignmentSource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/assignment_sources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assignmentSourceCreationDto == nil {
		return localVarReturnValue, nil, reportError("assignmentSourceCreationDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.assignmentSourceCreationDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	entityPropertySourceCreationDto *EntityPropertySourceCreationDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest) EntityPropertySourceCreationDto(entityPropertySourceCreationDto EntityPropertySourceCreationDto) ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest {
	r.entityPropertySourceCreationDto = &entityPropertySourceCreationDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest) Execute() (*ConsoleV1ExperimentsControllerGenCreateEntityPropertySource201Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenCreateEntityPropertySourceExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenCreateEntityPropertySource Create Entity Property Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenCreateEntityPropertySource(ctx context.Context) ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest {
	return ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenCreateEntityPropertySource201Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenCreateEntityPropertySourceExecute(r ApiConsoleV1ExperimentsControllerGenCreateEntityPropertySourceRequest) (*ConsoleV1ExperimentsControllerGenCreateEntityPropertySource201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenCreateEntityPropertySource201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenCreateEntityPropertySource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/entity_properties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityPropertySourceCreationDto == nil {
		return localVarReturnValue, nil, reportError("entityPropertySourceCreationDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.entityPropertySourceCreationDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	name string
	xRespectReviewSettings *string
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest) Execute() (*ConsoleV1ExperimentsControllerGenEntityPropertySource200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenEntityPropertySourceExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenEntityPropertySource Get Entity Property Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of entity property source
 @return ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenEntityPropertySource(ctx context.Context, name string) ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest {
	return ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenEntityPropertySource200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenEntityPropertySourceExecute(r ApiConsoleV1ExperimentsControllerGenEntityPropertySourceRequest) (*ConsoleV1ExperimentsControllerGenEntityPropertySource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenEntityPropertySource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenEntityPropertySource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/entity_property/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	limit *int32
	page *int32
	xRespectReviewSettings *string
}

// Results per page
func (r ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest) Limit(limit int32) ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest {
	r.limit = &limit
	return r
}

// Page number
func (r ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest) Page(page int32) ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest {
	r.page = &page
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest) Execute() (*ConsoleV1ExperimentsControllerGenListAssignmentSources200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenListAssignmentSourcesExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenListAssignmentSources List Assignment Sources

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenListAssignmentSources(ctx context.Context) ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest {
	return ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenListAssignmentSources200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenListAssignmentSourcesExecute(r ApiConsoleV1ExperimentsControllerGenListAssignmentSourcesRequest) (*ConsoleV1ExperimentsControllerGenListAssignmentSources200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenListAssignmentSources200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenListAssignmentSources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/assignment_sources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	limit *int32
	page *int32
	xRespectReviewSettings *string
}

// Results per page
func (r ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest) Limit(limit int32) ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest {
	r.limit = &limit
	return r
}

// Page number
func (r ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest) Page(page int32) ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest {
	r.page = &page
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest) Execute() (*ConsoleV1ExperimentsControllerGenListEntityPropertySources200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenListEntityPropertySourcesExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenListEntityPropertySources List Entity Property Sources

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenListEntityPropertySources(ctx context.Context) ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest {
	return ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenListEntityPropertySources200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenListEntityPropertySourcesExecute(r ApiConsoleV1ExperimentsControllerGenListEntityPropertySourcesRequest) (*ConsoleV1ExperimentsControllerGenListEntityPropertySources200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenListEntityPropertySources200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenListEntityPropertySources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/entity_properties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenLoadPulseRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	id string
	echidnaLoadPulseQueryDto *EchidnaLoadPulseQueryDto
	refresh *string
	ruleId *string
	turboMode *bool
	xRespectReviewSettings *string
}

func (r ApiConsoleV1ExperimentsControllerGenLoadPulseRequest) EchidnaLoadPulseQueryDto(echidnaLoadPulseQueryDto EchidnaLoadPulseQueryDto) ApiConsoleV1ExperimentsControllerGenLoadPulseRequest {
	r.echidnaLoadPulseQueryDto = &echidnaLoadPulseQueryDto
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenLoadPulseRequest) Refresh(refresh string) ApiConsoleV1ExperimentsControllerGenLoadPulseRequest {
	r.refresh = &refresh
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenLoadPulseRequest) RuleId(ruleId string) ApiConsoleV1ExperimentsControllerGenLoadPulseRequest {
	r.ruleId = &ruleId
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenLoadPulseRequest) TurboMode(turboMode bool) ApiConsoleV1ExperimentsControllerGenLoadPulseRequest {
	r.turboMode = &turboMode
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenLoadPulseRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenLoadPulseRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenLoadPulseRequest) Execute() (*ConsoleV1ExperimentsControllerGenLoadPulse200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenLoadPulseExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenLoadPulse Load Pulse (Warehouse Native)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id
 @return ApiConsoleV1ExperimentsControllerGenLoadPulseRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenLoadPulse(ctx context.Context, id string) ApiConsoleV1ExperimentsControllerGenLoadPulseRequest {
	return ApiConsoleV1ExperimentsControllerGenLoadPulseRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenLoadPulse200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenLoadPulseExecute(r ApiConsoleV1ExperimentsControllerGenLoadPulseRequest) (*ConsoleV1ExperimentsControllerGenLoadPulse200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenLoadPulse200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenLoadPulse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/{id}/load_pulse"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.echidnaLoadPulseQueryDto == nil {
		return localVarReturnValue, nil, reportError("echidnaLoadPulseQueryDto is required and must be specified")
	}

	if r.refresh != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "refresh", r.refresh, "form", "")
	} else {
		var defaultValue string = "full"
		r.refresh = &defaultValue
	}
	if r.ruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ruleId", r.ruleId, "form", "")
	}
	if r.turboMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "turboMode", r.turboMode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.echidnaLoadPulseQueryDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	id string
	limit *int32
	page *int32
	xRespectReviewSettings *string
}

// Results per page
func (r ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest) Limit(limit int32) ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest {
	r.limit = &limit
	return r
}

// Page number
func (r ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest) Page(page int32) ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest {
	r.page = &page
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest) Execute() (*ConsoleV1GatesControllerGenPulseLoadHistory200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenPulseLoadHistoryExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenPulseLoadHistory Pulse Load History (Warehouse Native)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id
 @return ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenPulseLoadHistory(ctx context.Context, id string) ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest {
	return ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleV1GatesControllerGenPulseLoadHistory200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenPulseLoadHistoryExecute(r ApiConsoleV1ExperimentsControllerGenPulseLoadHistoryRequest) (*ConsoleV1GatesControllerGenPulseLoadHistory200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1GatesControllerGenPulseLoadHistory200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenPulseLoadHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/{id}/pulse_load_history"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	name string
	xRespectReviewSettings *string
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest) Execute() (*ConsoleV1ExperimentsControllerGenRemoveAssignmentSource200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenRemoveAssignmentSourceExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenRemoveAssignmentSource Delete Assignment Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the assignment source
 @return ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenRemoveAssignmentSource(ctx context.Context, name string) ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest {
	return ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenRemoveAssignmentSource200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenRemoveAssignmentSourceExecute(r ApiConsoleV1ExperimentsControllerGenRemoveAssignmentSourceRequest) (*ConsoleV1ExperimentsControllerGenRemoveAssignmentSource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenRemoveAssignmentSource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenRemoveAssignmentSource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/assignment_source/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	name string
	xRespectReviewSettings *string
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest) Execute() (*ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource Delete Entity Property Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name
 @return ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource(ctx context.Context, name string) ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest {
	return ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceExecute(r ApiConsoleV1ExperimentsControllerGenRemoveEntityPropertySourceRequest) (*ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/entity_property/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	name string
	assignmentSourcePartialUpdateDto *AssignmentSourcePartialUpdateDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest) AssignmentSourcePartialUpdateDto(assignmentSourcePartialUpdateDto AssignmentSourcePartialUpdateDto) ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest {
	r.assignmentSourcePartialUpdateDto = &assignmentSourcePartialUpdateDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest) Execute() (*ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenUpdateAssignmentSource Patch Assignment Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the assignment source
 @return ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateAssignmentSource(ctx context.Context, name string) ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest {
	return ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceExecute(r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceRequest) (*ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenUpdateAssignmentSource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/assignment_source/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assignmentSourcePartialUpdateDto == nil {
		return localVarReturnValue, nil, reportError("assignmentSourcePartialUpdateDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.assignmentSourcePartialUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	name string
	assignmentSourceQueryUpdateDto *AssignmentSourceQueryUpdateDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest) AssignmentSourceQueryUpdateDto(assignmentSourceQueryUpdateDto AssignmentSourceQueryUpdateDto) ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest {
	r.assignmentSourceQueryUpdateDto = &assignmentSourceQueryUpdateDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest) Execute() (*ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery Post Assignment Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the assignment source
 @return ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery(ctx context.Context, name string) ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest {
	return ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryExecute(r ApiConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQueryRequest) (*ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/assignment_source/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assignmentSourceQueryUpdateDto == nil {
		return localVarReturnValue, nil, reportError("assignmentSourceQueryUpdateDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.assignmentSourceQueryUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	name string
	entityPropertySourcePartialUpdateDto *EntityPropertySourcePartialUpdateDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest) EntityPropertySourcePartialUpdateDto(entityPropertySourcePartialUpdateDto EntityPropertySourcePartialUpdateDto) ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest {
	r.entityPropertySourcePartialUpdateDto = &entityPropertySourcePartialUpdateDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest) Execute() (*ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource Patch Entity Property Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of entity property source
 @return ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource(ctx context.Context, name string) ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest {
	return ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceExecute(r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceRequest) (*ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/entity_property/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityPropertySourcePartialUpdateDto == nil {
		return localVarReturnValue, nil, reportError("entityPropertySourcePartialUpdateDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.entityPropertySourcePartialUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest struct {
	ctx context.Context
	ApiService *ExperimentsWarehouseNativeAPIService
	name string
	entityPropertySourceQueryUpdateDto *EntityPropertySourceQueryUpdateDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest) EntityPropertySourceQueryUpdateDto(entityPropertySourceQueryUpdateDto EntityPropertySourceQueryUpdateDto) ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest {
	r.entityPropertySourceQueryUpdateDto = &entityPropertySourceQueryUpdateDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest) Execute() (*ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryExecute(r)
}

/*
ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery Post Entity Property Source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name name
 @return ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest
*/
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery(ctx context.Context, name string) ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest {
	return ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery200Response
func (a *ExperimentsWarehouseNativeAPIService) ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryExecute(r ApiConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQueryRequest) (*ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentsWarehouseNativeAPIService.ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/experiments/entity_property/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityPropertySourceQueryUpdateDto == nil {
		return localVarReturnValue, nil, reportError("entityPropertySourceQueryUpdateDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.entityPropertySourceQueryUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConsoleV1DynamicConfigControllerGenCreate400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
