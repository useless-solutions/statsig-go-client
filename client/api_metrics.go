/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	date *string
	metricName *string
	metricType *string
	limit *int32
	page *int32
	xRespectReviewSettings *string
}

func (r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) Date(date string) ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest {
	r.date = &date
	return r
}

func (r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) MetricName(metricName string) ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest {
	r.metricName = &metricName
	return r
}

func (r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) MetricType(metricType string) ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest {
	r.metricType = &metricType
	return r
}

// Results per page
func (r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) Limit(limit int32) ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest {
	r.limit = &limit
	return r
}

// Page number
func (r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) Page(page int32) ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest {
	r.page = &page
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) Execute() (*ConsoleV1MetricValuesControllerGenListMetricValues200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricValuesControllerGenListMetricValuesExecute(r)
}

/*
ConsoleV1MetricValuesControllerGenListMetricValues List All Metric Values

List all metric values

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricValuesControllerGenListMetricValues(ctx context.Context) ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest {
	return ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricValuesControllerGenListMetricValues200Response
func (a *MetricsAPIService) ConsoleV1MetricValuesControllerGenListMetricValuesExecute(r ApiConsoleV1MetricValuesControllerGenListMetricValuesRequest) (*ConsoleV1MetricValuesControllerGenListMetricValues200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricValuesControllerGenListMetricValues200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricValuesControllerGenListMetricValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics/values"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.date == nil {
		return localVarReturnValue, nil, reportError("date is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "form", "")
	if r.metricName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metricName", r.metricName, "form", "")
	}
	if r.metricType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metricType", r.metricType, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1MetricsControllerDeleteMetricRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	xRespectReviewSettings *string
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricsControllerDeleteMetricRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricsControllerDeleteMetricRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricsControllerDeleteMetricRequest) Execute() (*ConsoleV1MetricsControllerDeleteMetric200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricsControllerDeleteMetricExecute(r)
}

/*
ConsoleV1MetricsControllerDeleteMetric Delete a metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id
 @return ApiConsoleV1MetricsControllerDeleteMetricRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricsControllerDeleteMetric(ctx context.Context, id string) ApiConsoleV1MetricsControllerDeleteMetricRequest {
	return ApiConsoleV1MetricsControllerDeleteMetricRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricsControllerDeleteMetric200Response
func (a *MetricsAPIService) ConsoleV1MetricsControllerDeleteMetricExecute(r ApiConsoleV1MetricsControllerDeleteMetricRequest) (*ConsoleV1MetricsControllerDeleteMetric200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricsControllerDeleteMetric200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricsControllerDeleteMetric")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1MetricsControllerGenCreateRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	metricCreationContractDto *MetricCreationContractDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1MetricsControllerGenCreateRequest) MetricCreationContractDto(metricCreationContractDto MetricCreationContractDto) ApiConsoleV1MetricsControllerGenCreateRequest {
	r.metricCreationContractDto = &metricCreationContractDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricsControllerGenCreateRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricsControllerGenCreateRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricsControllerGenCreateRequest) Execute() (*ConsoleV1MetricsControllerGenCreate201Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricsControllerGenCreateExecute(r)
}

/*
ConsoleV1MetricsControllerGenCreate Create Metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1MetricsControllerGenCreateRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenCreate(ctx context.Context) ApiConsoleV1MetricsControllerGenCreateRequest {
	return ApiConsoleV1MetricsControllerGenCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricsControllerGenCreate201Response
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenCreateExecute(r ApiConsoleV1MetricsControllerGenCreateRequest) (*ConsoleV1MetricsControllerGenCreate201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricsControllerGenCreate201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricsControllerGenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metricCreationContractDto == nil {
		return localVarReturnValue, nil, reportError("metricCreationContractDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.metricCreationContractDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	layerID *string
	idType *string
	status *interface{}
	creatorName *string
	creatorID *string
	tags *[]string
	limit *int32
	page *int32
	xRespectReviewSettings *string
}

// Which layer to place the experiment into.
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) LayerID(layerID string) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.layerID = &layerID
	return r
}

// The idType the experiment will be performed on
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) IdType(idType string) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.idType = &idType
	return r
}

// The current status of the experiment
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) Status(status interface{}) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.status = &status
	return r
}

// Name of the creator.
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) CreatorName(creatorName string) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.creatorName = &creatorName
	return r
}

// ID of the user who created the entity.
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) CreatorID(creatorID string) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.creatorID = &creatorID
	return r
}

// Filter by tags
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) Tags(tags []string) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.tags = &tags
	return r
}

// Results per page
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) Limit(limit int32) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.limit = &limit
	return r
}

// Page number
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) Page(page int32) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.page = &page
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) Execute() (*ConsoleV1MetricsControllerGenExperimentListFromMetric200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricsControllerGenExperimentListFromMetricExecute(r)
}

/*
ConsoleV1MetricsControllerGenExperimentListFromMetric Lineage: List experiments related to Metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id
 @return ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenExperimentListFromMetric(ctx context.Context, id string) ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest {
	return ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricsControllerGenExperimentListFromMetric200Response
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenExperimentListFromMetricExecute(r ApiConsoleV1MetricsControllerGenExperimentListFromMetricRequest) (*ConsoleV1MetricsControllerGenExperimentListFromMetric200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricsControllerGenExperimentListFromMetric200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricsControllerGenExperimentListFromMetric")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics/{id}/experiments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.layerID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "layerID", r.layerID, "form", "")
	}
	if r.idType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idType", r.idType, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.creatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorName", r.creatorName, "form", "")
	}
	if r.creatorID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorID", r.creatorID, "form", "")
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tags", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tags", t, "form", "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1MetricsControllerGenListMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	showHiddenMetrics *string
	tags *interface{}
	filters *interface{}
	limit *int32
	page *int32
	xRespectReviewSettings *string
}

// Should hidden metrics be returned: Allowed values are \&quot;true\&quot; or \&quot;false\&quot;.
func (r ApiConsoleV1MetricsControllerGenListMetricsRequest) ShowHiddenMetrics(showHiddenMetrics string) ApiConsoleV1MetricsControllerGenListMetricsRequest {
	r.showHiddenMetrics = &showHiddenMetrics
	return r
}

// Filter metrics based on a given tagID, found on /tags endpoint. Can be a single string or an array of strings.
func (r ApiConsoleV1MetricsControllerGenListMetricsRequest) Tags(tags interface{}) ApiConsoleV1MetricsControllerGenListMetricsRequest {
	r.tags = &tags
	return r
}

// Additional filters for metrics. Can be a string or an object with tags filter.
func (r ApiConsoleV1MetricsControllerGenListMetricsRequest) Filters(filters interface{}) ApiConsoleV1MetricsControllerGenListMetricsRequest {
	r.filters = &filters
	return r
}

// Results per page
func (r ApiConsoleV1MetricsControllerGenListMetricsRequest) Limit(limit int32) ApiConsoleV1MetricsControllerGenListMetricsRequest {
	r.limit = &limit
	return r
}

// Page number
func (r ApiConsoleV1MetricsControllerGenListMetricsRequest) Page(page int32) ApiConsoleV1MetricsControllerGenListMetricsRequest {
	r.page = &page
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricsControllerGenListMetricsRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricsControllerGenListMetricsRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricsControllerGenListMetricsRequest) Execute() (*ConsoleV1MetricsControllerGenListMetrics200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricsControllerGenListMetricsExecute(r)
}

/*
ConsoleV1MetricsControllerGenListMetrics List all Metrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1MetricsControllerGenListMetricsRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenListMetrics(ctx context.Context) ApiConsoleV1MetricsControllerGenListMetricsRequest {
	return ApiConsoleV1MetricsControllerGenListMetricsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricsControllerGenListMetrics200Response
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenListMetricsExecute(r ApiConsoleV1MetricsControllerGenListMetricsRequest) (*ConsoleV1MetricsControllerGenListMetrics200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricsControllerGenListMetrics200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricsControllerGenListMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showHiddenMetrics != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showHiddenMetrics", r.showHiddenMetrics, "form", "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags", r.tags, "form", "")
	}
	if r.filters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filters", r.filters, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1MetricsControllerGenReadMetricRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id *string
	date *string
	xRespectReviewSettings *string
}

// The unique identifier of the metric
func (r ApiConsoleV1MetricsControllerGenReadMetricRequest) Id(id string) ApiConsoleV1MetricsControllerGenReadMetricRequest {
	r.id = &id
	return r
}

func (r ApiConsoleV1MetricsControllerGenReadMetricRequest) Date(date string) ApiConsoleV1MetricsControllerGenReadMetricRequest {
	r.date = &date
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricsControllerGenReadMetricRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricsControllerGenReadMetricRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricsControllerGenReadMetricRequest) Execute() (*ConsoleV1MetricsControllerGenReadMetric200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricsControllerGenReadMetricExecute(r)
}

/*
ConsoleV1MetricsControllerGenReadMetric Read Single Metric Value

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConsoleV1MetricsControllerGenReadMetricRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenReadMetric(ctx context.Context) ApiConsoleV1MetricsControllerGenReadMetricRequest {
	return ApiConsoleV1MetricsControllerGenReadMetricRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricsControllerGenReadMetric200Response
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenReadMetricExecute(r ApiConsoleV1MetricsControllerGenReadMetricRequest) (*ConsoleV1MetricsControllerGenReadMetric200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricsControllerGenReadMetric200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricsControllerGenReadMetric")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.date == nil {
		return localVarReturnValue, nil, reportError("date is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	xRespectReviewSettings *string
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest) Execute() (*ConsoleV1MetricsControllerGenReadMetricDefinition200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricsControllerGenReadMetricDefinitionExecute(r)
}

/*
ConsoleV1MetricsControllerGenReadMetricDefinition Read Metric Definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id
 @return ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenReadMetricDefinition(ctx context.Context, id string) ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest {
	return ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricsControllerGenReadMetricDefinition200Response
func (a *MetricsAPIService) ConsoleV1MetricsControllerGenReadMetricDefinitionExecute(r ApiConsoleV1MetricsControllerGenReadMetricDefinitionRequest) (*ConsoleV1MetricsControllerGenReadMetricDefinition200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricsControllerGenReadMetricDefinition200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricsControllerGenReadMetricDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConsoleV1MetricsControllerUpdateMetricRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	metricsUpdateContractDto *MetricsUpdateContractDto
	xRespectReviewSettings *string
}

func (r ApiConsoleV1MetricsControllerUpdateMetricRequest) MetricsUpdateContractDto(metricsUpdateContractDto MetricsUpdateContractDto) ApiConsoleV1MetricsControllerUpdateMetricRequest {
	r.metricsUpdateContractDto = &metricsUpdateContractDto
	return r
}

// Optional header to respect review settings for mutation endpoints.
func (r ApiConsoleV1MetricsControllerUpdateMetricRequest) XRespectReviewSettings(xRespectReviewSettings string) ApiConsoleV1MetricsControllerUpdateMetricRequest {
	r.xRespectReviewSettings = &xRespectReviewSettings
	return r
}

func (r ApiConsoleV1MetricsControllerUpdateMetricRequest) Execute() (*ConsoleV1MetricsControllerUpdateMetric200Response, *http.Response, error) {
	return r.ApiService.ConsoleV1MetricsControllerUpdateMetricExecute(r)
}

/*
ConsoleV1MetricsControllerUpdateMetric Update a metric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id
 @return ApiConsoleV1MetricsControllerUpdateMetricRequest
*/
func (a *MetricsAPIService) ConsoleV1MetricsControllerUpdateMetric(ctx context.Context, id string) ApiConsoleV1MetricsControllerUpdateMetricRequest {
	return ApiConsoleV1MetricsControllerUpdateMetricRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleV1MetricsControllerUpdateMetric200Response
func (a *MetricsAPIService) ConsoleV1MetricsControllerUpdateMetricExecute(r ApiConsoleV1MetricsControllerUpdateMetricRequest) (*ConsoleV1MetricsControllerUpdateMetric200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleV1MetricsControllerUpdateMetric200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.ConsoleV1MetricsControllerUpdateMetric")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/console/v1/metrics/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metricsUpdateContractDto == nil {
		return localVarReturnValue, nil, reportError("metricsUpdateContractDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xRespectReviewSettings != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-respect-review-settings", r.xRespectReviewSettings, "simple", "")
	}
	// body params
	localVarPostBody = r.metricsUpdateContractDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["STATSIG-API-KEY"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["STATSIG-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConsoleV1DynamicConfigControllerGenCreate401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConsoleV1DynamicConfigControllerGenList404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
