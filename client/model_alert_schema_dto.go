/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertSchemaDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertSchemaDto{}

// AlertSchemaDto struct for AlertSchemaDto
type AlertSchemaDto struct {
	// ID of the alert
	Id string `json:"id"`
	// Name of the alert
	Name string `json:"name"`
	// Type of alert
	AlertType string `json:"alertType"`
	// List of metrics associated with this alert
	Metrics map[string]interface{} `json:"metrics"`
	// Metric groupbys
	MetricGroupBys map[string]interface{} `json:"metricGroupBys"`
	// Formula for the alert
	Formula *string `json:"formula,omitempty"`
	// Alert message
	Message string `json:"message"`
	// Instructions for resolving the alert
	Instruction string `json:"instruction"`
	CreatorID *string `json:"creatorID,omitempty"`
	CompanyID string `json:"companyID"`
	// Priority of this alert
	Priority string `json:"priority"`
	AlertThreshold float32 `json:"alertThreshold"`
	WarningThreshold *float32 `json:"warningThreshold,omitempty"`
	// How far back and how frequently a metric should be checked, in milliseconds
	WindowMs float32 `json:"windowMs"`
	// Condition under which a metric change triggers an alert in milliseconds
	Condition string `json:"condition"`
	// Condition under which a re-notification is sent
	RenotificationCondition *string `json:"renotificationCondition,omitempty"`
	// How long to wait before re-notifying in milliseconds
	RenotificationWindowMs *float32 `json:"renotificationWindowMs,omitempty"`
	// Re-notification message
	RenotificationMessage *string `json:"renotificationMessage,omitempty"`
	// Team associated with this alert
	Team *nil `json:"team,omitempty"`
	// Tags associated with this alert
	Tags []string `json:"tags"`
}

type _AlertSchemaDto AlertSchemaDto

// NewAlertSchemaDto instantiates a new AlertSchemaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertSchemaDto(id string, name string, alertType string, metrics map[string]interface{}, metricGroupBys map[string]interface{}, message string, instruction string, companyID string, priority string, alertThreshold float32, windowMs float32, condition string, tags []string) *AlertSchemaDto {
	this := AlertSchemaDto{}
	this.Id = id
	this.Name = name
	this.AlertType = alertType
	this.Metrics = metrics
	this.MetricGroupBys = metricGroupBys
	this.Message = message
	this.Instruction = instruction
	this.CompanyID = companyID
	this.Priority = priority
	this.AlertThreshold = alertThreshold
	this.WindowMs = windowMs
	this.Condition = condition
	this.Tags = tags
	return &this
}

// NewAlertSchemaDtoWithDefaults instantiates a new AlertSchemaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertSchemaDtoWithDefaults() *AlertSchemaDto {
	this := AlertSchemaDto{}
	return &this
}

// GetId returns the Id field value
func (o *AlertSchemaDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AlertSchemaDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AlertSchemaDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AlertSchemaDto) SetName(v string) {
	o.Name = v
}

// GetAlertType returns the AlertType field value
func (o *AlertSchemaDto) GetAlertType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetAlertTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertType, true
}

// SetAlertType sets field value
func (o *AlertSchemaDto) SetAlertType(v string) {
	o.AlertType = v
}

// GetMetrics returns the Metrics field value
func (o *AlertSchemaDto) GetMetrics() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetMetricsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metrics, true
}

// SetMetrics sets field value
func (o *AlertSchemaDto) SetMetrics(v map[string]interface{}) {
	o.Metrics = v
}

// GetMetricGroupBys returns the MetricGroupBys field value
func (o *AlertSchemaDto) GetMetricGroupBys() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.MetricGroupBys
}

// GetMetricGroupBysOk returns a tuple with the MetricGroupBys field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetMetricGroupBysOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.MetricGroupBys, true
}

// SetMetricGroupBys sets field value
func (o *AlertSchemaDto) SetMetricGroupBys(v map[string]interface{}) {
	o.MetricGroupBys = v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *AlertSchemaDto) GetFormula() string {
	if o == nil || IsNil(o.Formula) {
		var ret string
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.Formula) {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *AlertSchemaDto) HasFormula() bool {
	if o != nil && !IsNil(o.Formula) {
		return true
	}

	return false
}

// SetFormula gets a reference to the given string and assigns it to the Formula field.
func (o *AlertSchemaDto) SetFormula(v string) {
	o.Formula = &v
}

// GetMessage returns the Message field value
func (o *AlertSchemaDto) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *AlertSchemaDto) SetMessage(v string) {
	o.Message = v
}

// GetInstruction returns the Instruction field value
func (o *AlertSchemaDto) GetInstruction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetInstructionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instruction, true
}

// SetInstruction sets field value
func (o *AlertSchemaDto) SetInstruction(v string) {
	o.Instruction = v
}

// GetCreatorID returns the CreatorID field value if set, zero value otherwise.
func (o *AlertSchemaDto) GetCreatorID() string {
	if o == nil || IsNil(o.CreatorID) {
		var ret string
		return ret
	}
	return *o.CreatorID
}

// GetCreatorIDOk returns a tuple with the CreatorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetCreatorIDOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorID) {
		return nil, false
	}
	return o.CreatorID, true
}

// HasCreatorID returns a boolean if a field has been set.
func (o *AlertSchemaDto) HasCreatorID() bool {
	if o != nil && !IsNil(o.CreatorID) {
		return true
	}

	return false
}

// SetCreatorID gets a reference to the given string and assigns it to the CreatorID field.
func (o *AlertSchemaDto) SetCreatorID(v string) {
	o.CreatorID = &v
}

// GetCompanyID returns the CompanyID field value
func (o *AlertSchemaDto) GetCompanyID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyID
}

// GetCompanyIDOk returns a tuple with the CompanyID field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetCompanyIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyID, true
}

// SetCompanyID sets field value
func (o *AlertSchemaDto) SetCompanyID(v string) {
	o.CompanyID = v
}

// GetPriority returns the Priority field value
func (o *AlertSchemaDto) GetPriority() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetPriorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *AlertSchemaDto) SetPriority(v string) {
	o.Priority = v
}

// GetAlertThreshold returns the AlertThreshold field value
func (o *AlertSchemaDto) GetAlertThreshold() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AlertThreshold
}

// GetAlertThresholdOk returns a tuple with the AlertThreshold field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetAlertThresholdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertThreshold, true
}

// SetAlertThreshold sets field value
func (o *AlertSchemaDto) SetAlertThreshold(v float32) {
	o.AlertThreshold = v
}

// GetWarningThreshold returns the WarningThreshold field value if set, zero value otherwise.
func (o *AlertSchemaDto) GetWarningThreshold() float32 {
	if o == nil || IsNil(o.WarningThreshold) {
		var ret float32
		return ret
	}
	return *o.WarningThreshold
}

// GetWarningThresholdOk returns a tuple with the WarningThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetWarningThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.WarningThreshold) {
		return nil, false
	}
	return o.WarningThreshold, true
}

// HasWarningThreshold returns a boolean if a field has been set.
func (o *AlertSchemaDto) HasWarningThreshold() bool {
	if o != nil && !IsNil(o.WarningThreshold) {
		return true
	}

	return false
}

// SetWarningThreshold gets a reference to the given float32 and assigns it to the WarningThreshold field.
func (o *AlertSchemaDto) SetWarningThreshold(v float32) {
	o.WarningThreshold = &v
}

// GetWindowMs returns the WindowMs field value
func (o *AlertSchemaDto) GetWindowMs() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WindowMs
}

// GetWindowMsOk returns a tuple with the WindowMs field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetWindowMsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WindowMs, true
}

// SetWindowMs sets field value
func (o *AlertSchemaDto) SetWindowMs(v float32) {
	o.WindowMs = v
}

// GetCondition returns the Condition field value
func (o *AlertSchemaDto) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *AlertSchemaDto) SetCondition(v string) {
	o.Condition = v
}

// GetRenotificationCondition returns the RenotificationCondition field value if set, zero value otherwise.
func (o *AlertSchemaDto) GetRenotificationCondition() string {
	if o == nil || IsNil(o.RenotificationCondition) {
		var ret string
		return ret
	}
	return *o.RenotificationCondition
}

// GetRenotificationConditionOk returns a tuple with the RenotificationCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetRenotificationConditionOk() (*string, bool) {
	if o == nil || IsNil(o.RenotificationCondition) {
		return nil, false
	}
	return o.RenotificationCondition, true
}

// HasRenotificationCondition returns a boolean if a field has been set.
func (o *AlertSchemaDto) HasRenotificationCondition() bool {
	if o != nil && !IsNil(o.RenotificationCondition) {
		return true
	}

	return false
}

// SetRenotificationCondition gets a reference to the given string and assigns it to the RenotificationCondition field.
func (o *AlertSchemaDto) SetRenotificationCondition(v string) {
	o.RenotificationCondition = &v
}

// GetRenotificationWindowMs returns the RenotificationWindowMs field value if set, zero value otherwise.
func (o *AlertSchemaDto) GetRenotificationWindowMs() float32 {
	if o == nil || IsNil(o.RenotificationWindowMs) {
		var ret float32
		return ret
	}
	return *o.RenotificationWindowMs
}

// GetRenotificationWindowMsOk returns a tuple with the RenotificationWindowMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetRenotificationWindowMsOk() (*float32, bool) {
	if o == nil || IsNil(o.RenotificationWindowMs) {
		return nil, false
	}
	return o.RenotificationWindowMs, true
}

// HasRenotificationWindowMs returns a boolean if a field has been set.
func (o *AlertSchemaDto) HasRenotificationWindowMs() bool {
	if o != nil && !IsNil(o.RenotificationWindowMs) {
		return true
	}

	return false
}

// SetRenotificationWindowMs gets a reference to the given float32 and assigns it to the RenotificationWindowMs field.
func (o *AlertSchemaDto) SetRenotificationWindowMs(v float32) {
	o.RenotificationWindowMs = &v
}

// GetRenotificationMessage returns the RenotificationMessage field value if set, zero value otherwise.
func (o *AlertSchemaDto) GetRenotificationMessage() string {
	if o == nil || IsNil(o.RenotificationMessage) {
		var ret string
		return ret
	}
	return *o.RenotificationMessage
}

// GetRenotificationMessageOk returns a tuple with the RenotificationMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetRenotificationMessageOk() (*string, bool) {
	if o == nil || IsNil(o.RenotificationMessage) {
		return nil, false
	}
	return o.RenotificationMessage, true
}

// HasRenotificationMessage returns a boolean if a field has been set.
func (o *AlertSchemaDto) HasRenotificationMessage() bool {
	if o != nil && !IsNil(o.RenotificationMessage) {
		return true
	}

	return false
}

// SetRenotificationMessage gets a reference to the given string and assigns it to the RenotificationMessage field.
func (o *AlertSchemaDto) SetRenotificationMessage(v string) {
	o.RenotificationMessage = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *AlertSchemaDto) GetTeam() nil {
	if o == nil || IsNil(o.Team) {
		var ret nil
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetTeamOk() (*nil, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *AlertSchemaDto) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given nil and assigns it to the Team field.
func (o *AlertSchemaDto) SetTeam(v nil) {
	o.Team = &v
}

// GetTags returns the Tags field value
func (o *AlertSchemaDto) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AlertSchemaDto) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *AlertSchemaDto) SetTags(v []string) {
	o.Tags = v
}

func (o AlertSchemaDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertSchemaDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["alertType"] = o.AlertType
	toSerialize["metrics"] = o.Metrics
	toSerialize["metricGroupBys"] = o.MetricGroupBys
	if !IsNil(o.Formula) {
		toSerialize["formula"] = o.Formula
	}
	toSerialize["message"] = o.Message
	toSerialize["instruction"] = o.Instruction
	if !IsNil(o.CreatorID) {
		toSerialize["creatorID"] = o.CreatorID
	}
	toSerialize["companyID"] = o.CompanyID
	toSerialize["priority"] = o.Priority
	toSerialize["alertThreshold"] = o.AlertThreshold
	if !IsNil(o.WarningThreshold) {
		toSerialize["warningThreshold"] = o.WarningThreshold
	}
	toSerialize["windowMs"] = o.WindowMs
	toSerialize["condition"] = o.Condition
	if !IsNil(o.RenotificationCondition) {
		toSerialize["renotificationCondition"] = o.RenotificationCondition
	}
	if !IsNil(o.RenotificationWindowMs) {
		toSerialize["renotificationWindowMs"] = o.RenotificationWindowMs
	}
	if !IsNil(o.RenotificationMessage) {
		toSerialize["renotificationMessage"] = o.RenotificationMessage
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	toSerialize["tags"] = o.Tags
	return toSerialize, nil
}

func (o *AlertSchemaDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"alertType",
		"metrics",
		"metricGroupBys",
		"message",
		"instruction",
		"companyID",
		"priority",
		"alertThreshold",
		"windowMs",
		"condition",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertSchemaDto := _AlertSchemaDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertSchemaDto)

	if err != nil {
		return err
	}

	*o = AlertSchemaDto(varAlertSchemaDto)

	return err
}

type NullableAlertSchemaDto struct {
	value *AlertSchemaDto
	isSet bool
}

func (v NullableAlertSchemaDto) Get() *AlertSchemaDto {
	return v.value
}

func (v *NullableAlertSchemaDto) Set(val *AlertSchemaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSchemaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSchemaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSchemaDto(val *AlertSchemaDto) *NullableAlertSchemaDto {
	return &NullableAlertSchemaDto{value: val, isSet: true}
}

func (v NullableAlertSchemaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSchemaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


