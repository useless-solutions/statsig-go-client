/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ArchiveSchemaDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveSchemaDto{}

// ArchiveSchemaDto struct for ArchiveSchemaDto
type ArchiveSchemaDto struct {
	ForceArchive *bool `json:"forceArchive,omitempty"`
}

// NewArchiveSchemaDto instantiates a new ArchiveSchemaDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveSchemaDto() *ArchiveSchemaDto {
	this := ArchiveSchemaDto{}
	return &this
}

// NewArchiveSchemaDtoWithDefaults instantiates a new ArchiveSchemaDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveSchemaDtoWithDefaults() *ArchiveSchemaDto {
	this := ArchiveSchemaDto{}
	return &this
}

// GetForceArchive returns the ForceArchive field value if set, zero value otherwise.
func (o *ArchiveSchemaDto) GetForceArchive() bool {
	if o == nil || IsNil(o.ForceArchive) {
		var ret bool
		return ret
	}
	return *o.ForceArchive
}

// GetForceArchiveOk returns a tuple with the ForceArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveSchemaDto) GetForceArchiveOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceArchive) {
		return nil, false
	}
	return o.ForceArchive, true
}

// HasForceArchive returns a boolean if a field has been set.
func (o *ArchiveSchemaDto) HasForceArchive() bool {
	if o != nil && !IsNil(o.ForceArchive) {
		return true
	}

	return false
}

// SetForceArchive gets a reference to the given bool and assigns it to the ForceArchive field.
func (o *ArchiveSchemaDto) SetForceArchive(v bool) {
	o.ForceArchive = &v
}

func (o ArchiveSchemaDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveSchemaDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForceArchive) {
		toSerialize["forceArchive"] = o.ForceArchive
	}
	return toSerialize, nil
}

type NullableArchiveSchemaDto struct {
	value *ArchiveSchemaDto
	isSet bool
}

func (v NullableArchiveSchemaDto) Get() *ArchiveSchemaDto {
	return v.value
}

func (v *NullableArchiveSchemaDto) Set(val *ArchiveSchemaDto) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveSchemaDto) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveSchemaDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveSchemaDto(val *ArchiveSchemaDto) *NullableArchiveSchemaDto {
	return &NullableArchiveSchemaDto{value: val, isSet: true}
}

func (v NullableArchiveSchemaDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveSchemaDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


