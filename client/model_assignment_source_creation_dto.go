/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssignmentSourceCreationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignmentSourceCreationDto{}

// AssignmentSourceCreationDto struct for AssignmentSourceCreationDto
type AssignmentSourceCreationDto struct {
	// Unique identifier for the assignment source.
	Name string `json:"name"`
	// Optional detailed context for the assignment source.
	Description *string `json:"description,omitempty"`
	// Marks the assignment source as verified for internal trustworthiness.
	IsVerified *bool `json:"isVerified,omitempty"`
	// Optional tags for categorization.
	Tags []string `json:"tags,omitempty"`
	// SQL query defining the data source for assignments.
	Sql string `json:"sql"`
	// Column name representing the timestamp of assignments.
	TimestampColumn string `json:"timestampColumn"`
	// Column name for the experiment ID associated with the assignments.
	ExperimentIDColumn string `json:"experimentIDColumn"`
	// Column name for the group ID linked to the assignments.
	GroupIDColumn string `json:"groupIDColumn"`
	// Mappings of Statsig units to their respective columns.
	IdTypeMapping []AssignmentSourceCreationDtoIdTypeMappingInner `json:"idTypeMapping"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
}

type _AssignmentSourceCreationDto AssignmentSourceCreationDto

// NewAssignmentSourceCreationDto instantiates a new AssignmentSourceCreationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignmentSourceCreationDto(name string, sql string, timestampColumn string, experimentIDColumn string, groupIDColumn string, idTypeMapping []AssignmentSourceCreationDtoIdTypeMappingInner) *AssignmentSourceCreationDto {
	this := AssignmentSourceCreationDto{}
	this.Name = name
	this.Sql = sql
	this.TimestampColumn = timestampColumn
	this.ExperimentIDColumn = experimentIDColumn
	this.GroupIDColumn = groupIDColumn
	this.IdTypeMapping = idTypeMapping
	return &this
}

// NewAssignmentSourceCreationDtoWithDefaults instantiates a new AssignmentSourceCreationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentSourceCreationDtoWithDefaults() *AssignmentSourceCreationDto {
	this := AssignmentSourceCreationDto{}
	return &this
}

// GetName returns the Name field value
func (o *AssignmentSourceCreationDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AssignmentSourceCreationDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AssignmentSourceCreationDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AssignmentSourceCreationDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AssignmentSourceCreationDto) SetDescription(v string) {
	o.Description = &v
}

// GetIsVerified returns the IsVerified field value if set, zero value otherwise.
func (o *AssignmentSourceCreationDto) GetIsVerified() bool {
	if o == nil || IsNil(o.IsVerified) {
		var ret bool
		return ret
	}
	return *o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetIsVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVerified) {
		return nil, false
	}
	return o.IsVerified, true
}

// HasIsVerified returns a boolean if a field has been set.
func (o *AssignmentSourceCreationDto) HasIsVerified() bool {
	if o != nil && !IsNil(o.IsVerified) {
		return true
	}

	return false
}

// SetIsVerified gets a reference to the given bool and assigns it to the IsVerified field.
func (o *AssignmentSourceCreationDto) SetIsVerified(v bool) {
	o.IsVerified = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AssignmentSourceCreationDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AssignmentSourceCreationDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *AssignmentSourceCreationDto) SetTags(v []string) {
	o.Tags = v
}

// GetSql returns the Sql field value
func (o *AssignmentSourceCreationDto) GetSql() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sql
}

// GetSqlOk returns a tuple with the Sql field value
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetSqlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sql, true
}

// SetSql sets field value
func (o *AssignmentSourceCreationDto) SetSql(v string) {
	o.Sql = v
}

// GetTimestampColumn returns the TimestampColumn field value
func (o *AssignmentSourceCreationDto) GetTimestampColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimestampColumn
}

// GetTimestampColumnOk returns a tuple with the TimestampColumn field value
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetTimestampColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimestampColumn, true
}

// SetTimestampColumn sets field value
func (o *AssignmentSourceCreationDto) SetTimestampColumn(v string) {
	o.TimestampColumn = v
}

// GetExperimentIDColumn returns the ExperimentIDColumn field value
func (o *AssignmentSourceCreationDto) GetExperimentIDColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExperimentIDColumn
}

// GetExperimentIDColumnOk returns a tuple with the ExperimentIDColumn field value
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetExperimentIDColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExperimentIDColumn, true
}

// SetExperimentIDColumn sets field value
func (o *AssignmentSourceCreationDto) SetExperimentIDColumn(v string) {
	o.ExperimentIDColumn = v
}

// GetGroupIDColumn returns the GroupIDColumn field value
func (o *AssignmentSourceCreationDto) GetGroupIDColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupIDColumn
}

// GetGroupIDColumnOk returns a tuple with the GroupIDColumn field value
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetGroupIDColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupIDColumn, true
}

// SetGroupIDColumn sets field value
func (o *AssignmentSourceCreationDto) SetGroupIDColumn(v string) {
	o.GroupIDColumn = v
}

// GetIdTypeMapping returns the IdTypeMapping field value
func (o *AssignmentSourceCreationDto) GetIdTypeMapping() []AssignmentSourceCreationDtoIdTypeMappingInner {
	if o == nil {
		var ret []AssignmentSourceCreationDtoIdTypeMappingInner
		return ret
	}

	return o.IdTypeMapping
}

// GetIdTypeMappingOk returns a tuple with the IdTypeMapping field value
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetIdTypeMappingOk() ([]AssignmentSourceCreationDtoIdTypeMappingInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdTypeMapping, true
}

// SetIdTypeMapping sets field value
func (o *AssignmentSourceCreationDto) SetIdTypeMapping(v []AssignmentSourceCreationDtoIdTypeMappingInner) {
	o.IdTypeMapping = v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *AssignmentSourceCreationDto) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignmentSourceCreationDto) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadOnly) {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *AssignmentSourceCreationDto) HasIsReadOnly() bool {
	if o != nil && !IsNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *AssignmentSourceCreationDto) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

func (o AssignmentSourceCreationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignmentSourceCreationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsVerified) {
		toSerialize["isVerified"] = o.IsVerified
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["sql"] = o.Sql
	toSerialize["timestampColumn"] = o.TimestampColumn
	toSerialize["experimentIDColumn"] = o.ExperimentIDColumn
	toSerialize["groupIDColumn"] = o.GroupIDColumn
	toSerialize["idTypeMapping"] = o.IdTypeMapping
	if !IsNil(o.IsReadOnly) {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	return toSerialize, nil
}

func (o *AssignmentSourceCreationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sql",
		"timestampColumn",
		"experimentIDColumn",
		"groupIDColumn",
		"idTypeMapping",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssignmentSourceCreationDto := _AssignmentSourceCreationDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssignmentSourceCreationDto)

	if err != nil {
		return err
	}

	*o = AssignmentSourceCreationDto(varAssignmentSourceCreationDto)

	return err
}

type NullableAssignmentSourceCreationDto struct {
	value *AssignmentSourceCreationDto
	isSet bool
}

func (v NullableAssignmentSourceCreationDto) Get() *AssignmentSourceCreationDto {
	return v.value
}

func (v *NullableAssignmentSourceCreationDto) Set(val *AssignmentSourceCreationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignmentSourceCreationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignmentSourceCreationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignmentSourceCreationDto(val *AssignmentSourceCreationDto) *NullableAssignmentSourceCreationDto {
	return &NullableAssignmentSourceCreationDto{value: val, isSet: true}
}

func (v NullableAssignmentSourceCreationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignmentSourceCreationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


