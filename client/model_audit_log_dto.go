/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuditLogDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogDto{}

// AuditLogDto struct for AuditLogDto
type AuditLogDto struct {
	// id of the audit log
	Id string `json:"id"`
	// name of the audit log
	Name string `json:"name"`
	// change log of the audit log
	ChangeLog string `json:"changeLog"`
	ActionType map[string]interface{} `json:"actionType"`
	Date string `json:"date"`
	Time string `json:"time"`
	UpdatedBy string `json:"updatedBy"`
	UpdatedByUserID string `json:"updatedByUserID"`
	ModifierEmail map[string]interface{} `json:"modifierEmail"`
	Changes map[string]interface{} `json:"changes"`
	Tags []string `json:"tags"`
	TargetAppIDs []string `json:"targetAppIDs,omitempty"`
}

type _AuditLogDto AuditLogDto

// NewAuditLogDto instantiates a new AuditLogDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogDto(id string, name string, changeLog string, actionType map[string]interface{}, date string, time string, updatedBy string, updatedByUserID string, modifierEmail map[string]interface{}, changes map[string]interface{}, tags []string) *AuditLogDto {
	this := AuditLogDto{}
	this.Id = id
	this.Name = name
	this.ChangeLog = changeLog
	this.ActionType = actionType
	this.Date = date
	this.Time = time
	this.UpdatedBy = updatedBy
	this.UpdatedByUserID = updatedByUserID
	this.ModifierEmail = modifierEmail
	this.Changes = changes
	this.Tags = tags
	return &this
}

// NewAuditLogDtoWithDefaults instantiates a new AuditLogDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogDtoWithDefaults() *AuditLogDto {
	this := AuditLogDto{}
	return &this
}

// GetId returns the Id field value
func (o *AuditLogDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AuditLogDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AuditLogDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuditLogDto) SetName(v string) {
	o.Name = v
}

// GetChangeLog returns the ChangeLog field value
func (o *AuditLogDto) GetChangeLog() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetChangeLogOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeLog, true
}

// SetChangeLog sets field value
func (o *AuditLogDto) SetChangeLog(v string) {
	o.ChangeLog = v
}

// GetActionType returns the ActionType field value
func (o *AuditLogDto) GetActionType() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetActionTypeOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ActionType, true
}

// SetActionType sets field value
func (o *AuditLogDto) SetActionType(v map[string]interface{}) {
	o.ActionType = v
}

// GetDate returns the Date field value
func (o *AuditLogDto) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *AuditLogDto) SetDate(v string) {
	o.Date = v
}

// GetTime returns the Time field value
func (o *AuditLogDto) GetTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *AuditLogDto) SetTime(v string) {
	o.Time = v
}

// GetUpdatedBy returns the UpdatedBy field value
func (o *AuditLogDto) GetUpdatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetUpdatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedBy, true
}

// SetUpdatedBy sets field value
func (o *AuditLogDto) SetUpdatedBy(v string) {
	o.UpdatedBy = v
}

// GetUpdatedByUserID returns the UpdatedByUserID field value
func (o *AuditLogDto) GetUpdatedByUserID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedByUserID
}

// GetUpdatedByUserIDOk returns a tuple with the UpdatedByUserID field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetUpdatedByUserIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedByUserID, true
}

// SetUpdatedByUserID sets field value
func (o *AuditLogDto) SetUpdatedByUserID(v string) {
	o.UpdatedByUserID = v
}

// GetModifierEmail returns the ModifierEmail field value
func (o *AuditLogDto) GetModifierEmail() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ModifierEmail
}

// GetModifierEmailOk returns a tuple with the ModifierEmail field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetModifierEmailOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ModifierEmail, true
}

// SetModifierEmail sets field value
func (o *AuditLogDto) SetModifierEmail(v map[string]interface{}) {
	o.ModifierEmail = v
}

// GetChanges returns the Changes field value
func (o *AuditLogDto) GetChanges() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetChangesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Changes, true
}

// SetChanges sets field value
func (o *AuditLogDto) SetChanges(v map[string]interface{}) {
	o.Changes = v
}

// GetTags returns the Tags field value
func (o *AuditLogDto) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *AuditLogDto) SetTags(v []string) {
	o.Tags = v
}

// GetTargetAppIDs returns the TargetAppIDs field value if set, zero value otherwise.
func (o *AuditLogDto) GetTargetAppIDs() []string {
	if o == nil || IsNil(o.TargetAppIDs) {
		var ret []string
		return ret
	}
	return o.TargetAppIDs
}

// GetTargetAppIDsOk returns a tuple with the TargetAppIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogDto) GetTargetAppIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetAppIDs) {
		return nil, false
	}
	return o.TargetAppIDs, true
}

// HasTargetAppIDs returns a boolean if a field has been set.
func (o *AuditLogDto) HasTargetAppIDs() bool {
	if o != nil && !IsNil(o.TargetAppIDs) {
		return true
	}

	return false
}

// SetTargetAppIDs gets a reference to the given []string and assigns it to the TargetAppIDs field.
func (o *AuditLogDto) SetTargetAppIDs(v []string) {
	o.TargetAppIDs = v
}

func (o AuditLogDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["changeLog"] = o.ChangeLog
	toSerialize["actionType"] = o.ActionType
	toSerialize["date"] = o.Date
	toSerialize["time"] = o.Time
	toSerialize["updatedBy"] = o.UpdatedBy
	toSerialize["updatedByUserID"] = o.UpdatedByUserID
	toSerialize["modifierEmail"] = o.ModifierEmail
	toSerialize["changes"] = o.Changes
	toSerialize["tags"] = o.Tags
	if !IsNil(o.TargetAppIDs) {
		toSerialize["targetAppIDs"] = o.TargetAppIDs
	}
	return toSerialize, nil
}

func (o *AuditLogDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"changeLog",
		"actionType",
		"date",
		"time",
		"updatedBy",
		"updatedByUserID",
		"modifierEmail",
		"changes",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditLogDto := _AuditLogDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditLogDto)

	if err != nil {
		return err
	}

	*o = AuditLogDto(varAuditLogDto)

	return err
}

type NullableAuditLogDto struct {
	value *AuditLogDto
	isSet bool
}

func (v NullableAuditLogDto) Get() *AuditLogDto {
	return v.value
}

func (v *NullableAuditLogDto) Set(val *AuditLogDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogDto(val *AuditLogDto) *NullableAuditLogDto {
	return &NullableAuditLogDto{value: val, isSet: true}
}

func (v NullableAuditLogDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


