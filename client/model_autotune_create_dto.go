/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AutotuneCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutotuneCreateDto{}

// AutotuneCreateDto struct for AutotuneCreateDto
type AutotuneCreateDto struct {
	// A brief summary of what the autotune is being used for.
	Description *string `json:"description,omitempty"`
	// An array of Variant objects.
	Variants []AutotuneCreateDtoVariantsInner `json:"variants"`
	// The event you are trying to optimize for.
	SuccessEvent string `json:"successEvent"`
	// The value that should come with the event for it to be considered successful.
	SuccessEventValue *string `json:"successEventValue,omitempty"`
	// The initial time period where Autotune will equally split the traffic.
	ExplorationWindow string `json:"explorationWindow"`
	// The maximum duration between the exposure and success event that counts as a success.
	AttributionWindow string `json:"attributionWindow"`
	// The \"probability of best\" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
	WinnerThreshold string `json:"winnerThreshold"`
	// Metadata field containing the numeric value to optimize for. If this field is null, autotune optimizes for the existence of a follow-up event. This is only used for contextual autotunes.
	MetadataField *string `json:"metadataField,omitempty"`
	// Whether to optimize for an increase or decrease in the metadata field value. Default is true. This is only used for contextual autotunes.
	HigherIsBetter *bool `json:"higherIsBetter,omitempty"`
	// The name that was originally given to the autotune on creation but formatted as an ID (\"A Autotune\" -> \"a_autotune\").
	Name string `json:"name"`
	// idType of the autotune (userID, stableID, or a customID). Defaults to userID if not provided
	IdType *string `json:"idType,omitempty"`
	// Makes this autotune contextual
	IsContextual *bool `json:"isContextual,omitempty"`
}

type _AutotuneCreateDto AutotuneCreateDto

// NewAutotuneCreateDto instantiates a new AutotuneCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutotuneCreateDto(variants []AutotuneCreateDtoVariantsInner, successEvent string, explorationWindow string, attributionWindow string, winnerThreshold string, name string) *AutotuneCreateDto {
	this := AutotuneCreateDto{}
	this.Variants = variants
	this.SuccessEvent = successEvent
	this.ExplorationWindow = explorationWindow
	this.AttributionWindow = attributionWindow
	this.WinnerThreshold = winnerThreshold
	this.Name = name
	return &this
}

// NewAutotuneCreateDtoWithDefaults instantiates a new AutotuneCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutotuneCreateDtoWithDefaults() *AutotuneCreateDto {
	this := AutotuneCreateDto{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AutotuneCreateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AutotuneCreateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AutotuneCreateDto) SetDescription(v string) {
	o.Description = &v
}

// GetVariants returns the Variants field value
func (o *AutotuneCreateDto) GetVariants() []AutotuneCreateDtoVariantsInner {
	if o == nil {
		var ret []AutotuneCreateDtoVariantsInner
		return ret
	}

	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetVariantsOk() ([]AutotuneCreateDtoVariantsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Variants, true
}

// SetVariants sets field value
func (o *AutotuneCreateDto) SetVariants(v []AutotuneCreateDtoVariantsInner) {
	o.Variants = v
}

// GetSuccessEvent returns the SuccessEvent field value
func (o *AutotuneCreateDto) GetSuccessEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuccessEvent
}

// GetSuccessEventOk returns a tuple with the SuccessEvent field value
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetSuccessEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessEvent, true
}

// SetSuccessEvent sets field value
func (o *AutotuneCreateDto) SetSuccessEvent(v string) {
	o.SuccessEvent = v
}

// GetSuccessEventValue returns the SuccessEventValue field value if set, zero value otherwise.
func (o *AutotuneCreateDto) GetSuccessEventValue() string {
	if o == nil || IsNil(o.SuccessEventValue) {
		var ret string
		return ret
	}
	return *o.SuccessEventValue
}

// GetSuccessEventValueOk returns a tuple with the SuccessEventValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetSuccessEventValueOk() (*string, bool) {
	if o == nil || IsNil(o.SuccessEventValue) {
		return nil, false
	}
	return o.SuccessEventValue, true
}

// HasSuccessEventValue returns a boolean if a field has been set.
func (o *AutotuneCreateDto) HasSuccessEventValue() bool {
	if o != nil && !IsNil(o.SuccessEventValue) {
		return true
	}

	return false
}

// SetSuccessEventValue gets a reference to the given string and assigns it to the SuccessEventValue field.
func (o *AutotuneCreateDto) SetSuccessEventValue(v string) {
	o.SuccessEventValue = &v
}

// GetExplorationWindow returns the ExplorationWindow field value
func (o *AutotuneCreateDto) GetExplorationWindow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplorationWindow
}

// GetExplorationWindowOk returns a tuple with the ExplorationWindow field value
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetExplorationWindowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplorationWindow, true
}

// SetExplorationWindow sets field value
func (o *AutotuneCreateDto) SetExplorationWindow(v string) {
	o.ExplorationWindow = v
}

// GetAttributionWindow returns the AttributionWindow field value
func (o *AutotuneCreateDto) GetAttributionWindow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributionWindow
}

// GetAttributionWindowOk returns a tuple with the AttributionWindow field value
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetAttributionWindowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributionWindow, true
}

// SetAttributionWindow sets field value
func (o *AutotuneCreateDto) SetAttributionWindow(v string) {
	o.AttributionWindow = v
}

// GetWinnerThreshold returns the WinnerThreshold field value
func (o *AutotuneCreateDto) GetWinnerThreshold() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WinnerThreshold
}

// GetWinnerThresholdOk returns a tuple with the WinnerThreshold field value
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetWinnerThresholdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WinnerThreshold, true
}

// SetWinnerThreshold sets field value
func (o *AutotuneCreateDto) SetWinnerThreshold(v string) {
	o.WinnerThreshold = v
}

// GetMetadataField returns the MetadataField field value if set, zero value otherwise.
func (o *AutotuneCreateDto) GetMetadataField() string {
	if o == nil || IsNil(o.MetadataField) {
		var ret string
		return ret
	}
	return *o.MetadataField
}

// GetMetadataFieldOk returns a tuple with the MetadataField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetMetadataFieldOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataField) {
		return nil, false
	}
	return o.MetadataField, true
}

// HasMetadataField returns a boolean if a field has been set.
func (o *AutotuneCreateDto) HasMetadataField() bool {
	if o != nil && !IsNil(o.MetadataField) {
		return true
	}

	return false
}

// SetMetadataField gets a reference to the given string and assigns it to the MetadataField field.
func (o *AutotuneCreateDto) SetMetadataField(v string) {
	o.MetadataField = &v
}

// GetHigherIsBetter returns the HigherIsBetter field value if set, zero value otherwise.
func (o *AutotuneCreateDto) GetHigherIsBetter() bool {
	if o == nil || IsNil(o.HigherIsBetter) {
		var ret bool
		return ret
	}
	return *o.HigherIsBetter
}

// GetHigherIsBetterOk returns a tuple with the HigherIsBetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetHigherIsBetterOk() (*bool, bool) {
	if o == nil || IsNil(o.HigherIsBetter) {
		return nil, false
	}
	return o.HigherIsBetter, true
}

// HasHigherIsBetter returns a boolean if a field has been set.
func (o *AutotuneCreateDto) HasHigherIsBetter() bool {
	if o != nil && !IsNil(o.HigherIsBetter) {
		return true
	}

	return false
}

// SetHigherIsBetter gets a reference to the given bool and assigns it to the HigherIsBetter field.
func (o *AutotuneCreateDto) SetHigherIsBetter(v bool) {
	o.HigherIsBetter = &v
}

// GetName returns the Name field value
func (o *AutotuneCreateDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AutotuneCreateDto) SetName(v string) {
	o.Name = v
}

// GetIdType returns the IdType field value if set, zero value otherwise.
func (o *AutotuneCreateDto) GetIdType() string {
	if o == nil || IsNil(o.IdType) {
		var ret string
		return ret
	}
	return *o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetIdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdType) {
		return nil, false
	}
	return o.IdType, true
}

// HasIdType returns a boolean if a field has been set.
func (o *AutotuneCreateDto) HasIdType() bool {
	if o != nil && !IsNil(o.IdType) {
		return true
	}

	return false
}

// SetIdType gets a reference to the given string and assigns it to the IdType field.
func (o *AutotuneCreateDto) SetIdType(v string) {
	o.IdType = &v
}

// GetIsContextual returns the IsContextual field value if set, zero value otherwise.
func (o *AutotuneCreateDto) GetIsContextual() bool {
	if o == nil || IsNil(o.IsContextual) {
		var ret bool
		return ret
	}
	return *o.IsContextual
}

// GetIsContextualOk returns a tuple with the IsContextual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotuneCreateDto) GetIsContextualOk() (*bool, bool) {
	if o == nil || IsNil(o.IsContextual) {
		return nil, false
	}
	return o.IsContextual, true
}

// HasIsContextual returns a boolean if a field has been set.
func (o *AutotuneCreateDto) HasIsContextual() bool {
	if o != nil && !IsNil(o.IsContextual) {
		return true
	}

	return false
}

// SetIsContextual gets a reference to the given bool and assigns it to the IsContextual field.
func (o *AutotuneCreateDto) SetIsContextual(v bool) {
	o.IsContextual = &v
}

func (o AutotuneCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutotuneCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["variants"] = o.Variants
	toSerialize["successEvent"] = o.SuccessEvent
	if !IsNil(o.SuccessEventValue) {
		toSerialize["successEventValue"] = o.SuccessEventValue
	}
	toSerialize["explorationWindow"] = o.ExplorationWindow
	toSerialize["attributionWindow"] = o.AttributionWindow
	toSerialize["winnerThreshold"] = o.WinnerThreshold
	if !IsNil(o.MetadataField) {
		toSerialize["metadataField"] = o.MetadataField
	}
	if !IsNil(o.HigherIsBetter) {
		toSerialize["higherIsBetter"] = o.HigherIsBetter
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.IdType) {
		toSerialize["idType"] = o.IdType
	}
	if !IsNil(o.IsContextual) {
		toSerialize["isContextual"] = o.IsContextual
	}
	return toSerialize, nil
}

func (o *AutotuneCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"variants",
		"successEvent",
		"explorationWindow",
		"attributionWindow",
		"winnerThreshold",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAutotuneCreateDto := _AutotuneCreateDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAutotuneCreateDto)

	if err != nil {
		return err
	}

	*o = AutotuneCreateDto(varAutotuneCreateDto)

	return err
}

type NullableAutotuneCreateDto struct {
	value *AutotuneCreateDto
	isSet bool
}

func (v NullableAutotuneCreateDto) Get() *AutotuneCreateDto {
	return v.value
}

func (v *NullableAutotuneCreateDto) Set(val *AutotuneCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAutotuneCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAutotuneCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutotuneCreateDto(val *AutotuneCreateDto) *NullableAutotuneCreateDto {
	return &NullableAutotuneCreateDto{value: val, isSet: true}
}

func (v NullableAutotuneCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutotuneCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


