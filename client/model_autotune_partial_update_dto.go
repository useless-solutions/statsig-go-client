/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AutotunePartialUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutotunePartialUpdateDto{}

// AutotunePartialUpdateDto struct for AutotunePartialUpdateDto
type AutotunePartialUpdateDto struct {
	// A brief summary of what the autotune is being used for.
	Description *string `json:"description,omitempty"`
	// An array of Variant objects.
	Variants []AutotuneCreateDtoVariantsInner `json:"variants,omitempty"`
	// The event you are trying to optimize for.
	SuccessEvent *string `json:"successEvent,omitempty"`
	// The value that should come with the event for it to be considered successful.
	SuccessEventValue *string `json:"successEventValue,omitempty"`
	// The initial time period where Autotune will equally split the traffic.
	ExplorationWindow *string `json:"explorationWindow,omitempty"`
	// The maximum duration between the exposure and success event that counts as a success.
	AttributionWindow *string `json:"attributionWindow,omitempty"`
	// The \"probability of best\" threshold a variant needs to achieve for Autotune to declare it the winner, stop collecting data, and direct all traffic.
	WinnerThreshold *string `json:"winnerThreshold,omitempty"`
	// Metadata field containing the numeric value to optimize for. If this field is null, autotune optimizes for the existence of a follow-up event. This is only used for contextual autotunes.
	MetadataField *string `json:"metadataField,omitempty"`
	// Whether to optimize for an increase or decrease in the metadata field value. Default is true. This is only used for contextual autotunes.
	HigherIsBetter *bool `json:"higherIsBetter,omitempty"`
}

// NewAutotunePartialUpdateDto instantiates a new AutotunePartialUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutotunePartialUpdateDto() *AutotunePartialUpdateDto {
	this := AutotunePartialUpdateDto{}
	return &this
}

// NewAutotunePartialUpdateDtoWithDefaults instantiates a new AutotunePartialUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutotunePartialUpdateDtoWithDefaults() *AutotunePartialUpdateDto {
	this := AutotunePartialUpdateDto{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AutotunePartialUpdateDto) SetDescription(v string) {
	o.Description = &v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetVariants() []AutotuneCreateDtoVariantsInner {
	if o == nil || IsNil(o.Variants) {
		var ret []AutotuneCreateDtoVariantsInner
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetVariantsOk() ([]AutotuneCreateDtoVariantsInner, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []AutotuneCreateDtoVariantsInner and assigns it to the Variants field.
func (o *AutotunePartialUpdateDto) SetVariants(v []AutotuneCreateDtoVariantsInner) {
	o.Variants = v
}

// GetSuccessEvent returns the SuccessEvent field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetSuccessEvent() string {
	if o == nil || IsNil(o.SuccessEvent) {
		var ret string
		return ret
	}
	return *o.SuccessEvent
}

// GetSuccessEventOk returns a tuple with the SuccessEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetSuccessEventOk() (*string, bool) {
	if o == nil || IsNil(o.SuccessEvent) {
		return nil, false
	}
	return o.SuccessEvent, true
}

// HasSuccessEvent returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasSuccessEvent() bool {
	if o != nil && !IsNil(o.SuccessEvent) {
		return true
	}

	return false
}

// SetSuccessEvent gets a reference to the given string and assigns it to the SuccessEvent field.
func (o *AutotunePartialUpdateDto) SetSuccessEvent(v string) {
	o.SuccessEvent = &v
}

// GetSuccessEventValue returns the SuccessEventValue field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetSuccessEventValue() string {
	if o == nil || IsNil(o.SuccessEventValue) {
		var ret string
		return ret
	}
	return *o.SuccessEventValue
}

// GetSuccessEventValueOk returns a tuple with the SuccessEventValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetSuccessEventValueOk() (*string, bool) {
	if o == nil || IsNil(o.SuccessEventValue) {
		return nil, false
	}
	return o.SuccessEventValue, true
}

// HasSuccessEventValue returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasSuccessEventValue() bool {
	if o != nil && !IsNil(o.SuccessEventValue) {
		return true
	}

	return false
}

// SetSuccessEventValue gets a reference to the given string and assigns it to the SuccessEventValue field.
func (o *AutotunePartialUpdateDto) SetSuccessEventValue(v string) {
	o.SuccessEventValue = &v
}

// GetExplorationWindow returns the ExplorationWindow field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetExplorationWindow() string {
	if o == nil || IsNil(o.ExplorationWindow) {
		var ret string
		return ret
	}
	return *o.ExplorationWindow
}

// GetExplorationWindowOk returns a tuple with the ExplorationWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetExplorationWindowOk() (*string, bool) {
	if o == nil || IsNil(o.ExplorationWindow) {
		return nil, false
	}
	return o.ExplorationWindow, true
}

// HasExplorationWindow returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasExplorationWindow() bool {
	if o != nil && !IsNil(o.ExplorationWindow) {
		return true
	}

	return false
}

// SetExplorationWindow gets a reference to the given string and assigns it to the ExplorationWindow field.
func (o *AutotunePartialUpdateDto) SetExplorationWindow(v string) {
	o.ExplorationWindow = &v
}

// GetAttributionWindow returns the AttributionWindow field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetAttributionWindow() string {
	if o == nil || IsNil(o.AttributionWindow) {
		var ret string
		return ret
	}
	return *o.AttributionWindow
}

// GetAttributionWindowOk returns a tuple with the AttributionWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetAttributionWindowOk() (*string, bool) {
	if o == nil || IsNil(o.AttributionWindow) {
		return nil, false
	}
	return o.AttributionWindow, true
}

// HasAttributionWindow returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasAttributionWindow() bool {
	if o != nil && !IsNil(o.AttributionWindow) {
		return true
	}

	return false
}

// SetAttributionWindow gets a reference to the given string and assigns it to the AttributionWindow field.
func (o *AutotunePartialUpdateDto) SetAttributionWindow(v string) {
	o.AttributionWindow = &v
}

// GetWinnerThreshold returns the WinnerThreshold field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetWinnerThreshold() string {
	if o == nil || IsNil(o.WinnerThreshold) {
		var ret string
		return ret
	}
	return *o.WinnerThreshold
}

// GetWinnerThresholdOk returns a tuple with the WinnerThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetWinnerThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.WinnerThreshold) {
		return nil, false
	}
	return o.WinnerThreshold, true
}

// HasWinnerThreshold returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasWinnerThreshold() bool {
	if o != nil && !IsNil(o.WinnerThreshold) {
		return true
	}

	return false
}

// SetWinnerThreshold gets a reference to the given string and assigns it to the WinnerThreshold field.
func (o *AutotunePartialUpdateDto) SetWinnerThreshold(v string) {
	o.WinnerThreshold = &v
}

// GetMetadataField returns the MetadataField field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetMetadataField() string {
	if o == nil || IsNil(o.MetadataField) {
		var ret string
		return ret
	}
	return *o.MetadataField
}

// GetMetadataFieldOk returns a tuple with the MetadataField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetMetadataFieldOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataField) {
		return nil, false
	}
	return o.MetadataField, true
}

// HasMetadataField returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasMetadataField() bool {
	if o != nil && !IsNil(o.MetadataField) {
		return true
	}

	return false
}

// SetMetadataField gets a reference to the given string and assigns it to the MetadataField field.
func (o *AutotunePartialUpdateDto) SetMetadataField(v string) {
	o.MetadataField = &v
}

// GetHigherIsBetter returns the HigherIsBetter field value if set, zero value otherwise.
func (o *AutotunePartialUpdateDto) GetHigherIsBetter() bool {
	if o == nil || IsNil(o.HigherIsBetter) {
		var ret bool
		return ret
	}
	return *o.HigherIsBetter
}

// GetHigherIsBetterOk returns a tuple with the HigherIsBetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutotunePartialUpdateDto) GetHigherIsBetterOk() (*bool, bool) {
	if o == nil || IsNil(o.HigherIsBetter) {
		return nil, false
	}
	return o.HigherIsBetter, true
}

// HasHigherIsBetter returns a boolean if a field has been set.
func (o *AutotunePartialUpdateDto) HasHigherIsBetter() bool {
	if o != nil && !IsNil(o.HigherIsBetter) {
		return true
	}

	return false
}

// SetHigherIsBetter gets a reference to the given bool and assigns it to the HigherIsBetter field.
func (o *AutotunePartialUpdateDto) SetHigherIsBetter(v bool) {
	o.HigherIsBetter = &v
}

func (o AutotunePartialUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutotunePartialUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	if !IsNil(o.SuccessEvent) {
		toSerialize["successEvent"] = o.SuccessEvent
	}
	if !IsNil(o.SuccessEventValue) {
		toSerialize["successEventValue"] = o.SuccessEventValue
	}
	if !IsNil(o.ExplorationWindow) {
		toSerialize["explorationWindow"] = o.ExplorationWindow
	}
	if !IsNil(o.AttributionWindow) {
		toSerialize["attributionWindow"] = o.AttributionWindow
	}
	if !IsNil(o.WinnerThreshold) {
		toSerialize["winnerThreshold"] = o.WinnerThreshold
	}
	if !IsNil(o.MetadataField) {
		toSerialize["metadataField"] = o.MetadataField
	}
	if !IsNil(o.HigherIsBetter) {
		toSerialize["higherIsBetter"] = o.HigherIsBetter
	}
	return toSerialize, nil
}

type NullableAutotunePartialUpdateDto struct {
	value *AutotunePartialUpdateDto
	isSet bool
}

func (v NullableAutotunePartialUpdateDto) Get() *AutotunePartialUpdateDto {
	return v.value
}

func (v *NullableAutotunePartialUpdateDto) Set(val *AutotunePartialUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAutotunePartialUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAutotunePartialUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutotunePartialUpdateDto(val *AutotunePartialUpdateDto) *NullableAutotunePartialUpdateDto {
	return &NullableAutotunePartialUpdateDto{value: val, isSet: true}
}

func (v NullableAutotunePartialUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutotunePartialUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


