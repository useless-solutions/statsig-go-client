/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangeValidationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeValidationDto{}

// ChangeValidationDto struct for ChangeValidationDto
type ChangeValidationDto struct {
	Name string `json:"name"`
	Validated bool `json:"validated"`
}

type _ChangeValidationDto ChangeValidationDto

// NewChangeValidationDto instantiates a new ChangeValidationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeValidationDto(name string, validated bool) *ChangeValidationDto {
	this := ChangeValidationDto{}
	this.Name = name
	this.Validated = validated
	return &this
}

// NewChangeValidationDtoWithDefaults instantiates a new ChangeValidationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeValidationDtoWithDefaults() *ChangeValidationDto {
	this := ChangeValidationDto{}
	return &this
}

// GetName returns the Name field value
func (o *ChangeValidationDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChangeValidationDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChangeValidationDto) SetName(v string) {
	o.Name = v
}

// GetValidated returns the Validated field value
func (o *ChangeValidationDto) GetValidated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Validated
}

// GetValidatedOk returns a tuple with the Validated field value
// and a boolean to check if the value has been set.
func (o *ChangeValidationDto) GetValidatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validated, true
}

// SetValidated sets field value
func (o *ChangeValidationDto) SetValidated(v bool) {
	o.Validated = v
}

func (o ChangeValidationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeValidationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["validated"] = o.Validated
	return toSerialize, nil
}

func (o *ChangeValidationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"validated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeValidationDto := _ChangeValidationDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangeValidationDto)

	if err != nil {
		return err
	}

	*o = ChangeValidationDto(varChangeValidationDto)

	return err
}

type NullableChangeValidationDto struct {
	value *ChangeValidationDto
	isSet bool
}

func (v NullableChangeValidationDto) Get() *ChangeValidationDto {
	return v.value
}

func (v *NullableChangeValidationDto) Set(val *ChangeValidationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeValidationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeValidationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeValidationDto(val *ChangeValidationDto) *NullableChangeValidationDto {
	return &NullableChangeValidationDto{value: val, isSet: true}
}

func (v NullableChangeValidationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeValidationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


