/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DynamicConfigCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicConfigCreateDto{}

// DynamicConfigCreateDto struct for DynamicConfigCreateDto
type DynamicConfigCreateDto struct {
	// Is the dynamic config enabled
	IsEnabled *bool `json:"isEnabled,omitempty"`
	Description *string `json:"description,omitempty"`
	// An array of Rule objects
	Rules []DynamicConfigDtoRulesInner `json:"rules,omitempty"`
	// The fallback JSON object when no rules are triggered
	DefaultValue map[string]interface{} `json:"defaultValue,omitempty"`
	// Can include comments. If provided with defaultValue, must parse to the same JSON
	DefaultValueJson5 *string `json:"defaultValueJson5,omitempty"`
	// The type of ID which the dynamic config is based on.
	IdType *string `json:"idType,omitempty"`
	// The list of tag names attached to the dynamic config
	Tags []string `json:"tags,omitempty"`
	CreatorID *nil `json:"creatorID,omitempty"`
	CreatorEmail *nil `json:"creatorEmail,omitempty"`
	// A schema using JSON Schema Draft 2020-12 to enforce return values of this dynamic config's rules.
	Schema *nil `json:"schema,omitempty"`
	// `schema` except with Json5 comments. Optional and should parse to same json as `schema`.
	SchemaJson5 *nil `json:"schemaJson5,omitempty"`
	TargetApps *DynamicConfigDtoTargetApps `json:"targetApps,omitempty"`
	Team *nil `json:"team,omitempty"`
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_\\\\- ]*$"`
	Id *string `json:"id,omitempty" validate:"regexp=^[a-zA-Z0-9_-]*$"`
}

type _DynamicConfigCreateDto DynamicConfigCreateDto

// NewDynamicConfigCreateDto instantiates a new DynamicConfigCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicConfigCreateDto(name string) *DynamicConfigCreateDto {
	this := DynamicConfigCreateDto{}
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	this.Name = name
	return &this
}

// NewDynamicConfigCreateDtoWithDefaults instantiates a new DynamicConfigCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicConfigCreateDtoWithDefaults() *DynamicConfigCreateDto {
	this := DynamicConfigCreateDto{}
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DynamicConfigCreateDto) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DynamicConfigCreateDto) SetDescription(v string) {
	o.Description = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetRules() []DynamicConfigDtoRulesInner {
	if o == nil || IsNil(o.Rules) {
		var ret []DynamicConfigDtoRulesInner
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetRulesOk() ([]DynamicConfigDtoRulesInner, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []DynamicConfigDtoRulesInner and assigns it to the Rules field.
func (o *DynamicConfigCreateDto) SetRules(v []DynamicConfigDtoRulesInner) {
	o.Rules = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetDefaultValue() map[string]interface{} {
	if o == nil || IsNil(o.DefaultValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetDefaultValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return map[string]interface{}{}, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given map[string]interface{} and assigns it to the DefaultValue field.
func (o *DynamicConfigCreateDto) SetDefaultValue(v map[string]interface{}) {
	o.DefaultValue = v
}

// GetDefaultValueJson5 returns the DefaultValueJson5 field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetDefaultValueJson5() string {
	if o == nil || IsNil(o.DefaultValueJson5) {
		var ret string
		return ret
	}
	return *o.DefaultValueJson5
}

// GetDefaultValueJson5Ok returns a tuple with the DefaultValueJson5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetDefaultValueJson5Ok() (*string, bool) {
	if o == nil || IsNil(o.DefaultValueJson5) {
		return nil, false
	}
	return o.DefaultValueJson5, true
}

// HasDefaultValueJson5 returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasDefaultValueJson5() bool {
	if o != nil && !IsNil(o.DefaultValueJson5) {
		return true
	}

	return false
}

// SetDefaultValueJson5 gets a reference to the given string and assigns it to the DefaultValueJson5 field.
func (o *DynamicConfigCreateDto) SetDefaultValueJson5(v string) {
	o.DefaultValueJson5 = &v
}

// GetIdType returns the IdType field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetIdType() string {
	if o == nil || IsNil(o.IdType) {
		var ret string
		return ret
	}
	return *o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetIdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdType) {
		return nil, false
	}
	return o.IdType, true
}

// HasIdType returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasIdType() bool {
	if o != nil && !IsNil(o.IdType) {
		return true
	}

	return false
}

// SetIdType gets a reference to the given string and assigns it to the IdType field.
func (o *DynamicConfigCreateDto) SetIdType(v string) {
	o.IdType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DynamicConfigCreateDto) SetTags(v []string) {
	o.Tags = v
}

// GetCreatorID returns the CreatorID field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetCreatorID() nil {
	if o == nil || IsNil(o.CreatorID) {
		var ret nil
		return ret
	}
	return *o.CreatorID
}

// GetCreatorIDOk returns a tuple with the CreatorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetCreatorIDOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorID) {
		return nil, false
	}
	return o.CreatorID, true
}

// HasCreatorID returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasCreatorID() bool {
	if o != nil && !IsNil(o.CreatorID) {
		return true
	}

	return false
}

// SetCreatorID gets a reference to the given nil and assigns it to the CreatorID field.
func (o *DynamicConfigCreateDto) SetCreatorID(v nil) {
	o.CreatorID = &v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetCreatorEmail() nil {
	if o == nil || IsNil(o.CreatorEmail) {
		var ret nil
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetCreatorEmailOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorEmail) {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasCreatorEmail() bool {
	if o != nil && !IsNil(o.CreatorEmail) {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given nil and assigns it to the CreatorEmail field.
func (o *DynamicConfigCreateDto) SetCreatorEmail(v nil) {
	o.CreatorEmail = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetSchema() nil {
	if o == nil || IsNil(o.Schema) {
		var ret nil
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetSchemaOk() (*nil, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given nil and assigns it to the Schema field.
func (o *DynamicConfigCreateDto) SetSchema(v nil) {
	o.Schema = &v
}

// GetSchemaJson5 returns the SchemaJson5 field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetSchemaJson5() nil {
	if o == nil || IsNil(o.SchemaJson5) {
		var ret nil
		return ret
	}
	return *o.SchemaJson5
}

// GetSchemaJson5Ok returns a tuple with the SchemaJson5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetSchemaJson5Ok() (*nil, bool) {
	if o == nil || IsNil(o.SchemaJson5) {
		return nil, false
	}
	return o.SchemaJson5, true
}

// HasSchemaJson5 returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasSchemaJson5() bool {
	if o != nil && !IsNil(o.SchemaJson5) {
		return true
	}

	return false
}

// SetSchemaJson5 gets a reference to the given nil and assigns it to the SchemaJson5 field.
func (o *DynamicConfigCreateDto) SetSchemaJson5(v nil) {
	o.SchemaJson5 = &v
}

// GetTargetApps returns the TargetApps field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetTargetApps() DynamicConfigDtoTargetApps {
	if o == nil || IsNil(o.TargetApps) {
		var ret DynamicConfigDtoTargetApps
		return ret
	}
	return *o.TargetApps
}

// GetTargetAppsOk returns a tuple with the TargetApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetTargetAppsOk() (*DynamicConfigDtoTargetApps, bool) {
	if o == nil || IsNil(o.TargetApps) {
		return nil, false
	}
	return o.TargetApps, true
}

// HasTargetApps returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasTargetApps() bool {
	if o != nil && !IsNil(o.TargetApps) {
		return true
	}

	return false
}

// SetTargetApps gets a reference to the given DynamicConfigDtoTargetApps and assigns it to the TargetApps field.
func (o *DynamicConfigCreateDto) SetTargetApps(v DynamicConfigDtoTargetApps) {
	o.TargetApps = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetTeam() nil {
	if o == nil || IsNil(o.Team) {
		var ret nil
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetTeamOk() (*nil, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given nil and assigns it to the Team field.
func (o *DynamicConfigCreateDto) SetTeam(v nil) {
	o.Team = &v
}

// GetName returns the Name field value
func (o *DynamicConfigCreateDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DynamicConfigCreateDto) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DynamicConfigCreateDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicConfigCreateDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DynamicConfigCreateDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DynamicConfigCreateDto) SetId(v string) {
	o.Id = &v
}

func (o DynamicConfigCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicConfigCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.DefaultValueJson5) {
		toSerialize["defaultValueJson5"] = o.DefaultValueJson5
	}
	if !IsNil(o.IdType) {
		toSerialize["idType"] = o.IdType
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CreatorID) {
		toSerialize["creatorID"] = o.CreatorID
	}
	if !IsNil(o.CreatorEmail) {
		toSerialize["creatorEmail"] = o.CreatorEmail
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.SchemaJson5) {
		toSerialize["schemaJson5"] = o.SchemaJson5
	}
	if !IsNil(o.TargetApps) {
		toSerialize["targetApps"] = o.TargetApps
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *DynamicConfigCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDynamicConfigCreateDto := _DynamicConfigCreateDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDynamicConfigCreateDto)

	if err != nil {
		return err
	}

	*o = DynamicConfigCreateDto(varDynamicConfigCreateDto)

	return err
}

type NullableDynamicConfigCreateDto struct {
	value *DynamicConfigCreateDto
	isSet bool
}

func (v NullableDynamicConfigCreateDto) Get() *DynamicConfigCreateDto {
	return v.value
}

func (v *NullableDynamicConfigCreateDto) Set(val *DynamicConfigCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicConfigCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicConfigCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicConfigCreateDto(val *DynamicConfigCreateDto) *NullableDynamicConfigCreateDto {
	return &NullableDynamicConfigCreateDto{value: val, isSet: true}
}

func (v NullableDynamicConfigCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicConfigCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


