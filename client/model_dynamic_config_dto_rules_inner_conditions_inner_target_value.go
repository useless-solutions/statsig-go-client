/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// DynamicConfigDtoRulesInnerConditionsInnerTargetValue - struct for DynamicConfigDtoRulesInnerConditionsInnerTargetValue
type DynamicConfigDtoRulesInnerConditionsInnerTargetValue struct {
	ArrayOfFloat32 *[]float32
	ArrayOfString *[]string
	Float32 *float32
	String *string
}

// []float32AsDynamicConfigDtoRulesInnerConditionsInnerTargetValue is a convenience function that returns []float32 wrapped in DynamicConfigDtoRulesInnerConditionsInnerTargetValue
func ArrayOfFloat32AsDynamicConfigDtoRulesInnerConditionsInnerTargetValue(v *[]float32) DynamicConfigDtoRulesInnerConditionsInnerTargetValue {
	return DynamicConfigDtoRulesInnerConditionsInnerTargetValue{
		ArrayOfFloat32: v,
	}
}

// []stringAsDynamicConfigDtoRulesInnerConditionsInnerTargetValue is a convenience function that returns []string wrapped in DynamicConfigDtoRulesInnerConditionsInnerTargetValue
func ArrayOfStringAsDynamicConfigDtoRulesInnerConditionsInnerTargetValue(v *[]string) DynamicConfigDtoRulesInnerConditionsInnerTargetValue {
	return DynamicConfigDtoRulesInnerConditionsInnerTargetValue{
		ArrayOfString: v,
	}
}

// float32AsDynamicConfigDtoRulesInnerConditionsInnerTargetValue is a convenience function that returns float32 wrapped in DynamicConfigDtoRulesInnerConditionsInnerTargetValue
func Float32AsDynamicConfigDtoRulesInnerConditionsInnerTargetValue(v *float32) DynamicConfigDtoRulesInnerConditionsInnerTargetValue {
	return DynamicConfigDtoRulesInnerConditionsInnerTargetValue{
		Float32: v,
	}
}

// stringAsDynamicConfigDtoRulesInnerConditionsInnerTargetValue is a convenience function that returns string wrapped in DynamicConfigDtoRulesInnerConditionsInnerTargetValue
func StringAsDynamicConfigDtoRulesInnerConditionsInnerTargetValue(v *string) DynamicConfigDtoRulesInnerConditionsInnerTargetValue {
	return DynamicConfigDtoRulesInnerConditionsInnerTargetValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DynamicConfigDtoRulesInnerConditionsInnerTargetValue) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ArrayOfFloat32
	err = newStrictDecoder(data).Decode(&dst.ArrayOfFloat32)
	if err == nil {
		jsonArrayOfFloat32, _ := json.Marshal(dst.ArrayOfFloat32)
		if string(jsonArrayOfFloat32) == "{}" { // empty struct
			dst.ArrayOfFloat32 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfFloat32); err != nil {
				dst.ArrayOfFloat32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfFloat32 = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			if err = validator.Validate(dst.Float32); err != nil {
				dst.Float32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfFloat32 = nil
		dst.ArrayOfString = nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DynamicConfigDtoRulesInnerConditionsInnerTargetValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DynamicConfigDtoRulesInnerConditionsInnerTargetValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DynamicConfigDtoRulesInnerConditionsInnerTargetValue) MarshalJSON() ([]byte, error) {
	if src.ArrayOfFloat32 != nil {
		return json.Marshal(&src.ArrayOfFloat32)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DynamicConfigDtoRulesInnerConditionsInnerTargetValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfFloat32 != nil {
		return obj.ArrayOfFloat32
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue struct {
	value *DynamicConfigDtoRulesInnerConditionsInnerTargetValue
	isSet bool
}

func (v NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue) Get() *DynamicConfigDtoRulesInnerConditionsInnerTargetValue {
	return v.value
}

func (v *NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue) Set(val *DynamicConfigDtoRulesInnerConditionsInnerTargetValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue(val *DynamicConfigDtoRulesInnerConditionsInnerTargetValue) *NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue {
	return &NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue{value: val, isSet: true}
}

func (v NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicConfigDtoRulesInnerConditionsInnerTargetValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


