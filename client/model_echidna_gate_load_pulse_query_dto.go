/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EchidnaGateLoadPulseQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EchidnaGateLoadPulseQueryDto{}

// EchidnaGateLoadPulseQueryDto struct for EchidnaGateLoadPulseQueryDto
type EchidnaGateLoadPulseQueryDto struct {
	Refresh *string `json:"refresh,omitempty"`
	RuleId string `json:"ruleId"`
	TurboMode *bool `json:"turboMode,omitempty"`
}

type _EchidnaGateLoadPulseQueryDto EchidnaGateLoadPulseQueryDto

// NewEchidnaGateLoadPulseQueryDto instantiates a new EchidnaGateLoadPulseQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEchidnaGateLoadPulseQueryDto(ruleId string) *EchidnaGateLoadPulseQueryDto {
	this := EchidnaGateLoadPulseQueryDto{}
	var refresh string = "full"
	this.Refresh = &refresh
	this.RuleId = ruleId
	return &this
}

// NewEchidnaGateLoadPulseQueryDtoWithDefaults instantiates a new EchidnaGateLoadPulseQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEchidnaGateLoadPulseQueryDtoWithDefaults() *EchidnaGateLoadPulseQueryDto {
	this := EchidnaGateLoadPulseQueryDto{}
	var refresh string = "full"
	this.Refresh = &refresh
	return &this
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *EchidnaGateLoadPulseQueryDto) GetRefresh() string {
	if o == nil || IsNil(o.Refresh) {
		var ret string
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchidnaGateLoadPulseQueryDto) GetRefreshOk() (*string, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *EchidnaGateLoadPulseQueryDto) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given string and assigns it to the Refresh field.
func (o *EchidnaGateLoadPulseQueryDto) SetRefresh(v string) {
	o.Refresh = &v
}

// GetRuleId returns the RuleId field value
func (o *EchidnaGateLoadPulseQueryDto) GetRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *EchidnaGateLoadPulseQueryDto) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *EchidnaGateLoadPulseQueryDto) SetRuleId(v string) {
	o.RuleId = v
}

// GetTurboMode returns the TurboMode field value if set, zero value otherwise.
func (o *EchidnaGateLoadPulseQueryDto) GetTurboMode() bool {
	if o == nil || IsNil(o.TurboMode) {
		var ret bool
		return ret
	}
	return *o.TurboMode
}

// GetTurboModeOk returns a tuple with the TurboMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchidnaGateLoadPulseQueryDto) GetTurboModeOk() (*bool, bool) {
	if o == nil || IsNil(o.TurboMode) {
		return nil, false
	}
	return o.TurboMode, true
}

// HasTurboMode returns a boolean if a field has been set.
func (o *EchidnaGateLoadPulseQueryDto) HasTurboMode() bool {
	if o != nil && !IsNil(o.TurboMode) {
		return true
	}

	return false
}

// SetTurboMode gets a reference to the given bool and assigns it to the TurboMode field.
func (o *EchidnaGateLoadPulseQueryDto) SetTurboMode(v bool) {
	o.TurboMode = &v
}

func (o EchidnaGateLoadPulseQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EchidnaGateLoadPulseQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	toSerialize["ruleId"] = o.RuleId
	if !IsNil(o.TurboMode) {
		toSerialize["turboMode"] = o.TurboMode
	}
	return toSerialize, nil
}

func (o *EchidnaGateLoadPulseQueryDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ruleId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEchidnaGateLoadPulseQueryDto := _EchidnaGateLoadPulseQueryDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEchidnaGateLoadPulseQueryDto)

	if err != nil {
		return err
	}

	*o = EchidnaGateLoadPulseQueryDto(varEchidnaGateLoadPulseQueryDto)

	return err
}

type NullableEchidnaGateLoadPulseQueryDto struct {
	value *EchidnaGateLoadPulseQueryDto
	isSet bool
}

func (v NullableEchidnaGateLoadPulseQueryDto) Get() *EchidnaGateLoadPulseQueryDto {
	return v.value
}

func (v *NullableEchidnaGateLoadPulseQueryDto) Set(val *EchidnaGateLoadPulseQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEchidnaGateLoadPulseQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEchidnaGateLoadPulseQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEchidnaGateLoadPulseQueryDto(val *EchidnaGateLoadPulseQueryDto) *NullableEchidnaGateLoadPulseQueryDto {
	return &NullableEchidnaGateLoadPulseQueryDto{value: val, isSet: true}
}

func (v NullableEchidnaGateLoadPulseQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEchidnaGateLoadPulseQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


