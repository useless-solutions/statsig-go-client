/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EchidnaLoadPulseQueryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EchidnaLoadPulseQueryDto{}

// EchidnaLoadPulseQueryDto struct for EchidnaLoadPulseQueryDto
type EchidnaLoadPulseQueryDto struct {
	Refresh *string `json:"refresh,omitempty"`
	RuleId *string `json:"ruleId,omitempty"`
	TurboMode *bool `json:"turboMode,omitempty"`
}

// NewEchidnaLoadPulseQueryDto instantiates a new EchidnaLoadPulseQueryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEchidnaLoadPulseQueryDto() *EchidnaLoadPulseQueryDto {
	this := EchidnaLoadPulseQueryDto{}
	var refresh string = "full"
	this.Refresh = &refresh
	return &this
}

// NewEchidnaLoadPulseQueryDtoWithDefaults instantiates a new EchidnaLoadPulseQueryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEchidnaLoadPulseQueryDtoWithDefaults() *EchidnaLoadPulseQueryDto {
	this := EchidnaLoadPulseQueryDto{}
	var refresh string = "full"
	this.Refresh = &refresh
	return &this
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *EchidnaLoadPulseQueryDto) GetRefresh() string {
	if o == nil || IsNil(o.Refresh) {
		var ret string
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchidnaLoadPulseQueryDto) GetRefreshOk() (*string, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *EchidnaLoadPulseQueryDto) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given string and assigns it to the Refresh field.
func (o *EchidnaLoadPulseQueryDto) SetRefresh(v string) {
	o.Refresh = &v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *EchidnaLoadPulseQueryDto) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchidnaLoadPulseQueryDto) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *EchidnaLoadPulseQueryDto) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *EchidnaLoadPulseQueryDto) SetRuleId(v string) {
	o.RuleId = &v
}

// GetTurboMode returns the TurboMode field value if set, zero value otherwise.
func (o *EchidnaLoadPulseQueryDto) GetTurboMode() bool {
	if o == nil || IsNil(o.TurboMode) {
		var ret bool
		return ret
	}
	return *o.TurboMode
}

// GetTurboModeOk returns a tuple with the TurboMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EchidnaLoadPulseQueryDto) GetTurboModeOk() (*bool, bool) {
	if o == nil || IsNil(o.TurboMode) {
		return nil, false
	}
	return o.TurboMode, true
}

// HasTurboMode returns a boolean if a field has been set.
func (o *EchidnaLoadPulseQueryDto) HasTurboMode() bool {
	if o != nil && !IsNil(o.TurboMode) {
		return true
	}

	return false
}

// SetTurboMode gets a reference to the given bool and assigns it to the TurboMode field.
func (o *EchidnaLoadPulseQueryDto) SetTurboMode(v bool) {
	o.TurboMode = &v
}

func (o EchidnaLoadPulseQueryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EchidnaLoadPulseQueryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	if !IsNil(o.RuleId) {
		toSerialize["ruleId"] = o.RuleId
	}
	if !IsNil(o.TurboMode) {
		toSerialize["turboMode"] = o.TurboMode
	}
	return toSerialize, nil
}

type NullableEchidnaLoadPulseQueryDto struct {
	value *EchidnaLoadPulseQueryDto
	isSet bool
}

func (v NullableEchidnaLoadPulseQueryDto) Get() *EchidnaLoadPulseQueryDto {
	return v.value
}

func (v *NullableEchidnaLoadPulseQueryDto) Set(val *EchidnaLoadPulseQueryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEchidnaLoadPulseQueryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEchidnaLoadPulseQueryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEchidnaLoadPulseQueryDto(val *EchidnaLoadPulseQueryDto) *NullableEchidnaLoadPulseQueryDto {
	return &NullableEchidnaLoadPulseQueryDto{value: val, isSet: true}
}

func (v NullableEchidnaLoadPulseQueryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEchidnaLoadPulseQueryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


