/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EntityPropertySourceQueryUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityPropertySourceQueryUpdateDto{}

// EntityPropertySourceQueryUpdateDto struct for EntityPropertySourceQueryUpdateDto
type EntityPropertySourceQueryUpdateDto struct {
	// Optional new name for the entity property source.
	Name *string `json:"name,omitempty"`
	// Optional updated context for the entity property source.
	Description *string `json:"description,omitempty"`
	// Optional updated tags for categorization.
	Tags []string `json:"tags,omitempty"`
	// SQL query defining the data source.
	Sql string `json:"sql"`
	// Optional column name for timestamp.
	TimestampColumn *string `json:"timestampColumn,omitempty"`
	// Indicates if the timestamp is treated as a day.
	TimestampAsDay *bool `json:"timestampAsDay,omitempty"`
	// Mappings of Statsig units to their columns.
	IdTypeMapping []EntityPropertySourceDtoIdTypeMappingInner `json:"idTypeMapping"`
	// Specifies if the source can only be edited via the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
}

type _EntityPropertySourceQueryUpdateDto EntityPropertySourceQueryUpdateDto

// NewEntityPropertySourceQueryUpdateDto instantiates a new EntityPropertySourceQueryUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityPropertySourceQueryUpdateDto(sql string, idTypeMapping []EntityPropertySourceDtoIdTypeMappingInner) *EntityPropertySourceQueryUpdateDto {
	this := EntityPropertySourceQueryUpdateDto{}
	this.Sql = sql
	this.IdTypeMapping = idTypeMapping
	return &this
}

// NewEntityPropertySourceQueryUpdateDtoWithDefaults instantiates a new EntityPropertySourceQueryUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityPropertySourceQueryUpdateDtoWithDefaults() *EntityPropertySourceQueryUpdateDto {
	this := EntityPropertySourceQueryUpdateDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityPropertySourceQueryUpdateDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityPropertySourceQueryUpdateDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityPropertySourceQueryUpdateDto) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EntityPropertySourceQueryUpdateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EntityPropertySourceQueryUpdateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EntityPropertySourceQueryUpdateDto) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EntityPropertySourceQueryUpdateDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EntityPropertySourceQueryUpdateDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EntityPropertySourceQueryUpdateDto) SetTags(v []string) {
	o.Tags = v
}

// GetSql returns the Sql field value
func (o *EntityPropertySourceQueryUpdateDto) GetSql() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sql
}

// GetSqlOk returns a tuple with the Sql field value
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetSqlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sql, true
}

// SetSql sets field value
func (o *EntityPropertySourceQueryUpdateDto) SetSql(v string) {
	o.Sql = v
}

// GetTimestampColumn returns the TimestampColumn field value if set, zero value otherwise.
func (o *EntityPropertySourceQueryUpdateDto) GetTimestampColumn() string {
	if o == nil || IsNil(o.TimestampColumn) {
		var ret string
		return ret
	}
	return *o.TimestampColumn
}

// GetTimestampColumnOk returns a tuple with the TimestampColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetTimestampColumnOk() (*string, bool) {
	if o == nil || IsNil(o.TimestampColumn) {
		return nil, false
	}
	return o.TimestampColumn, true
}

// HasTimestampColumn returns a boolean if a field has been set.
func (o *EntityPropertySourceQueryUpdateDto) HasTimestampColumn() bool {
	if o != nil && !IsNil(o.TimestampColumn) {
		return true
	}

	return false
}

// SetTimestampColumn gets a reference to the given string and assigns it to the TimestampColumn field.
func (o *EntityPropertySourceQueryUpdateDto) SetTimestampColumn(v string) {
	o.TimestampColumn = &v
}

// GetTimestampAsDay returns the TimestampAsDay field value if set, zero value otherwise.
func (o *EntityPropertySourceQueryUpdateDto) GetTimestampAsDay() bool {
	if o == nil || IsNil(o.TimestampAsDay) {
		var ret bool
		return ret
	}
	return *o.TimestampAsDay
}

// GetTimestampAsDayOk returns a tuple with the TimestampAsDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetTimestampAsDayOk() (*bool, bool) {
	if o == nil || IsNil(o.TimestampAsDay) {
		return nil, false
	}
	return o.TimestampAsDay, true
}

// HasTimestampAsDay returns a boolean if a field has been set.
func (o *EntityPropertySourceQueryUpdateDto) HasTimestampAsDay() bool {
	if o != nil && !IsNil(o.TimestampAsDay) {
		return true
	}

	return false
}

// SetTimestampAsDay gets a reference to the given bool and assigns it to the TimestampAsDay field.
func (o *EntityPropertySourceQueryUpdateDto) SetTimestampAsDay(v bool) {
	o.TimestampAsDay = &v
}

// GetIdTypeMapping returns the IdTypeMapping field value
func (o *EntityPropertySourceQueryUpdateDto) GetIdTypeMapping() []EntityPropertySourceDtoIdTypeMappingInner {
	if o == nil {
		var ret []EntityPropertySourceDtoIdTypeMappingInner
		return ret
	}

	return o.IdTypeMapping
}

// GetIdTypeMappingOk returns a tuple with the IdTypeMapping field value
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetIdTypeMappingOk() ([]EntityPropertySourceDtoIdTypeMappingInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdTypeMapping, true
}

// SetIdTypeMapping sets field value
func (o *EntityPropertySourceQueryUpdateDto) SetIdTypeMapping(v []EntityPropertySourceDtoIdTypeMappingInner) {
	o.IdTypeMapping = v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *EntityPropertySourceQueryUpdateDto) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPropertySourceQueryUpdateDto) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadOnly) {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *EntityPropertySourceQueryUpdateDto) HasIsReadOnly() bool {
	if o != nil && !IsNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *EntityPropertySourceQueryUpdateDto) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

func (o EntityPropertySourceQueryUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityPropertySourceQueryUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["sql"] = o.Sql
	if !IsNil(o.TimestampColumn) {
		toSerialize["timestampColumn"] = o.TimestampColumn
	}
	if !IsNil(o.TimestampAsDay) {
		toSerialize["timestampAsDay"] = o.TimestampAsDay
	}
	toSerialize["idTypeMapping"] = o.IdTypeMapping
	if !IsNil(o.IsReadOnly) {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	return toSerialize, nil
}

func (o *EntityPropertySourceQueryUpdateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sql",
		"idTypeMapping",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntityPropertySourceQueryUpdateDto := _EntityPropertySourceQueryUpdateDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntityPropertySourceQueryUpdateDto)

	if err != nil {
		return err
	}

	*o = EntityPropertySourceQueryUpdateDto(varEntityPropertySourceQueryUpdateDto)

	return err
}

type NullableEntityPropertySourceQueryUpdateDto struct {
	value *EntityPropertySourceQueryUpdateDto
	isSet bool
}

func (v NullableEntityPropertySourceQueryUpdateDto) Get() *EntityPropertySourceQueryUpdateDto {
	return v.value
}

func (v *NullableEntityPropertySourceQueryUpdateDto) Set(val *EntityPropertySourceQueryUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityPropertySourceQueryUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityPropertySourceQueryUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityPropertySourceQueryUpdateDto(val *EntityPropertySourceQueryUpdateDto) *NullableEntityPropertySourceQueryUpdateDto {
	return &NullableEntityPropertySourceQueryUpdateDto{value: val, isSet: true}
}

func (v NullableEntityPropertySourceQueryUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityPropertySourceQueryUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


