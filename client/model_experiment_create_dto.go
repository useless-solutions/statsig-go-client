/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExperimentCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperimentCreateDto{}

// ExperimentCreateDto Create Experiment
type ExperimentCreateDto struct {
	// A description of the new experiment
	Description *string `json:"description,omitempty"`
	// The idType the experiment will be performed on
	IdType *string `json:"idType,omitempty"`
	// The secondary ID type for the experiment used in WHN for ID resolution
	SecondaryIDType *nil `json:"secondaryIDType,omitempty"`
	// A statement that will be tested by this experiment
	Hypothesis *string `json:"hypothesis,omitempty"`
	// Links to relevant documentation or resources
	Links []ExternalExperimentDtoLinksInner `json:"links,omitempty"`
	// The test groups for your experiment
	Groups []ExternalExperimentDtoGroupsInner `json:"groups,omitempty"`
	// Optional control group ID
	ControlGroupID *string `json:"controlGroupID,omitempty"`
	// Percent of layer allocated to this experiment
	Allocation *float32 `json:"allocation,omitempty"`
	// Primary metric tags for the experiment
	PrimaryMetricTags []string `json:"primaryMetricTags,omitempty"`
	// Secondary metric tags for the experiment
	SecondaryMetricTags []string `json:"secondaryMetricTags,omitempty"`
	// Main metrics needed to evaluate your hypothesis
	PrimaryMetrics []ExternalGateDtoMonitoringMetricsInner `json:"primaryMetrics,omitempty"`
	// Additional metrics to monitor that might impact the analysis or final decision of the experiment
	SecondaryMetrics []ExternalGateDtoMonitoringMetricsInner `json:"secondaryMetrics,omitempty"`
	TargetApps *ExternalExperimentDtoTargetApps `json:"targetApps,omitempty"`
	// Tags associated with the experiment
	Tags []string `json:"tags,omitempty"`
	// How long the experiment is expected to last in days
	Duration *int32 `json:"duration,omitempty"`
	// Target exposures for the experiment
	TargetExposures *int32 `json:"targetExposures,omitempty"`
	// Restrict your experiment to users passing the selected feature gate
	TargetingGateID *nil `json:"targetingGateID,omitempty"`
	// Is Bonferroni correction applied?
	BonferroniCorrection *bool `json:"bonferroniCorrection,omitempty"`
	// Default error margin used for results
	DefaultConfidenceInterval *string `json:"defaultConfidenceInterval,omitempty"`
	// The current status of the experiment
	Status *string `json:"status,omitempty"`
	// ID of the launched group, null otherwise
	LaunchedGroupID *nil `json:"launchedGroupID,omitempty"`
	// Source name of the assignment
	AssignmentSourceName *string `json:"assignmentSourceName,omitempty"`
	// Name of the source experiment for assignment
	AssignmentSourceExperimentName *string `json:"assignmentSourceExperimentName,omitempty"`
	// The Statsig ID of the creator of this experiment
	CreatorID *nil `json:"creatorID,omitempty"`
	// The email of the creator of this experiment
	CreatorEmail *nil `json:"creatorEmail,omitempty"`
	// For Warehouse Native
	IsAnalysisOnly *nil `json:"isAnalysisOnly,omitempty"`
	// Enterprise only
	Team *nil `json:"team,omitempty"`
	// Allocation duration in days
	AllocationDuration *int32 `json:"allocationDuration,omitempty"`
	// Cohorted analysis duration in days
	CohortedAnalysisDuration *int32 `json:"cohortedAnalysisDuration,omitempty"`
	// Fixed analysis duration in days
	FixedAnalysisDuration *int32 `json:"fixedAnalysisDuration,omitempty"`
	// Warehouse Native only - UTC hour at which to run scheduled pulse loads
	ScheduledReloadHour *int32 `json:"scheduledReloadHour,omitempty"`
	// Warehouse Native only - reload type for scheduled reloads
	ScheduledReloadType *string `json:"scheduledReloadType,omitempty"`
	// The name of the new experiment
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_\\\\- ]*$"`
	Id *string `json:"id,omitempty" validate:"regexp=^[a-zA-Z0-9_-]*$"`
	// Which layer to place the experiment into.
	LayerID *string `json:"layerID,omitempty"`
	ReviewSettings *ExternalGateDtoReviewSettings `json:"reviewSettings,omitempty"`
	ActiveReview *ExternalGateDtoActiveReview `json:"activeReview,omitempty"`
}

type _ExperimentCreateDto ExperimentCreateDto

// NewExperimentCreateDto instantiates a new ExperimentCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentCreateDto(name string) *ExperimentCreateDto {
	this := ExperimentCreateDto{}
	this.Name = name
	return &this
}

// NewExperimentCreateDtoWithDefaults instantiates a new ExperimentCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentCreateDtoWithDefaults() *ExperimentCreateDto {
	this := ExperimentCreateDto{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExperimentCreateDto) SetDescription(v string) {
	o.Description = &v
}

// GetIdType returns the IdType field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetIdType() string {
	if o == nil || IsNil(o.IdType) {
		var ret string
		return ret
	}
	return *o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetIdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdType) {
		return nil, false
	}
	return o.IdType, true
}

// HasIdType returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasIdType() bool {
	if o != nil && !IsNil(o.IdType) {
		return true
	}

	return false
}

// SetIdType gets a reference to the given string and assigns it to the IdType field.
func (o *ExperimentCreateDto) SetIdType(v string) {
	o.IdType = &v
}

// GetSecondaryIDType returns the SecondaryIDType field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetSecondaryIDType() nil {
	if o == nil || IsNil(o.SecondaryIDType) {
		var ret nil
		return ret
	}
	return *o.SecondaryIDType
}

// GetSecondaryIDTypeOk returns a tuple with the SecondaryIDType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetSecondaryIDTypeOk() (*nil, bool) {
	if o == nil || IsNil(o.SecondaryIDType) {
		return nil, false
	}
	return o.SecondaryIDType, true
}

// HasSecondaryIDType returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasSecondaryIDType() bool {
	if o != nil && !IsNil(o.SecondaryIDType) {
		return true
	}

	return false
}

// SetSecondaryIDType gets a reference to the given nil and assigns it to the SecondaryIDType field.
func (o *ExperimentCreateDto) SetSecondaryIDType(v nil) {
	o.SecondaryIDType = &v
}

// GetHypothesis returns the Hypothesis field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetHypothesis() string {
	if o == nil || IsNil(o.Hypothesis) {
		var ret string
		return ret
	}
	return *o.Hypothesis
}

// GetHypothesisOk returns a tuple with the Hypothesis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetHypothesisOk() (*string, bool) {
	if o == nil || IsNil(o.Hypothesis) {
		return nil, false
	}
	return o.Hypothesis, true
}

// HasHypothesis returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasHypothesis() bool {
	if o != nil && !IsNil(o.Hypothesis) {
		return true
	}

	return false
}

// SetHypothesis gets a reference to the given string and assigns it to the Hypothesis field.
func (o *ExperimentCreateDto) SetHypothesis(v string) {
	o.Hypothesis = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetLinks() []ExternalExperimentDtoLinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []ExternalExperimentDtoLinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetLinksOk() ([]ExternalExperimentDtoLinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ExternalExperimentDtoLinksInner and assigns it to the Links field.
func (o *ExperimentCreateDto) SetLinks(v []ExternalExperimentDtoLinksInner) {
	o.Links = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetGroups() []ExternalExperimentDtoGroupsInner {
	if o == nil || IsNil(o.Groups) {
		var ret []ExternalExperimentDtoGroupsInner
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetGroupsOk() ([]ExternalExperimentDtoGroupsInner, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []ExternalExperimentDtoGroupsInner and assigns it to the Groups field.
func (o *ExperimentCreateDto) SetGroups(v []ExternalExperimentDtoGroupsInner) {
	o.Groups = v
}

// GetControlGroupID returns the ControlGroupID field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetControlGroupID() string {
	if o == nil || IsNil(o.ControlGroupID) {
		var ret string
		return ret
	}
	return *o.ControlGroupID
}

// GetControlGroupIDOk returns a tuple with the ControlGroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetControlGroupIDOk() (*string, bool) {
	if o == nil || IsNil(o.ControlGroupID) {
		return nil, false
	}
	return o.ControlGroupID, true
}

// HasControlGroupID returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasControlGroupID() bool {
	if o != nil && !IsNil(o.ControlGroupID) {
		return true
	}

	return false
}

// SetControlGroupID gets a reference to the given string and assigns it to the ControlGroupID field.
func (o *ExperimentCreateDto) SetControlGroupID(v string) {
	o.ControlGroupID = &v
}

// GetAllocation returns the Allocation field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetAllocation() float32 {
	if o == nil || IsNil(o.Allocation) {
		var ret float32
		return ret
	}
	return *o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetAllocationOk() (*float32, bool) {
	if o == nil || IsNil(o.Allocation) {
		return nil, false
	}
	return o.Allocation, true
}

// HasAllocation returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasAllocation() bool {
	if o != nil && !IsNil(o.Allocation) {
		return true
	}

	return false
}

// SetAllocation gets a reference to the given float32 and assigns it to the Allocation field.
func (o *ExperimentCreateDto) SetAllocation(v float32) {
	o.Allocation = &v
}

// GetPrimaryMetricTags returns the PrimaryMetricTags field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetPrimaryMetricTags() []string {
	if o == nil || IsNil(o.PrimaryMetricTags) {
		var ret []string
		return ret
	}
	return o.PrimaryMetricTags
}

// GetPrimaryMetricTagsOk returns a tuple with the PrimaryMetricTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetPrimaryMetricTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.PrimaryMetricTags) {
		return nil, false
	}
	return o.PrimaryMetricTags, true
}

// HasPrimaryMetricTags returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasPrimaryMetricTags() bool {
	if o != nil && !IsNil(o.PrimaryMetricTags) {
		return true
	}

	return false
}

// SetPrimaryMetricTags gets a reference to the given []string and assigns it to the PrimaryMetricTags field.
func (o *ExperimentCreateDto) SetPrimaryMetricTags(v []string) {
	o.PrimaryMetricTags = v
}

// GetSecondaryMetricTags returns the SecondaryMetricTags field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetSecondaryMetricTags() []string {
	if o == nil || IsNil(o.SecondaryMetricTags) {
		var ret []string
		return ret
	}
	return o.SecondaryMetricTags
}

// GetSecondaryMetricTagsOk returns a tuple with the SecondaryMetricTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetSecondaryMetricTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecondaryMetricTags) {
		return nil, false
	}
	return o.SecondaryMetricTags, true
}

// HasSecondaryMetricTags returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasSecondaryMetricTags() bool {
	if o != nil && !IsNil(o.SecondaryMetricTags) {
		return true
	}

	return false
}

// SetSecondaryMetricTags gets a reference to the given []string and assigns it to the SecondaryMetricTags field.
func (o *ExperimentCreateDto) SetSecondaryMetricTags(v []string) {
	o.SecondaryMetricTags = v
}

// GetPrimaryMetrics returns the PrimaryMetrics field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetPrimaryMetrics() []ExternalGateDtoMonitoringMetricsInner {
	if o == nil || IsNil(o.PrimaryMetrics) {
		var ret []ExternalGateDtoMonitoringMetricsInner
		return ret
	}
	return o.PrimaryMetrics
}

// GetPrimaryMetricsOk returns a tuple with the PrimaryMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetPrimaryMetricsOk() ([]ExternalGateDtoMonitoringMetricsInner, bool) {
	if o == nil || IsNil(o.PrimaryMetrics) {
		return nil, false
	}
	return o.PrimaryMetrics, true
}

// HasPrimaryMetrics returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasPrimaryMetrics() bool {
	if o != nil && !IsNil(o.PrimaryMetrics) {
		return true
	}

	return false
}

// SetPrimaryMetrics gets a reference to the given []ExternalGateDtoMonitoringMetricsInner and assigns it to the PrimaryMetrics field.
func (o *ExperimentCreateDto) SetPrimaryMetrics(v []ExternalGateDtoMonitoringMetricsInner) {
	o.PrimaryMetrics = v
}

// GetSecondaryMetrics returns the SecondaryMetrics field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetSecondaryMetrics() []ExternalGateDtoMonitoringMetricsInner {
	if o == nil || IsNil(o.SecondaryMetrics) {
		var ret []ExternalGateDtoMonitoringMetricsInner
		return ret
	}
	return o.SecondaryMetrics
}

// GetSecondaryMetricsOk returns a tuple with the SecondaryMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetSecondaryMetricsOk() ([]ExternalGateDtoMonitoringMetricsInner, bool) {
	if o == nil || IsNil(o.SecondaryMetrics) {
		return nil, false
	}
	return o.SecondaryMetrics, true
}

// HasSecondaryMetrics returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasSecondaryMetrics() bool {
	if o != nil && !IsNil(o.SecondaryMetrics) {
		return true
	}

	return false
}

// SetSecondaryMetrics gets a reference to the given []ExternalGateDtoMonitoringMetricsInner and assigns it to the SecondaryMetrics field.
func (o *ExperimentCreateDto) SetSecondaryMetrics(v []ExternalGateDtoMonitoringMetricsInner) {
	o.SecondaryMetrics = v
}

// GetTargetApps returns the TargetApps field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetTargetApps() ExternalExperimentDtoTargetApps {
	if o == nil || IsNil(o.TargetApps) {
		var ret ExternalExperimentDtoTargetApps
		return ret
	}
	return *o.TargetApps
}

// GetTargetAppsOk returns a tuple with the TargetApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetTargetAppsOk() (*ExternalExperimentDtoTargetApps, bool) {
	if o == nil || IsNil(o.TargetApps) {
		return nil, false
	}
	return o.TargetApps, true
}

// HasTargetApps returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasTargetApps() bool {
	if o != nil && !IsNil(o.TargetApps) {
		return true
	}

	return false
}

// SetTargetApps gets a reference to the given ExternalExperimentDtoTargetApps and assigns it to the TargetApps field.
func (o *ExperimentCreateDto) SetTargetApps(v ExternalExperimentDtoTargetApps) {
	o.TargetApps = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ExperimentCreateDto) SetTags(v []string) {
	o.Tags = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *ExperimentCreateDto) SetDuration(v int32) {
	o.Duration = &v
}

// GetTargetExposures returns the TargetExposures field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetTargetExposures() int32 {
	if o == nil || IsNil(o.TargetExposures) {
		var ret int32
		return ret
	}
	return *o.TargetExposures
}

// GetTargetExposuresOk returns a tuple with the TargetExposures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetTargetExposuresOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetExposures) {
		return nil, false
	}
	return o.TargetExposures, true
}

// HasTargetExposures returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasTargetExposures() bool {
	if o != nil && !IsNil(o.TargetExposures) {
		return true
	}

	return false
}

// SetTargetExposures gets a reference to the given int32 and assigns it to the TargetExposures field.
func (o *ExperimentCreateDto) SetTargetExposures(v int32) {
	o.TargetExposures = &v
}

// GetTargetingGateID returns the TargetingGateID field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetTargetingGateID() nil {
	if o == nil || IsNil(o.TargetingGateID) {
		var ret nil
		return ret
	}
	return *o.TargetingGateID
}

// GetTargetingGateIDOk returns a tuple with the TargetingGateID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetTargetingGateIDOk() (*nil, bool) {
	if o == nil || IsNil(o.TargetingGateID) {
		return nil, false
	}
	return o.TargetingGateID, true
}

// HasTargetingGateID returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasTargetingGateID() bool {
	if o != nil && !IsNil(o.TargetingGateID) {
		return true
	}

	return false
}

// SetTargetingGateID gets a reference to the given nil and assigns it to the TargetingGateID field.
func (o *ExperimentCreateDto) SetTargetingGateID(v nil) {
	o.TargetingGateID = &v
}

// GetBonferroniCorrection returns the BonferroniCorrection field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetBonferroniCorrection() bool {
	if o == nil || IsNil(o.BonferroniCorrection) {
		var ret bool
		return ret
	}
	return *o.BonferroniCorrection
}

// GetBonferroniCorrectionOk returns a tuple with the BonferroniCorrection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetBonferroniCorrectionOk() (*bool, bool) {
	if o == nil || IsNil(o.BonferroniCorrection) {
		return nil, false
	}
	return o.BonferroniCorrection, true
}

// HasBonferroniCorrection returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasBonferroniCorrection() bool {
	if o != nil && !IsNil(o.BonferroniCorrection) {
		return true
	}

	return false
}

// SetBonferroniCorrection gets a reference to the given bool and assigns it to the BonferroniCorrection field.
func (o *ExperimentCreateDto) SetBonferroniCorrection(v bool) {
	o.BonferroniCorrection = &v
}

// GetDefaultConfidenceInterval returns the DefaultConfidenceInterval field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetDefaultConfidenceInterval() string {
	if o == nil || IsNil(o.DefaultConfidenceInterval) {
		var ret string
		return ret
	}
	return *o.DefaultConfidenceInterval
}

// GetDefaultConfidenceIntervalOk returns a tuple with the DefaultConfidenceInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetDefaultConfidenceIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultConfidenceInterval) {
		return nil, false
	}
	return o.DefaultConfidenceInterval, true
}

// HasDefaultConfidenceInterval returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasDefaultConfidenceInterval() bool {
	if o != nil && !IsNil(o.DefaultConfidenceInterval) {
		return true
	}

	return false
}

// SetDefaultConfidenceInterval gets a reference to the given string and assigns it to the DefaultConfidenceInterval field.
func (o *ExperimentCreateDto) SetDefaultConfidenceInterval(v string) {
	o.DefaultConfidenceInterval = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExperimentCreateDto) SetStatus(v string) {
	o.Status = &v
}

// GetLaunchedGroupID returns the LaunchedGroupID field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetLaunchedGroupID() nil {
	if o == nil || IsNil(o.LaunchedGroupID) {
		var ret nil
		return ret
	}
	return *o.LaunchedGroupID
}

// GetLaunchedGroupIDOk returns a tuple with the LaunchedGroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetLaunchedGroupIDOk() (*nil, bool) {
	if o == nil || IsNil(o.LaunchedGroupID) {
		return nil, false
	}
	return o.LaunchedGroupID, true
}

// HasLaunchedGroupID returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasLaunchedGroupID() bool {
	if o != nil && !IsNil(o.LaunchedGroupID) {
		return true
	}

	return false
}

// SetLaunchedGroupID gets a reference to the given nil and assigns it to the LaunchedGroupID field.
func (o *ExperimentCreateDto) SetLaunchedGroupID(v nil) {
	o.LaunchedGroupID = &v
}

// GetAssignmentSourceName returns the AssignmentSourceName field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetAssignmentSourceName() string {
	if o == nil || IsNil(o.AssignmentSourceName) {
		var ret string
		return ret
	}
	return *o.AssignmentSourceName
}

// GetAssignmentSourceNameOk returns a tuple with the AssignmentSourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetAssignmentSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignmentSourceName) {
		return nil, false
	}
	return o.AssignmentSourceName, true
}

// HasAssignmentSourceName returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasAssignmentSourceName() bool {
	if o != nil && !IsNil(o.AssignmentSourceName) {
		return true
	}

	return false
}

// SetAssignmentSourceName gets a reference to the given string and assigns it to the AssignmentSourceName field.
func (o *ExperimentCreateDto) SetAssignmentSourceName(v string) {
	o.AssignmentSourceName = &v
}

// GetAssignmentSourceExperimentName returns the AssignmentSourceExperimentName field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetAssignmentSourceExperimentName() string {
	if o == nil || IsNil(o.AssignmentSourceExperimentName) {
		var ret string
		return ret
	}
	return *o.AssignmentSourceExperimentName
}

// GetAssignmentSourceExperimentNameOk returns a tuple with the AssignmentSourceExperimentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetAssignmentSourceExperimentNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignmentSourceExperimentName) {
		return nil, false
	}
	return o.AssignmentSourceExperimentName, true
}

// HasAssignmentSourceExperimentName returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasAssignmentSourceExperimentName() bool {
	if o != nil && !IsNil(o.AssignmentSourceExperimentName) {
		return true
	}

	return false
}

// SetAssignmentSourceExperimentName gets a reference to the given string and assigns it to the AssignmentSourceExperimentName field.
func (o *ExperimentCreateDto) SetAssignmentSourceExperimentName(v string) {
	o.AssignmentSourceExperimentName = &v
}

// GetCreatorID returns the CreatorID field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetCreatorID() nil {
	if o == nil || IsNil(o.CreatorID) {
		var ret nil
		return ret
	}
	return *o.CreatorID
}

// GetCreatorIDOk returns a tuple with the CreatorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetCreatorIDOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorID) {
		return nil, false
	}
	return o.CreatorID, true
}

// HasCreatorID returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasCreatorID() bool {
	if o != nil && !IsNil(o.CreatorID) {
		return true
	}

	return false
}

// SetCreatorID gets a reference to the given nil and assigns it to the CreatorID field.
func (o *ExperimentCreateDto) SetCreatorID(v nil) {
	o.CreatorID = &v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetCreatorEmail() nil {
	if o == nil || IsNil(o.CreatorEmail) {
		var ret nil
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetCreatorEmailOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorEmail) {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasCreatorEmail() bool {
	if o != nil && !IsNil(o.CreatorEmail) {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given nil and assigns it to the CreatorEmail field.
func (o *ExperimentCreateDto) SetCreatorEmail(v nil) {
	o.CreatorEmail = &v
}

// GetIsAnalysisOnly returns the IsAnalysisOnly field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetIsAnalysisOnly() nil {
	if o == nil || IsNil(o.IsAnalysisOnly) {
		var ret nil
		return ret
	}
	return *o.IsAnalysisOnly
}

// GetIsAnalysisOnlyOk returns a tuple with the IsAnalysisOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetIsAnalysisOnlyOk() (*nil, bool) {
	if o == nil || IsNil(o.IsAnalysisOnly) {
		return nil, false
	}
	return o.IsAnalysisOnly, true
}

// HasIsAnalysisOnly returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasIsAnalysisOnly() bool {
	if o != nil && !IsNil(o.IsAnalysisOnly) {
		return true
	}

	return false
}

// SetIsAnalysisOnly gets a reference to the given nil and assigns it to the IsAnalysisOnly field.
func (o *ExperimentCreateDto) SetIsAnalysisOnly(v nil) {
	o.IsAnalysisOnly = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetTeam() nil {
	if o == nil || IsNil(o.Team) {
		var ret nil
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetTeamOk() (*nil, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given nil and assigns it to the Team field.
func (o *ExperimentCreateDto) SetTeam(v nil) {
	o.Team = &v
}

// GetAllocationDuration returns the AllocationDuration field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetAllocationDuration() int32 {
	if o == nil || IsNil(o.AllocationDuration) {
		var ret int32
		return ret
	}
	return *o.AllocationDuration
}

// GetAllocationDurationOk returns a tuple with the AllocationDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetAllocationDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.AllocationDuration) {
		return nil, false
	}
	return o.AllocationDuration, true
}

// HasAllocationDuration returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasAllocationDuration() bool {
	if o != nil && !IsNil(o.AllocationDuration) {
		return true
	}

	return false
}

// SetAllocationDuration gets a reference to the given int32 and assigns it to the AllocationDuration field.
func (o *ExperimentCreateDto) SetAllocationDuration(v int32) {
	o.AllocationDuration = &v
}

// GetCohortedAnalysisDuration returns the CohortedAnalysisDuration field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetCohortedAnalysisDuration() int32 {
	if o == nil || IsNil(o.CohortedAnalysisDuration) {
		var ret int32
		return ret
	}
	return *o.CohortedAnalysisDuration
}

// GetCohortedAnalysisDurationOk returns a tuple with the CohortedAnalysisDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetCohortedAnalysisDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.CohortedAnalysisDuration) {
		return nil, false
	}
	return o.CohortedAnalysisDuration, true
}

// HasCohortedAnalysisDuration returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasCohortedAnalysisDuration() bool {
	if o != nil && !IsNil(o.CohortedAnalysisDuration) {
		return true
	}

	return false
}

// SetCohortedAnalysisDuration gets a reference to the given int32 and assigns it to the CohortedAnalysisDuration field.
func (o *ExperimentCreateDto) SetCohortedAnalysisDuration(v int32) {
	o.CohortedAnalysisDuration = &v
}

// GetFixedAnalysisDuration returns the FixedAnalysisDuration field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetFixedAnalysisDuration() int32 {
	if o == nil || IsNil(o.FixedAnalysisDuration) {
		var ret int32
		return ret
	}
	return *o.FixedAnalysisDuration
}

// GetFixedAnalysisDurationOk returns a tuple with the FixedAnalysisDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetFixedAnalysisDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.FixedAnalysisDuration) {
		return nil, false
	}
	return o.FixedAnalysisDuration, true
}

// HasFixedAnalysisDuration returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasFixedAnalysisDuration() bool {
	if o != nil && !IsNil(o.FixedAnalysisDuration) {
		return true
	}

	return false
}

// SetFixedAnalysisDuration gets a reference to the given int32 and assigns it to the FixedAnalysisDuration field.
func (o *ExperimentCreateDto) SetFixedAnalysisDuration(v int32) {
	o.FixedAnalysisDuration = &v
}

// GetScheduledReloadHour returns the ScheduledReloadHour field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetScheduledReloadHour() int32 {
	if o == nil || IsNil(o.ScheduledReloadHour) {
		var ret int32
		return ret
	}
	return *o.ScheduledReloadHour
}

// GetScheduledReloadHourOk returns a tuple with the ScheduledReloadHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetScheduledReloadHourOk() (*int32, bool) {
	if o == nil || IsNil(o.ScheduledReloadHour) {
		return nil, false
	}
	return o.ScheduledReloadHour, true
}

// HasScheduledReloadHour returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasScheduledReloadHour() bool {
	if o != nil && !IsNil(o.ScheduledReloadHour) {
		return true
	}

	return false
}

// SetScheduledReloadHour gets a reference to the given int32 and assigns it to the ScheduledReloadHour field.
func (o *ExperimentCreateDto) SetScheduledReloadHour(v int32) {
	o.ScheduledReloadHour = &v
}

// GetScheduledReloadType returns the ScheduledReloadType field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetScheduledReloadType() string {
	if o == nil || IsNil(o.ScheduledReloadType) {
		var ret string
		return ret
	}
	return *o.ScheduledReloadType
}

// GetScheduledReloadTypeOk returns a tuple with the ScheduledReloadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetScheduledReloadTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledReloadType) {
		return nil, false
	}
	return o.ScheduledReloadType, true
}

// HasScheduledReloadType returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasScheduledReloadType() bool {
	if o != nil && !IsNil(o.ScheduledReloadType) {
		return true
	}

	return false
}

// SetScheduledReloadType gets a reference to the given string and assigns it to the ScheduledReloadType field.
func (o *ExperimentCreateDto) SetScheduledReloadType(v string) {
	o.ScheduledReloadType = &v
}

// GetName returns the Name field value
func (o *ExperimentCreateDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExperimentCreateDto) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExperimentCreateDto) SetId(v string) {
	o.Id = &v
}

// GetLayerID returns the LayerID field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetLayerID() string {
	if o == nil || IsNil(o.LayerID) {
		var ret string
		return ret
	}
	return *o.LayerID
}

// GetLayerIDOk returns a tuple with the LayerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetLayerIDOk() (*string, bool) {
	if o == nil || IsNil(o.LayerID) {
		return nil, false
	}
	return o.LayerID, true
}

// HasLayerID returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasLayerID() bool {
	if o != nil && !IsNil(o.LayerID) {
		return true
	}

	return false
}

// SetLayerID gets a reference to the given string and assigns it to the LayerID field.
func (o *ExperimentCreateDto) SetLayerID(v string) {
	o.LayerID = &v
}

// GetReviewSettings returns the ReviewSettings field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetReviewSettings() ExternalGateDtoReviewSettings {
	if o == nil || IsNil(o.ReviewSettings) {
		var ret ExternalGateDtoReviewSettings
		return ret
	}
	return *o.ReviewSettings
}

// GetReviewSettingsOk returns a tuple with the ReviewSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetReviewSettingsOk() (*ExternalGateDtoReviewSettings, bool) {
	if o == nil || IsNil(o.ReviewSettings) {
		return nil, false
	}
	return o.ReviewSettings, true
}

// HasReviewSettings returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasReviewSettings() bool {
	if o != nil && !IsNil(o.ReviewSettings) {
		return true
	}

	return false
}

// SetReviewSettings gets a reference to the given ExternalGateDtoReviewSettings and assigns it to the ReviewSettings field.
func (o *ExperimentCreateDto) SetReviewSettings(v ExternalGateDtoReviewSettings) {
	o.ReviewSettings = &v
}

// GetActiveReview returns the ActiveReview field value if set, zero value otherwise.
func (o *ExperimentCreateDto) GetActiveReview() ExternalGateDtoActiveReview {
	if o == nil || IsNil(o.ActiveReview) {
		var ret ExternalGateDtoActiveReview
		return ret
	}
	return *o.ActiveReview
}

// GetActiveReviewOk returns a tuple with the ActiveReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentCreateDto) GetActiveReviewOk() (*ExternalGateDtoActiveReview, bool) {
	if o == nil || IsNil(o.ActiveReview) {
		return nil, false
	}
	return o.ActiveReview, true
}

// HasActiveReview returns a boolean if a field has been set.
func (o *ExperimentCreateDto) HasActiveReview() bool {
	if o != nil && !IsNil(o.ActiveReview) {
		return true
	}

	return false
}

// SetActiveReview gets a reference to the given ExternalGateDtoActiveReview and assigns it to the ActiveReview field.
func (o *ExperimentCreateDto) SetActiveReview(v ExternalGateDtoActiveReview) {
	o.ActiveReview = &v
}

func (o ExperimentCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperimentCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IdType) {
		toSerialize["idType"] = o.IdType
	}
	if !IsNil(o.SecondaryIDType) {
		toSerialize["secondaryIDType"] = o.SecondaryIDType
	}
	if !IsNil(o.Hypothesis) {
		toSerialize["hypothesis"] = o.Hypothesis
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.ControlGroupID) {
		toSerialize["controlGroupID"] = o.ControlGroupID
	}
	if !IsNil(o.Allocation) {
		toSerialize["allocation"] = o.Allocation
	}
	if !IsNil(o.PrimaryMetricTags) {
		toSerialize["primaryMetricTags"] = o.PrimaryMetricTags
	}
	if !IsNil(o.SecondaryMetricTags) {
		toSerialize["secondaryMetricTags"] = o.SecondaryMetricTags
	}
	if !IsNil(o.PrimaryMetrics) {
		toSerialize["primaryMetrics"] = o.PrimaryMetrics
	}
	if !IsNil(o.SecondaryMetrics) {
		toSerialize["secondaryMetrics"] = o.SecondaryMetrics
	}
	if !IsNil(o.TargetApps) {
		toSerialize["targetApps"] = o.TargetApps
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.TargetExposures) {
		toSerialize["targetExposures"] = o.TargetExposures
	}
	if !IsNil(o.TargetingGateID) {
		toSerialize["targetingGateID"] = o.TargetingGateID
	}
	if !IsNil(o.BonferroniCorrection) {
		toSerialize["bonferroniCorrection"] = o.BonferroniCorrection
	}
	if !IsNil(o.DefaultConfidenceInterval) {
		toSerialize["defaultConfidenceInterval"] = o.DefaultConfidenceInterval
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.LaunchedGroupID) {
		toSerialize["launchedGroupID"] = o.LaunchedGroupID
	}
	if !IsNil(o.AssignmentSourceName) {
		toSerialize["assignmentSourceName"] = o.AssignmentSourceName
	}
	if !IsNil(o.AssignmentSourceExperimentName) {
		toSerialize["assignmentSourceExperimentName"] = o.AssignmentSourceExperimentName
	}
	if !IsNil(o.CreatorID) {
		toSerialize["creatorID"] = o.CreatorID
	}
	if !IsNil(o.CreatorEmail) {
		toSerialize["creatorEmail"] = o.CreatorEmail
	}
	if !IsNil(o.IsAnalysisOnly) {
		toSerialize["isAnalysisOnly"] = o.IsAnalysisOnly
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.AllocationDuration) {
		toSerialize["allocationDuration"] = o.AllocationDuration
	}
	if !IsNil(o.CohortedAnalysisDuration) {
		toSerialize["cohortedAnalysisDuration"] = o.CohortedAnalysisDuration
	}
	if !IsNil(o.FixedAnalysisDuration) {
		toSerialize["fixedAnalysisDuration"] = o.FixedAnalysisDuration
	}
	if !IsNil(o.ScheduledReloadHour) {
		toSerialize["scheduledReloadHour"] = o.ScheduledReloadHour
	}
	if !IsNil(o.ScheduledReloadType) {
		toSerialize["scheduledReloadType"] = o.ScheduledReloadType
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LayerID) {
		toSerialize["layerID"] = o.LayerID
	}
	if !IsNil(o.ReviewSettings) {
		toSerialize["reviewSettings"] = o.ReviewSettings
	}
	if !IsNil(o.ActiveReview) {
		toSerialize["activeReview"] = o.ActiveReview
	}
	return toSerialize, nil
}

func (o *ExperimentCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperimentCreateDto := _ExperimentCreateDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExperimentCreateDto)

	if err != nil {
		return err
	}

	*o = ExperimentCreateDto(varExperimentCreateDto)

	return err
}

type NullableExperimentCreateDto struct {
	value *ExperimentCreateDto
	isSet bool
}

func (v NullableExperimentCreateDto) Get() *ExperimentCreateDto {
	return v.value
}

func (v *NullableExperimentCreateDto) Set(val *ExperimentCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentCreateDto(val *ExperimentCreateDto) *NullableExperimentCreateDto {
	return &NullableExperimentCreateDto{value: val, isSet: true}
}

func (v NullableExperimentCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


