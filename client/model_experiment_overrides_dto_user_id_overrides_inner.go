/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExperimentOverridesDtoUserIDOverridesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperimentOverridesDtoUserIDOverridesInner{}

// ExperimentOverridesDtoUserIDOverridesInner struct for ExperimentOverridesDtoUserIDOverridesInner
type ExperimentOverridesDtoUserIDOverridesInner struct {
	// The experiment group the user will be forced into.
	GroupID string `json:"groupID"`
	// Array of user IDs to be assigned to the specified experiment group.
	Ids []string `json:"ids"`
	// Optional environment designation (e.g., production, staging) for the experiment.
	Environment *nil `json:"environment,omitempty"`
	// Optional type of unit for the experiment, defining the scope of the override.
	UnitType *nil `json:"unitType,omitempty"`
}

type _ExperimentOverridesDtoUserIDOverridesInner ExperimentOverridesDtoUserIDOverridesInner

// NewExperimentOverridesDtoUserIDOverridesInner instantiates a new ExperimentOverridesDtoUserIDOverridesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentOverridesDtoUserIDOverridesInner(groupID string, ids []string) *ExperimentOverridesDtoUserIDOverridesInner {
	this := ExperimentOverridesDtoUserIDOverridesInner{}
	this.GroupID = groupID
	this.Ids = ids
	return &this
}

// NewExperimentOverridesDtoUserIDOverridesInnerWithDefaults instantiates a new ExperimentOverridesDtoUserIDOverridesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentOverridesDtoUserIDOverridesInnerWithDefaults() *ExperimentOverridesDtoUserIDOverridesInner {
	this := ExperimentOverridesDtoUserIDOverridesInner{}
	return &this
}

// GetGroupID returns the GroupID field value
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetGroupID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupID
}

// GetGroupIDOk returns a tuple with the GroupID field value
// and a boolean to check if the value has been set.
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetGroupIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupID, true
}

// SetGroupID sets field value
func (o *ExperimentOverridesDtoUserIDOverridesInner) SetGroupID(v string) {
	o.GroupID = v
}

// GetIds returns the Ids field value
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *ExperimentOverridesDtoUserIDOverridesInner) SetIds(v []string) {
	o.Ids = v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetEnvironment() nil {
	if o == nil || IsNil(o.Environment) {
		var ret nil
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetEnvironmentOk() (*nil, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ExperimentOverridesDtoUserIDOverridesInner) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given nil and assigns it to the Environment field.
func (o *ExperimentOverridesDtoUserIDOverridesInner) SetEnvironment(v nil) {
	o.Environment = &v
}

// GetUnitType returns the UnitType field value if set, zero value otherwise.
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetUnitType() nil {
	if o == nil || IsNil(o.UnitType) {
		var ret nil
		return ret
	}
	return *o.UnitType
}

// GetUnitTypeOk returns a tuple with the UnitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentOverridesDtoUserIDOverridesInner) GetUnitTypeOk() (*nil, bool) {
	if o == nil || IsNil(o.UnitType) {
		return nil, false
	}
	return o.UnitType, true
}

// HasUnitType returns a boolean if a field has been set.
func (o *ExperimentOverridesDtoUserIDOverridesInner) HasUnitType() bool {
	if o != nil && !IsNil(o.UnitType) {
		return true
	}

	return false
}

// SetUnitType gets a reference to the given nil and assigns it to the UnitType field.
func (o *ExperimentOverridesDtoUserIDOverridesInner) SetUnitType(v nil) {
	o.UnitType = &v
}

func (o ExperimentOverridesDtoUserIDOverridesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperimentOverridesDtoUserIDOverridesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupID"] = o.GroupID
	toSerialize["ids"] = o.Ids
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.UnitType) {
		toSerialize["unitType"] = o.UnitType
	}
	return toSerialize, nil
}

func (o *ExperimentOverridesDtoUserIDOverridesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupID",
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperimentOverridesDtoUserIDOverridesInner := _ExperimentOverridesDtoUserIDOverridesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExperimentOverridesDtoUserIDOverridesInner)

	if err != nil {
		return err
	}

	*o = ExperimentOverridesDtoUserIDOverridesInner(varExperimentOverridesDtoUserIDOverridesInner)

	return err
}

type NullableExperimentOverridesDtoUserIDOverridesInner struct {
	value *ExperimentOverridesDtoUserIDOverridesInner
	isSet bool
}

func (v NullableExperimentOverridesDtoUserIDOverridesInner) Get() *ExperimentOverridesDtoUserIDOverridesInner {
	return v.value
}

func (v *NullableExperimentOverridesDtoUserIDOverridesInner) Set(val *ExperimentOverridesDtoUserIDOverridesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentOverridesDtoUserIDOverridesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentOverridesDtoUserIDOverridesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentOverridesDtoUserIDOverridesInner(val *ExperimentOverridesDtoUserIDOverridesInner) *NullableExperimentOverridesDtoUserIDOverridesInner {
	return &NullableExperimentOverridesDtoUserIDOverridesInner{value: val, isSet: true}
}

func (v NullableExperimentOverridesDtoUserIDOverridesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentOverridesDtoUserIDOverridesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


