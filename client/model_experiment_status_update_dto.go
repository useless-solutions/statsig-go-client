/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExperimentStatusUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperimentStatusUpdateDto{}

// ExperimentStatusUpdateDto Schema for updating the status of an experiment
type ExperimentStatusUpdateDto struct {
	// The ID of the group to launch
	Id string `json:"id"`
	// The reason for making the decision to update the experiment status
	DecisionReason string `json:"decisionReason"`
	// Indicates whether to remove targeting from the experiment
	RemoveTargeting *bool `json:"removeTargeting,omitempty"`
}

type _ExperimentStatusUpdateDto ExperimentStatusUpdateDto

// NewExperimentStatusUpdateDto instantiates a new ExperimentStatusUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentStatusUpdateDto(id string, decisionReason string) *ExperimentStatusUpdateDto {
	this := ExperimentStatusUpdateDto{}
	this.Id = id
	this.DecisionReason = decisionReason
	var removeTargeting bool = false
	this.RemoveTargeting = &removeTargeting
	return &this
}

// NewExperimentStatusUpdateDtoWithDefaults instantiates a new ExperimentStatusUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentStatusUpdateDtoWithDefaults() *ExperimentStatusUpdateDto {
	this := ExperimentStatusUpdateDto{}
	var removeTargeting bool = false
	this.RemoveTargeting = &removeTargeting
	return &this
}

// GetId returns the Id field value
func (o *ExperimentStatusUpdateDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExperimentStatusUpdateDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExperimentStatusUpdateDto) SetId(v string) {
	o.Id = v
}

// GetDecisionReason returns the DecisionReason field value
func (o *ExperimentStatusUpdateDto) GetDecisionReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DecisionReason
}

// GetDecisionReasonOk returns a tuple with the DecisionReason field value
// and a boolean to check if the value has been set.
func (o *ExperimentStatusUpdateDto) GetDecisionReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DecisionReason, true
}

// SetDecisionReason sets field value
func (o *ExperimentStatusUpdateDto) SetDecisionReason(v string) {
	o.DecisionReason = v
}

// GetRemoveTargeting returns the RemoveTargeting field value if set, zero value otherwise.
func (o *ExperimentStatusUpdateDto) GetRemoveTargeting() bool {
	if o == nil || IsNil(o.RemoveTargeting) {
		var ret bool
		return ret
	}
	return *o.RemoveTargeting
}

// GetRemoveTargetingOk returns a tuple with the RemoveTargeting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExperimentStatusUpdateDto) GetRemoveTargetingOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoveTargeting) {
		return nil, false
	}
	return o.RemoveTargeting, true
}

// HasRemoveTargeting returns a boolean if a field has been set.
func (o *ExperimentStatusUpdateDto) HasRemoveTargeting() bool {
	if o != nil && !IsNil(o.RemoveTargeting) {
		return true
	}

	return false
}

// SetRemoveTargeting gets a reference to the given bool and assigns it to the RemoveTargeting field.
func (o *ExperimentStatusUpdateDto) SetRemoveTargeting(v bool) {
	o.RemoveTargeting = &v
}

func (o ExperimentStatusUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperimentStatusUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["decisionReason"] = o.DecisionReason
	if !IsNil(o.RemoveTargeting) {
		toSerialize["removeTargeting"] = o.RemoveTargeting
	}
	return toSerialize, nil
}

func (o *ExperimentStatusUpdateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"decisionReason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperimentStatusUpdateDto := _ExperimentStatusUpdateDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExperimentStatusUpdateDto)

	if err != nil {
		return err
	}

	*o = ExperimentStatusUpdateDto(varExperimentStatusUpdateDto)

	return err
}

type NullableExperimentStatusUpdateDto struct {
	value *ExperimentStatusUpdateDto
	isSet bool
}

func (v NullableExperimentStatusUpdateDto) Get() *ExperimentStatusUpdateDto {
	return v.value
}

func (v *NullableExperimentStatusUpdateDto) Set(val *ExperimentStatusUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentStatusUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentStatusUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentStatusUpdateDto(val *ExperimentStatusUpdateDto) *NullableExperimentStatusUpdateDto {
	return &NullableExperimentStatusUpdateDto{value: val, isSet: true}
}

func (v NullableExperimentStatusUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentStatusUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


