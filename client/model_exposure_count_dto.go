/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExposureCountDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExposureCountDto{}

// ExposureCountDto struct for ExposureCountDto
type ExposureCountDto struct {
	// ids of gates to query (max 25)
	Gates []ExposureCountDtoGatesInner `json:"gates"`
	// ids of experiments to query (max 25)
	Experiments []ExposureCountDtoGatesInner `json:"experiments"`
}

type _ExposureCountDto ExposureCountDto

// NewExposureCountDto instantiates a new ExposureCountDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExposureCountDto(gates []ExposureCountDtoGatesInner, experiments []ExposureCountDtoGatesInner) *ExposureCountDto {
	this := ExposureCountDto{}
	this.Gates = gates
	this.Experiments = experiments
	return &this
}

// NewExposureCountDtoWithDefaults instantiates a new ExposureCountDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExposureCountDtoWithDefaults() *ExposureCountDto {
	this := ExposureCountDto{}
	return &this
}

// GetGates returns the Gates field value
func (o *ExposureCountDto) GetGates() []ExposureCountDtoGatesInner {
	if o == nil {
		var ret []ExposureCountDtoGatesInner
		return ret
	}

	return o.Gates
}

// GetGatesOk returns a tuple with the Gates field value
// and a boolean to check if the value has been set.
func (o *ExposureCountDto) GetGatesOk() ([]ExposureCountDtoGatesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gates, true
}

// SetGates sets field value
func (o *ExposureCountDto) SetGates(v []ExposureCountDtoGatesInner) {
	o.Gates = v
}

// GetExperiments returns the Experiments field value
func (o *ExposureCountDto) GetExperiments() []ExposureCountDtoGatesInner {
	if o == nil {
		var ret []ExposureCountDtoGatesInner
		return ret
	}

	return o.Experiments
}

// GetExperimentsOk returns a tuple with the Experiments field value
// and a boolean to check if the value has been set.
func (o *ExposureCountDto) GetExperimentsOk() ([]ExposureCountDtoGatesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Experiments, true
}

// SetExperiments sets field value
func (o *ExposureCountDto) SetExperiments(v []ExposureCountDtoGatesInner) {
	o.Experiments = v
}

func (o ExposureCountDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExposureCountDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gates"] = o.Gates
	toSerialize["experiments"] = o.Experiments
	return toSerialize, nil
}

func (o *ExposureCountDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gates",
		"experiments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExposureCountDto := _ExposureCountDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExposureCountDto)

	if err != nil {
		return err
	}

	*o = ExposureCountDto(varExposureCountDto)

	return err
}

type NullableExposureCountDto struct {
	value *ExposureCountDto
	isSet bool
}

func (v NullableExposureCountDto) Get() *ExposureCountDto {
	return v.value
}

func (v *NullableExposureCountDto) Set(val *ExposureCountDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExposureCountDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExposureCountDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExposureCountDto(val *ExposureCountDto) *NullableExposureCountDto {
	return &NullableExposureCountDto{value: val, isSet: true}
}

func (v NullableExposureCountDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExposureCountDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


