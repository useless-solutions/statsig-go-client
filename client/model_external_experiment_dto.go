/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalExperimentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalExperimentDto{}

// ExternalExperimentDto struct for ExternalExperimentDto
type ExternalExperimentDto struct {
	ReviewSettings *ExternalGateDtoReviewSettings `json:"reviewSettings,omitempty"`
	ActiveReview *ExternalGateDtoActiveReview `json:"activeReview,omitempty"`
	// ID
	Id string `json:"id"`
	// Optional name for the configuration.
	Name *string `json:"name,omitempty"`
	IdType string `json:"idType"`
	// A helpful summary of what this experiment does
	Description string `json:"description"`
	// ID of the last modifier.
	LastModifierID nil `json:"lastModifierID"`
	// Time of the last modification.
	LastModifiedTime nil `json:"lastModifiedTime"`
	// Email of the last modifier.
	LastModifierEmail nil `json:"lastModifierEmail"`
	// Name of the last modifier.
	LastModifierName nil `json:"lastModifierName"`
	// The Statsig ID of the creator of this experiment
	CreatorID *nil `json:"creatorID,omitempty"`
	// Timestamp when the entity was created.
	CreatedTime float32 `json:"createdTime"`
	// Name of the creator.
	CreatorName nil `json:"creatorName"`
	// The email of the creator of this experiment
	CreatorEmail *nil `json:"creatorEmail,omitempty"`
	Tags []string `json:"tags"`
	TargetApps *ExternalExperimentDtoTargetApps `json:"targetApps,omitempty"`
	// Holdouts applied to this configuration.
	HoldoutIDs []string `json:"holdoutIDs,omitempty"`
	// Enterprise only
	Team *nil `json:"team,omitempty"`
	// Version number
	Version *float32 `json:"version,omitempty"`
	// The secondary ID type for the experiment used in WHN for ID resolution
	SecondaryIDType *nil `json:"secondaryIDType,omitempty"`
	// A statement that will be tested by this experiment
	Hypothesis string `json:"hypothesis"`
	// Links to relevant documentation or resources
	Links []ExternalExperimentDtoLinksInner `json:"links,omitempty"`
	// The test groups for your experiment
	Groups []ExternalExperimentDtoGroupsInner `json:"groups"`
	// Optional control group ID
	ControlGroupID *string `json:"controlGroupID,omitempty"`
	// Percent of layer allocated to this experiment
	Allocation float32 `json:"allocation"`
	// Primary metric tags for the experiment
	PrimaryMetricTags []string `json:"primaryMetricTags,omitempty"`
	// Secondary metric tags for the experiment
	SecondaryMetricTags []string `json:"secondaryMetricTags,omitempty"`
	PrimaryMetrics []ExternalGateDtoMonitoringMetricsInner `json:"primaryMetrics"`
	SecondaryMetrics []ExternalGateDtoMonitoringMetricsInner `json:"secondaryMetrics"`
	// How long the experiment is expected to last in days
	Duration *int32 `json:"duration,omitempty"`
	// Target exposures for the experiment
	TargetExposures *int32 `json:"targetExposures,omitempty"`
	// Restrict your experiment to users passing the selected feature gate
	TargetingGateID nil `json:"targetingGateID"`
	// Is Bonferroni correction applied?
	BonferroniCorrection bool `json:"bonferroniCorrection"`
	// Default error margin used for results
	DefaultConfidenceInterval string `json:"defaultConfidenceInterval"`
	// The current status of the experiment
	Status string `json:"status"`
	// ID of the launched group, null otherwise
	LaunchedGroupID *nil `json:"launchedGroupID,omitempty"`
	AssignmentSourceName *string `json:"assignmentSourceName,omitempty"`
	// Name of the source experiment for assignment
	AssignmentSourceExperimentName *string `json:"assignmentSourceExperimentName,omitempty"`
	IsAnalysisOnly *bool `json:"isAnalysisOnly,omitempty"`
	// Allocation duration in days
	AllocationDuration *int32 `json:"allocationDuration,omitempty"`
	// Cohorted analysis duration in days
	CohortedAnalysisDuration *int32 `json:"cohortedAnalysisDuration,omitempty"`
	// Fixed analysis duration in days
	FixedAnalysisDuration *int32 `json:"fixedAnalysisDuration,omitempty"`
	// Warehouse Native only - UTC hour at which to run scheduled pulse loads
	ScheduledReloadHour *int32 `json:"scheduledReloadHour,omitempty"`
	// Warehouse Native only - reload type for scheduled reloads
	ScheduledReloadType *string `json:"scheduledReloadType,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
	ExternalExperimentName *string `json:"externalExperimentName,omitempty"`
	LayerID nil `json:"layerID"`
	StartTime nil `json:"startTime"`
	EndTime nil `json:"endTime"`
	DecisionReason nil `json:"decisionReason"`
	DecisionTime nil `json:"decisionTime"`
	HealthChecks []ExternalExperimentDtoHealthChecksInner `json:"healthChecks,omitempty"`
	// Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.
	Owner *nil `json:"owner,omitempty"`
}

type _ExternalExperimentDto ExternalExperimentDto

// NewExternalExperimentDto instantiates a new ExternalExperimentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalExperimentDto(id string, idType string, description string, lastModifierID nil, lastModifiedTime nil, lastModifierEmail nil, lastModifierName nil, createdTime float32, creatorName nil, tags []string, hypothesis string, groups []ExternalExperimentDtoGroupsInner, allocation float32, primaryMetrics []ExternalGateDtoMonitoringMetricsInner, secondaryMetrics []ExternalGateDtoMonitoringMetricsInner, targetingGateID nil, bonferroniCorrection bool, defaultConfidenceInterval string, status string, layerID nil, startTime nil, endTime nil, decisionReason nil, decisionTime nil) *ExternalExperimentDto {
	this := ExternalExperimentDto{}
	this.Id = id
	this.IdType = idType
	this.Description = description
	this.LastModifierID = lastModifierID
	this.LastModifiedTime = lastModifiedTime
	this.LastModifierEmail = lastModifierEmail
	this.LastModifierName = lastModifierName
	this.CreatedTime = createdTime
	this.CreatorName = creatorName
	this.Tags = tags
	this.Hypothesis = hypothesis
	this.Groups = groups
	this.Allocation = allocation
	this.PrimaryMetrics = primaryMetrics
	this.SecondaryMetrics = secondaryMetrics
	this.TargetingGateID = targetingGateID
	this.BonferroniCorrection = bonferroniCorrection
	this.DefaultConfidenceInterval = defaultConfidenceInterval
	this.Status = status
	this.LayerID = layerID
	this.StartTime = startTime
	this.EndTime = endTime
	this.DecisionReason = decisionReason
	this.DecisionTime = decisionTime
	return &this
}

// NewExternalExperimentDtoWithDefaults instantiates a new ExternalExperimentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalExperimentDtoWithDefaults() *ExternalExperimentDto {
	this := ExternalExperimentDto{}
	return &this
}

// GetReviewSettings returns the ReviewSettings field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetReviewSettings() ExternalGateDtoReviewSettings {
	if o == nil || IsNil(o.ReviewSettings) {
		var ret ExternalGateDtoReviewSettings
		return ret
	}
	return *o.ReviewSettings
}

// GetReviewSettingsOk returns a tuple with the ReviewSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetReviewSettingsOk() (*ExternalGateDtoReviewSettings, bool) {
	if o == nil || IsNil(o.ReviewSettings) {
		return nil, false
	}
	return o.ReviewSettings, true
}

// HasReviewSettings returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasReviewSettings() bool {
	if o != nil && !IsNil(o.ReviewSettings) {
		return true
	}

	return false
}

// SetReviewSettings gets a reference to the given ExternalGateDtoReviewSettings and assigns it to the ReviewSettings field.
func (o *ExternalExperimentDto) SetReviewSettings(v ExternalGateDtoReviewSettings) {
	o.ReviewSettings = &v
}

// GetActiveReview returns the ActiveReview field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetActiveReview() ExternalGateDtoActiveReview {
	if o == nil || IsNil(o.ActiveReview) {
		var ret ExternalGateDtoActiveReview
		return ret
	}
	return *o.ActiveReview
}

// GetActiveReviewOk returns a tuple with the ActiveReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetActiveReviewOk() (*ExternalGateDtoActiveReview, bool) {
	if o == nil || IsNil(o.ActiveReview) {
		return nil, false
	}
	return o.ActiveReview, true
}

// HasActiveReview returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasActiveReview() bool {
	if o != nil && !IsNil(o.ActiveReview) {
		return true
	}

	return false
}

// SetActiveReview gets a reference to the given ExternalGateDtoActiveReview and assigns it to the ActiveReview field.
func (o *ExternalExperimentDto) SetActiveReview(v ExternalGateDtoActiveReview) {
	o.ActiveReview = &v
}

// GetId returns the Id field value
func (o *ExternalExperimentDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExternalExperimentDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExternalExperimentDto) SetName(v string) {
	o.Name = &v
}

// GetIdType returns the IdType field value
func (o *ExternalExperimentDto) GetIdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetIdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdType, true
}

// SetIdType sets field value
func (o *ExternalExperimentDto) SetIdType(v string) {
	o.IdType = v
}

// GetDescription returns the Description field value
func (o *ExternalExperimentDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ExternalExperimentDto) SetDescription(v string) {
	o.Description = v
}

// GetLastModifierID returns the LastModifierID field value
func (o *ExternalExperimentDto) GetLastModifierID() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.LastModifierID
}

// GetLastModifierIDOk returns a tuple with the LastModifierID field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetLastModifierIDOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifierID, true
}

// SetLastModifierID sets field value
func (o *ExternalExperimentDto) SetLastModifierID(v nil) {
	o.LastModifierID = v
}

// GetLastModifiedTime returns the LastModifiedTime field value
func (o *ExternalExperimentDto) GetLastModifiedTime() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetLastModifiedTimeOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifiedTime, true
}

// SetLastModifiedTime sets field value
func (o *ExternalExperimentDto) SetLastModifiedTime(v nil) {
	o.LastModifiedTime = v
}

// GetLastModifierEmail returns the LastModifierEmail field value
func (o *ExternalExperimentDto) GetLastModifierEmail() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.LastModifierEmail
}

// GetLastModifierEmailOk returns a tuple with the LastModifierEmail field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetLastModifierEmailOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifierEmail, true
}

// SetLastModifierEmail sets field value
func (o *ExternalExperimentDto) SetLastModifierEmail(v nil) {
	o.LastModifierEmail = v
}

// GetLastModifierName returns the LastModifierName field value
func (o *ExternalExperimentDto) GetLastModifierName() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.LastModifierName
}

// GetLastModifierNameOk returns a tuple with the LastModifierName field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetLastModifierNameOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModifierName, true
}

// SetLastModifierName sets field value
func (o *ExternalExperimentDto) SetLastModifierName(v nil) {
	o.LastModifierName = v
}

// GetCreatorID returns the CreatorID field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetCreatorID() nil {
	if o == nil || IsNil(o.CreatorID) {
		var ret nil
		return ret
	}
	return *o.CreatorID
}

// GetCreatorIDOk returns a tuple with the CreatorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetCreatorIDOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorID) {
		return nil, false
	}
	return o.CreatorID, true
}

// HasCreatorID returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasCreatorID() bool {
	if o != nil && !IsNil(o.CreatorID) {
		return true
	}

	return false
}

// SetCreatorID gets a reference to the given nil and assigns it to the CreatorID field.
func (o *ExternalExperimentDto) SetCreatorID(v nil) {
	o.CreatorID = &v
}

// GetCreatedTime returns the CreatedTime field value
func (o *ExternalExperimentDto) GetCreatedTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetCreatedTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *ExternalExperimentDto) SetCreatedTime(v float32) {
	o.CreatedTime = v
}

// GetCreatorName returns the CreatorName field value
func (o *ExternalExperimentDto) GetCreatorName() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetCreatorNameOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorName, true
}

// SetCreatorName sets field value
func (o *ExternalExperimentDto) SetCreatorName(v nil) {
	o.CreatorName = v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetCreatorEmail() nil {
	if o == nil || IsNil(o.CreatorEmail) {
		var ret nil
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetCreatorEmailOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorEmail) {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasCreatorEmail() bool {
	if o != nil && !IsNil(o.CreatorEmail) {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given nil and assigns it to the CreatorEmail field.
func (o *ExternalExperimentDto) SetCreatorEmail(v nil) {
	o.CreatorEmail = &v
}

// GetTags returns the Tags field value
func (o *ExternalExperimentDto) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *ExternalExperimentDto) SetTags(v []string) {
	o.Tags = v
}

// GetTargetApps returns the TargetApps field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetTargetApps() ExternalExperimentDtoTargetApps {
	if o == nil || IsNil(o.TargetApps) {
		var ret ExternalExperimentDtoTargetApps
		return ret
	}
	return *o.TargetApps
}

// GetTargetAppsOk returns a tuple with the TargetApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetTargetAppsOk() (*ExternalExperimentDtoTargetApps, bool) {
	if o == nil || IsNil(o.TargetApps) {
		return nil, false
	}
	return o.TargetApps, true
}

// HasTargetApps returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasTargetApps() bool {
	if o != nil && !IsNil(o.TargetApps) {
		return true
	}

	return false
}

// SetTargetApps gets a reference to the given ExternalExperimentDtoTargetApps and assigns it to the TargetApps field.
func (o *ExternalExperimentDto) SetTargetApps(v ExternalExperimentDtoTargetApps) {
	o.TargetApps = &v
}

// GetHoldoutIDs returns the HoldoutIDs field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetHoldoutIDs() []string {
	if o == nil || IsNil(o.HoldoutIDs) {
		var ret []string
		return ret
	}
	return o.HoldoutIDs
}

// GetHoldoutIDsOk returns a tuple with the HoldoutIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetHoldoutIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.HoldoutIDs) {
		return nil, false
	}
	return o.HoldoutIDs, true
}

// HasHoldoutIDs returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasHoldoutIDs() bool {
	if o != nil && !IsNil(o.HoldoutIDs) {
		return true
	}

	return false
}

// SetHoldoutIDs gets a reference to the given []string and assigns it to the HoldoutIDs field.
func (o *ExternalExperimentDto) SetHoldoutIDs(v []string) {
	o.HoldoutIDs = v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetTeam() nil {
	if o == nil || IsNil(o.Team) {
		var ret nil
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetTeamOk() (*nil, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given nil and assigns it to the Team field.
func (o *ExternalExperimentDto) SetTeam(v nil) {
	o.Team = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetVersion() float32 {
	if o == nil || IsNil(o.Version) {
		var ret float32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float32 and assigns it to the Version field.
func (o *ExternalExperimentDto) SetVersion(v float32) {
	o.Version = &v
}

// GetSecondaryIDType returns the SecondaryIDType field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetSecondaryIDType() nil {
	if o == nil || IsNil(o.SecondaryIDType) {
		var ret nil
		return ret
	}
	return *o.SecondaryIDType
}

// GetSecondaryIDTypeOk returns a tuple with the SecondaryIDType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetSecondaryIDTypeOk() (*nil, bool) {
	if o == nil || IsNil(o.SecondaryIDType) {
		return nil, false
	}
	return o.SecondaryIDType, true
}

// HasSecondaryIDType returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasSecondaryIDType() bool {
	if o != nil && !IsNil(o.SecondaryIDType) {
		return true
	}

	return false
}

// SetSecondaryIDType gets a reference to the given nil and assigns it to the SecondaryIDType field.
func (o *ExternalExperimentDto) SetSecondaryIDType(v nil) {
	o.SecondaryIDType = &v
}

// GetHypothesis returns the Hypothesis field value
func (o *ExternalExperimentDto) GetHypothesis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hypothesis
}

// GetHypothesisOk returns a tuple with the Hypothesis field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetHypothesisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hypothesis, true
}

// SetHypothesis sets field value
func (o *ExternalExperimentDto) SetHypothesis(v string) {
	o.Hypothesis = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetLinks() []ExternalExperimentDtoLinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []ExternalExperimentDtoLinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetLinksOk() ([]ExternalExperimentDtoLinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ExternalExperimentDtoLinksInner and assigns it to the Links field.
func (o *ExternalExperimentDto) SetLinks(v []ExternalExperimentDtoLinksInner) {
	o.Links = v
}

// GetGroups returns the Groups field value
func (o *ExternalExperimentDto) GetGroups() []ExternalExperimentDtoGroupsInner {
	if o == nil {
		var ret []ExternalExperimentDtoGroupsInner
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetGroupsOk() ([]ExternalExperimentDtoGroupsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *ExternalExperimentDto) SetGroups(v []ExternalExperimentDtoGroupsInner) {
	o.Groups = v
}

// GetControlGroupID returns the ControlGroupID field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetControlGroupID() string {
	if o == nil || IsNil(o.ControlGroupID) {
		var ret string
		return ret
	}
	return *o.ControlGroupID
}

// GetControlGroupIDOk returns a tuple with the ControlGroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetControlGroupIDOk() (*string, bool) {
	if o == nil || IsNil(o.ControlGroupID) {
		return nil, false
	}
	return o.ControlGroupID, true
}

// HasControlGroupID returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasControlGroupID() bool {
	if o != nil && !IsNil(o.ControlGroupID) {
		return true
	}

	return false
}

// SetControlGroupID gets a reference to the given string and assigns it to the ControlGroupID field.
func (o *ExternalExperimentDto) SetControlGroupID(v string) {
	o.ControlGroupID = &v
}

// GetAllocation returns the Allocation field value
func (o *ExternalExperimentDto) GetAllocation() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetAllocationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allocation, true
}

// SetAllocation sets field value
func (o *ExternalExperimentDto) SetAllocation(v float32) {
	o.Allocation = v
}

// GetPrimaryMetricTags returns the PrimaryMetricTags field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetPrimaryMetricTags() []string {
	if o == nil || IsNil(o.PrimaryMetricTags) {
		var ret []string
		return ret
	}
	return o.PrimaryMetricTags
}

// GetPrimaryMetricTagsOk returns a tuple with the PrimaryMetricTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetPrimaryMetricTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.PrimaryMetricTags) {
		return nil, false
	}
	return o.PrimaryMetricTags, true
}

// HasPrimaryMetricTags returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasPrimaryMetricTags() bool {
	if o != nil && !IsNil(o.PrimaryMetricTags) {
		return true
	}

	return false
}

// SetPrimaryMetricTags gets a reference to the given []string and assigns it to the PrimaryMetricTags field.
func (o *ExternalExperimentDto) SetPrimaryMetricTags(v []string) {
	o.PrimaryMetricTags = v
}

// GetSecondaryMetricTags returns the SecondaryMetricTags field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetSecondaryMetricTags() []string {
	if o == nil || IsNil(o.SecondaryMetricTags) {
		var ret []string
		return ret
	}
	return o.SecondaryMetricTags
}

// GetSecondaryMetricTagsOk returns a tuple with the SecondaryMetricTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetSecondaryMetricTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecondaryMetricTags) {
		return nil, false
	}
	return o.SecondaryMetricTags, true
}

// HasSecondaryMetricTags returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasSecondaryMetricTags() bool {
	if o != nil && !IsNil(o.SecondaryMetricTags) {
		return true
	}

	return false
}

// SetSecondaryMetricTags gets a reference to the given []string and assigns it to the SecondaryMetricTags field.
func (o *ExternalExperimentDto) SetSecondaryMetricTags(v []string) {
	o.SecondaryMetricTags = v
}

// GetPrimaryMetrics returns the PrimaryMetrics field value
func (o *ExternalExperimentDto) GetPrimaryMetrics() []ExternalGateDtoMonitoringMetricsInner {
	if o == nil {
		var ret []ExternalGateDtoMonitoringMetricsInner
		return ret
	}

	return o.PrimaryMetrics
}

// GetPrimaryMetricsOk returns a tuple with the PrimaryMetrics field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetPrimaryMetricsOk() ([]ExternalGateDtoMonitoringMetricsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryMetrics, true
}

// SetPrimaryMetrics sets field value
func (o *ExternalExperimentDto) SetPrimaryMetrics(v []ExternalGateDtoMonitoringMetricsInner) {
	o.PrimaryMetrics = v
}

// GetSecondaryMetrics returns the SecondaryMetrics field value
func (o *ExternalExperimentDto) GetSecondaryMetrics() []ExternalGateDtoMonitoringMetricsInner {
	if o == nil {
		var ret []ExternalGateDtoMonitoringMetricsInner
		return ret
	}

	return o.SecondaryMetrics
}

// GetSecondaryMetricsOk returns a tuple with the SecondaryMetrics field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetSecondaryMetricsOk() ([]ExternalGateDtoMonitoringMetricsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecondaryMetrics, true
}

// SetSecondaryMetrics sets field value
func (o *ExternalExperimentDto) SetSecondaryMetrics(v []ExternalGateDtoMonitoringMetricsInner) {
	o.SecondaryMetrics = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *ExternalExperimentDto) SetDuration(v int32) {
	o.Duration = &v
}

// GetTargetExposures returns the TargetExposures field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetTargetExposures() int32 {
	if o == nil || IsNil(o.TargetExposures) {
		var ret int32
		return ret
	}
	return *o.TargetExposures
}

// GetTargetExposuresOk returns a tuple with the TargetExposures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetTargetExposuresOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetExposures) {
		return nil, false
	}
	return o.TargetExposures, true
}

// HasTargetExposures returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasTargetExposures() bool {
	if o != nil && !IsNil(o.TargetExposures) {
		return true
	}

	return false
}

// SetTargetExposures gets a reference to the given int32 and assigns it to the TargetExposures field.
func (o *ExternalExperimentDto) SetTargetExposures(v int32) {
	o.TargetExposures = &v
}

// GetTargetingGateID returns the TargetingGateID field value
func (o *ExternalExperimentDto) GetTargetingGateID() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.TargetingGateID
}

// GetTargetingGateIDOk returns a tuple with the TargetingGateID field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetTargetingGateIDOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetingGateID, true
}

// SetTargetingGateID sets field value
func (o *ExternalExperimentDto) SetTargetingGateID(v nil) {
	o.TargetingGateID = v
}

// GetBonferroniCorrection returns the BonferroniCorrection field value
func (o *ExternalExperimentDto) GetBonferroniCorrection() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BonferroniCorrection
}

// GetBonferroniCorrectionOk returns a tuple with the BonferroniCorrection field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetBonferroniCorrectionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BonferroniCorrection, true
}

// SetBonferroniCorrection sets field value
func (o *ExternalExperimentDto) SetBonferroniCorrection(v bool) {
	o.BonferroniCorrection = v
}

// GetDefaultConfidenceInterval returns the DefaultConfidenceInterval field value
func (o *ExternalExperimentDto) GetDefaultConfidenceInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultConfidenceInterval
}

// GetDefaultConfidenceIntervalOk returns a tuple with the DefaultConfidenceInterval field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetDefaultConfidenceIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultConfidenceInterval, true
}

// SetDefaultConfidenceInterval sets field value
func (o *ExternalExperimentDto) SetDefaultConfidenceInterval(v string) {
	o.DefaultConfidenceInterval = v
}

// GetStatus returns the Status field value
func (o *ExternalExperimentDto) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ExternalExperimentDto) SetStatus(v string) {
	o.Status = v
}

// GetLaunchedGroupID returns the LaunchedGroupID field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetLaunchedGroupID() nil {
	if o == nil || IsNil(o.LaunchedGroupID) {
		var ret nil
		return ret
	}
	return *o.LaunchedGroupID
}

// GetLaunchedGroupIDOk returns a tuple with the LaunchedGroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetLaunchedGroupIDOk() (*nil, bool) {
	if o == nil || IsNil(o.LaunchedGroupID) {
		return nil, false
	}
	return o.LaunchedGroupID, true
}

// HasLaunchedGroupID returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasLaunchedGroupID() bool {
	if o != nil && !IsNil(o.LaunchedGroupID) {
		return true
	}

	return false
}

// SetLaunchedGroupID gets a reference to the given nil and assigns it to the LaunchedGroupID field.
func (o *ExternalExperimentDto) SetLaunchedGroupID(v nil) {
	o.LaunchedGroupID = &v
}

// GetAssignmentSourceName returns the AssignmentSourceName field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetAssignmentSourceName() string {
	if o == nil || IsNil(o.AssignmentSourceName) {
		var ret string
		return ret
	}
	return *o.AssignmentSourceName
}

// GetAssignmentSourceNameOk returns a tuple with the AssignmentSourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetAssignmentSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignmentSourceName) {
		return nil, false
	}
	return o.AssignmentSourceName, true
}

// HasAssignmentSourceName returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasAssignmentSourceName() bool {
	if o != nil && !IsNil(o.AssignmentSourceName) {
		return true
	}

	return false
}

// SetAssignmentSourceName gets a reference to the given string and assigns it to the AssignmentSourceName field.
func (o *ExternalExperimentDto) SetAssignmentSourceName(v string) {
	o.AssignmentSourceName = &v
}

// GetAssignmentSourceExperimentName returns the AssignmentSourceExperimentName field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetAssignmentSourceExperimentName() string {
	if o == nil || IsNil(o.AssignmentSourceExperimentName) {
		var ret string
		return ret
	}
	return *o.AssignmentSourceExperimentName
}

// GetAssignmentSourceExperimentNameOk returns a tuple with the AssignmentSourceExperimentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetAssignmentSourceExperimentNameOk() (*string, bool) {
	if o == nil || IsNil(o.AssignmentSourceExperimentName) {
		return nil, false
	}
	return o.AssignmentSourceExperimentName, true
}

// HasAssignmentSourceExperimentName returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasAssignmentSourceExperimentName() bool {
	if o != nil && !IsNil(o.AssignmentSourceExperimentName) {
		return true
	}

	return false
}

// SetAssignmentSourceExperimentName gets a reference to the given string and assigns it to the AssignmentSourceExperimentName field.
func (o *ExternalExperimentDto) SetAssignmentSourceExperimentName(v string) {
	o.AssignmentSourceExperimentName = &v
}

// GetIsAnalysisOnly returns the IsAnalysisOnly field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetIsAnalysisOnly() bool {
	if o == nil || IsNil(o.IsAnalysisOnly) {
		var ret bool
		return ret
	}
	return *o.IsAnalysisOnly
}

// GetIsAnalysisOnlyOk returns a tuple with the IsAnalysisOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetIsAnalysisOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnalysisOnly) {
		return nil, false
	}
	return o.IsAnalysisOnly, true
}

// HasIsAnalysisOnly returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasIsAnalysisOnly() bool {
	if o != nil && !IsNil(o.IsAnalysisOnly) {
		return true
	}

	return false
}

// SetIsAnalysisOnly gets a reference to the given bool and assigns it to the IsAnalysisOnly field.
func (o *ExternalExperimentDto) SetIsAnalysisOnly(v bool) {
	o.IsAnalysisOnly = &v
}

// GetAllocationDuration returns the AllocationDuration field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetAllocationDuration() int32 {
	if o == nil || IsNil(o.AllocationDuration) {
		var ret int32
		return ret
	}
	return *o.AllocationDuration
}

// GetAllocationDurationOk returns a tuple with the AllocationDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetAllocationDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.AllocationDuration) {
		return nil, false
	}
	return o.AllocationDuration, true
}

// HasAllocationDuration returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasAllocationDuration() bool {
	if o != nil && !IsNil(o.AllocationDuration) {
		return true
	}

	return false
}

// SetAllocationDuration gets a reference to the given int32 and assigns it to the AllocationDuration field.
func (o *ExternalExperimentDto) SetAllocationDuration(v int32) {
	o.AllocationDuration = &v
}

// GetCohortedAnalysisDuration returns the CohortedAnalysisDuration field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetCohortedAnalysisDuration() int32 {
	if o == nil || IsNil(o.CohortedAnalysisDuration) {
		var ret int32
		return ret
	}
	return *o.CohortedAnalysisDuration
}

// GetCohortedAnalysisDurationOk returns a tuple with the CohortedAnalysisDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetCohortedAnalysisDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.CohortedAnalysisDuration) {
		return nil, false
	}
	return o.CohortedAnalysisDuration, true
}

// HasCohortedAnalysisDuration returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasCohortedAnalysisDuration() bool {
	if o != nil && !IsNil(o.CohortedAnalysisDuration) {
		return true
	}

	return false
}

// SetCohortedAnalysisDuration gets a reference to the given int32 and assigns it to the CohortedAnalysisDuration field.
func (o *ExternalExperimentDto) SetCohortedAnalysisDuration(v int32) {
	o.CohortedAnalysisDuration = &v
}

// GetFixedAnalysisDuration returns the FixedAnalysisDuration field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetFixedAnalysisDuration() int32 {
	if o == nil || IsNil(o.FixedAnalysisDuration) {
		var ret int32
		return ret
	}
	return *o.FixedAnalysisDuration
}

// GetFixedAnalysisDurationOk returns a tuple with the FixedAnalysisDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetFixedAnalysisDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.FixedAnalysisDuration) {
		return nil, false
	}
	return o.FixedAnalysisDuration, true
}

// HasFixedAnalysisDuration returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasFixedAnalysisDuration() bool {
	if o != nil && !IsNil(o.FixedAnalysisDuration) {
		return true
	}

	return false
}

// SetFixedAnalysisDuration gets a reference to the given int32 and assigns it to the FixedAnalysisDuration field.
func (o *ExternalExperimentDto) SetFixedAnalysisDuration(v int32) {
	o.FixedAnalysisDuration = &v
}

// GetScheduledReloadHour returns the ScheduledReloadHour field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetScheduledReloadHour() int32 {
	if o == nil || IsNil(o.ScheduledReloadHour) {
		var ret int32
		return ret
	}
	return *o.ScheduledReloadHour
}

// GetScheduledReloadHourOk returns a tuple with the ScheduledReloadHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetScheduledReloadHourOk() (*int32, bool) {
	if o == nil || IsNil(o.ScheduledReloadHour) {
		return nil, false
	}
	return o.ScheduledReloadHour, true
}

// HasScheduledReloadHour returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasScheduledReloadHour() bool {
	if o != nil && !IsNil(o.ScheduledReloadHour) {
		return true
	}

	return false
}

// SetScheduledReloadHour gets a reference to the given int32 and assigns it to the ScheduledReloadHour field.
func (o *ExternalExperimentDto) SetScheduledReloadHour(v int32) {
	o.ScheduledReloadHour = &v
}

// GetScheduledReloadType returns the ScheduledReloadType field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetScheduledReloadType() string {
	if o == nil || IsNil(o.ScheduledReloadType) {
		var ret string
		return ret
	}
	return *o.ScheduledReloadType
}

// GetScheduledReloadTypeOk returns a tuple with the ScheduledReloadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetScheduledReloadTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledReloadType) {
		return nil, false
	}
	return o.ScheduledReloadType, true
}

// HasScheduledReloadType returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasScheduledReloadType() bool {
	if o != nil && !IsNil(o.ScheduledReloadType) {
		return true
	}

	return false
}

// SetScheduledReloadType gets a reference to the given string and assigns it to the ScheduledReloadType field.
func (o *ExternalExperimentDto) SetScheduledReloadType(v string) {
	o.ScheduledReloadType = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetSubtype() string {
	if o == nil || IsNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *ExternalExperimentDto) SetSubtype(v string) {
	o.Subtype = &v
}

// GetExternalExperimentName returns the ExternalExperimentName field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetExternalExperimentName() string {
	if o == nil || IsNil(o.ExternalExperimentName) {
		var ret string
		return ret
	}
	return *o.ExternalExperimentName
}

// GetExternalExperimentNameOk returns a tuple with the ExternalExperimentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetExternalExperimentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalExperimentName) {
		return nil, false
	}
	return o.ExternalExperimentName, true
}

// HasExternalExperimentName returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasExternalExperimentName() bool {
	if o != nil && !IsNil(o.ExternalExperimentName) {
		return true
	}

	return false
}

// SetExternalExperimentName gets a reference to the given string and assigns it to the ExternalExperimentName field.
func (o *ExternalExperimentDto) SetExternalExperimentName(v string) {
	o.ExternalExperimentName = &v
}

// GetLayerID returns the LayerID field value
func (o *ExternalExperimentDto) GetLayerID() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.LayerID
}

// GetLayerIDOk returns a tuple with the LayerID field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetLayerIDOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LayerID, true
}

// SetLayerID sets field value
func (o *ExternalExperimentDto) SetLayerID(v nil) {
	o.LayerID = v
}

// GetStartTime returns the StartTime field value
func (o *ExternalExperimentDto) GetStartTime() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetStartTimeOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *ExternalExperimentDto) SetStartTime(v nil) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *ExternalExperimentDto) GetEndTime() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetEndTimeOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *ExternalExperimentDto) SetEndTime(v nil) {
	o.EndTime = v
}

// GetDecisionReason returns the DecisionReason field value
func (o *ExternalExperimentDto) GetDecisionReason() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.DecisionReason
}

// GetDecisionReasonOk returns a tuple with the DecisionReason field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetDecisionReasonOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DecisionReason, true
}

// SetDecisionReason sets field value
func (o *ExternalExperimentDto) SetDecisionReason(v nil) {
	o.DecisionReason = v
}

// GetDecisionTime returns the DecisionTime field value
func (o *ExternalExperimentDto) GetDecisionTime() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.DecisionTime
}

// GetDecisionTimeOk returns a tuple with the DecisionTime field value
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetDecisionTimeOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DecisionTime, true
}

// SetDecisionTime sets field value
func (o *ExternalExperimentDto) SetDecisionTime(v nil) {
	o.DecisionTime = v
}

// GetHealthChecks returns the HealthChecks field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetHealthChecks() []ExternalExperimentDtoHealthChecksInner {
	if o == nil || IsNil(o.HealthChecks) {
		var ret []ExternalExperimentDtoHealthChecksInner
		return ret
	}
	return o.HealthChecks
}

// GetHealthChecksOk returns a tuple with the HealthChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetHealthChecksOk() ([]ExternalExperimentDtoHealthChecksInner, bool) {
	if o == nil || IsNil(o.HealthChecks) {
		return nil, false
	}
	return o.HealthChecks, true
}

// HasHealthChecks returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasHealthChecks() bool {
	if o != nil && !IsNil(o.HealthChecks) {
		return true
	}

	return false
}

// SetHealthChecks gets a reference to the given []ExternalExperimentDtoHealthChecksInner and assigns it to the HealthChecks field.
func (o *ExternalExperimentDto) SetHealthChecks(v []ExternalExperimentDtoHealthChecksInner) {
	o.HealthChecks = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ExternalExperimentDto) GetOwner() nil {
	if o == nil || IsNil(o.Owner) {
		var ret nil
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalExperimentDto) GetOwnerOk() (*nil, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ExternalExperimentDto) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given nil and assigns it to the Owner field.
func (o *ExternalExperimentDto) SetOwner(v nil) {
	o.Owner = &v
}

func (o ExternalExperimentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalExperimentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReviewSettings) {
		toSerialize["reviewSettings"] = o.ReviewSettings
	}
	if !IsNil(o.ActiveReview) {
		toSerialize["activeReview"] = o.ActiveReview
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["idType"] = o.IdType
	toSerialize["description"] = o.Description
	toSerialize["lastModifierID"] = o.LastModifierID
	toSerialize["lastModifiedTime"] = o.LastModifiedTime
	toSerialize["lastModifierEmail"] = o.LastModifierEmail
	toSerialize["lastModifierName"] = o.LastModifierName
	if !IsNil(o.CreatorID) {
		toSerialize["creatorID"] = o.CreatorID
	}
	toSerialize["createdTime"] = o.CreatedTime
	toSerialize["creatorName"] = o.CreatorName
	if !IsNil(o.CreatorEmail) {
		toSerialize["creatorEmail"] = o.CreatorEmail
	}
	toSerialize["tags"] = o.Tags
	if !IsNil(o.TargetApps) {
		toSerialize["targetApps"] = o.TargetApps
	}
	if !IsNil(o.HoldoutIDs) {
		toSerialize["holdoutIDs"] = o.HoldoutIDs
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.SecondaryIDType) {
		toSerialize["secondaryIDType"] = o.SecondaryIDType
	}
	toSerialize["hypothesis"] = o.Hypothesis
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	toSerialize["groups"] = o.Groups
	if !IsNil(o.ControlGroupID) {
		toSerialize["controlGroupID"] = o.ControlGroupID
	}
	toSerialize["allocation"] = o.Allocation
	if !IsNil(o.PrimaryMetricTags) {
		toSerialize["primaryMetricTags"] = o.PrimaryMetricTags
	}
	if !IsNil(o.SecondaryMetricTags) {
		toSerialize["secondaryMetricTags"] = o.SecondaryMetricTags
	}
	toSerialize["primaryMetrics"] = o.PrimaryMetrics
	toSerialize["secondaryMetrics"] = o.SecondaryMetrics
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.TargetExposures) {
		toSerialize["targetExposures"] = o.TargetExposures
	}
	toSerialize["targetingGateID"] = o.TargetingGateID
	toSerialize["bonferroniCorrection"] = o.BonferroniCorrection
	toSerialize["defaultConfidenceInterval"] = o.DefaultConfidenceInterval
	toSerialize["status"] = o.Status
	if !IsNil(o.LaunchedGroupID) {
		toSerialize["launchedGroupID"] = o.LaunchedGroupID
	}
	if !IsNil(o.AssignmentSourceName) {
		toSerialize["assignmentSourceName"] = o.AssignmentSourceName
	}
	if !IsNil(o.AssignmentSourceExperimentName) {
		toSerialize["assignmentSourceExperimentName"] = o.AssignmentSourceExperimentName
	}
	if !IsNil(o.IsAnalysisOnly) {
		toSerialize["isAnalysisOnly"] = o.IsAnalysisOnly
	}
	if !IsNil(o.AllocationDuration) {
		toSerialize["allocationDuration"] = o.AllocationDuration
	}
	if !IsNil(o.CohortedAnalysisDuration) {
		toSerialize["cohortedAnalysisDuration"] = o.CohortedAnalysisDuration
	}
	if !IsNil(o.FixedAnalysisDuration) {
		toSerialize["fixedAnalysisDuration"] = o.FixedAnalysisDuration
	}
	if !IsNil(o.ScheduledReloadHour) {
		toSerialize["scheduledReloadHour"] = o.ScheduledReloadHour
	}
	if !IsNil(o.ScheduledReloadType) {
		toSerialize["scheduledReloadType"] = o.ScheduledReloadType
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.ExternalExperimentName) {
		toSerialize["externalExperimentName"] = o.ExternalExperimentName
	}
	toSerialize["layerID"] = o.LayerID
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["decisionReason"] = o.DecisionReason
	toSerialize["decisionTime"] = o.DecisionTime
	if !IsNil(o.HealthChecks) {
		toSerialize["healthChecks"] = o.HealthChecks
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

func (o *ExternalExperimentDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"idType",
		"description",
		"lastModifierID",
		"lastModifiedTime",
		"lastModifierEmail",
		"lastModifierName",
		"createdTime",
		"creatorName",
		"tags",
		"hypothesis",
		"groups",
		"allocation",
		"primaryMetrics",
		"secondaryMetrics",
		"targetingGateID",
		"bonferroniCorrection",
		"defaultConfidenceInterval",
		"status",
		"layerID",
		"startTime",
		"endTime",
		"decisionReason",
		"decisionTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalExperimentDto := _ExternalExperimentDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalExperimentDto)

	if err != nil {
		return err
	}

	*o = ExternalExperimentDto(varExternalExperimentDto)

	return err
}

type NullableExternalExperimentDto struct {
	value *ExternalExperimentDto
	isSet bool
}

func (v NullableExternalExperimentDto) Get() *ExternalExperimentDto {
	return v.value
}

func (v *NullableExternalExperimentDto) Set(val *ExternalExperimentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalExperimentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalExperimentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalExperimentDto(val *ExternalExperimentDto) *NullableExternalExperimentDto {
	return &NullableExternalExperimentDto{value: val, isSet: true}
}

func (v NullableExternalExperimentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalExperimentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


