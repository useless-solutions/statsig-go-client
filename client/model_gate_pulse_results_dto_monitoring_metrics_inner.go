/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GatePulseResultsDtoMonitoringMetricsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatePulseResultsDtoMonitoringMetricsInner{}

// GatePulseResultsDtoMonitoringMetricsInner struct for GatePulseResultsDtoMonitoringMetricsInner
type GatePulseResultsDtoMonitoringMetricsInner struct {
	MetricID string `json:"metricID"`
	AbsoluteChange *float32 `json:"absoluteChange,omitempty"`
	AbsoluteConfidenceIntervalDelta *float32 `json:"absoluteConfidenceIntervalDelta,omitempty"`
	PercentChange *float32 `json:"percentChange,omitempty"`
	SequentialTestingConfidenceIntervalDelta *float32 `json:"sequentialTestingConfidenceIntervalDelta,omitempty"`
	PercentConfidenceIntervalDelta *float32 `json:"percentConfidenceIntervalDelta,omitempty"`
	PercentSequentialTestingConfidenceIntervalDelta *float32 `json:"percentSequentialTestingConfidenceIntervalDelta,omitempty"`
	TestMean *float32 `json:"testMean,omitempty"`
	ControlMean *float32 `json:"controlMean,omitempty"`
	TestStd *float32 `json:"testStd,omitempty"`
	ControlStd *float32 `json:"controlStd,omitempty"`
	TestUnits *float32 `json:"testUnits,omitempty"`
	ControlUnits *float32 `json:"controlUnits,omitempty"`
	PValue *float32 `json:"pValue,omitempty"`
}

type _GatePulseResultsDtoMonitoringMetricsInner GatePulseResultsDtoMonitoringMetricsInner

// NewGatePulseResultsDtoMonitoringMetricsInner instantiates a new GatePulseResultsDtoMonitoringMetricsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatePulseResultsDtoMonitoringMetricsInner(metricID string) *GatePulseResultsDtoMonitoringMetricsInner {
	this := GatePulseResultsDtoMonitoringMetricsInner{}
	this.MetricID = metricID
	return &this
}

// NewGatePulseResultsDtoMonitoringMetricsInnerWithDefaults instantiates a new GatePulseResultsDtoMonitoringMetricsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatePulseResultsDtoMonitoringMetricsInnerWithDefaults() *GatePulseResultsDtoMonitoringMetricsInner {
	this := GatePulseResultsDtoMonitoringMetricsInner{}
	return &this
}

// GetMetricID returns the MetricID field value
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetMetricID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricID
}

// GetMetricIDOk returns a tuple with the MetricID field value
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetMetricIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricID, true
}

// SetMetricID sets field value
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetMetricID(v string) {
	o.MetricID = v
}

// GetAbsoluteChange returns the AbsoluteChange field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetAbsoluteChange() float32 {
	if o == nil || IsNil(o.AbsoluteChange) {
		var ret float32
		return ret
	}
	return *o.AbsoluteChange
}

// GetAbsoluteChangeOk returns a tuple with the AbsoluteChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetAbsoluteChangeOk() (*float32, bool) {
	if o == nil || IsNil(o.AbsoluteChange) {
		return nil, false
	}
	return o.AbsoluteChange, true
}

// HasAbsoluteChange returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasAbsoluteChange() bool {
	if o != nil && !IsNil(o.AbsoluteChange) {
		return true
	}

	return false
}

// SetAbsoluteChange gets a reference to the given float32 and assigns it to the AbsoluteChange field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetAbsoluteChange(v float32) {
	o.AbsoluteChange = &v
}

// GetAbsoluteConfidenceIntervalDelta returns the AbsoluteConfidenceIntervalDelta field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetAbsoluteConfidenceIntervalDelta() float32 {
	if o == nil || IsNil(o.AbsoluteConfidenceIntervalDelta) {
		var ret float32
		return ret
	}
	return *o.AbsoluteConfidenceIntervalDelta
}

// GetAbsoluteConfidenceIntervalDeltaOk returns a tuple with the AbsoluteConfidenceIntervalDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetAbsoluteConfidenceIntervalDeltaOk() (*float32, bool) {
	if o == nil || IsNil(o.AbsoluteConfidenceIntervalDelta) {
		return nil, false
	}
	return o.AbsoluteConfidenceIntervalDelta, true
}

// HasAbsoluteConfidenceIntervalDelta returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasAbsoluteConfidenceIntervalDelta() bool {
	if o != nil && !IsNil(o.AbsoluteConfidenceIntervalDelta) {
		return true
	}

	return false
}

// SetAbsoluteConfidenceIntervalDelta gets a reference to the given float32 and assigns it to the AbsoluteConfidenceIntervalDelta field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetAbsoluteConfidenceIntervalDelta(v float32) {
	o.AbsoluteConfidenceIntervalDelta = &v
}

// GetPercentChange returns the PercentChange field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPercentChange() float32 {
	if o == nil || IsNil(o.PercentChange) {
		var ret float32
		return ret
	}
	return *o.PercentChange
}

// GetPercentChangeOk returns a tuple with the PercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPercentChangeOk() (*float32, bool) {
	if o == nil || IsNil(o.PercentChange) {
		return nil, false
	}
	return o.PercentChange, true
}

// HasPercentChange returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasPercentChange() bool {
	if o != nil && !IsNil(o.PercentChange) {
		return true
	}

	return false
}

// SetPercentChange gets a reference to the given float32 and assigns it to the PercentChange field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetPercentChange(v float32) {
	o.PercentChange = &v
}

// GetSequentialTestingConfidenceIntervalDelta returns the SequentialTestingConfidenceIntervalDelta field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetSequentialTestingConfidenceIntervalDelta() float32 {
	if o == nil || IsNil(o.SequentialTestingConfidenceIntervalDelta) {
		var ret float32
		return ret
	}
	return *o.SequentialTestingConfidenceIntervalDelta
}

// GetSequentialTestingConfidenceIntervalDeltaOk returns a tuple with the SequentialTestingConfidenceIntervalDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetSequentialTestingConfidenceIntervalDeltaOk() (*float32, bool) {
	if o == nil || IsNil(o.SequentialTestingConfidenceIntervalDelta) {
		return nil, false
	}
	return o.SequentialTestingConfidenceIntervalDelta, true
}

// HasSequentialTestingConfidenceIntervalDelta returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasSequentialTestingConfidenceIntervalDelta() bool {
	if o != nil && !IsNil(o.SequentialTestingConfidenceIntervalDelta) {
		return true
	}

	return false
}

// SetSequentialTestingConfidenceIntervalDelta gets a reference to the given float32 and assigns it to the SequentialTestingConfidenceIntervalDelta field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetSequentialTestingConfidenceIntervalDelta(v float32) {
	o.SequentialTestingConfidenceIntervalDelta = &v
}

// GetPercentConfidenceIntervalDelta returns the PercentConfidenceIntervalDelta field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPercentConfidenceIntervalDelta() float32 {
	if o == nil || IsNil(o.PercentConfidenceIntervalDelta) {
		var ret float32
		return ret
	}
	return *o.PercentConfidenceIntervalDelta
}

// GetPercentConfidenceIntervalDeltaOk returns a tuple with the PercentConfidenceIntervalDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPercentConfidenceIntervalDeltaOk() (*float32, bool) {
	if o == nil || IsNil(o.PercentConfidenceIntervalDelta) {
		return nil, false
	}
	return o.PercentConfidenceIntervalDelta, true
}

// HasPercentConfidenceIntervalDelta returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasPercentConfidenceIntervalDelta() bool {
	if o != nil && !IsNil(o.PercentConfidenceIntervalDelta) {
		return true
	}

	return false
}

// SetPercentConfidenceIntervalDelta gets a reference to the given float32 and assigns it to the PercentConfidenceIntervalDelta field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetPercentConfidenceIntervalDelta(v float32) {
	o.PercentConfidenceIntervalDelta = &v
}

// GetPercentSequentialTestingConfidenceIntervalDelta returns the PercentSequentialTestingConfidenceIntervalDelta field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPercentSequentialTestingConfidenceIntervalDelta() float32 {
	if o == nil || IsNil(o.PercentSequentialTestingConfidenceIntervalDelta) {
		var ret float32
		return ret
	}
	return *o.PercentSequentialTestingConfidenceIntervalDelta
}

// GetPercentSequentialTestingConfidenceIntervalDeltaOk returns a tuple with the PercentSequentialTestingConfidenceIntervalDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPercentSequentialTestingConfidenceIntervalDeltaOk() (*float32, bool) {
	if o == nil || IsNil(o.PercentSequentialTestingConfidenceIntervalDelta) {
		return nil, false
	}
	return o.PercentSequentialTestingConfidenceIntervalDelta, true
}

// HasPercentSequentialTestingConfidenceIntervalDelta returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasPercentSequentialTestingConfidenceIntervalDelta() bool {
	if o != nil && !IsNil(o.PercentSequentialTestingConfidenceIntervalDelta) {
		return true
	}

	return false
}

// SetPercentSequentialTestingConfidenceIntervalDelta gets a reference to the given float32 and assigns it to the PercentSequentialTestingConfidenceIntervalDelta field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetPercentSequentialTestingConfidenceIntervalDelta(v float32) {
	o.PercentSequentialTestingConfidenceIntervalDelta = &v
}

// GetTestMean returns the TestMean field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetTestMean() float32 {
	if o == nil || IsNil(o.TestMean) {
		var ret float32
		return ret
	}
	return *o.TestMean
}

// GetTestMeanOk returns a tuple with the TestMean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetTestMeanOk() (*float32, bool) {
	if o == nil || IsNil(o.TestMean) {
		return nil, false
	}
	return o.TestMean, true
}

// HasTestMean returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasTestMean() bool {
	if o != nil && !IsNil(o.TestMean) {
		return true
	}

	return false
}

// SetTestMean gets a reference to the given float32 and assigns it to the TestMean field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetTestMean(v float32) {
	o.TestMean = &v
}

// GetControlMean returns the ControlMean field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetControlMean() float32 {
	if o == nil || IsNil(o.ControlMean) {
		var ret float32
		return ret
	}
	return *o.ControlMean
}

// GetControlMeanOk returns a tuple with the ControlMean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetControlMeanOk() (*float32, bool) {
	if o == nil || IsNil(o.ControlMean) {
		return nil, false
	}
	return o.ControlMean, true
}

// HasControlMean returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasControlMean() bool {
	if o != nil && !IsNil(o.ControlMean) {
		return true
	}

	return false
}

// SetControlMean gets a reference to the given float32 and assigns it to the ControlMean field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetControlMean(v float32) {
	o.ControlMean = &v
}

// GetTestStd returns the TestStd field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetTestStd() float32 {
	if o == nil || IsNil(o.TestStd) {
		var ret float32
		return ret
	}
	return *o.TestStd
}

// GetTestStdOk returns a tuple with the TestStd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetTestStdOk() (*float32, bool) {
	if o == nil || IsNil(o.TestStd) {
		return nil, false
	}
	return o.TestStd, true
}

// HasTestStd returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasTestStd() bool {
	if o != nil && !IsNil(o.TestStd) {
		return true
	}

	return false
}

// SetTestStd gets a reference to the given float32 and assigns it to the TestStd field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetTestStd(v float32) {
	o.TestStd = &v
}

// GetControlStd returns the ControlStd field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetControlStd() float32 {
	if o == nil || IsNil(o.ControlStd) {
		var ret float32
		return ret
	}
	return *o.ControlStd
}

// GetControlStdOk returns a tuple with the ControlStd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetControlStdOk() (*float32, bool) {
	if o == nil || IsNil(o.ControlStd) {
		return nil, false
	}
	return o.ControlStd, true
}

// HasControlStd returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasControlStd() bool {
	if o != nil && !IsNil(o.ControlStd) {
		return true
	}

	return false
}

// SetControlStd gets a reference to the given float32 and assigns it to the ControlStd field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetControlStd(v float32) {
	o.ControlStd = &v
}

// GetTestUnits returns the TestUnits field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetTestUnits() float32 {
	if o == nil || IsNil(o.TestUnits) {
		var ret float32
		return ret
	}
	return *o.TestUnits
}

// GetTestUnitsOk returns a tuple with the TestUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetTestUnitsOk() (*float32, bool) {
	if o == nil || IsNil(o.TestUnits) {
		return nil, false
	}
	return o.TestUnits, true
}

// HasTestUnits returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasTestUnits() bool {
	if o != nil && !IsNil(o.TestUnits) {
		return true
	}

	return false
}

// SetTestUnits gets a reference to the given float32 and assigns it to the TestUnits field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetTestUnits(v float32) {
	o.TestUnits = &v
}

// GetControlUnits returns the ControlUnits field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetControlUnits() float32 {
	if o == nil || IsNil(o.ControlUnits) {
		var ret float32
		return ret
	}
	return *o.ControlUnits
}

// GetControlUnitsOk returns a tuple with the ControlUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetControlUnitsOk() (*float32, bool) {
	if o == nil || IsNil(o.ControlUnits) {
		return nil, false
	}
	return o.ControlUnits, true
}

// HasControlUnits returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasControlUnits() bool {
	if o != nil && !IsNil(o.ControlUnits) {
		return true
	}

	return false
}

// SetControlUnits gets a reference to the given float32 and assigns it to the ControlUnits field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetControlUnits(v float32) {
	o.ControlUnits = &v
}

// GetPValue returns the PValue field value if set, zero value otherwise.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPValue() float32 {
	if o == nil || IsNil(o.PValue) {
		var ret float32
		return ret
	}
	return *o.PValue
}

// GetPValueOk returns a tuple with the PValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) GetPValueOk() (*float32, bool) {
	if o == nil || IsNil(o.PValue) {
		return nil, false
	}
	return o.PValue, true
}

// HasPValue returns a boolean if a field has been set.
func (o *GatePulseResultsDtoMonitoringMetricsInner) HasPValue() bool {
	if o != nil && !IsNil(o.PValue) {
		return true
	}

	return false
}

// SetPValue gets a reference to the given float32 and assigns it to the PValue field.
func (o *GatePulseResultsDtoMonitoringMetricsInner) SetPValue(v float32) {
	o.PValue = &v
}

func (o GatePulseResultsDtoMonitoringMetricsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatePulseResultsDtoMonitoringMetricsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metricID"] = o.MetricID
	if !IsNil(o.AbsoluteChange) {
		toSerialize["absoluteChange"] = o.AbsoluteChange
	}
	if !IsNil(o.AbsoluteConfidenceIntervalDelta) {
		toSerialize["absoluteConfidenceIntervalDelta"] = o.AbsoluteConfidenceIntervalDelta
	}
	if !IsNil(o.PercentChange) {
		toSerialize["percentChange"] = o.PercentChange
	}
	if !IsNil(o.SequentialTestingConfidenceIntervalDelta) {
		toSerialize["sequentialTestingConfidenceIntervalDelta"] = o.SequentialTestingConfidenceIntervalDelta
	}
	if !IsNil(o.PercentConfidenceIntervalDelta) {
		toSerialize["percentConfidenceIntervalDelta"] = o.PercentConfidenceIntervalDelta
	}
	if !IsNil(o.PercentSequentialTestingConfidenceIntervalDelta) {
		toSerialize["percentSequentialTestingConfidenceIntervalDelta"] = o.PercentSequentialTestingConfidenceIntervalDelta
	}
	if !IsNil(o.TestMean) {
		toSerialize["testMean"] = o.TestMean
	}
	if !IsNil(o.ControlMean) {
		toSerialize["controlMean"] = o.ControlMean
	}
	if !IsNil(o.TestStd) {
		toSerialize["testStd"] = o.TestStd
	}
	if !IsNil(o.ControlStd) {
		toSerialize["controlStd"] = o.ControlStd
	}
	if !IsNil(o.TestUnits) {
		toSerialize["testUnits"] = o.TestUnits
	}
	if !IsNil(o.ControlUnits) {
		toSerialize["controlUnits"] = o.ControlUnits
	}
	if !IsNil(o.PValue) {
		toSerialize["pValue"] = o.PValue
	}
	return toSerialize, nil
}

func (o *GatePulseResultsDtoMonitoringMetricsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metricID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGatePulseResultsDtoMonitoringMetricsInner := _GatePulseResultsDtoMonitoringMetricsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGatePulseResultsDtoMonitoringMetricsInner)

	if err != nil {
		return err
	}

	*o = GatePulseResultsDtoMonitoringMetricsInner(varGatePulseResultsDtoMonitoringMetricsInner)

	return err
}

type NullableGatePulseResultsDtoMonitoringMetricsInner struct {
	value *GatePulseResultsDtoMonitoringMetricsInner
	isSet bool
}

func (v NullableGatePulseResultsDtoMonitoringMetricsInner) Get() *GatePulseResultsDtoMonitoringMetricsInner {
	return v.value
}

func (v *NullableGatePulseResultsDtoMonitoringMetricsInner) Set(val *GatePulseResultsDtoMonitoringMetricsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGatePulseResultsDtoMonitoringMetricsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGatePulseResultsDtoMonitoringMetricsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatePulseResultsDtoMonitoringMetricsInner(val *GatePulseResultsDtoMonitoringMetricsInner) *NullableGatePulseResultsDtoMonitoringMetricsInner {
	return &NullableGatePulseResultsDtoMonitoringMetricsInner{value: val, isSet: true}
}

func (v NullableGatePulseResultsDtoMonitoringMetricsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatePulseResultsDtoMonitoringMetricsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


