/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HoldoutCreateContractDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HoldoutCreateContractDto{}

// HoldoutCreateContractDto struct for HoldoutCreateContractDto
type HoldoutCreateContractDto struct {
	// name of the holdout
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_\\\\- ]*$"`
	// description of the holdout
	Description *string `json:"description,omitempty"`
	// type of id
	IdType *string `json:"idType,omitempty"`
	// id of the team
	TeamID *nil `json:"teamID,omitempty"`
}

type _HoldoutCreateContractDto HoldoutCreateContractDto

// NewHoldoutCreateContractDto instantiates a new HoldoutCreateContractDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHoldoutCreateContractDto(name string) *HoldoutCreateContractDto {
	this := HoldoutCreateContractDto{}
	this.Name = name
	return &this
}

// NewHoldoutCreateContractDtoWithDefaults instantiates a new HoldoutCreateContractDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldoutCreateContractDtoWithDefaults() *HoldoutCreateContractDto {
	this := HoldoutCreateContractDto{}
	return &this
}

// GetName returns the Name field value
func (o *HoldoutCreateContractDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HoldoutCreateContractDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HoldoutCreateContractDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HoldoutCreateContractDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldoutCreateContractDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HoldoutCreateContractDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HoldoutCreateContractDto) SetDescription(v string) {
	o.Description = &v
}

// GetIdType returns the IdType field value if set, zero value otherwise.
func (o *HoldoutCreateContractDto) GetIdType() string {
	if o == nil || IsNil(o.IdType) {
		var ret string
		return ret
	}
	return *o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldoutCreateContractDto) GetIdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdType) {
		return nil, false
	}
	return o.IdType, true
}

// HasIdType returns a boolean if a field has been set.
func (o *HoldoutCreateContractDto) HasIdType() bool {
	if o != nil && !IsNil(o.IdType) {
		return true
	}

	return false
}

// SetIdType gets a reference to the given string and assigns it to the IdType field.
func (o *HoldoutCreateContractDto) SetIdType(v string) {
	o.IdType = &v
}

// GetTeamID returns the TeamID field value if set, zero value otherwise.
func (o *HoldoutCreateContractDto) GetTeamID() nil {
	if o == nil || IsNil(o.TeamID) {
		var ret nil
		return ret
	}
	return *o.TeamID
}

// GetTeamIDOk returns a tuple with the TeamID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldoutCreateContractDto) GetTeamIDOk() (*nil, bool) {
	if o == nil || IsNil(o.TeamID) {
		return nil, false
	}
	return o.TeamID, true
}

// HasTeamID returns a boolean if a field has been set.
func (o *HoldoutCreateContractDto) HasTeamID() bool {
	if o != nil && !IsNil(o.TeamID) {
		return true
	}

	return false
}

// SetTeamID gets a reference to the given nil and assigns it to the TeamID field.
func (o *HoldoutCreateContractDto) SetTeamID(v nil) {
	o.TeamID = &v
}

func (o HoldoutCreateContractDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HoldoutCreateContractDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IdType) {
		toSerialize["idType"] = o.IdType
	}
	if !IsNil(o.TeamID) {
		toSerialize["teamID"] = o.TeamID
	}
	return toSerialize, nil
}

func (o *HoldoutCreateContractDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHoldoutCreateContractDto := _HoldoutCreateContractDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHoldoutCreateContractDto)

	if err != nil {
		return err
	}

	*o = HoldoutCreateContractDto(varHoldoutCreateContractDto)

	return err
}

type NullableHoldoutCreateContractDto struct {
	value *HoldoutCreateContractDto
	isSet bool
}

func (v NullableHoldoutCreateContractDto) Get() *HoldoutCreateContractDto {
	return v.value
}

func (v *NullableHoldoutCreateContractDto) Set(val *HoldoutCreateContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldoutCreateContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldoutCreateContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldoutCreateContractDto(val *HoldoutCreateContractDto) *NullableHoldoutCreateContractDto {
	return &NullableHoldoutCreateContractDto{value: val, isSet: true}
}

func (v NullableHoldoutCreateContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldoutCreateContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


