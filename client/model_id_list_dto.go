/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IDListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IDListDto{}

// IDListDto Schema for a list of IDs with a name and count
type IDListDto struct {
	// The name associated with the list of IDs
	Name string `json:"name"`
	// The count of IDs in the list
	Count float32 `json:"count"`
	// The array of IDs
	Ids []string `json:"ids"`
}

type _IDListDto IDListDto

// NewIDListDto instantiates a new IDListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIDListDto(name string, count float32, ids []string) *IDListDto {
	this := IDListDto{}
	this.Name = name
	this.Count = count
	this.Ids = ids
	return &this
}

// NewIDListDtoWithDefaults instantiates a new IDListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIDListDtoWithDefaults() *IDListDto {
	this := IDListDto{}
	return &this
}

// GetName returns the Name field value
func (o *IDListDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IDListDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IDListDto) SetName(v string) {
	o.Name = v
}

// GetCount returns the Count field value
func (o *IDListDto) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *IDListDto) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *IDListDto) SetCount(v float32) {
	o.Count = v
}

// GetIds returns the Ids field value
func (o *IDListDto) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *IDListDto) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *IDListDto) SetIds(v []string) {
	o.Ids = v
}

func (o IDListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IDListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["count"] = o.Count
	toSerialize["ids"] = o.Ids
	return toSerialize, nil
}

func (o *IDListDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"count",
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIDListDto := _IDListDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIDListDto)

	if err != nil {
		return err
	}

	*o = IDListDto(varIDListDto)

	return err
}

type NullableIDListDto struct {
	value *IDListDto
	isSet bool
}

func (v NullableIDListDto) Get() *IDListDto {
	return v.value
}

func (v *NullableIDListDto) Set(val *IDListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIDListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIDListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIDListDto(val *IDListDto) *NullableIDListDto {
	return &NullableIDListDto{value: val, isSet: true}
}

func (v NullableIDListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIDListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


