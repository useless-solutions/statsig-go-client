/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestionBackfillContractDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestionBackfillContractDto{}

// IngestionBackfillContractDto struct for IngestionBackfillContractDto
type IngestionBackfillContractDto struct {
	DatestampStart string `json:"datestamp_start"`
	DatestampEnd string `json:"datestamp_end"`
	Type string `json:"type"`
	Source *IngestionBackfillContractDtoSource `json:"source,omitempty"`
	Dataset string `json:"dataset"`
}

type _IngestionBackfillContractDto IngestionBackfillContractDto

// NewIngestionBackfillContractDto instantiates a new IngestionBackfillContractDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionBackfillContractDto(datestampStart string, datestampEnd string, type_ string, dataset string) *IngestionBackfillContractDto {
	this := IngestionBackfillContractDto{}
	this.DatestampStart = datestampStart
	this.DatestampEnd = datestampEnd
	this.Type = type_
	this.Dataset = dataset
	return &this
}

// NewIngestionBackfillContractDtoWithDefaults instantiates a new IngestionBackfillContractDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionBackfillContractDtoWithDefaults() *IngestionBackfillContractDto {
	this := IngestionBackfillContractDto{}
	return &this
}

// GetDatestampStart returns the DatestampStart field value
func (o *IngestionBackfillContractDto) GetDatestampStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatestampStart
}

// GetDatestampStartOk returns a tuple with the DatestampStart field value
// and a boolean to check if the value has been set.
func (o *IngestionBackfillContractDto) GetDatestampStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatestampStart, true
}

// SetDatestampStart sets field value
func (o *IngestionBackfillContractDto) SetDatestampStart(v string) {
	o.DatestampStart = v
}

// GetDatestampEnd returns the DatestampEnd field value
func (o *IngestionBackfillContractDto) GetDatestampEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatestampEnd
}

// GetDatestampEndOk returns a tuple with the DatestampEnd field value
// and a boolean to check if the value has been set.
func (o *IngestionBackfillContractDto) GetDatestampEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatestampEnd, true
}

// SetDatestampEnd sets field value
func (o *IngestionBackfillContractDto) SetDatestampEnd(v string) {
	o.DatestampEnd = v
}

// GetType returns the Type field value
func (o *IngestionBackfillContractDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IngestionBackfillContractDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IngestionBackfillContractDto) SetType(v string) {
	o.Type = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IngestionBackfillContractDto) GetSource() IngestionBackfillContractDtoSource {
	if o == nil || IsNil(o.Source) {
		var ret IngestionBackfillContractDtoSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionBackfillContractDto) GetSourceOk() (*IngestionBackfillContractDtoSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IngestionBackfillContractDto) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given IngestionBackfillContractDtoSource and assigns it to the Source field.
func (o *IngestionBackfillContractDto) SetSource(v IngestionBackfillContractDtoSource) {
	o.Source = &v
}

// GetDataset returns the Dataset field value
func (o *IngestionBackfillContractDto) GetDataset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dataset
}

// GetDatasetOk returns a tuple with the Dataset field value
// and a boolean to check if the value has been set.
func (o *IngestionBackfillContractDto) GetDatasetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dataset, true
}

// SetDataset sets field value
func (o *IngestionBackfillContractDto) SetDataset(v string) {
	o.Dataset = v
}

func (o IngestionBackfillContractDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestionBackfillContractDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datestamp_start"] = o.DatestampStart
	toSerialize["datestamp_end"] = o.DatestampEnd
	toSerialize["type"] = o.Type
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["dataset"] = o.Dataset
	return toSerialize, nil
}

func (o *IngestionBackfillContractDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datestamp_start",
		"datestamp_end",
		"type",
		"dataset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestionBackfillContractDto := _IngestionBackfillContractDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestionBackfillContractDto)

	if err != nil {
		return err
	}

	*o = IngestionBackfillContractDto(varIngestionBackfillContractDto)

	return err
}

type NullableIngestionBackfillContractDto struct {
	value *IngestionBackfillContractDto
	isSet bool
}

func (v NullableIngestionBackfillContractDto) Get() *IngestionBackfillContractDto {
	return v.value
}

func (v *NullableIngestionBackfillContractDto) Set(val *IngestionBackfillContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionBackfillContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionBackfillContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionBackfillContractDto(val *IngestionBackfillContractDto) *NullableIngestionBackfillContractDto {
	return &NullableIngestionBackfillContractDto{value: val, isSet: true}
}

func (v NullableIngestionBackfillContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionBackfillContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


