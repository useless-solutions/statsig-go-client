/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestionBackfillDataDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestionBackfillDataDto{}

// IngestionBackfillDataDto struct for IngestionBackfillDataDto
type IngestionBackfillDataDto struct {
	RunID string `json:"runID"`
}

type _IngestionBackfillDataDto IngestionBackfillDataDto

// NewIngestionBackfillDataDto instantiates a new IngestionBackfillDataDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionBackfillDataDto(runID string) *IngestionBackfillDataDto {
	this := IngestionBackfillDataDto{}
	this.RunID = runID
	return &this
}

// NewIngestionBackfillDataDtoWithDefaults instantiates a new IngestionBackfillDataDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionBackfillDataDtoWithDefaults() *IngestionBackfillDataDto {
	this := IngestionBackfillDataDto{}
	return &this
}

// GetRunID returns the RunID field value
func (o *IngestionBackfillDataDto) GetRunID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunID
}

// GetRunIDOk returns a tuple with the RunID field value
// and a boolean to check if the value has been set.
func (o *IngestionBackfillDataDto) GetRunIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunID, true
}

// SetRunID sets field value
func (o *IngestionBackfillDataDto) SetRunID(v string) {
	o.RunID = v
}

func (o IngestionBackfillDataDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestionBackfillDataDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runID"] = o.RunID
	return toSerialize, nil
}

func (o *IngestionBackfillDataDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"runID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestionBackfillDataDto := _IngestionBackfillDataDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestionBackfillDataDto)

	if err != nil {
		return err
	}

	*o = IngestionBackfillDataDto(varIngestionBackfillDataDto)

	return err
}

type NullableIngestionBackfillDataDto struct {
	value *IngestionBackfillDataDto
	isSet bool
}

func (v NullableIngestionBackfillDataDto) Get() *IngestionBackfillDataDto {
	return v.value
}

func (v *NullableIngestionBackfillDataDto) Set(val *IngestionBackfillDataDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionBackfillDataDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionBackfillDataDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionBackfillDataDto(val *IngestionBackfillDataDto) *NullableIngestionBackfillDataDto {
	return &NullableIngestionBackfillDataDto{value: val, isSet: true}
}

func (v NullableIngestionBackfillDataDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionBackfillDataDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


