/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestionDto{}

// IngestionDto struct for IngestionDto
type IngestionDto struct {
	Id string `json:"id"`
	Type string `json:"type"`
	Enabled bool `json:"enabled"`
	Data map[string]interface{} `json:"data"`
}

type _IngestionDto IngestionDto

// NewIngestionDto instantiates a new IngestionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionDto(id string, type_ string, enabled bool, data map[string]interface{}) *IngestionDto {
	this := IngestionDto{}
	this.Id = id
	this.Type = type_
	this.Enabled = enabled
	this.Data = data
	return &this
}

// NewIngestionDtoWithDefaults instantiates a new IngestionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionDtoWithDefaults() *IngestionDto {
	this := IngestionDto{}
	return &this
}

// GetId returns the Id field value
func (o *IngestionDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IngestionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IngestionDto) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *IngestionDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IngestionDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IngestionDto) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value
func (o *IngestionDto) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *IngestionDto) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *IngestionDto) SetEnabled(v bool) {
	o.Enabled = v
}

// GetData returns the Data field value
func (o *IngestionDto) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *IngestionDto) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *IngestionDto) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o IngestionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["enabled"] = o.Enabled
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *IngestionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"enabled",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestionDto := _IngestionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestionDto)

	if err != nil {
		return err
	}

	*o = IngestionDto(varIngestionDto)

	return err
}

type NullableIngestionDto struct {
	value *IngestionDto
	isSet bool
}

func (v NullableIngestionDto) Get() *IngestionDto {
	return v.value
}

func (v *NullableIngestionDto) Set(val *IngestionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionDto(val *IngestionDto) *NullableIngestionDto {
	return &NullableIngestionDto{value: val, isSet: true}
}

func (v NullableIngestionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


