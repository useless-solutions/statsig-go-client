/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IngestionRunDataContractDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestionRunDataContractDto{}

// IngestionRunDataContractDto struct for IngestionRunDataContractDto
type IngestionRunDataContractDto struct {
	RunID string `json:"runID"`
	LatestStatus string `json:"latestStatus"`
	LastUpdatedAt time.Time `json:"lastUpdatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	Trigger string `json:"trigger"`
	Sources []string `json:"sources"`
	DateStamps []string `json:"dateStamps"`
	RunHistory []IngestionRunDataContractDtoRunHistoryInner `json:"runHistory"`
	GranularHistory []IngestionRunDataContractDtoGranularHistoryInner `json:"granularHistory"`
}

type _IngestionRunDataContractDto IngestionRunDataContractDto

// NewIngestionRunDataContractDto instantiates a new IngestionRunDataContractDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionRunDataContractDto(runID string, latestStatus string, lastUpdatedAt time.Time, createdAt time.Time, trigger string, sources []string, dateStamps []string, runHistory []IngestionRunDataContractDtoRunHistoryInner, granularHistory []IngestionRunDataContractDtoGranularHistoryInner) *IngestionRunDataContractDto {
	this := IngestionRunDataContractDto{}
	this.RunID = runID
	this.LatestStatus = latestStatus
	this.LastUpdatedAt = lastUpdatedAt
	this.CreatedAt = createdAt
	this.Trigger = trigger
	this.Sources = sources
	this.DateStamps = dateStamps
	this.RunHistory = runHistory
	this.GranularHistory = granularHistory
	return &this
}

// NewIngestionRunDataContractDtoWithDefaults instantiates a new IngestionRunDataContractDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionRunDataContractDtoWithDefaults() *IngestionRunDataContractDto {
	this := IngestionRunDataContractDto{}
	return &this
}

// GetRunID returns the RunID field value
func (o *IngestionRunDataContractDto) GetRunID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunID
}

// GetRunIDOk returns a tuple with the RunID field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetRunIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunID, true
}

// SetRunID sets field value
func (o *IngestionRunDataContractDto) SetRunID(v string) {
	o.RunID = v
}

// GetLatestStatus returns the LatestStatus field value
func (o *IngestionRunDataContractDto) GetLatestStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatestStatus
}

// GetLatestStatusOk returns a tuple with the LatestStatus field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetLatestStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestStatus, true
}

// SetLatestStatus sets field value
func (o *IngestionRunDataContractDto) SetLatestStatus(v string) {
	o.LatestStatus = v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value
func (o *IngestionRunDataContractDto) GetLastUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetLastUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedAt, true
}

// SetLastUpdatedAt sets field value
func (o *IngestionRunDataContractDto) SetLastUpdatedAt(v time.Time) {
	o.LastUpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *IngestionRunDataContractDto) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IngestionRunDataContractDto) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetTrigger returns the Trigger field value
func (o *IngestionRunDataContractDto) GetTrigger() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetTriggerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *IngestionRunDataContractDto) SetTrigger(v string) {
	o.Trigger = v
}

// GetSources returns the Sources field value
func (o *IngestionRunDataContractDto) GetSources() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetSourcesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sources, true
}

// SetSources sets field value
func (o *IngestionRunDataContractDto) SetSources(v []string) {
	o.Sources = v
}

// GetDateStamps returns the DateStamps field value
func (o *IngestionRunDataContractDto) GetDateStamps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DateStamps
}

// GetDateStampsOk returns a tuple with the DateStamps field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetDateStampsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateStamps, true
}

// SetDateStamps sets field value
func (o *IngestionRunDataContractDto) SetDateStamps(v []string) {
	o.DateStamps = v
}

// GetRunHistory returns the RunHistory field value
func (o *IngestionRunDataContractDto) GetRunHistory() []IngestionRunDataContractDtoRunHistoryInner {
	if o == nil {
		var ret []IngestionRunDataContractDtoRunHistoryInner
		return ret
	}

	return o.RunHistory
}

// GetRunHistoryOk returns a tuple with the RunHistory field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetRunHistoryOk() ([]IngestionRunDataContractDtoRunHistoryInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunHistory, true
}

// SetRunHistory sets field value
func (o *IngestionRunDataContractDto) SetRunHistory(v []IngestionRunDataContractDtoRunHistoryInner) {
	o.RunHistory = v
}

// GetGranularHistory returns the GranularHistory field value
func (o *IngestionRunDataContractDto) GetGranularHistory() []IngestionRunDataContractDtoGranularHistoryInner {
	if o == nil {
		var ret []IngestionRunDataContractDtoGranularHistoryInner
		return ret
	}

	return o.GranularHistory
}

// GetGranularHistoryOk returns a tuple with the GranularHistory field value
// and a boolean to check if the value has been set.
func (o *IngestionRunDataContractDto) GetGranularHistoryOk() ([]IngestionRunDataContractDtoGranularHistoryInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.GranularHistory, true
}

// SetGranularHistory sets field value
func (o *IngestionRunDataContractDto) SetGranularHistory(v []IngestionRunDataContractDtoGranularHistoryInner) {
	o.GranularHistory = v
}

func (o IngestionRunDataContractDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestionRunDataContractDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runID"] = o.RunID
	toSerialize["latestStatus"] = o.LatestStatus
	toSerialize["lastUpdatedAt"] = o.LastUpdatedAt
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["trigger"] = o.Trigger
	toSerialize["sources"] = o.Sources
	toSerialize["dateStamps"] = o.DateStamps
	toSerialize["runHistory"] = o.RunHistory
	toSerialize["granularHistory"] = o.GranularHistory
	return toSerialize, nil
}

func (o *IngestionRunDataContractDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"runID",
		"latestStatus",
		"lastUpdatedAt",
		"createdAt",
		"trigger",
		"sources",
		"dateStamps",
		"runHistory",
		"granularHistory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestionRunDataContractDto := _IngestionRunDataContractDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestionRunDataContractDto)

	if err != nil {
		return err
	}

	*o = IngestionRunDataContractDto(varIngestionRunDataContractDto)

	return err
}

type NullableIngestionRunDataContractDto struct {
	value *IngestionRunDataContractDto
	isSet bool
}

func (v NullableIngestionRunDataContractDto) Get() *IngestionRunDataContractDto {
	return v.value
}

func (v *NullableIngestionRunDataContractDto) Set(val *IngestionRunDataContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionRunDataContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionRunDataContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionRunDataContractDto(val *IngestionRunDataContractDto) *NullableIngestionRunDataContractDto {
	return &NullableIngestionRunDataContractDto{value: val, isSet: true}
}

func (v NullableIngestionRunDataContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionRunDataContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


