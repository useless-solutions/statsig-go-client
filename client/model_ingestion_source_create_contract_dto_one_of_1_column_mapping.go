/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IngestionSourceCreateContractDtoOneOf1ColumnMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestionSourceCreateContractDtoOneOf1ColumnMapping{}

// IngestionSourceCreateContractDtoOneOf1ColumnMapping struct for IngestionSourceCreateContractDtoOneOf1ColumnMapping
type IngestionSourceCreateContractDtoOneOf1ColumnMapping struct {
	// The unique user identifier this event is for. This might not necessarily be a single column for userID - it could be spread across multiple columns for deviceID etc.
	UnitId *string `json:"unit_id,omitempty"`
	// Name of the event. String under 128 characters, using ‘_’ for spaces.
	EventName string `json:"event_name"`
	// Unix timestamp in seconds of the event (ex. 1729692720)
	Timestamp string `json:"timestamp"`
	Ids map[string]string `json:"ids"`
	Metadata *map[string]string `json:"metadata,omitempty"`
	MetadataObject *string `json:"metadata_object,omitempty"`
	EventValue *string `json:"event_value,omitempty"`
}

type _IngestionSourceCreateContractDtoOneOf1ColumnMapping IngestionSourceCreateContractDtoOneOf1ColumnMapping

// NewIngestionSourceCreateContractDtoOneOf1ColumnMapping instantiates a new IngestionSourceCreateContractDtoOneOf1ColumnMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionSourceCreateContractDtoOneOf1ColumnMapping(eventName string, timestamp string, ids map[string]string) *IngestionSourceCreateContractDtoOneOf1ColumnMapping {
	this := IngestionSourceCreateContractDtoOneOf1ColumnMapping{}
	this.EventName = eventName
	this.Timestamp = timestamp
	this.Ids = ids
	var metadataObject string = "null"
	this.MetadataObject = &metadataObject
	var eventValue string = ""
	this.EventValue = &eventValue
	return &this
}

// NewIngestionSourceCreateContractDtoOneOf1ColumnMappingWithDefaults instantiates a new IngestionSourceCreateContractDtoOneOf1ColumnMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionSourceCreateContractDtoOneOf1ColumnMappingWithDefaults() *IngestionSourceCreateContractDtoOneOf1ColumnMapping {
	this := IngestionSourceCreateContractDtoOneOf1ColumnMapping{}
	var metadataObject string = "null"
	this.MetadataObject = &metadataObject
	var eventValue string = ""
	this.EventValue = &eventValue
	return &this
}

// GetUnitId returns the UnitId field value if set, zero value otherwise.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetUnitId() string {
	if o == nil || IsNil(o.UnitId) {
		var ret string
		return ret
	}
	return *o.UnitId
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetUnitIdOk() (*string, bool) {
	if o == nil || IsNil(o.UnitId) {
		return nil, false
	}
	return o.UnitId, true
}

// HasUnitId returns a boolean if a field has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) HasUnitId() bool {
	if o != nil && !IsNil(o.UnitId) {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given string and assigns it to the UnitId field.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) SetUnitId(v string) {
	o.UnitId = &v
}

// GetEventName returns the EventName field value
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) SetEventName(v string) {
	o.EventName = v
}

// GetTimestamp returns the Timestamp field value
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetIds returns the Ids field value
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetIds() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetIdsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ids, true
}

// SetIds sets field value
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) SetIds(v map[string]string) {
	o.Ids = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetMetadataObject returns the MetadataObject field value if set, zero value otherwise.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetMetadataObject() string {
	if o == nil || IsNil(o.MetadataObject) {
		var ret string
		return ret
	}
	return *o.MetadataObject
}

// GetMetadataObjectOk returns a tuple with the MetadataObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetMetadataObjectOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataObject) {
		return nil, false
	}
	return o.MetadataObject, true
}

// HasMetadataObject returns a boolean if a field has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) HasMetadataObject() bool {
	if o != nil && !IsNil(o.MetadataObject) {
		return true
	}

	return false
}

// SetMetadataObject gets a reference to the given string and assigns it to the MetadataObject field.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) SetMetadataObject(v string) {
	o.MetadataObject = &v
}

// GetEventValue returns the EventValue field value if set, zero value otherwise.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetEventValue() string {
	if o == nil || IsNil(o.EventValue) {
		var ret string
		return ret
	}
	return *o.EventValue
}

// GetEventValueOk returns a tuple with the EventValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) GetEventValueOk() (*string, bool) {
	if o == nil || IsNil(o.EventValue) {
		return nil, false
	}
	return o.EventValue, true
}

// HasEventValue returns a boolean if a field has been set.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) HasEventValue() bool {
	if o != nil && !IsNil(o.EventValue) {
		return true
	}

	return false
}

// SetEventValue gets a reference to the given string and assigns it to the EventValue field.
func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) SetEventValue(v string) {
	o.EventValue = &v
}

func (o IngestionSourceCreateContractDtoOneOf1ColumnMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestionSourceCreateContractDtoOneOf1ColumnMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnitId) {
		toSerialize["unit_id"] = o.UnitId
	}
	toSerialize["event_name"] = o.EventName
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["ids"] = o.Ids
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.MetadataObject) {
		toSerialize["metadata_object"] = o.MetadataObject
	}
	if !IsNil(o.EventValue) {
		toSerialize["event_value"] = o.EventValue
	}
	return toSerialize, nil
}

func (o *IngestionSourceCreateContractDtoOneOf1ColumnMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_name",
		"timestamp",
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestionSourceCreateContractDtoOneOf1ColumnMapping := _IngestionSourceCreateContractDtoOneOf1ColumnMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestionSourceCreateContractDtoOneOf1ColumnMapping)

	if err != nil {
		return err
	}

	*o = IngestionSourceCreateContractDtoOneOf1ColumnMapping(varIngestionSourceCreateContractDtoOneOf1ColumnMapping)

	return err
}

type NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping struct {
	value *IngestionSourceCreateContractDtoOneOf1ColumnMapping
	isSet bool
}

func (v NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping) Get() *IngestionSourceCreateContractDtoOneOf1ColumnMapping {
	return v.value
}

func (v *NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping) Set(val *IngestionSourceCreateContractDtoOneOf1ColumnMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionSourceCreateContractDtoOneOf1ColumnMapping(val *IngestionSourceCreateContractDtoOneOf1ColumnMapping) *NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping {
	return &NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping{value: val, isSet: true}
}

func (v NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionSourceCreateContractDtoOneOf1ColumnMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


