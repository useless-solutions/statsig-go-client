/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IngestionStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestionStatusDto{}

// IngestionStatusDto struct for IngestionStatusDto
type IngestionStatusDto struct {
	Ds *time.Time `json:"ds,omitempty"`
	IngestionDataset nil `json:"ingestion_dataset"`
	IngestionSource nil `json:"ingestion_source"`
	SourceName nil `json:"source_name"`
	Message nil `json:"message"`
	Status nil `json:"status"`
	RowCount *float32 `json:"rowCount,omitempty"`
	MetricCount *float32 `json:"metricCount,omitempty"`
	Timestamp nil `json:"timestamp"`
}

type _IngestionStatusDto IngestionStatusDto

// NewIngestionStatusDto instantiates a new IngestionStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestionStatusDto(ingestionDataset nil, ingestionSource nil, sourceName nil, message nil, status nil, timestamp nil) *IngestionStatusDto {
	this := IngestionStatusDto{}
	this.IngestionDataset = ingestionDataset
	this.IngestionSource = ingestionSource
	this.SourceName = sourceName
	this.Message = message
	this.Status = status
	this.Timestamp = timestamp
	return &this
}

// NewIngestionStatusDtoWithDefaults instantiates a new IngestionStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestionStatusDtoWithDefaults() *IngestionStatusDto {
	this := IngestionStatusDto{}
	return &this
}

// GetDs returns the Ds field value if set, zero value otherwise.
func (o *IngestionStatusDto) GetDs() time.Time {
	if o == nil || IsNil(o.Ds) {
		var ret time.Time
		return ret
	}
	return *o.Ds
}

// GetDsOk returns a tuple with the Ds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetDsOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Ds) {
		return nil, false
	}
	return o.Ds, true
}

// HasDs returns a boolean if a field has been set.
func (o *IngestionStatusDto) HasDs() bool {
	if o != nil && !IsNil(o.Ds) {
		return true
	}

	return false
}

// SetDs gets a reference to the given time.Time and assigns it to the Ds field.
func (o *IngestionStatusDto) SetDs(v time.Time) {
	o.Ds = &v
}

// GetIngestionDataset returns the IngestionDataset field value
func (o *IngestionStatusDto) GetIngestionDataset() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.IngestionDataset
}

// GetIngestionDatasetOk returns a tuple with the IngestionDataset field value
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetIngestionDatasetOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IngestionDataset, true
}

// SetIngestionDataset sets field value
func (o *IngestionStatusDto) SetIngestionDataset(v nil) {
	o.IngestionDataset = v
}

// GetIngestionSource returns the IngestionSource field value
func (o *IngestionStatusDto) GetIngestionSource() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.IngestionSource
}

// GetIngestionSourceOk returns a tuple with the IngestionSource field value
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetIngestionSourceOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IngestionSource, true
}

// SetIngestionSource sets field value
func (o *IngestionStatusDto) SetIngestionSource(v nil) {
	o.IngestionSource = v
}

// GetSourceName returns the SourceName field value
func (o *IngestionStatusDto) GetSourceName() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetSourceNameOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceName, true
}

// SetSourceName sets field value
func (o *IngestionStatusDto) SetSourceName(v nil) {
	o.SourceName = v
}

// GetMessage returns the Message field value
func (o *IngestionStatusDto) GetMessage() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetMessageOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *IngestionStatusDto) SetMessage(v nil) {
	o.Message = v
}

// GetStatus returns the Status field value
func (o *IngestionStatusDto) GetStatus() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetStatusOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *IngestionStatusDto) SetStatus(v nil) {
	o.Status = v
}

// GetRowCount returns the RowCount field value if set, zero value otherwise.
func (o *IngestionStatusDto) GetRowCount() float32 {
	if o == nil || IsNil(o.RowCount) {
		var ret float32
		return ret
	}
	return *o.RowCount
}

// GetRowCountOk returns a tuple with the RowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetRowCountOk() (*float32, bool) {
	if o == nil || IsNil(o.RowCount) {
		return nil, false
	}
	return o.RowCount, true
}

// HasRowCount returns a boolean if a field has been set.
func (o *IngestionStatusDto) HasRowCount() bool {
	if o != nil && !IsNil(o.RowCount) {
		return true
	}

	return false
}

// SetRowCount gets a reference to the given float32 and assigns it to the RowCount field.
func (o *IngestionStatusDto) SetRowCount(v float32) {
	o.RowCount = &v
}

// GetMetricCount returns the MetricCount field value if set, zero value otherwise.
func (o *IngestionStatusDto) GetMetricCount() float32 {
	if o == nil || IsNil(o.MetricCount) {
		var ret float32
		return ret
	}
	return *o.MetricCount
}

// GetMetricCountOk returns a tuple with the MetricCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetMetricCountOk() (*float32, bool) {
	if o == nil || IsNil(o.MetricCount) {
		return nil, false
	}
	return o.MetricCount, true
}

// HasMetricCount returns a boolean if a field has been set.
func (o *IngestionStatusDto) HasMetricCount() bool {
	if o != nil && !IsNil(o.MetricCount) {
		return true
	}

	return false
}

// SetMetricCount gets a reference to the given float32 and assigns it to the MetricCount field.
func (o *IngestionStatusDto) SetMetricCount(v float32) {
	o.MetricCount = &v
}

// GetTimestamp returns the Timestamp field value
func (o *IngestionStatusDto) GetTimestamp() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *IngestionStatusDto) GetTimestampOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *IngestionStatusDto) SetTimestamp(v nil) {
	o.Timestamp = v
}

func (o IngestionStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestionStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ds) {
		toSerialize["ds"] = o.Ds
	}
	toSerialize["ingestion_dataset"] = o.IngestionDataset
	toSerialize["ingestion_source"] = o.IngestionSource
	toSerialize["source_name"] = o.SourceName
	toSerialize["message"] = o.Message
	toSerialize["status"] = o.Status
	if !IsNil(o.RowCount) {
		toSerialize["rowCount"] = o.RowCount
	}
	if !IsNil(o.MetricCount) {
		toSerialize["metricCount"] = o.MetricCount
	}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *IngestionStatusDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ingestion_dataset",
		"ingestion_source",
		"source_name",
		"message",
		"status",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngestionStatusDto := _IngestionStatusDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngestionStatusDto)

	if err != nil {
		return err
	}

	*o = IngestionStatusDto(varIngestionStatusDto)

	return err
}

type NullableIngestionStatusDto struct {
	value *IngestionStatusDto
	isSet bool
}

func (v NullableIngestionStatusDto) Get() *IngestionStatusDto {
	return v.value
}

func (v *NullableIngestionStatusDto) Set(val *IngestionStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionStatusDto(val *IngestionStatusDto) *NullableIngestionStatusDto {
	return &NullableIngestionStatusDto{value: val, isSet: true}
}

func (v NullableIngestionStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


