/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// IngestionUpdateContractDto - struct for IngestionUpdateContractDto
type IngestionUpdateContractDto struct {
	IngestionUpdateContractDtoOneOf *IngestionUpdateContractDtoOneOf
	IngestionUpdateContractDtoOneOf1 *IngestionUpdateContractDtoOneOf1
	IngestionUpdateContractDtoOneOf2 *IngestionUpdateContractDtoOneOf2
}

// IngestionUpdateContractDtoOneOfAsIngestionUpdateContractDto is a convenience function that returns IngestionUpdateContractDtoOneOf wrapped in IngestionUpdateContractDto
func IngestionUpdateContractDtoOneOfAsIngestionUpdateContractDto(v *IngestionUpdateContractDtoOneOf) IngestionUpdateContractDto {
	return IngestionUpdateContractDto{
		IngestionUpdateContractDtoOneOf: v,
	}
}

// IngestionUpdateContractDtoOneOf1AsIngestionUpdateContractDto is a convenience function that returns IngestionUpdateContractDtoOneOf1 wrapped in IngestionUpdateContractDto
func IngestionUpdateContractDtoOneOf1AsIngestionUpdateContractDto(v *IngestionUpdateContractDtoOneOf1) IngestionUpdateContractDto {
	return IngestionUpdateContractDto{
		IngestionUpdateContractDtoOneOf1: v,
	}
}

// IngestionUpdateContractDtoOneOf2AsIngestionUpdateContractDto is a convenience function that returns IngestionUpdateContractDtoOneOf2 wrapped in IngestionUpdateContractDto
func IngestionUpdateContractDtoOneOf2AsIngestionUpdateContractDto(v *IngestionUpdateContractDtoOneOf2) IngestionUpdateContractDto {
	return IngestionUpdateContractDto{
		IngestionUpdateContractDtoOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IngestionUpdateContractDto) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IngestionUpdateContractDtoOneOf
	err = newStrictDecoder(data).Decode(&dst.IngestionUpdateContractDtoOneOf)
	if err == nil {
		jsonIngestionUpdateContractDtoOneOf, _ := json.Marshal(dst.IngestionUpdateContractDtoOneOf)
		if string(jsonIngestionUpdateContractDtoOneOf) == "{}" { // empty struct
			dst.IngestionUpdateContractDtoOneOf = nil
		} else {
			if err = validator.Validate(dst.IngestionUpdateContractDtoOneOf); err != nil {
				dst.IngestionUpdateContractDtoOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.IngestionUpdateContractDtoOneOf = nil
	}

	// try to unmarshal data into IngestionUpdateContractDtoOneOf1
	err = newStrictDecoder(data).Decode(&dst.IngestionUpdateContractDtoOneOf1)
	if err == nil {
		jsonIngestionUpdateContractDtoOneOf1, _ := json.Marshal(dst.IngestionUpdateContractDtoOneOf1)
		if string(jsonIngestionUpdateContractDtoOneOf1) == "{}" { // empty struct
			dst.IngestionUpdateContractDtoOneOf1 = nil
		} else {
			if err = validator.Validate(dst.IngestionUpdateContractDtoOneOf1); err != nil {
				dst.IngestionUpdateContractDtoOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IngestionUpdateContractDtoOneOf1 = nil
	}

	// try to unmarshal data into IngestionUpdateContractDtoOneOf2
	err = newStrictDecoder(data).Decode(&dst.IngestionUpdateContractDtoOneOf2)
	if err == nil {
		jsonIngestionUpdateContractDtoOneOf2, _ := json.Marshal(dst.IngestionUpdateContractDtoOneOf2)
		if string(jsonIngestionUpdateContractDtoOneOf2) == "{}" { // empty struct
			dst.IngestionUpdateContractDtoOneOf2 = nil
		} else {
			if err = validator.Validate(dst.IngestionUpdateContractDtoOneOf2); err != nil {
				dst.IngestionUpdateContractDtoOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.IngestionUpdateContractDtoOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IngestionUpdateContractDtoOneOf = nil
		dst.IngestionUpdateContractDtoOneOf1 = nil
		dst.IngestionUpdateContractDtoOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IngestionUpdateContractDto)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IngestionUpdateContractDto)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IngestionUpdateContractDto) MarshalJSON() ([]byte, error) {
	if src.IngestionUpdateContractDtoOneOf != nil {
		return json.Marshal(&src.IngestionUpdateContractDtoOneOf)
	}

	if src.IngestionUpdateContractDtoOneOf1 != nil {
		return json.Marshal(&src.IngestionUpdateContractDtoOneOf1)
	}

	if src.IngestionUpdateContractDtoOneOf2 != nil {
		return json.Marshal(&src.IngestionUpdateContractDtoOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IngestionUpdateContractDto) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IngestionUpdateContractDtoOneOf != nil {
		return obj.IngestionUpdateContractDtoOneOf
	}

	if obj.IngestionUpdateContractDtoOneOf1 != nil {
		return obj.IngestionUpdateContractDtoOneOf1
	}

	if obj.IngestionUpdateContractDtoOneOf2 != nil {
		return obj.IngestionUpdateContractDtoOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableIngestionUpdateContractDto struct {
	value *IngestionUpdateContractDto
	isSet bool
}

func (v NullableIngestionUpdateContractDto) Get() *IngestionUpdateContractDto {
	return v.value
}

func (v *NullableIngestionUpdateContractDto) Set(val *IngestionUpdateContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestionUpdateContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestionUpdateContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestionUpdateContractDto(val *IngestionUpdateContractDto) *NullableIngestionUpdateContractDto {
	return &NullableIngestionUpdateContractDto{value: val, isSet: true}
}

func (v NullableIngestionUpdateContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestionUpdateContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


