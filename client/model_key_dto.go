/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KeyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyDto{}

// KeyDto struct for KeyDto
type KeyDto struct {
	Key nil `json:"key"`
	Type string `json:"type"`
	Description string `json:"description"`
	Scopes []string `json:"scopes"`
	Environments []string `json:"environments,omitempty"`
	PrimaryTargetApp *nil `json:"primaryTargetApp,omitempty"`
	SecondaryTargetApps []string `json:"secondaryTargetApps,omitempty"`
	Status string `json:"status"`
}

type _KeyDto KeyDto

// NewKeyDto instantiates a new KeyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyDto(key nil, type_ string, description string, scopes []string, status string) *KeyDto {
	this := KeyDto{}
	this.Key = key
	this.Type = type_
	this.Description = description
	this.Scopes = scopes
	this.Status = status
	return &this
}

// NewKeyDtoWithDefaults instantiates a new KeyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyDtoWithDefaults() *KeyDto {
	this := KeyDto{}
	return &this
}

// GetKey returns the Key field value
func (o *KeyDto) GetKey() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KeyDto) GetKeyOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KeyDto) SetKey(v nil) {
	o.Key = v
}

// GetType returns the Type field value
func (o *KeyDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KeyDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KeyDto) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *KeyDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *KeyDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *KeyDto) SetDescription(v string) {
	o.Description = v
}

// GetScopes returns the Scopes field value
func (o *KeyDto) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *KeyDto) GetScopesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *KeyDto) SetScopes(v []string) {
	o.Scopes = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *KeyDto) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyDto) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *KeyDto) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *KeyDto) SetEnvironments(v []string) {
	o.Environments = v
}

// GetPrimaryTargetApp returns the PrimaryTargetApp field value if set, zero value otherwise.
func (o *KeyDto) GetPrimaryTargetApp() nil {
	if o == nil || IsNil(o.PrimaryTargetApp) {
		var ret nil
		return ret
	}
	return *o.PrimaryTargetApp
}

// GetPrimaryTargetAppOk returns a tuple with the PrimaryTargetApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyDto) GetPrimaryTargetAppOk() (*nil, bool) {
	if o == nil || IsNil(o.PrimaryTargetApp) {
		return nil, false
	}
	return o.PrimaryTargetApp, true
}

// HasPrimaryTargetApp returns a boolean if a field has been set.
func (o *KeyDto) HasPrimaryTargetApp() bool {
	if o != nil && !IsNil(o.PrimaryTargetApp) {
		return true
	}

	return false
}

// SetPrimaryTargetApp gets a reference to the given nil and assigns it to the PrimaryTargetApp field.
func (o *KeyDto) SetPrimaryTargetApp(v nil) {
	o.PrimaryTargetApp = &v
}

// GetSecondaryTargetApps returns the SecondaryTargetApps field value if set, zero value otherwise.
func (o *KeyDto) GetSecondaryTargetApps() []string {
	if o == nil || IsNil(o.SecondaryTargetApps) {
		var ret []string
		return ret
	}
	return o.SecondaryTargetApps
}

// GetSecondaryTargetAppsOk returns a tuple with the SecondaryTargetApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyDto) GetSecondaryTargetAppsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecondaryTargetApps) {
		return nil, false
	}
	return o.SecondaryTargetApps, true
}

// HasSecondaryTargetApps returns a boolean if a field has been set.
func (o *KeyDto) HasSecondaryTargetApps() bool {
	if o != nil && !IsNil(o.SecondaryTargetApps) {
		return true
	}

	return false
}

// SetSecondaryTargetApps gets a reference to the given []string and assigns it to the SecondaryTargetApps field.
func (o *KeyDto) SetSecondaryTargetApps(v []string) {
	o.SecondaryTargetApps = v
}

// GetStatus returns the Status field value
func (o *KeyDto) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *KeyDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *KeyDto) SetStatus(v string) {
	o.Status = v
}

func (o KeyDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["type"] = o.Type
	toSerialize["description"] = o.Description
	toSerialize["scopes"] = o.Scopes
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.PrimaryTargetApp) {
		toSerialize["primaryTargetApp"] = o.PrimaryTargetApp
	}
	if !IsNil(o.SecondaryTargetApps) {
		toSerialize["secondaryTargetApps"] = o.SecondaryTargetApps
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *KeyDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"type",
		"description",
		"scopes",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyDto := _KeyDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyDto)

	if err != nil {
		return err
	}

	*o = KeyDto(varKeyDto)

	return err
}

type NullableKeyDto struct {
	value *KeyDto
	isSet bool
}

func (v NullableKeyDto) Get() *KeyDto {
	return v.value
}

func (v *NullableKeyDto) Set(val *KeyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyDto(val *KeyDto) *NullableKeyDto {
	return &NullableKeyDto{value: val, isSet: true}
}

func (v NullableKeyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


