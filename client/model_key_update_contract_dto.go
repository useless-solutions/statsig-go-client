/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeyUpdateContractDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyUpdateContractDto{}

// KeyUpdateContractDto struct for KeyUpdateContractDto
type KeyUpdateContractDto struct {
	Description *string `json:"description,omitempty"`
	Scopes []string `json:"scopes,omitempty"`
	Environments []string `json:"environments,omitempty"`
	TargetAppID *nil `json:"targetAppID,omitempty"`
	SecondaryTargetAppIDs []string `json:"secondaryTargetAppIDs,omitempty"`
}

// NewKeyUpdateContractDto instantiates a new KeyUpdateContractDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyUpdateContractDto() *KeyUpdateContractDto {
	this := KeyUpdateContractDto{}
	return &this
}

// NewKeyUpdateContractDtoWithDefaults instantiates a new KeyUpdateContractDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyUpdateContractDtoWithDefaults() *KeyUpdateContractDto {
	this := KeyUpdateContractDto{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KeyUpdateContractDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUpdateContractDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KeyUpdateContractDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KeyUpdateContractDto) SetDescription(v string) {
	o.Description = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *KeyUpdateContractDto) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUpdateContractDto) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *KeyUpdateContractDto) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *KeyUpdateContractDto) SetScopes(v []string) {
	o.Scopes = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *KeyUpdateContractDto) GetEnvironments() []string {
	if o == nil || IsNil(o.Environments) {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUpdateContractDto) GetEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *KeyUpdateContractDto) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *KeyUpdateContractDto) SetEnvironments(v []string) {
	o.Environments = v
}

// GetTargetAppID returns the TargetAppID field value if set, zero value otherwise.
func (o *KeyUpdateContractDto) GetTargetAppID() nil {
	if o == nil || IsNil(o.TargetAppID) {
		var ret nil
		return ret
	}
	return *o.TargetAppID
}

// GetTargetAppIDOk returns a tuple with the TargetAppID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUpdateContractDto) GetTargetAppIDOk() (*nil, bool) {
	if o == nil || IsNil(o.TargetAppID) {
		return nil, false
	}
	return o.TargetAppID, true
}

// HasTargetAppID returns a boolean if a field has been set.
func (o *KeyUpdateContractDto) HasTargetAppID() bool {
	if o != nil && !IsNil(o.TargetAppID) {
		return true
	}

	return false
}

// SetTargetAppID gets a reference to the given nil and assigns it to the TargetAppID field.
func (o *KeyUpdateContractDto) SetTargetAppID(v nil) {
	o.TargetAppID = &v
}

// GetSecondaryTargetAppIDs returns the SecondaryTargetAppIDs field value if set, zero value otherwise.
func (o *KeyUpdateContractDto) GetSecondaryTargetAppIDs() []string {
	if o == nil || IsNil(o.SecondaryTargetAppIDs) {
		var ret []string
		return ret
	}
	return o.SecondaryTargetAppIDs
}

// GetSecondaryTargetAppIDsOk returns a tuple with the SecondaryTargetAppIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUpdateContractDto) GetSecondaryTargetAppIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecondaryTargetAppIDs) {
		return nil, false
	}
	return o.SecondaryTargetAppIDs, true
}

// HasSecondaryTargetAppIDs returns a boolean if a field has been set.
func (o *KeyUpdateContractDto) HasSecondaryTargetAppIDs() bool {
	if o != nil && !IsNil(o.SecondaryTargetAppIDs) {
		return true
	}

	return false
}

// SetSecondaryTargetAppIDs gets a reference to the given []string and assigns it to the SecondaryTargetAppIDs field.
func (o *KeyUpdateContractDto) SetSecondaryTargetAppIDs(v []string) {
	o.SecondaryTargetAppIDs = v
}

func (o KeyUpdateContractDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyUpdateContractDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.TargetAppID) {
		toSerialize["targetAppID"] = o.TargetAppID
	}
	if !IsNil(o.SecondaryTargetAppIDs) {
		toSerialize["secondaryTargetAppIDs"] = o.SecondaryTargetAppIDs
	}
	return toSerialize, nil
}

type NullableKeyUpdateContractDto struct {
	value *KeyUpdateContractDto
	isSet bool
}

func (v NullableKeyUpdateContractDto) Get() *KeyUpdateContractDto {
	return v.value
}

func (v *NullableKeyUpdateContractDto) Set(val *KeyUpdateContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyUpdateContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyUpdateContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyUpdateContractDto(val *KeyUpdateContractDto) *NullableKeyUpdateContractDto {
	return &NullableKeyUpdateContractDto{value: val, isSet: true}
}

func (v NullableKeyUpdateContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyUpdateContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


