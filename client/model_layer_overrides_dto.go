/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LayerOverridesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LayerOverridesDto{}

// LayerOverridesDto struct for LayerOverridesDto
type LayerOverridesDto struct {
	ConditionalOverrides []LayerOverridesDtoConditionalOverridesInner `json:"conditionalOverrides"`
	IdOverrides []LayerOverridesDtoIdOverridesInner `json:"idOverrides"`
}

type _LayerOverridesDto LayerOverridesDto

// NewLayerOverridesDto instantiates a new LayerOverridesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLayerOverridesDto(conditionalOverrides []LayerOverridesDtoConditionalOverridesInner, idOverrides []LayerOverridesDtoIdOverridesInner) *LayerOverridesDto {
	this := LayerOverridesDto{}
	this.ConditionalOverrides = conditionalOverrides
	this.IdOverrides = idOverrides
	return &this
}

// NewLayerOverridesDtoWithDefaults instantiates a new LayerOverridesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLayerOverridesDtoWithDefaults() *LayerOverridesDto {
	this := LayerOverridesDto{}
	return &this
}

// GetConditionalOverrides returns the ConditionalOverrides field value
func (o *LayerOverridesDto) GetConditionalOverrides() []LayerOverridesDtoConditionalOverridesInner {
	if o == nil {
		var ret []LayerOverridesDtoConditionalOverridesInner
		return ret
	}

	return o.ConditionalOverrides
}

// GetConditionalOverridesOk returns a tuple with the ConditionalOverrides field value
// and a boolean to check if the value has been set.
func (o *LayerOverridesDto) GetConditionalOverridesOk() ([]LayerOverridesDtoConditionalOverridesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConditionalOverrides, true
}

// SetConditionalOverrides sets field value
func (o *LayerOverridesDto) SetConditionalOverrides(v []LayerOverridesDtoConditionalOverridesInner) {
	o.ConditionalOverrides = v
}

// GetIdOverrides returns the IdOverrides field value
func (o *LayerOverridesDto) GetIdOverrides() []LayerOverridesDtoIdOverridesInner {
	if o == nil {
		var ret []LayerOverridesDtoIdOverridesInner
		return ret
	}

	return o.IdOverrides
}

// GetIdOverridesOk returns a tuple with the IdOverrides field value
// and a boolean to check if the value has been set.
func (o *LayerOverridesDto) GetIdOverridesOk() ([]LayerOverridesDtoIdOverridesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdOverrides, true
}

// SetIdOverrides sets field value
func (o *LayerOverridesDto) SetIdOverrides(v []LayerOverridesDtoIdOverridesInner) {
	o.IdOverrides = v
}

func (o LayerOverridesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LayerOverridesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["conditionalOverrides"] = o.ConditionalOverrides
	toSerialize["idOverrides"] = o.IdOverrides
	return toSerialize, nil
}

func (o *LayerOverridesDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditionalOverrides",
		"idOverrides",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLayerOverridesDto := _LayerOverridesDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLayerOverridesDto)

	if err != nil {
		return err
	}

	*o = LayerOverridesDto(varLayerOverridesDto)

	return err
}

type NullableLayerOverridesDto struct {
	value *LayerOverridesDto
	isSet bool
}

func (v NullableLayerOverridesDto) Get() *LayerOverridesDto {
	return v.value
}

func (v *NullableLayerOverridesDto) Set(val *LayerOverridesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLayerOverridesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLayerOverridesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayerOverridesDto(val *LayerOverridesDto) *NullableLayerOverridesDto {
	return &NullableLayerOverridesDto{value: val, isSet: true}
}

func (v NullableLayerOverridesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayerOverridesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


