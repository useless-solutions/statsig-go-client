/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoggedEventDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoggedEventDto{}

// LoggedEventDto struct for LoggedEventDto
type LoggedEventDto struct {
	// The timestamp when the event occurred, represented as a string.
	Timestamp string `json:"timestamp"`
	// The name of the event (e.g., \"add_to_cart\").
	Name string `json:"name"`
	// The source of the event, indicating where it was triggered from.
	Source string `json:"source"`
	// The value associated with the event, providing additional context.
	Value string `json:"value"`
	// The ID of the user who triggered the event.
	UserID string `json:"userID"`
}

type _LoggedEventDto LoggedEventDto

// NewLoggedEventDto instantiates a new LoggedEventDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggedEventDto(timestamp string, name string, source string, value string, userID string) *LoggedEventDto {
	this := LoggedEventDto{}
	this.Timestamp = timestamp
	this.Name = name
	this.Source = source
	this.Value = value
	this.UserID = userID
	return &this
}

// NewLoggedEventDtoWithDefaults instantiates a new LoggedEventDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggedEventDtoWithDefaults() *LoggedEventDto {
	this := LoggedEventDto{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *LoggedEventDto) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *LoggedEventDto) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *LoggedEventDto) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetName returns the Name field value
func (o *LoggedEventDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LoggedEventDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LoggedEventDto) SetName(v string) {
	o.Name = v
}

// GetSource returns the Source field value
func (o *LoggedEventDto) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *LoggedEventDto) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *LoggedEventDto) SetSource(v string) {
	o.Source = v
}

// GetValue returns the Value field value
func (o *LoggedEventDto) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *LoggedEventDto) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *LoggedEventDto) SetValue(v string) {
	o.Value = v
}

// GetUserID returns the UserID field value
func (o *LoggedEventDto) GetUserID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value
// and a boolean to check if the value has been set.
func (o *LoggedEventDto) GetUserIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserID, true
}

// SetUserID sets field value
func (o *LoggedEventDto) SetUserID(v string) {
	o.UserID = v
}

func (o LoggedEventDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoggedEventDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["name"] = o.Name
	toSerialize["source"] = o.Source
	toSerialize["value"] = o.Value
	toSerialize["userID"] = o.UserID
	return toSerialize, nil
}

func (o *LoggedEventDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"name",
		"source",
		"value",
		"userID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoggedEventDto := _LoggedEventDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoggedEventDto)

	if err != nil {
		return err
	}

	*o = LoggedEventDto(varLoggedEventDto)

	return err
}

type NullableLoggedEventDto struct {
	value *LoggedEventDto
	isSet bool
}

func (v NullableLoggedEventDto) Get() *LoggedEventDto {
	return v.value
}

func (v *NullableLoggedEventDto) Set(val *LoggedEventDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggedEventDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggedEventDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggedEventDto(val *LoggedEventDto) *NullableLoggedEventDto {
	return &NullableLoggedEventDto{value: val, isSet: true}
}

func (v NullableLoggedEventDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggedEventDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


