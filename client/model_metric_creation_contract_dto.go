/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricCreationContractDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricCreationContractDto{}

// MetricCreationContractDto struct for MetricCreationContractDto
type MetricCreationContractDto struct {
	// The name of the new metric, which identifies it within the system.
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_\\\\-()\\/ ]*$"`
	// The type of the metric. Allowed values include sum, ratio, mean, event_count_sum, composite, composite_sum, undefined, funnel, user_warehouse.
	Type string `json:"type"`
	// Indicates whether the metric should be hidden from the user interface.
	IsHidden *bool `json:"isHidden,omitempty"`
	// Marks the metric as verified for internal trustworthiness.
	IsVerified *bool `json:"isVerified,omitempty"`
	// Set to true to make the metric definition editable only from the Console API.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
	// Array of unit types associated with the metric, such as stableID or userID.
	UnitTypes []string `json:"unitTypes,omitempty"`
	// An array of event definitions used to compute the metric.
	MetricEvents []ExternalMetricDefinitionContractDtoMetricEventsInner `json:"metricEvents,omitempty"`
	// List of input metrics used to calculate the new metric for composite types.
	MetricComponentMetrics []ExternalGateDtoMonitoringMetricsInner `json:"metricComponentMetrics,omitempty"`
	// A description of the new metric, providing context and purpose.
	Description *string `json:"description,omitempty"`
	// Indicates the desired change direction for the metric. Use \"increase\" for positive changes and \"decrease\" for negative changes.
	Directionality *string `json:"directionality,omitempty"`
	Tags *MetricCreationContractDtoTags `json:"tags,omitempty"`
	// Indicates whether the metric is permanent and should not be deleted.
	IsPermanent *bool `json:"isPermanent,omitempty"`
	// Time window for the metric rollup. Specify \"custom\" for a customized time window.
	RollupTimeWindow *string `json:"rollupTimeWindow,omitempty"`
	// Custom time window start date in days since exposure.
	CustomRollUpStart *float32 `json:"customRollUpStart,omitempty"`
	// Custom time window end date in days since exposure.
	CustomRollUpEnd *float32 `json:"customRollUpEnd,omitempty"`
	// List of events used to create funnel metrics.
	FunnelEventList []ExternalMetricDefinitionContractDtoFunnelEventListInner `json:"funnelEventList,omitempty"`
	// Specifies whether to count events or distinct users for the funnel metric.
	FunnelCountDistinct *string `json:"funnelCountDistinct,omitempty"`
	WarehouseNative *ExternalMetricDefinitionContractDtoWarehouseNative `json:"warehouseNative,omitempty"`
	// The team associated with the metric, applicable for enterprise environments.
	Team *nil `json:"team,omitempty"`
}

type _MetricCreationContractDto MetricCreationContractDto

// NewMetricCreationContractDto instantiates a new MetricCreationContractDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricCreationContractDto(name string, type_ string) *MetricCreationContractDto {
	this := MetricCreationContractDto{}
	this.Name = name
	this.Type = type_
	var directionality string = "increase"
	this.Directionality = &directionality
	return &this
}

// NewMetricCreationContractDtoWithDefaults instantiates a new MetricCreationContractDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricCreationContractDtoWithDefaults() *MetricCreationContractDto {
	this := MetricCreationContractDto{}
	var directionality string = "increase"
	this.Directionality = &directionality
	return &this
}

// GetName returns the Name field value
func (o *MetricCreationContractDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetricCreationContractDto) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *MetricCreationContractDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetricCreationContractDto) SetType(v string) {
	o.Type = v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *MetricCreationContractDto) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetIsVerified returns the IsVerified field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetIsVerified() bool {
	if o == nil || IsNil(o.IsVerified) {
		var ret bool
		return ret
	}
	return *o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetIsVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVerified) {
		return nil, false
	}
	return o.IsVerified, true
}

// HasIsVerified returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasIsVerified() bool {
	if o != nil && !IsNil(o.IsVerified) {
		return true
	}

	return false
}

// SetIsVerified gets a reference to the given bool and assigns it to the IsVerified field.
func (o *MetricCreationContractDto) SetIsVerified(v bool) {
	o.IsVerified = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadOnly) {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasIsReadOnly() bool {
	if o != nil && !IsNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *MetricCreationContractDto) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetUnitTypes returns the UnitTypes field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetUnitTypes() []string {
	if o == nil || IsNil(o.UnitTypes) {
		var ret []string
		return ret
	}
	return o.UnitTypes
}

// GetUnitTypesOk returns a tuple with the UnitTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetUnitTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.UnitTypes) {
		return nil, false
	}
	return o.UnitTypes, true
}

// HasUnitTypes returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasUnitTypes() bool {
	if o != nil && !IsNil(o.UnitTypes) {
		return true
	}

	return false
}

// SetUnitTypes gets a reference to the given []string and assigns it to the UnitTypes field.
func (o *MetricCreationContractDto) SetUnitTypes(v []string) {
	o.UnitTypes = v
}

// GetMetricEvents returns the MetricEvents field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetMetricEvents() []ExternalMetricDefinitionContractDtoMetricEventsInner {
	if o == nil || IsNil(o.MetricEvents) {
		var ret []ExternalMetricDefinitionContractDtoMetricEventsInner
		return ret
	}
	return o.MetricEvents
}

// GetMetricEventsOk returns a tuple with the MetricEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetMetricEventsOk() ([]ExternalMetricDefinitionContractDtoMetricEventsInner, bool) {
	if o == nil || IsNil(o.MetricEvents) {
		return nil, false
	}
	return o.MetricEvents, true
}

// HasMetricEvents returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasMetricEvents() bool {
	if o != nil && !IsNil(o.MetricEvents) {
		return true
	}

	return false
}

// SetMetricEvents gets a reference to the given []ExternalMetricDefinitionContractDtoMetricEventsInner and assigns it to the MetricEvents field.
func (o *MetricCreationContractDto) SetMetricEvents(v []ExternalMetricDefinitionContractDtoMetricEventsInner) {
	o.MetricEvents = v
}

// GetMetricComponentMetrics returns the MetricComponentMetrics field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetMetricComponentMetrics() []ExternalGateDtoMonitoringMetricsInner {
	if o == nil || IsNil(o.MetricComponentMetrics) {
		var ret []ExternalGateDtoMonitoringMetricsInner
		return ret
	}
	return o.MetricComponentMetrics
}

// GetMetricComponentMetricsOk returns a tuple with the MetricComponentMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetMetricComponentMetricsOk() ([]ExternalGateDtoMonitoringMetricsInner, bool) {
	if o == nil || IsNil(o.MetricComponentMetrics) {
		return nil, false
	}
	return o.MetricComponentMetrics, true
}

// HasMetricComponentMetrics returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasMetricComponentMetrics() bool {
	if o != nil && !IsNil(o.MetricComponentMetrics) {
		return true
	}

	return false
}

// SetMetricComponentMetrics gets a reference to the given []ExternalGateDtoMonitoringMetricsInner and assigns it to the MetricComponentMetrics field.
func (o *MetricCreationContractDto) SetMetricComponentMetrics(v []ExternalGateDtoMonitoringMetricsInner) {
	o.MetricComponentMetrics = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MetricCreationContractDto) SetDescription(v string) {
	o.Description = &v
}

// GetDirectionality returns the Directionality field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetDirectionality() string {
	if o == nil || IsNil(o.Directionality) {
		var ret string
		return ret
	}
	return *o.Directionality
}

// GetDirectionalityOk returns a tuple with the Directionality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetDirectionalityOk() (*string, bool) {
	if o == nil || IsNil(o.Directionality) {
		return nil, false
	}
	return o.Directionality, true
}

// HasDirectionality returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasDirectionality() bool {
	if o != nil && !IsNil(o.Directionality) {
		return true
	}

	return false
}

// SetDirectionality gets a reference to the given string and assigns it to the Directionality field.
func (o *MetricCreationContractDto) SetDirectionality(v string) {
	o.Directionality = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetTags() MetricCreationContractDtoTags {
	if o == nil || IsNil(o.Tags) {
		var ret MetricCreationContractDtoTags
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetTagsOk() (*MetricCreationContractDtoTags, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given MetricCreationContractDtoTags and assigns it to the Tags field.
func (o *MetricCreationContractDto) SetTags(v MetricCreationContractDtoTags) {
	o.Tags = &v
}

// GetIsPermanent returns the IsPermanent field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetIsPermanent() bool {
	if o == nil || IsNil(o.IsPermanent) {
		var ret bool
		return ret
	}
	return *o.IsPermanent
}

// GetIsPermanentOk returns a tuple with the IsPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetIsPermanentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPermanent) {
		return nil, false
	}
	return o.IsPermanent, true
}

// HasIsPermanent returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasIsPermanent() bool {
	if o != nil && !IsNil(o.IsPermanent) {
		return true
	}

	return false
}

// SetIsPermanent gets a reference to the given bool and assigns it to the IsPermanent field.
func (o *MetricCreationContractDto) SetIsPermanent(v bool) {
	o.IsPermanent = &v
}

// GetRollupTimeWindow returns the RollupTimeWindow field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetRollupTimeWindow() string {
	if o == nil || IsNil(o.RollupTimeWindow) {
		var ret string
		return ret
	}
	return *o.RollupTimeWindow
}

// GetRollupTimeWindowOk returns a tuple with the RollupTimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetRollupTimeWindowOk() (*string, bool) {
	if o == nil || IsNil(o.RollupTimeWindow) {
		return nil, false
	}
	return o.RollupTimeWindow, true
}

// HasRollupTimeWindow returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasRollupTimeWindow() bool {
	if o != nil && !IsNil(o.RollupTimeWindow) {
		return true
	}

	return false
}

// SetRollupTimeWindow gets a reference to the given string and assigns it to the RollupTimeWindow field.
func (o *MetricCreationContractDto) SetRollupTimeWindow(v string) {
	o.RollupTimeWindow = &v
}

// GetCustomRollUpStart returns the CustomRollUpStart field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetCustomRollUpStart() float32 {
	if o == nil || IsNil(o.CustomRollUpStart) {
		var ret float32
		return ret
	}
	return *o.CustomRollUpStart
}

// GetCustomRollUpStartOk returns a tuple with the CustomRollUpStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetCustomRollUpStartOk() (*float32, bool) {
	if o == nil || IsNil(o.CustomRollUpStart) {
		return nil, false
	}
	return o.CustomRollUpStart, true
}

// HasCustomRollUpStart returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasCustomRollUpStart() bool {
	if o != nil && !IsNil(o.CustomRollUpStart) {
		return true
	}

	return false
}

// SetCustomRollUpStart gets a reference to the given float32 and assigns it to the CustomRollUpStart field.
func (o *MetricCreationContractDto) SetCustomRollUpStart(v float32) {
	o.CustomRollUpStart = &v
}

// GetCustomRollUpEnd returns the CustomRollUpEnd field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetCustomRollUpEnd() float32 {
	if o == nil || IsNil(o.CustomRollUpEnd) {
		var ret float32
		return ret
	}
	return *o.CustomRollUpEnd
}

// GetCustomRollUpEndOk returns a tuple with the CustomRollUpEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetCustomRollUpEndOk() (*float32, bool) {
	if o == nil || IsNil(o.CustomRollUpEnd) {
		return nil, false
	}
	return o.CustomRollUpEnd, true
}

// HasCustomRollUpEnd returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasCustomRollUpEnd() bool {
	if o != nil && !IsNil(o.CustomRollUpEnd) {
		return true
	}

	return false
}

// SetCustomRollUpEnd gets a reference to the given float32 and assigns it to the CustomRollUpEnd field.
func (o *MetricCreationContractDto) SetCustomRollUpEnd(v float32) {
	o.CustomRollUpEnd = &v
}

// GetFunnelEventList returns the FunnelEventList field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetFunnelEventList() []ExternalMetricDefinitionContractDtoFunnelEventListInner {
	if o == nil || IsNil(o.FunnelEventList) {
		var ret []ExternalMetricDefinitionContractDtoFunnelEventListInner
		return ret
	}
	return o.FunnelEventList
}

// GetFunnelEventListOk returns a tuple with the FunnelEventList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetFunnelEventListOk() ([]ExternalMetricDefinitionContractDtoFunnelEventListInner, bool) {
	if o == nil || IsNil(o.FunnelEventList) {
		return nil, false
	}
	return o.FunnelEventList, true
}

// HasFunnelEventList returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasFunnelEventList() bool {
	if o != nil && !IsNil(o.FunnelEventList) {
		return true
	}

	return false
}

// SetFunnelEventList gets a reference to the given []ExternalMetricDefinitionContractDtoFunnelEventListInner and assigns it to the FunnelEventList field.
func (o *MetricCreationContractDto) SetFunnelEventList(v []ExternalMetricDefinitionContractDtoFunnelEventListInner) {
	o.FunnelEventList = v
}

// GetFunnelCountDistinct returns the FunnelCountDistinct field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetFunnelCountDistinct() string {
	if o == nil || IsNil(o.FunnelCountDistinct) {
		var ret string
		return ret
	}
	return *o.FunnelCountDistinct
}

// GetFunnelCountDistinctOk returns a tuple with the FunnelCountDistinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetFunnelCountDistinctOk() (*string, bool) {
	if o == nil || IsNil(o.FunnelCountDistinct) {
		return nil, false
	}
	return o.FunnelCountDistinct, true
}

// HasFunnelCountDistinct returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasFunnelCountDistinct() bool {
	if o != nil && !IsNil(o.FunnelCountDistinct) {
		return true
	}

	return false
}

// SetFunnelCountDistinct gets a reference to the given string and assigns it to the FunnelCountDistinct field.
func (o *MetricCreationContractDto) SetFunnelCountDistinct(v string) {
	o.FunnelCountDistinct = &v
}

// GetWarehouseNative returns the WarehouseNative field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetWarehouseNative() ExternalMetricDefinitionContractDtoWarehouseNative {
	if o == nil || IsNil(o.WarehouseNative) {
		var ret ExternalMetricDefinitionContractDtoWarehouseNative
		return ret
	}
	return *o.WarehouseNative
}

// GetWarehouseNativeOk returns a tuple with the WarehouseNative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetWarehouseNativeOk() (*ExternalMetricDefinitionContractDtoWarehouseNative, bool) {
	if o == nil || IsNil(o.WarehouseNative) {
		return nil, false
	}
	return o.WarehouseNative, true
}

// HasWarehouseNative returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasWarehouseNative() bool {
	if o != nil && !IsNil(o.WarehouseNative) {
		return true
	}

	return false
}

// SetWarehouseNative gets a reference to the given ExternalMetricDefinitionContractDtoWarehouseNative and assigns it to the WarehouseNative field.
func (o *MetricCreationContractDto) SetWarehouseNative(v ExternalMetricDefinitionContractDtoWarehouseNative) {
	o.WarehouseNative = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *MetricCreationContractDto) GetTeam() nil {
	if o == nil || IsNil(o.Team) {
		var ret nil
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricCreationContractDto) GetTeamOk() (*nil, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *MetricCreationContractDto) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given nil and assigns it to the Team field.
func (o *MetricCreationContractDto) SetTeam(v nil) {
	o.Team = &v
}

func (o MetricCreationContractDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricCreationContractDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.IsVerified) {
		toSerialize["isVerified"] = o.IsVerified
	}
	if !IsNil(o.IsReadOnly) {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	if !IsNil(o.UnitTypes) {
		toSerialize["unitTypes"] = o.UnitTypes
	}
	if !IsNil(o.MetricEvents) {
		toSerialize["metricEvents"] = o.MetricEvents
	}
	if !IsNil(o.MetricComponentMetrics) {
		toSerialize["metricComponentMetrics"] = o.MetricComponentMetrics
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Directionality) {
		toSerialize["directionality"] = o.Directionality
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.IsPermanent) {
		toSerialize["isPermanent"] = o.IsPermanent
	}
	if !IsNil(o.RollupTimeWindow) {
		toSerialize["rollupTimeWindow"] = o.RollupTimeWindow
	}
	if !IsNil(o.CustomRollUpStart) {
		toSerialize["customRollUpStart"] = o.CustomRollUpStart
	}
	if !IsNil(o.CustomRollUpEnd) {
		toSerialize["customRollUpEnd"] = o.CustomRollUpEnd
	}
	if !IsNil(o.FunnelEventList) {
		toSerialize["funnelEventList"] = o.FunnelEventList
	}
	if !IsNil(o.FunnelCountDistinct) {
		toSerialize["funnelCountDistinct"] = o.FunnelCountDistinct
	}
	if !IsNil(o.WarehouseNative) {
		toSerialize["warehouseNative"] = o.WarehouseNative
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	return toSerialize, nil
}

func (o *MetricCreationContractDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricCreationContractDto := _MetricCreationContractDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricCreationContractDto)

	if err != nil {
		return err
	}

	*o = MetricCreationContractDto(varMetricCreationContractDto)

	return err
}

type NullableMetricCreationContractDto struct {
	value *MetricCreationContractDto
	isSet bool
}

func (v NullableMetricCreationContractDto) Get() *MetricCreationContractDto {
	return v.value
}

func (v *NullableMetricCreationContractDto) Set(val *MetricCreationContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricCreationContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricCreationContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricCreationContractDto(val *MetricCreationContractDto) *NullableMetricCreationContractDto {
	return &NullableMetricCreationContractDto{value: val, isSet: true}
}

func (v NullableMetricCreationContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricCreationContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


