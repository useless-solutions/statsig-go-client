/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricValuesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricValuesDto{}

// MetricValuesDto struct for MetricValuesDto
type MetricValuesDto struct {
	// Metric value for the given unit_type
	Value float32 `json:"value"`
	// Unit of the metric: stableID, userID, and other custom ids
	UnitType string `json:"unit_type"`
	// Row count for imported metric, optional
	RowCount *float32 `json:"row_count,omitempty"`
	// Numerator of a ratio metric, optional
	Numerator *float32 `json:"numerator,omitempty"`
	// Denominator of a ratio metric, optional
	Denominator *float32 `json:"denominator,omitempty"`
}

type _MetricValuesDto MetricValuesDto

// NewMetricValuesDto instantiates a new MetricValuesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricValuesDto(value float32, unitType string) *MetricValuesDto {
	this := MetricValuesDto{}
	this.Value = value
	this.UnitType = unitType
	return &this
}

// NewMetricValuesDtoWithDefaults instantiates a new MetricValuesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricValuesDtoWithDefaults() *MetricValuesDto {
	this := MetricValuesDto{}
	return &this
}

// GetValue returns the Value field value
func (o *MetricValuesDto) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MetricValuesDto) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MetricValuesDto) SetValue(v float32) {
	o.Value = v
}

// GetUnitType returns the UnitType field value
func (o *MetricValuesDto) GetUnitType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitType
}

// GetUnitTypeOk returns a tuple with the UnitType field value
// and a boolean to check if the value has been set.
func (o *MetricValuesDto) GetUnitTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitType, true
}

// SetUnitType sets field value
func (o *MetricValuesDto) SetUnitType(v string) {
	o.UnitType = v
}

// GetRowCount returns the RowCount field value if set, zero value otherwise.
func (o *MetricValuesDto) GetRowCount() float32 {
	if o == nil || IsNil(o.RowCount) {
		var ret float32
		return ret
	}
	return *o.RowCount
}

// GetRowCountOk returns a tuple with the RowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricValuesDto) GetRowCountOk() (*float32, bool) {
	if o == nil || IsNil(o.RowCount) {
		return nil, false
	}
	return o.RowCount, true
}

// HasRowCount returns a boolean if a field has been set.
func (o *MetricValuesDto) HasRowCount() bool {
	if o != nil && !IsNil(o.RowCount) {
		return true
	}

	return false
}

// SetRowCount gets a reference to the given float32 and assigns it to the RowCount field.
func (o *MetricValuesDto) SetRowCount(v float32) {
	o.RowCount = &v
}

// GetNumerator returns the Numerator field value if set, zero value otherwise.
func (o *MetricValuesDto) GetNumerator() float32 {
	if o == nil || IsNil(o.Numerator) {
		var ret float32
		return ret
	}
	return *o.Numerator
}

// GetNumeratorOk returns a tuple with the Numerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricValuesDto) GetNumeratorOk() (*float32, bool) {
	if o == nil || IsNil(o.Numerator) {
		return nil, false
	}
	return o.Numerator, true
}

// HasNumerator returns a boolean if a field has been set.
func (o *MetricValuesDto) HasNumerator() bool {
	if o != nil && !IsNil(o.Numerator) {
		return true
	}

	return false
}

// SetNumerator gets a reference to the given float32 and assigns it to the Numerator field.
func (o *MetricValuesDto) SetNumerator(v float32) {
	o.Numerator = &v
}

// GetDenominator returns the Denominator field value if set, zero value otherwise.
func (o *MetricValuesDto) GetDenominator() float32 {
	if o == nil || IsNil(o.Denominator) {
		var ret float32
		return ret
	}
	return *o.Denominator
}

// GetDenominatorOk returns a tuple with the Denominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricValuesDto) GetDenominatorOk() (*float32, bool) {
	if o == nil || IsNil(o.Denominator) {
		return nil, false
	}
	return o.Denominator, true
}

// HasDenominator returns a boolean if a field has been set.
func (o *MetricValuesDto) HasDenominator() bool {
	if o != nil && !IsNil(o.Denominator) {
		return true
	}

	return false
}

// SetDenominator gets a reference to the given float32 and assigns it to the Denominator field.
func (o *MetricValuesDto) SetDenominator(v float32) {
	o.Denominator = &v
}

func (o MetricValuesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricValuesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["unit_type"] = o.UnitType
	if !IsNil(o.RowCount) {
		toSerialize["row_count"] = o.RowCount
	}
	if !IsNil(o.Numerator) {
		toSerialize["numerator"] = o.Numerator
	}
	if !IsNil(o.Denominator) {
		toSerialize["denominator"] = o.Denominator
	}
	return toSerialize, nil
}

func (o *MetricValuesDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"unit_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricValuesDto := _MetricValuesDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricValuesDto)

	if err != nil {
		return err
	}

	*o = MetricValuesDto(varMetricValuesDto)

	return err
}

type NullableMetricValuesDto struct {
	value *MetricValuesDto
	isSet bool
}

func (v NullableMetricValuesDto) Get() *MetricValuesDto {
	return v.value
}

func (v *NullableMetricValuesDto) Set(val *MetricValuesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricValuesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricValuesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricValuesDto(val *MetricValuesDto) *NullableMetricValuesDto {
	return &NullableMetricValuesDto{value: val, isSet: true}
}

func (v NullableMetricValuesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricValuesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


