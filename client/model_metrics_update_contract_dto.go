/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MetricsUpdateContractDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsUpdateContractDto{}

// MetricsUpdateContractDto struct for MetricsUpdateContractDto
type MetricsUpdateContractDto struct {
	// A detailed description of the metric, providing insights into its purpose and application.
	Description *string `json:"description,omitempty"`
	// An array of tags associated with the metric, used for categorization and easier retrieval.
	Tags []string `json:"tags,omitempty"`
	// Indicates whether the metric is hidden from general view, useful for internal metrics.
	IsHidden *bool `json:"isHidden,omitempty"`
	// Flag to mark the metric as verified, ensuring it is deemed trustworthy within the organization.
	IsVerified *bool `json:"isVerified,omitempty"`
	// Specifies if the metric definition can only be edited via the Console API, enhancing control over modifications.
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
	// Determines if the metric is permanent, preventing it from being deleted or modified inadvertently.
	IsPermanent *bool `json:"isPermanent,omitempty"`
	WarehouseNative *MetricsUpdateContractDtoWarehouseNative `json:"warehouseNative,omitempty"`
	// Array of unit types that the metric can utilize, such as stableID, userID, or other custom identifiers.
	UnitTypes []string `json:"unitTypes,omitempty"`
	// Optional field indicating the team responsible for the metric, aiding in accountability and management.
	Team *nil `json:"team,omitempty"`
}

// NewMetricsUpdateContractDto instantiates a new MetricsUpdateContractDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsUpdateContractDto() *MetricsUpdateContractDto {
	this := MetricsUpdateContractDto{}
	return &this
}

// NewMetricsUpdateContractDtoWithDefaults instantiates a new MetricsUpdateContractDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsUpdateContractDtoWithDefaults() *MetricsUpdateContractDto {
	this := MetricsUpdateContractDto{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MetricsUpdateContractDto) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *MetricsUpdateContractDto) SetTags(v []string) {
	o.Tags = v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *MetricsUpdateContractDto) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetIsVerified returns the IsVerified field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetIsVerified() bool {
	if o == nil || IsNil(o.IsVerified) {
		var ret bool
		return ret
	}
	return *o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetIsVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVerified) {
		return nil, false
	}
	return o.IsVerified, true
}

// HasIsVerified returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasIsVerified() bool {
	if o != nil && !IsNil(o.IsVerified) {
		return true
	}

	return false
}

// SetIsVerified gets a reference to the given bool and assigns it to the IsVerified field.
func (o *MetricsUpdateContractDto) SetIsVerified(v bool) {
	o.IsVerified = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadOnly) {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasIsReadOnly() bool {
	if o != nil && !IsNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *MetricsUpdateContractDto) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetIsPermanent returns the IsPermanent field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetIsPermanent() bool {
	if o == nil || IsNil(o.IsPermanent) {
		var ret bool
		return ret
	}
	return *o.IsPermanent
}

// GetIsPermanentOk returns a tuple with the IsPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetIsPermanentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPermanent) {
		return nil, false
	}
	return o.IsPermanent, true
}

// HasIsPermanent returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasIsPermanent() bool {
	if o != nil && !IsNil(o.IsPermanent) {
		return true
	}

	return false
}

// SetIsPermanent gets a reference to the given bool and assigns it to the IsPermanent field.
func (o *MetricsUpdateContractDto) SetIsPermanent(v bool) {
	o.IsPermanent = &v
}

// GetWarehouseNative returns the WarehouseNative field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetWarehouseNative() MetricsUpdateContractDtoWarehouseNative {
	if o == nil || IsNil(o.WarehouseNative) {
		var ret MetricsUpdateContractDtoWarehouseNative
		return ret
	}
	return *o.WarehouseNative
}

// GetWarehouseNativeOk returns a tuple with the WarehouseNative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetWarehouseNativeOk() (*MetricsUpdateContractDtoWarehouseNative, bool) {
	if o == nil || IsNil(o.WarehouseNative) {
		return nil, false
	}
	return o.WarehouseNative, true
}

// HasWarehouseNative returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasWarehouseNative() bool {
	if o != nil && !IsNil(o.WarehouseNative) {
		return true
	}

	return false
}

// SetWarehouseNative gets a reference to the given MetricsUpdateContractDtoWarehouseNative and assigns it to the WarehouseNative field.
func (o *MetricsUpdateContractDto) SetWarehouseNative(v MetricsUpdateContractDtoWarehouseNative) {
	o.WarehouseNative = &v
}

// GetUnitTypes returns the UnitTypes field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetUnitTypes() []string {
	if o == nil || IsNil(o.UnitTypes) {
		var ret []string
		return ret
	}
	return o.UnitTypes
}

// GetUnitTypesOk returns a tuple with the UnitTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetUnitTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.UnitTypes) {
		return nil, false
	}
	return o.UnitTypes, true
}

// HasUnitTypes returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasUnitTypes() bool {
	if o != nil && !IsNil(o.UnitTypes) {
		return true
	}

	return false
}

// SetUnitTypes gets a reference to the given []string and assigns it to the UnitTypes field.
func (o *MetricsUpdateContractDto) SetUnitTypes(v []string) {
	o.UnitTypes = v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *MetricsUpdateContractDto) GetTeam() nil {
	if o == nil || IsNil(o.Team) {
		var ret nil
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsUpdateContractDto) GetTeamOk() (*nil, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *MetricsUpdateContractDto) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given nil and assigns it to the Team field.
func (o *MetricsUpdateContractDto) SetTeam(v nil) {
	o.Team = &v
}

func (o MetricsUpdateContractDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsUpdateContractDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.IsVerified) {
		toSerialize["isVerified"] = o.IsVerified
	}
	if !IsNil(o.IsReadOnly) {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	if !IsNil(o.IsPermanent) {
		toSerialize["isPermanent"] = o.IsPermanent
	}
	if !IsNil(o.WarehouseNative) {
		toSerialize["warehouseNative"] = o.WarehouseNative
	}
	if !IsNil(o.UnitTypes) {
		toSerialize["unitTypes"] = o.UnitTypes
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	return toSerialize, nil
}

type NullableMetricsUpdateContractDto struct {
	value *MetricsUpdateContractDto
	isSet bool
}

func (v NullableMetricsUpdateContractDto) Get() *MetricsUpdateContractDto {
	return v.value
}

func (v *NullableMetricsUpdateContractDto) Set(val *MetricsUpdateContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsUpdateContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsUpdateContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsUpdateContractDto(val *MetricsUpdateContractDto) *NullableMetricsUpdateContractDto {
	return &NullableMetricsUpdateContractDto{value: val, isSet: true}
}

func (v NullableMetricsUpdateContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsUpdateContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


