/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MultipleEventDeltaDtoInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipleEventDeltaDtoInner{}

// MultipleEventDeltaDtoInner struct for MultipleEventDeltaDtoInner
type MultipleEventDeltaDtoInner struct {
	Date string `json:"date"`
	Events []MultipleEventDeltaDtoInnerEventsInner `json:"events"`
}

type _MultipleEventDeltaDtoInner MultipleEventDeltaDtoInner

// NewMultipleEventDeltaDtoInner instantiates a new MultipleEventDeltaDtoInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleEventDeltaDtoInner(date string, events []MultipleEventDeltaDtoInnerEventsInner) *MultipleEventDeltaDtoInner {
	this := MultipleEventDeltaDtoInner{}
	this.Date = date
	this.Events = events
	return &this
}

// NewMultipleEventDeltaDtoInnerWithDefaults instantiates a new MultipleEventDeltaDtoInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleEventDeltaDtoInnerWithDefaults() *MultipleEventDeltaDtoInner {
	this := MultipleEventDeltaDtoInner{}
	return &this
}

// GetDate returns the Date field value
func (o *MultipleEventDeltaDtoInner) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *MultipleEventDeltaDtoInner) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *MultipleEventDeltaDtoInner) SetDate(v string) {
	o.Date = v
}

// GetEvents returns the Events field value
func (o *MultipleEventDeltaDtoInner) GetEvents() []MultipleEventDeltaDtoInnerEventsInner {
	if o == nil {
		var ret []MultipleEventDeltaDtoInnerEventsInner
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *MultipleEventDeltaDtoInner) GetEventsOk() ([]MultipleEventDeltaDtoInnerEventsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *MultipleEventDeltaDtoInner) SetEvents(v []MultipleEventDeltaDtoInnerEventsInner) {
	o.Events = v
}

func (o MultipleEventDeltaDtoInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipleEventDeltaDtoInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

func (o *MultipleEventDeltaDtoInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultipleEventDeltaDtoInner := _MultipleEventDeltaDtoInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultipleEventDeltaDtoInner)

	if err != nil {
		return err
	}

	*o = MultipleEventDeltaDtoInner(varMultipleEventDeltaDtoInner)

	return err
}

type NullableMultipleEventDeltaDtoInner struct {
	value *MultipleEventDeltaDtoInner
	isSet bool
}

func (v NullableMultipleEventDeltaDtoInner) Get() *MultipleEventDeltaDtoInner {
	return v.value
}

func (v *NullableMultipleEventDeltaDtoInner) Set(val *MultipleEventDeltaDtoInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleEventDeltaDtoInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleEventDeltaDtoInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleEventDeltaDtoInner(val *MultipleEventDeltaDtoInner) *NullableMultipleEventDeltaDtoInner {
	return &NullableMultipleEventDeltaDtoInner{value: val, isSet: true}
}

func (v NullableMultipleEventDeltaDtoInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleEventDeltaDtoInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


