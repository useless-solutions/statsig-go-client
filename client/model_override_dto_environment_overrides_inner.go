/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OverrideDtoEnvironmentOverridesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverrideDtoEnvironmentOverridesInner{}

// OverrideDtoEnvironmentOverridesInner Contract for environment override
type OverrideDtoEnvironmentOverridesInner struct {
	// Environment
	Environment *nil `json:"environment,omitempty"`
	// Unit ID
	UnitID nil `json:"unitID"`
	// List of passing IDs
	PassingIDs []string `json:"passingIDs"`
	// List of failing IDs
	FailingIDs []string `json:"failingIDs"`
}

type _OverrideDtoEnvironmentOverridesInner OverrideDtoEnvironmentOverridesInner

// NewOverrideDtoEnvironmentOverridesInner instantiates a new OverrideDtoEnvironmentOverridesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverrideDtoEnvironmentOverridesInner(unitID nil, passingIDs []string, failingIDs []string) *OverrideDtoEnvironmentOverridesInner {
	this := OverrideDtoEnvironmentOverridesInner{}
	this.UnitID = unitID
	this.PassingIDs = passingIDs
	this.FailingIDs = failingIDs
	return &this
}

// NewOverrideDtoEnvironmentOverridesInnerWithDefaults instantiates a new OverrideDtoEnvironmentOverridesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverrideDtoEnvironmentOverridesInnerWithDefaults() *OverrideDtoEnvironmentOverridesInner {
	this := OverrideDtoEnvironmentOverridesInner{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *OverrideDtoEnvironmentOverridesInner) GetEnvironment() nil {
	if o == nil || IsNil(o.Environment) {
		var ret nil
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideDtoEnvironmentOverridesInner) GetEnvironmentOk() (*nil, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *OverrideDtoEnvironmentOverridesInner) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given nil and assigns it to the Environment field.
func (o *OverrideDtoEnvironmentOverridesInner) SetEnvironment(v nil) {
	o.Environment = &v
}

// GetUnitID returns the UnitID field value
func (o *OverrideDtoEnvironmentOverridesInner) GetUnitID() nil {
	if o == nil {
		var ret nil
		return ret
	}

	return o.UnitID
}

// GetUnitIDOk returns a tuple with the UnitID field value
// and a boolean to check if the value has been set.
func (o *OverrideDtoEnvironmentOverridesInner) GetUnitIDOk() (*nil, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitID, true
}

// SetUnitID sets field value
func (o *OverrideDtoEnvironmentOverridesInner) SetUnitID(v nil) {
	o.UnitID = v
}

// GetPassingIDs returns the PassingIDs field value
func (o *OverrideDtoEnvironmentOverridesInner) GetPassingIDs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PassingIDs
}

// GetPassingIDsOk returns a tuple with the PassingIDs field value
// and a boolean to check if the value has been set.
func (o *OverrideDtoEnvironmentOverridesInner) GetPassingIDsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PassingIDs, true
}

// SetPassingIDs sets field value
func (o *OverrideDtoEnvironmentOverridesInner) SetPassingIDs(v []string) {
	o.PassingIDs = v
}

// GetFailingIDs returns the FailingIDs field value
func (o *OverrideDtoEnvironmentOverridesInner) GetFailingIDs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FailingIDs
}

// GetFailingIDsOk returns a tuple with the FailingIDs field value
// and a boolean to check if the value has been set.
func (o *OverrideDtoEnvironmentOverridesInner) GetFailingIDsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailingIDs, true
}

// SetFailingIDs sets field value
func (o *OverrideDtoEnvironmentOverridesInner) SetFailingIDs(v []string) {
	o.FailingIDs = v
}

func (o OverrideDtoEnvironmentOverridesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverrideDtoEnvironmentOverridesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	toSerialize["unitID"] = o.UnitID
	toSerialize["passingIDs"] = o.PassingIDs
	toSerialize["failingIDs"] = o.FailingIDs
	return toSerialize, nil
}

func (o *OverrideDtoEnvironmentOverridesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unitID",
		"passingIDs",
		"failingIDs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOverrideDtoEnvironmentOverridesInner := _OverrideDtoEnvironmentOverridesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOverrideDtoEnvironmentOverridesInner)

	if err != nil {
		return err
	}

	*o = OverrideDtoEnvironmentOverridesInner(varOverrideDtoEnvironmentOverridesInner)

	return err
}

type NullableOverrideDtoEnvironmentOverridesInner struct {
	value *OverrideDtoEnvironmentOverridesInner
	isSet bool
}

func (v NullableOverrideDtoEnvironmentOverridesInner) Get() *OverrideDtoEnvironmentOverridesInner {
	return v.value
}

func (v *NullableOverrideDtoEnvironmentOverridesInner) Set(val *OverrideDtoEnvironmentOverridesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOverrideDtoEnvironmentOverridesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOverrideDtoEnvironmentOverridesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverrideDtoEnvironmentOverridesInner(val *OverrideDtoEnvironmentOverridesInner) *NullableOverrideDtoEnvironmentOverridesInner {
	return &NullableOverrideDtoEnvironmentOverridesInner{value: val, isSet: true}
}

func (v NullableOverrideDtoEnvironmentOverridesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverrideDtoEnvironmentOverridesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


