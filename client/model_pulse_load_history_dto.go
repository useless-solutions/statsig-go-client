/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PulseLoadHistoryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PulseLoadHistoryDto{}

// PulseLoadHistoryDto struct for PulseLoadHistoryDto
type PulseLoadHistoryDto struct {
	CreatorName *string `json:"creatorName,omitempty"`
	CreatedTime float32 `json:"createdTime"`
	FinishedTime *float32 `json:"finishedTime,omitempty"`
	FinishedState *string `json:"finishedState,omitempty"`
	StartDs string `json:"startDs"`
	EndDs string `json:"endDs"`
	ReloadType string `json:"reloadType"`
	TurboMode bool `json:"turboMode"`
}

type _PulseLoadHistoryDto PulseLoadHistoryDto

// NewPulseLoadHistoryDto instantiates a new PulseLoadHistoryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPulseLoadHistoryDto(createdTime float32, startDs string, endDs string, reloadType string, turboMode bool) *PulseLoadHistoryDto {
	this := PulseLoadHistoryDto{}
	this.CreatedTime = createdTime
	this.StartDs = startDs
	this.EndDs = endDs
	this.ReloadType = reloadType
	this.TurboMode = turboMode
	return &this
}

// NewPulseLoadHistoryDtoWithDefaults instantiates a new PulseLoadHistoryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPulseLoadHistoryDtoWithDefaults() *PulseLoadHistoryDto {
	this := PulseLoadHistoryDto{}
	return &this
}

// GetCreatorName returns the CreatorName field value if set, zero value otherwise.
func (o *PulseLoadHistoryDto) GetCreatorName() string {
	if o == nil || IsNil(o.CreatorName) {
		var ret string
		return ret
	}
	return *o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetCreatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorName) {
		return nil, false
	}
	return o.CreatorName, true
}

// HasCreatorName returns a boolean if a field has been set.
func (o *PulseLoadHistoryDto) HasCreatorName() bool {
	if o != nil && !IsNil(o.CreatorName) {
		return true
	}

	return false
}

// SetCreatorName gets a reference to the given string and assigns it to the CreatorName field.
func (o *PulseLoadHistoryDto) SetCreatorName(v string) {
	o.CreatorName = &v
}

// GetCreatedTime returns the CreatedTime field value
func (o *PulseLoadHistoryDto) GetCreatedTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetCreatedTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *PulseLoadHistoryDto) SetCreatedTime(v float32) {
	o.CreatedTime = v
}

// GetFinishedTime returns the FinishedTime field value if set, zero value otherwise.
func (o *PulseLoadHistoryDto) GetFinishedTime() float32 {
	if o == nil || IsNil(o.FinishedTime) {
		var ret float32
		return ret
	}
	return *o.FinishedTime
}

// GetFinishedTimeOk returns a tuple with the FinishedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetFinishedTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.FinishedTime) {
		return nil, false
	}
	return o.FinishedTime, true
}

// HasFinishedTime returns a boolean if a field has been set.
func (o *PulseLoadHistoryDto) HasFinishedTime() bool {
	if o != nil && !IsNil(o.FinishedTime) {
		return true
	}

	return false
}

// SetFinishedTime gets a reference to the given float32 and assigns it to the FinishedTime field.
func (o *PulseLoadHistoryDto) SetFinishedTime(v float32) {
	o.FinishedTime = &v
}

// GetFinishedState returns the FinishedState field value if set, zero value otherwise.
func (o *PulseLoadHistoryDto) GetFinishedState() string {
	if o == nil || IsNil(o.FinishedState) {
		var ret string
		return ret
	}
	return *o.FinishedState
}

// GetFinishedStateOk returns a tuple with the FinishedState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetFinishedStateOk() (*string, bool) {
	if o == nil || IsNil(o.FinishedState) {
		return nil, false
	}
	return o.FinishedState, true
}

// HasFinishedState returns a boolean if a field has been set.
func (o *PulseLoadHistoryDto) HasFinishedState() bool {
	if o != nil && !IsNil(o.FinishedState) {
		return true
	}

	return false
}

// SetFinishedState gets a reference to the given string and assigns it to the FinishedState field.
func (o *PulseLoadHistoryDto) SetFinishedState(v string) {
	o.FinishedState = &v
}

// GetStartDs returns the StartDs field value
func (o *PulseLoadHistoryDto) GetStartDs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDs
}

// GetStartDsOk returns a tuple with the StartDs field value
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetStartDsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDs, true
}

// SetStartDs sets field value
func (o *PulseLoadHistoryDto) SetStartDs(v string) {
	o.StartDs = v
}

// GetEndDs returns the EndDs field value
func (o *PulseLoadHistoryDto) GetEndDs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDs
}

// GetEndDsOk returns a tuple with the EndDs field value
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetEndDsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDs, true
}

// SetEndDs sets field value
func (o *PulseLoadHistoryDto) SetEndDs(v string) {
	o.EndDs = v
}

// GetReloadType returns the ReloadType field value
func (o *PulseLoadHistoryDto) GetReloadType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReloadType
}

// GetReloadTypeOk returns a tuple with the ReloadType field value
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetReloadTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReloadType, true
}

// SetReloadType sets field value
func (o *PulseLoadHistoryDto) SetReloadType(v string) {
	o.ReloadType = v
}

// GetTurboMode returns the TurboMode field value
func (o *PulseLoadHistoryDto) GetTurboMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TurboMode
}

// GetTurboModeOk returns a tuple with the TurboMode field value
// and a boolean to check if the value has been set.
func (o *PulseLoadHistoryDto) GetTurboModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TurboMode, true
}

// SetTurboMode sets field value
func (o *PulseLoadHistoryDto) SetTurboMode(v bool) {
	o.TurboMode = v
}

func (o PulseLoadHistoryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PulseLoadHistoryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatorName) {
		toSerialize["creatorName"] = o.CreatorName
	}
	toSerialize["createdTime"] = o.CreatedTime
	if !IsNil(o.FinishedTime) {
		toSerialize["finishedTime"] = o.FinishedTime
	}
	if !IsNil(o.FinishedState) {
		toSerialize["finishedState"] = o.FinishedState
	}
	toSerialize["startDs"] = o.StartDs
	toSerialize["endDs"] = o.EndDs
	toSerialize["reloadType"] = o.ReloadType
	toSerialize["turboMode"] = o.TurboMode
	return toSerialize, nil
}

func (o *PulseLoadHistoryDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdTime",
		"startDs",
		"endDs",
		"reloadType",
		"turboMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPulseLoadHistoryDto := _PulseLoadHistoryDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPulseLoadHistoryDto)

	if err != nil {
		return err
	}

	*o = PulseLoadHistoryDto(varPulseLoadHistoryDto)

	return err
}

type NullablePulseLoadHistoryDto struct {
	value *PulseLoadHistoryDto
	isSet bool
}

func (v NullablePulseLoadHistoryDto) Get() *PulseLoadHistoryDto {
	return v.value
}

func (v *NullablePulseLoadHistoryDto) Set(val *PulseLoadHistoryDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePulseLoadHistoryDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePulseLoadHistoryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePulseLoadHistoryDto(val *PulseLoadHistoryDto) *NullablePulseLoadHistoryDto {
	return &NullablePulseLoadHistoryDto{value: val, isSet: true}
}

func (v NullablePulseLoadHistoryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePulseLoadHistoryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


