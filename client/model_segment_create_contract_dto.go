/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SegmentCreateContractDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SegmentCreateContractDto{}

// SegmentCreateContractDto struct for SegmentCreateContractDto
type SegmentCreateContractDto struct {
	// name of the segment
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_\\\\- ]*$"`
	// optional id of the segment (defaults to name)
	Id *string `json:"id,omitempty" validate:"regexp=^[a-zA-Z0-9_-]*$"`
	// description of the segment
	Description *string `json:"description,omitempty"`
	// type of the segment
	Type string `json:"type"`
	// type of id
	IdType *string `json:"idType,omitempty"`
	// optional tags for categorization
	Tags []string `json:"tags,omitempty"`
	// the Statsig ID of the creator of this experiment
	CreatorID *nil `json:"creatorID,omitempty"`
	// the email of the creator of this experiment
	CreatorEmail *nil `json:"creatorEmail,omitempty"`
	// optional identifier for the responsible team (enterprise only)
	Team *nil `json:"team,omitempty"`
	// Rule Object
	Rules []SegmentCreateContractDtoRulesInner `json:"rules,omitempty"`
}

type _SegmentCreateContractDto SegmentCreateContractDto

// NewSegmentCreateContractDto instantiates a new SegmentCreateContractDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentCreateContractDto(name string, type_ string) *SegmentCreateContractDto {
	this := SegmentCreateContractDto{}
	this.Name = name
	this.Type = type_
	var idType string = "userID"
	this.IdType = &idType
	return &this
}

// NewSegmentCreateContractDtoWithDefaults instantiates a new SegmentCreateContractDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentCreateContractDtoWithDefaults() *SegmentCreateContractDto {
	this := SegmentCreateContractDto{}
	var idType string = "userID"
	this.IdType = &idType
	return &this
}

// GetName returns the Name field value
func (o *SegmentCreateContractDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SegmentCreateContractDto) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SegmentCreateContractDto) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SegmentCreateContractDto) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *SegmentCreateContractDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SegmentCreateContractDto) SetType(v string) {
	o.Type = v
}

// GetIdType returns the IdType field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetIdType() string {
	if o == nil || IsNil(o.IdType) {
		var ret string
		return ret
	}
	return *o.IdType
}

// GetIdTypeOk returns a tuple with the IdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetIdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdType) {
		return nil, false
	}
	return o.IdType, true
}

// HasIdType returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasIdType() bool {
	if o != nil && !IsNil(o.IdType) {
		return true
	}

	return false
}

// SetIdType gets a reference to the given string and assigns it to the IdType field.
func (o *SegmentCreateContractDto) SetIdType(v string) {
	o.IdType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SegmentCreateContractDto) SetTags(v []string) {
	o.Tags = v
}

// GetCreatorID returns the CreatorID field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetCreatorID() nil {
	if o == nil || IsNil(o.CreatorID) {
		var ret nil
		return ret
	}
	return *o.CreatorID
}

// GetCreatorIDOk returns a tuple with the CreatorID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetCreatorIDOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorID) {
		return nil, false
	}
	return o.CreatorID, true
}

// HasCreatorID returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasCreatorID() bool {
	if o != nil && !IsNil(o.CreatorID) {
		return true
	}

	return false
}

// SetCreatorID gets a reference to the given nil and assigns it to the CreatorID field.
func (o *SegmentCreateContractDto) SetCreatorID(v nil) {
	o.CreatorID = &v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetCreatorEmail() nil {
	if o == nil || IsNil(o.CreatorEmail) {
		var ret nil
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetCreatorEmailOk() (*nil, bool) {
	if o == nil || IsNil(o.CreatorEmail) {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasCreatorEmail() bool {
	if o != nil && !IsNil(o.CreatorEmail) {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given nil and assigns it to the CreatorEmail field.
func (o *SegmentCreateContractDto) SetCreatorEmail(v nil) {
	o.CreatorEmail = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetTeam() nil {
	if o == nil || IsNil(o.Team) {
		var ret nil
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetTeamOk() (*nil, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given nil and assigns it to the Team field.
func (o *SegmentCreateContractDto) SetTeam(v nil) {
	o.Team = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *SegmentCreateContractDto) GetRules() []SegmentCreateContractDtoRulesInner {
	if o == nil || IsNil(o.Rules) {
		var ret []SegmentCreateContractDtoRulesInner
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentCreateContractDto) GetRulesOk() ([]SegmentCreateContractDtoRulesInner, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *SegmentCreateContractDto) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []SegmentCreateContractDtoRulesInner and assigns it to the Rules field.
func (o *SegmentCreateContractDto) SetRules(v []SegmentCreateContractDtoRulesInner) {
	o.Rules = v
}

func (o SegmentCreateContractDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SegmentCreateContractDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.IdType) {
		toSerialize["idType"] = o.IdType
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CreatorID) {
		toSerialize["creatorID"] = o.CreatorID
	}
	if !IsNil(o.CreatorEmail) {
		toSerialize["creatorEmail"] = o.CreatorEmail
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

func (o *SegmentCreateContractDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSegmentCreateContractDto := _SegmentCreateContractDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSegmentCreateContractDto)

	if err != nil {
		return err
	}

	*o = SegmentCreateContractDto(varSegmentCreateContractDto)

	return err
}

type NullableSegmentCreateContractDto struct {
	value *SegmentCreateContractDto
	isSet bool
}

func (v NullableSegmentCreateContractDto) Get() *SegmentCreateContractDto {
	return v.value
}

func (v *NullableSegmentCreateContractDto) Set(val *SegmentCreateContractDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentCreateContractDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentCreateContractDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentCreateContractDto(val *SegmentCreateContractDto) *NullableSegmentCreateContractDto {
	return &NullableSegmentCreateContractDto{value: val, isSet: true}
}

func (v NullableSegmentCreateContractDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentCreateContractDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


