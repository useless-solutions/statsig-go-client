/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TagCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagCreateDto{}

// TagCreateDto struct for TagCreateDto
type TagCreateDto struct {
	Name string `json:"name"`
	Description string `json:"description"`
	IsCore *bool `json:"isCore,omitempty"`
}

type _TagCreateDto TagCreateDto

// NewTagCreateDto instantiates a new TagCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagCreateDto(name string, description string) *TagCreateDto {
	this := TagCreateDto{}
	this.Name = name
	this.Description = description
	var isCore bool = false
	this.IsCore = &isCore
	return &this
}

// NewTagCreateDtoWithDefaults instantiates a new TagCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagCreateDtoWithDefaults() *TagCreateDto {
	this := TagCreateDto{}
	var isCore bool = false
	this.IsCore = &isCore
	return &this
}

// GetName returns the Name field value
func (o *TagCreateDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TagCreateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TagCreateDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *TagCreateDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TagCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TagCreateDto) SetDescription(v string) {
	o.Description = v
}

// GetIsCore returns the IsCore field value if set, zero value otherwise.
func (o *TagCreateDto) GetIsCore() bool {
	if o == nil || IsNil(o.IsCore) {
		var ret bool
		return ret
	}
	return *o.IsCore
}

// GetIsCoreOk returns a tuple with the IsCore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCreateDto) GetIsCoreOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCore) {
		return nil, false
	}
	return o.IsCore, true
}

// HasIsCore returns a boolean if a field has been set.
func (o *TagCreateDto) HasIsCore() bool {
	if o != nil && !IsNil(o.IsCore) {
		return true
	}

	return false
}

// SetIsCore gets a reference to the given bool and assigns it to the IsCore field.
func (o *TagCreateDto) SetIsCore(v bool) {
	o.IsCore = &v
}

func (o TagCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.IsCore) {
		toSerialize["isCore"] = o.IsCore
	}
	return toSerialize, nil
}

func (o *TagCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagCreateDto := _TagCreateDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagCreateDto)

	if err != nil {
		return err
	}

	*o = TagCreateDto(varTagCreateDto)

	return err
}

type NullableTagCreateDto struct {
	value *TagCreateDto
	isSet bool
}

func (v NullableTagCreateDto) Get() *TagCreateDto {
	return v.value
}

func (v *NullableTagCreateDto) Set(val *TagCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTagCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTagCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagCreateDto(val *TagCreateDto) *NullableTagCreateDto {
	return &NullableTagCreateDto{value: val, isSet: true}
}

func (v NullableTagCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


