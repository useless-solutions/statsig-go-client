/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TargetAppCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetAppCreateDto{}

// TargetAppCreateDto struct for TargetAppCreateDto
type TargetAppCreateDto struct {
	// name of the target app
	Name string `json:"name"`
	// a description of the target app
	Description string `json:"description"`
	// Gate IDs to assign to target app(s)
	Gates []string `json:"gates,omitempty"`
	// Dynamic Config IDs to assign to target app(s)
	DynamicConfigs []string `json:"dynamicConfigs,omitempty"`
	// Experiment IDs to assign to target app(s)
	Experiments []string `json:"experiments,omitempty"`
}

type _TargetAppCreateDto TargetAppCreateDto

// NewTargetAppCreateDto instantiates a new TargetAppCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetAppCreateDto(name string, description string) *TargetAppCreateDto {
	this := TargetAppCreateDto{}
	this.Name = name
	this.Description = description
	return &this
}

// NewTargetAppCreateDtoWithDefaults instantiates a new TargetAppCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetAppCreateDtoWithDefaults() *TargetAppCreateDto {
	this := TargetAppCreateDto{}
	return &this
}

// GetName returns the Name field value
func (o *TargetAppCreateDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TargetAppCreateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TargetAppCreateDto) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *TargetAppCreateDto) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TargetAppCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TargetAppCreateDto) SetDescription(v string) {
	o.Description = v
}

// GetGates returns the Gates field value if set, zero value otherwise.
func (o *TargetAppCreateDto) GetGates() []string {
	if o == nil || IsNil(o.Gates) {
		var ret []string
		return ret
	}
	return o.Gates
}

// GetGatesOk returns a tuple with the Gates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetAppCreateDto) GetGatesOk() ([]string, bool) {
	if o == nil || IsNil(o.Gates) {
		return nil, false
	}
	return o.Gates, true
}

// HasGates returns a boolean if a field has been set.
func (o *TargetAppCreateDto) HasGates() bool {
	if o != nil && !IsNil(o.Gates) {
		return true
	}

	return false
}

// SetGates gets a reference to the given []string and assigns it to the Gates field.
func (o *TargetAppCreateDto) SetGates(v []string) {
	o.Gates = v
}

// GetDynamicConfigs returns the DynamicConfigs field value if set, zero value otherwise.
func (o *TargetAppCreateDto) GetDynamicConfigs() []string {
	if o == nil || IsNil(o.DynamicConfigs) {
		var ret []string
		return ret
	}
	return o.DynamicConfigs
}

// GetDynamicConfigsOk returns a tuple with the DynamicConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetAppCreateDto) GetDynamicConfigsOk() ([]string, bool) {
	if o == nil || IsNil(o.DynamicConfigs) {
		return nil, false
	}
	return o.DynamicConfigs, true
}

// HasDynamicConfigs returns a boolean if a field has been set.
func (o *TargetAppCreateDto) HasDynamicConfigs() bool {
	if o != nil && !IsNil(o.DynamicConfigs) {
		return true
	}

	return false
}

// SetDynamicConfigs gets a reference to the given []string and assigns it to the DynamicConfigs field.
func (o *TargetAppCreateDto) SetDynamicConfigs(v []string) {
	o.DynamicConfigs = v
}

// GetExperiments returns the Experiments field value if set, zero value otherwise.
func (o *TargetAppCreateDto) GetExperiments() []string {
	if o == nil || IsNil(o.Experiments) {
		var ret []string
		return ret
	}
	return o.Experiments
}

// GetExperimentsOk returns a tuple with the Experiments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetAppCreateDto) GetExperimentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Experiments) {
		return nil, false
	}
	return o.Experiments, true
}

// HasExperiments returns a boolean if a field has been set.
func (o *TargetAppCreateDto) HasExperiments() bool {
	if o != nil && !IsNil(o.Experiments) {
		return true
	}

	return false
}

// SetExperiments gets a reference to the given []string and assigns it to the Experiments field.
func (o *TargetAppCreateDto) SetExperiments(v []string) {
	o.Experiments = v
}

func (o TargetAppCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetAppCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.Gates) {
		toSerialize["gates"] = o.Gates
	}
	if !IsNil(o.DynamicConfigs) {
		toSerialize["dynamicConfigs"] = o.DynamicConfigs
	}
	if !IsNil(o.Experiments) {
		toSerialize["experiments"] = o.Experiments
	}
	return toSerialize, nil
}

func (o *TargetAppCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetAppCreateDto := _TargetAppCreateDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetAppCreateDto)

	if err != nil {
		return err
	}

	*o = TargetAppCreateDto(varTargetAppCreateDto)

	return err
}

type NullableTargetAppCreateDto struct {
	value *TargetAppCreateDto
	isSet bool
}

func (v NullableTargetAppCreateDto) Get() *TargetAppCreateDto {
	return v.value
}

func (v *NullableTargetAppCreateDto) Set(val *TargetAppCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetAppCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetAppCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetAppCreateDto(val *TargetAppCreateDto) *NullableTargetAppCreateDto {
	return &NullableTargetAppCreateDto{value: val, isSet: true}
}

func (v NullableTargetAppCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetAppCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


