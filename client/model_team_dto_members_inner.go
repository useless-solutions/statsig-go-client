/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TeamDtoMembersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamDtoMembersInner{}

// TeamDtoMembersInner struct for TeamDtoMembersInner
type TeamDtoMembersInner struct {
	// The email address of the user.
	Email string `json:"email"`
	// The user's first name.
	FirstName string `json:"firstName"`
	// The user's last name.
	LastName string `json:"lastName"`
	// The user's role, which can be 'Admin', 'Read Only', 'Member', or any custom role name.
	Role string `json:"role"`
}

type _TeamDtoMembersInner TeamDtoMembersInner

// NewTeamDtoMembersInner instantiates a new TeamDtoMembersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamDtoMembersInner(email string, firstName string, lastName string, role string) *TeamDtoMembersInner {
	this := TeamDtoMembersInner{}
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	this.Role = role
	return &this
}

// NewTeamDtoMembersInnerWithDefaults instantiates a new TeamDtoMembersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamDtoMembersInnerWithDefaults() *TeamDtoMembersInner {
	this := TeamDtoMembersInner{}
	return &this
}

// GetEmail returns the Email field value
func (o *TeamDtoMembersInner) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TeamDtoMembersInner) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TeamDtoMembersInner) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value
func (o *TeamDtoMembersInner) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *TeamDtoMembersInner) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *TeamDtoMembersInner) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *TeamDtoMembersInner) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *TeamDtoMembersInner) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *TeamDtoMembersInner) SetLastName(v string) {
	o.LastName = v
}

// GetRole returns the Role field value
func (o *TeamDtoMembersInner) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *TeamDtoMembersInner) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *TeamDtoMembersInner) SetRole(v string) {
	o.Role = v
}

func (o TeamDtoMembersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamDtoMembersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *TeamDtoMembersInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"firstName",
		"lastName",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamDtoMembersInner := _TeamDtoMembersInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamDtoMembersInner)

	if err != nil {
		return err
	}

	*o = TeamDtoMembersInner(varTeamDtoMembersInner)

	return err
}

type NullableTeamDtoMembersInner struct {
	value *TeamDtoMembersInner
	isSet bool
}

func (v NullableTeamDtoMembersInner) Get() *TeamDtoMembersInner {
	return v.value
}

func (v *NullableTeamDtoMembersInner) Set(val *TeamDtoMembersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamDtoMembersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamDtoMembersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamDtoMembersInner(val *TeamDtoMembersInner) *NullableTeamDtoMembersInner {
	return &NullableTeamDtoMembersInner{value: val, isSet: true}
}

func (v NullableTeamDtoMembersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamDtoMembersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


