/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserInvitesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInvitesDto{}

// UserInvitesDto struct for UserInvitesDto
type UserInvitesDto struct {
	// Role assigned to the invited users. Can be 'Admin', 'Read Only', 'Member', or any custom role name.
	Role string `json:"role"`
	// List of email addresses to send invitations to. Invitee Emails must have the same domain to your company email domain.
	Emails []string `json:"emails"`
	// Optional list of teams that the invited users will be associated with.
	Teams []string `json:"teams,omitempty"`
}

type _UserInvitesDto UserInvitesDto

// NewUserInvitesDto instantiates a new UserInvitesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInvitesDto(role string, emails []string) *UserInvitesDto {
	this := UserInvitesDto{}
	this.Role = role
	this.Emails = emails
	return &this
}

// NewUserInvitesDtoWithDefaults instantiates a new UserInvitesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInvitesDtoWithDefaults() *UserInvitesDto {
	this := UserInvitesDto{}
	return &this
}

// GetRole returns the Role field value
func (o *UserInvitesDto) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserInvitesDto) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserInvitesDto) SetRole(v string) {
	o.Role = v
}

// GetEmails returns the Emails field value
func (o *UserInvitesDto) GetEmails() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *UserInvitesDto) GetEmailsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Emails, true
}

// SetEmails sets field value
func (o *UserInvitesDto) SetEmails(v []string) {
	o.Emails = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *UserInvitesDto) GetTeams() []string {
	if o == nil || IsNil(o.Teams) {
		var ret []string
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInvitesDto) GetTeamsOk() ([]string, bool) {
	if o == nil || IsNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *UserInvitesDto) HasTeams() bool {
	if o != nil && !IsNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []string and assigns it to the Teams field.
func (o *UserInvitesDto) SetTeams(v []string) {
	o.Teams = v
}

func (o UserInvitesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInvitesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["emails"] = o.Emails
	if !IsNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	return toSerialize, nil
}

func (o *UserInvitesDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"emails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserInvitesDto := _UserInvitesDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserInvitesDto)

	if err != nil {
		return err
	}

	*o = UserInvitesDto(varUserInvitesDto)

	return err
}

type NullableUserInvitesDto struct {
	value *UserInvitesDto
	isSet bool
}

func (v NullableUserInvitesDto) Get() *UserInvitesDto {
	return v.value
}

func (v *NullableUserInvitesDto) Set(val *UserInvitesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInvitesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInvitesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInvitesDto(val *UserInvitesDto) *NullableUserInvitesDto {
	return &NullableUserInvitesDto{value: val, isSet: true}
}

func (v NullableUserInvitesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInvitesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


