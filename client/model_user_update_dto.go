/*
Console API

       The \"Console API\" is the CRUD API for performing the actions offered on console.statsig.com without needing to go through the web UI.       If you have any feature requests, drop on in to our [slack channel](https://www.statsig.com/slack) and let us know.       <br /><br />       <b>Authorization</b>       <br />       All requests must include the **STATSIG-API-KEY** field in the header. The value should be a **Console API Key** which can be created in the Project Settings on [console.statsig.com/api_keys](https://console.statsig.com/api_keys)       <br /><br />       <b>Rate Limiting</b>       <br />       Requests to the Console API are limited to <code>~ 100reqs / 10secs and ~ 900reqs / 15 mins</code>.       <br /><br />       <b>Keyboard Search</b>       <br />       Use <code>Ctrl/Cmd + K</code> to search for specific endpoints.       

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUpdateDto{}

// UserUpdateDto Schema for updating user information.
type UserUpdateDto struct {
	// Update the user's role. Can be 'Admin', 'Read Only', 'Member', or any custom role name.
	Role *string `json:"role,omitempty"`
	// Update the user's first name.
	FirstName *string `json:"firstName,omitempty"`
	// Update the user's last name.
	LastName *string `json:"lastName,omitempty"`
}

// NewUserUpdateDto instantiates a new UserUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdateDto() *UserUpdateDto {
	this := UserUpdateDto{}
	return &this
}

// NewUserUpdateDtoWithDefaults instantiates a new UserUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdateDtoWithDefaults() *UserUpdateDto {
	this := UserUpdateDto{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *UserUpdateDto) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDto) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UserUpdateDto) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *UserUpdateDto) SetRole(v string) {
	o.Role = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserUpdateDto) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDto) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserUpdateDto) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserUpdateDto) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserUpdateDto) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdateDto) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserUpdateDto) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserUpdateDto) SetLastName(v string) {
	o.LastName = &v
}

func (o UserUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	return toSerialize, nil
}

type NullableUserUpdateDto struct {
	value *UserUpdateDto
	isSet bool
}

func (v NullableUserUpdateDto) Get() *UserUpdateDto {
	return v.value
}

func (v *NullableUserUpdateDto) Set(val *UserUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdateDto(val *UserUpdateDto) *NullableUserUpdateDto {
	return &NullableUserUpdateDto{value: val, isSet: true}
}

func (v NullableUserUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


