/*
Console API

Testing DynamicConfigsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DynamicConfigsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenDisable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenDisable(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenEnable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenEnable(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenFullUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenFullUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenListVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenListVersions(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenMultiRuleAdd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenMultiRuleAdd(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenMultiRuleUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenMultiRuleUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenPartialUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenRead(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenReadRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ruleId string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenReadRule(context.Background(), id, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenReadRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenReadRules(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenRemove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenRemove(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenRuleAdd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenRuleAdd(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenRuleDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ruleId string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenRuleDelete(context.Background(), id, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenRuleNameDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ruleName string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenRuleNameDelete(context.Background(), id, ruleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenRuleNameUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ruleName string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenRuleNameUpdate(context.Background(), id, ruleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DynamicConfigsAPIService ConsoleV1DynamicConfigControllerGenRuleUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ruleId string

		resp, httpRes, err := apiClient.DynamicConfigsAPI.ConsoleV1DynamicConfigControllerGenRuleUpdate(context.Background(), id, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
