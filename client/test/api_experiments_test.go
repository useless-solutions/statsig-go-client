/*
Console API

Testing ExperimentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ExperimentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentOverridesControllerAdd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentOverridesControllerAdd(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentOverridesControllerGenRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentOverridesControllerGenRead(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentOverridesControllerGenRemove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentOverridesControllerGenRemove(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentOverridesControllerUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentOverridesControllerUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenAbandon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenAbandon(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenArchive(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenFullUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenFullUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenMakeDecision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenMakeDecision(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenPartialUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenPulseResults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenPulseResults(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenRead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenRead(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenRemove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenRemove(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenReset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenReset(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenStart(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExperimentsControllerGenUnarchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExperimentsControllerGenUnarchive(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsAPIService ConsoleV1ExposuresControllerExposureCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var experimentName string

		resp, httpRes, err := apiClient.ExperimentsAPI.ConsoleV1ExposuresControllerExposureCount(context.Background(), experimentName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
