/*
Console API

Testing ExperimentsWarehouseNativeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ExperimentsWarehouseNativeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenCreateAssignmentSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenCreateAssignmentSource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenCreateEntityPropertySource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenCreateEntityPropertySource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenEntityPropertySource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenEntityPropertySource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenListAssignmentSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenListAssignmentSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenListEntityPropertySources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenListEntityPropertySources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenLoadPulse", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenLoadPulse(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenPulseLoadHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenPulseLoadHistory(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenRemoveAssignmentSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenRemoveAssignmentSource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenRemoveEntityPropertySource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenUpdateAssignmentSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenUpdateAssignmentSource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenUpdateAssignmentSourceQuery(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenUpdateEntityPropertySource(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExperimentsWarehouseNativeAPIService ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.ExperimentsWarehouseNativeAPI.ConsoleV1ExperimentsControllerGenUpdateEntityPropertySourceQuery(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
