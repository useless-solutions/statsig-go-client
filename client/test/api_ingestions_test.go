/*
Console API

Testing IngestionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_IngestionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IngestionsAPIService ConsoleV1IngestionConnectionControllerGenCreateIngestionDatabricks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionConnectionControllerGenCreateIngestionDatabricks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenBackfillIngestion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenBackfillIngestion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenCreateIngestionSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenCreateIngestionSource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenDeleteIngestionSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenDeleteIngestionSource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenIngestionRun", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenIngestionRun(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenIngestionRuns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenIngestionRuns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenIngestionStatusList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenIngestionStatusList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenReadIngestion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenReadIngestion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenReadIngestionSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenReadIngestionSchedule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenUpdateIngestion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenUpdateIngestion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionControllerGenUpdateIngestionSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionControllerGenUpdateIngestionSchedule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionEventsControllerGenIngestionDeltaLedger", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionEventsControllerGenIngestionDeltaLedger(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestionsAPIService ConsoleV1IngestionEventsControllerGenIngestionEventCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestionsAPI.ConsoleV1IngestionEventsControllerGenIngestionEventCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
